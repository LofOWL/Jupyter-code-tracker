[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat&nbsp;<img src=\"../media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# A class-based exercise"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 2, "lines": ["# just so that it runs smoothly under binder\n", "import sys\n", "sys.path.append(\"..\")"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["**Note** that this notebook runs python3"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Assignement"]}, {"block": 5, "type": "markdown", "linesLength": 6, "startIndex": 7, "lines": ["Students are requested to wrte a `Fifo` class, that implements\n", "* a constructor `Fifo()`\n", "* an `incoming(obj)` method\n", "* an `outgoing()` method\n", "\n", "that just returns the elements in the same order as they were stored"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["## Workflow"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["exo_fifo.example()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Students are then invited to write their code in a cell that initially could look like this&nbsp;:"]}, {"block": 9, "type": "code", "linesLength": 8, "startIndex": 16, "lines": ["# write your code in this cell\n", "class Fifo(object):\n", "    def __init__(self):\n", "        pass\n", "    def incoming(self, obj):\n", "        pass\n", "    def outgoing(self):\n", "        pass"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Then she changes it, let's imagine the outcome is this attempt - which is broken on purpose&nbsp;:"]}, {"block": 11, "type": "code", "linesLength": 13, "startIndex": 25, "lines": ["# write your code in this cell\n", "class Fifo(object):\n", "    def __init__(self):\n", "        self.items = []\n", "    def incoming(self, obj):\n", "        self.items.append(obj)\n", "    def outgoing(self):\n", "        if len(self.items)%2 == 0:\n", "            raise Exception(\"even length ->{}\".format(self.items.pop()))\n", "        return self.items.pop()\n", "    # optioinal for debugging\n", "    def __repr__(self):\n", "        return \"<StudentFifo [{}]>\".format(\" \".join([\"{}\".format(i) for i in self.items]))"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Then she can evaluate this correction cell"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["from exercises.fifoclass import exo_fifo\n", "exo_fifo.correction(Fifo)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["*********"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["# Under the hood"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["As always, the python code here is"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["%cat ../exercises/fifoclass.py"]}]