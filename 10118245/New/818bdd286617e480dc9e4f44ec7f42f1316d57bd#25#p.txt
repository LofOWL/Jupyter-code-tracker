[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Indentations en python"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Comme on l'a vu dans la vid\u00e9o, en python on utilise les indentations pour structurer le code. Ce compl\u00e9ment vise \u00e0 approfondir cette notion."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Imbrications"]}, {"block": 5, "type": "markdown", "linesLength": 2, "startIndex": 5, "lines": ["Nous l'avons signal\u00e9 \u00e9galement dans la vid\u00e9o, la pratique la plus courante est d'utiliser syst\u00e9matiquement une marge \n", "de 4 espaces:"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 7, "lines": ["# la convention la plus g\u00e9n\u00e9ralement utilis\u00e9e\n", "# consiste \u00e0 utiliser une indentation de 4 espaces\n", "if 'g' in 'egg':\n", "    print('OUI')\n", "else:\n", "    print('NON')"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Voyons tout de suite comment on pourrait \u00e9crire plusieurs tests imbriqu\u00e9s:"]}, {"block": 8, "type": "code", "linesLength": 17, "startIndex": 14, "lines": ["entree = 'spam'\n", "\n", "# pour imbriquer il suffit d'indenter de 8 espaces\n", "if 'a' in entree:\n", "    if 'b' in entree:\n", "        cas11 = True\n", "        print('a et b')\n", "    else:\n", "        cas12 = True\n", "        print('a mais pas b')\n", "else:\n", "    if 'b' in entree:\n", "        cas21 = True\n", "        print('b mais pas a')\n", "    else:\n", "        cas22 = True\n", "        print('ni a ni b')"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Dans cette construction assez simple, remarquez bien **les deux points ':'** \u00e0 chaque d\u00e9but de bloc, c'est-\u00e0-dire \u00e0 chaque fin de ligne `if` ou `else`."]}, {"block": 10, "type": "markdown", "linesLength": 5, "startIndex": 32, "lines": ["Cette fa\u00e7on d'organiser le code peut para\u00eetre tr\u00e8s \u00e9trange, notamment aux gens habitu\u00e9s \u00e0 un autre langage de programmation, puisqu'en g\u00e9n\u00e9ral les syntaxes des langages sont con\u00e7ues de mani\u00e8re \u00e0 \u00eatre insensibles aux espaces et \u00e0 la pr\u00e9sentation. \n", "\n", "Comme vous le constaterez \u00e0 l'usage cependant, une fois qu'on s'y est habitu\u00e9 cette pratique est tr\u00e8s agr\u00e9able, une fois qu'on a \u00e9crit la derni\u00e8re ligne du code, on n'a pas \u00e0 r\u00e9fl\u00e9chir \u00e0 refermer le bon nombre d'accolades ou de 'END'. \n", "\n", "Par ailleurs, comme pour tous les langages, votre \u00e9diteur favori conna\u00eet cette syntaxe et va vous aider \u00e0 respecter la r\u00e8gle des 4 caract\u00e8res. Nous ne pouvons pas publier ici une liste des commandes disponibles par \u00e9diteur, nous vous invitons le cas \u00e9ch\u00e9ant \u00e0 \u00e9changer entre vous sur le forum pour partager les recettes que vous utilisez avec votre \u00e9diteur / environnement de programmation favori."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["### Espaces *vs* tabulations"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["#### Version courte"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 40, "lines": ["Il nous faut par contre donner quelques d\u00e9tails sur un probl\u00e8me que l'on rencontre fr\u00e9quemment sur du code partag\u00e9 entre plusieurs personnes quand celles-ci utilisent des environnement diff\u00e9rents.\n", "\n", "Pour faire court, ce probl\u00e8me est **susceptible d'appara\u00eetre d\u00e8s qu'on utilise des tabulations**, plut\u00f4t que des espaces, pour impl\u00e9menter les indentations. Aussi, le message \u00e0 retenir ici est **de ne jamais utiliser de tabulations dans votre code python**."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["#### Version longue"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["En version longue, il existe un code ASCII pour un caract\u00e8re qui s'appelle *Tabulation* (alias Control-i, qu'on note aussi `^I`); l'interpr\u00e9tation de ce caract\u00e8re n'\u00e9tant pas clairement sp\u00e9cifi\u00e9e, il arrive qu'on se retrouve dans une situation comme la suivante."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Bernard utilise l'\u00e9diteur `vim`; sous cet \u00e9diteur il lui est possible de mettre des tabulations dans son code, et de choisir la valeur de ces tabulations. Aussi il va dans les pr\u00e9f\u00e9rences de `vim`, choisit Tabulation=4, et \u00e9crit un programme qu'il voit comme ceci"]}, {"block": 18, "type": "code", "linesLength": 7, "startIndex": 46, "lines": ["if 'a' in entree:\n", "    if 'b' in entree:\n", "        cas11 = True\n", "        print('a et b')\n", "    else:\n", "        cas12 = True\n", "        print('a mais pas b')"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["Sauf qu'en fait, il a mis un m\u00e9lange de tabulations et d'espaces, et en fait le fichier contient (avec `^I` pour tabulation):"]}, {"block": 20, "type": "markdown", "linesLength": 7, "startIndex": 54, "lines": ["    if 'a' in entree:\n", "    ^Iif 'b' in entree:\n", "    ^I^Icas11 = True\n", "        ^Iprint 'a et b'\n", "    ^Ielse:\n", "    ^I^Icas12 = True\n", "        ^Iprint 'a mais pas b'"]}, {"block": 21, "type": "markdown", "linesLength": 2, "startIndex": 61, "lines": ["Remarquez le m\u00e9lange de Tabulations et d'espaces dans les deux lignes avec `print`. \n", "Bernard envoie son code \u00e0 Alice qui utilise `emacs`. Dans son environnement, `emacs` affiche une tabulation comme 8 caract\u00e8res. Du coup Alice \"voit\" le code suivant"]}, {"block": 22, "type": "markdown", "linesLength": 7, "startIndex": 63, "lines": ["    if 'a' in entree:\n", "            if 'b' in entree:\n", "                    cas11 = True\n", "                print 'a et b'\n", "        else:\n", "            cas12 = True\n", "                print 'a mais pas b'"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["Bref, c'est la confusion la plus totale. Aussi r\u00e9p\u00e9tons-le, **n'utilisez jamais de tabulations dans votre code python**. "]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["Ce qui ne veut pas dire qu'il ne faut pas utiliser la touche `Tab` avec votre \u00e9diteur - au contraire, c'est une touche tr\u00e8s utilis\u00e9e - mais faites bien la diff\u00e9rence entre le fait d'appuyer sur la touche `Tab` et le fait que le fichier sauv\u00e9 sur disque contient effectivement un caract\u00e8re tabulation. Votre \u00e9diteur favori propose tr\u00e8s certainement une option permettant de faire les remplacements idoines pour ne pas \u00e9crire de tabulation dans vos fichiers, tout en vous permettant d'indenter votre code avec la touche `Tab`."]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["Signalons enfin que python3 est plus restrictif que python2 \u00e0 cet \u00e9gard, et interdit de m\u00e9langer des espaces et des tabulations sur une m\u00eame ligne. Ce qui n'enl\u00e8ve rien \u00e0 notre recommandation."]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["Vous pouvez trouver du code qui ne respecte pas la convention des 4 caract\u00e8res."]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["#### Version courte"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["En version courte: **Utilisez toujours des indentations de 4 espaces**."]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 77, "lines": ["#### Version longue"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["En version longue, et pour les curieux: python **n'impose pas** que les indentations soient de 4 caract\u00e8res. Aussi vous pouvez rencontrer un code qui ne respecte pas cette convention, et il nous faut, pour \u00eatre tout \u00e0 fait pr\u00e9cis sur ce que python accepte ou non, pr\u00e9ciser ce qui est r\u00e9ellement requis par python. "]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 79, "lines": ["La r\u00e8gle utilis\u00e9e pour analyser votre code, c'est que toutes les instructions **dans un m\u00eame bloc** sont pr\u00e9sent\u00e9es avec le m\u00eame niveau d'indentation. Si deux lignes successives - modulo les blocs imbriqu\u00e9s - ont la m\u00eame indentation, elles sont dans le m\u00eame bloc.\n", "\n", "Voyons quelques exemples. Tout d'abord le code suivant est **l\u00e9gal**, quoique, redisons-le pour la derni\u00e8re fois, **pas du tout recommand\u00e9**:"]}, {"block": 33, "type": "code", "linesLength": 6, "startIndex": 82, "lines": ["# code accept\u00e9 mais pas du tout recommand\u00e9\n", "if 'a' in 'pas du tout recommande':\n", "  succes = True\n", "  print('OUI')\n", "else:\n", "      print('NON')"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["En effet les deux blocs (apr\u00e8s `if` et apr\u00e8s `else`) sont des blocs distincts, ils sont libres d'utiliser deux indentations diff\u00e9rentes (ici 2 et 6)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["Par contre la construction ci-dessous n'est pas l\u00e9gale"]}, {"block": 36, "type": "code", "linesLength": 8, "startIndex": 90, "lines": ["# ceci n'est pas correct et rejet\u00e9 par python\n", "if 'a' in entree:\n", "    if 'b' in entree:\n", "        cas11 = True\n", "        print 'a et b'\n", "      else:\n", "        cas12 = True\n", "        print 'a mais pas b'"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 98, "lines": ["En effet les deux lignes `if` et `else` font logiquement partie du m\u00eame bloc, elles **doivent** donc avoir la m\u00eame indentation. Avec cette pr\u00e9sentation le lecteur python \u00e9met une erreur et ne peut pas interpr\u00e9ter le code."]}]