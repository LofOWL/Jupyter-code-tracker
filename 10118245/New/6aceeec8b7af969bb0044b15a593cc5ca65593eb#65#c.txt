[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Les fichiers"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Voici quelques utilisations habituelles du type `file` en python"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Avec un *context manager*"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 4, "lines": ["Nous avons vu dans la vid\u00e9o les m\u00e9canismes de base sur les fichiers. Nous avons vu notamment qu'il est important de bien fermer un fichier apr\u00e8s usage.\n", "\n", "Dans la pratique, il est recommand\u00e9 de **toujours** utiliser l'instruction `with`, que nous approfondirons en semaine 6. Dans l'imm\u00e9diat notez qu'au lieu de faire"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["**On fera plut\u00f4t**"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Depuis son introduction dans python-2.5, cette forme est devenue tr\u00e8s populaire car elle pr\u00e9sente le gros avantage de **garantir** que le fichier sera **bien ferm\u00e9**, et cela m\u00eame si une exception devait \u00eatre lev\u00e9e \u00e0 l'int\u00e9rieur du bloc `with`. Et marginalement le code est plus lisible dans cette deuxi\u00e8me forme."]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 9, "lines": ["Les modes d'ouverture"]}, {"block": 8, "type": "markdown", "linesLength": 4, "startIndex": 10, "lines": ["Les modes d'ouverture les plus utilis\u00e9s sont\n", " * `'r'` (la cha\u00eene contenant l'unique caract\u00e8re `r`) pour ouvrir un fichier en lecture seulement;\n", " * `'w'` en \u00e9criture seulement; le contenu pr\u00e9c\u00e9dent du fichier, s'il existait, est perdu;\n", " * `'a'` en \u00e9criture seulement, mais pour ajouter du contenu \u00e0 la fin de fichier;\n"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Voici par exemple comment on pourrait ajouter du texte dans le fichier `s1.txt` qui devrait, \u00e0 ce stade contenir 2 entiers"]}, {"block": 10, "type": "markdown", "linesLength": 6, "startIndex": 15, "lines": ["Il existe de nombreuses variantes au mode d'ouverture, pour par exemple:\n", " * ouvrir le fichier en lecture et en \u00e9criture,\n", " * ouvrir le fichier en mode binaire,\n", " * utiliser le mode dit *universal newlines* qui permet de s'affranchir des diff\u00e9rences de fin de ligne entre les fichiers produits sur, d'une part linux et MacOS, et d'autre part Windows.\n", "\n", "Ces variantes sont d\u00e9crites dans [la section sur la fonction built-in `open`](https://docs.python.org/2/library/functions.html#open) dans la documentation python."]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Comment lire un contenu (haut niveau)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Les fichiers textuels classiques se lisent en g\u00e9n\u00e9ral, comme on vient d'ailleurs de le faire, avec une simple boucle `for` sur l'objet fichier, qui it\u00e8re sur les lignes du fichier. Cette m\u00e9thode est **recommand\u00e9e** car elle est **efficace**, et n'implique pas notamment de charger l'int\u00e9gralit\u00e9 du fichier en m\u00e9moire."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["On trouve aussi, dans du code plus ancien, l'appel \u00e0 la m\u00e9thode `readlines` qui renvoie une liste de lignes:"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Vous remarquerez cependant que cette m\u00e9thode implique de **charger l'int\u00e9gralit\u00e9** du fichier en m\u00e9moire. Dans une situation conforme \u00e0 la discussion g\u00e9n\u00e9rale sur les it\u00e9rateurs et les performances que nous avons eue en fin de semaine 3, ici encore l'utilisation du fichier comme un it\u00e9rateur est de loin pr\u00e9f\u00e9rable."]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 25, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 26, "lines": ["Un fichier est un it\u00e9rateur"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Pendant que l'on parle d'it\u00e9rateur, remarquons qu'un fichier - qui donc **est it\u00e9rable** puisqu'on peut le lire par une boucle `for` - est aussi **son propre it\u00e9rateur**:"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Dans le prolongement de la discussion sur les it\u00e9rateurs et les it\u00e9rable en fin de semaine 3, nous vous rappelons que tous les autres types de base que nous avons vus jusqu'ici ont leur it\u00e9rateurs impl\u00e9ment\u00e9s comme des objets s\u00e9par\u00e9s. Nous avions \u00e0 l'\u00e9poque soulign\u00e9 que ce choix permettait notamment de r\u00e9aliser deux boucles imbriqu\u00e9es sur la m\u00eame liste."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Ceci ne fonctionnerait pas sur un objet fichier"]}, {"block": 20, "type": "heading", "linesLength": 1, "startIndex": 30, "lines": ["Autres m\u00e9thodes"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Vous pouvez \u00e9galement acc\u00e9der \u00e0 des fonctions de beaucoup plus bas niveau, notamment celle fournies directement par l'Operating System; nous allons en d\u00e9crire deux parmi les plus utiles."]}, {"block": 22, "type": "heading", "linesLength": 1, "startIndex": 32, "lines": ["Lire un contenu - bas niveau"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["La m\u00e9thode `read()` permet de lire dans le fichier un buffer d'une certaine taille:"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Ou tout le fichier - mais l\u00e0 encore prenez garde \u00e0 l'utilisation de la m\u00e9moire"]}, {"block": 25, "type": "heading", "linesLength": 1, "startIndex": 35, "lines": ["La m\u00e9thode `flush`"]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 36, "lines": ["Les entr\u00e9es-sortie sur fichier sont bien souvent *bufferis\u00e9es* par le syst\u00e8me d'exploitation. Cela signifie qu'un appel \u00e0 `write` ne provoque pas forc\u00e9ment une \u00e9criture imm\u00e9diate, car pour des raisons de performance on attend d'avoir suffisamment de mati\u00e8re avant d'\u00e9crire sur le disque.\n", "\n", "Il y a des cas o\u00f9 ce comportement peut s'av\u00e9rer g\u00eanant, et o\u00f9 on a besoin d'\u00e9crire imm\u00e9diatement (et donc de vider le *buffer*), et c'est le propos de la m\u00e9thode `flush`()."]}, {"block": 27, "type": "heading", "linesLength": 1, "startIndex": 39, "lines": ["Pour en savoir plus"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Pour une description plus exhaustive vous pouvez vous reporter \u00e0 [la page sur le type `file`](https://docs.python.org/2.4/lib/bltin-file-objects.html) dans la documentation python."]}]