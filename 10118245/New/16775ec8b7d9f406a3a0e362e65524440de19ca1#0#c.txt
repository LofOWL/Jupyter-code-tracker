[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Obtenir une r\u00e9ponse de l'utilisateur"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Occasionnellement, il peut \u00eatre utile de poser une question \u00e0 l'utilisateur."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### La fonction `input()`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["C'est le propos de la fonction `input`. Par exemple:"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["nom_ville = input(\"entrez le nom de la ville : \")\n", "print(f\"nom_ville={nom_ville}\")"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["### Attention \u00e0 bien v\u00e9rifier/convertir"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Notez bien que `input` renvoie **toujours une cha\u00eene**. C'est assez \u00e9vident, mais il est tr\u00e8s facile de l'oublier et de passer cette cha\u00eene directement \u00e0 une fonction qui s'attend \u00e0 recevoir, par exemple, un nombre entier, auquel cas les choses se passent mal"]}, {"block": 9, "type": "markdown", "linesLength": 7, "startIndex": 14, "lines": ["```\n", ">>> input(\"nombre de lignes ? \") + 3\n", "nombre de lignes ? 12\n", "Traceback (most recent call last):\n", "  File \"<stdin>\", line 1, in <module>\n", "TypeError: must be str, not int\n", "```"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Dans ce cas il faut appeler la fonction `int` pour convertir le r\u00e9sultat en un entier"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["int(input(\"nombre de lignes ? \")) + 3"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["### Limitations"]}, {"block": 13, "type": "markdown", "linesLength": 5, "startIndex": 24, "lines": ["Cette fonction peut \u00eatre utile pour vos premiers pas en python.\n", "\n", "En pratique toutefois, on utilise assez peu cette fonction, car les applications \"r\u00e9elles\" viennent avec leur propre interface utilisateur, souvent graphique, et disposent donc d'autres moyens que celui-ci pour interagir avec l'utilisateur.\n", "\n", "Les applications destin\u00e9es \u00e0 fonctionner dans un terminal, quant \u00e0 elles, re\u00e7oivent traditionnellement leurs donn\u00e9es de la ligne de commande. C'est le propos du module `argparse` que nous avons d\u00e9j\u00e0 rencontr\u00e9 en $1^{\u00e8re}$ semaine."]}]