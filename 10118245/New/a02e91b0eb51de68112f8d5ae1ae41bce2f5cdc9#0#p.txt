[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Plusieurs variables dans une boucle for"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["Nous avons vu pr\u00e9c\u00e9demment la possibilit\u00e9 d'affecter plusieurs variables par filtrage \u00e0 partir d'un seul objet, comme ceci"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 2, "lines": ["item = (1,2)\n", "a,b = item\n", "print 'a',a,'b',b"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["D'une fa\u00e7on analogue, il est possible de faire une boucle for qui it\u00e8re sur une seule liste mais qui 'agit' sur plusieurs variables, comme ceci"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 6, "lines": ["entrees = [ (1,2), (3,4), (5,6), ]\n", "for a,b in entrees:\n", "    print 'a',a,'b',b"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Cette m\u00e9canique est massivement utilis\u00e9e en python. "]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 10, "lines": ["La fonction zip"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Voici un exemple tr\u00e8s simple qui utilise la technique qu'on vient de voir."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Imaginons qu'on dispose de deux listes de longueurs \u00e9gales, dont on sait que les entr\u00e9es correspondent une \u00e0 une, comme par exemple"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["villes = [ \"Paris\", \"Nice\", \"Lyon\" ]\n", "populations = [ 2*10**6, 4*10**5, 10**6 ]"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Afin d'\u00e9crire facilement un code qui \"associe\" les deux listes entre elles, python fournit une fonction \"builtin\" baptis\u00e9e zip, voyons ce qu'elle peut nous apporter sur cet exemple"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["zip (villes, populations)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["On le voit, on obtient en retour une liste compos\u00e9e de tuples. On peut \u00e0 pr\u00e9sent \u00e9crire une boucle \"for\" comme ceci"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["for ville, population in zip (villes, populations):\n", "    print population,\"habitants a\",ville"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["Qui est, il nous semble, beaucoup plus lisible que ce que l'on serait amen\u00e9 \u00e0 \u00e9crire avec des langages plus traditionnels. \n", "\n", "Tout ceci se g\u00e9n\u00e9ralise naturellement \u00e0 plus que deux variables."]}]