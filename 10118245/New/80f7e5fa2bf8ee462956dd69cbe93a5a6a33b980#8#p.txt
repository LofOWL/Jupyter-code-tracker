[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["L'op\u00e9rateur $\\texttt{is}$ et la fonction $\\texttt{id}$"]}, {"block": 1, "type": "markdown", "linesLength": 5, "startIndex": 1, "lines": ["Python fournit un op\u00e9rateur $\\texttt{is}$ qui permet de savoir si deux valeurs correspondent au m\u00eame objet en m\u00e9moire.\n", "\n", "Attention, il ne s'agit pas d'un test de comparaison habituel, comme le fait l'op\u00e9rateur $\\texttt{==}$ que nous avons d\u00e9j\u00e0 rencontr\u00e9, mais r\u00e9ellement de savoir si les deux valeurs correspondent \u00e0 la m\u00eame instance. \n", "\n", "Pour bien comprendre le fonctionnement de $\\texttt{is}$ nous allons voir la fonction $\\texttt{id}$ qui retourne l'identificateur unique d'un objet (un mod\u00e8le mental acceptable est celui d'adresse m\u00e9moire)."]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["id(True)"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Voyons maintenant ce que cela nous donne avec des objets un peu moins banals"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 8, "lines": ["a = (1,)\n", "b = (1,)\n", "a == b"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Bon, jusqu'ici tout est clair; voyons ce que nous renvoie $\\texttt{id}$ sur ces deux objets"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["print 'id(a)=',id(a),'id(b)=',id(b)"]}, {"block": 7, "type": "markdown", "linesLength": 5, "startIndex": 13, "lines": ["Ces deux objets sont donc install\u00e9s \u00e0 des endroits diff\u00e9rents de la m\u00e9moire.\n", "\n", "L'op\u00e9rateur $\\texttt{is}$ se contente de comparer la valeur de $\\texttt{id}$ sur ses deux op\u00e9randes\n", "\n", "C'est pourquoi on observe ici que"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["a is b"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Voyons ce que cela nous donne avec des entiers "]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 20, "lines": ["a = 3\n", "b = 3\n", "print 'a',id(a),'b',id(b)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Tiens c'est curieux, nous avons ici deux objets, que l'on pourrait penser diff\u00e9rents, mais en fait on observe ici que"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["a is b"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Il se trouve que, dans le cas des petits entiers, python r\u00e9alise une optimisation de l'utilisation de la m\u00e9moire. Quel que soit le nombre de variables dont la valeur est '3', un seul objet correspondant \u00e0 l'entier '3' est allou\u00e9, pour \u00e9viter d'engorger la m\u00e9moire. On dit que l'entier '3' est impl\u00e9ment\u00e9 comme un singleton."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Cette optimisation ce concerne pas la grande majorit\u00e9 des types en python. Par exemple ici avec deux listes apparemment identiques, cela n'est plus le cas:"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 27, "lines": ["a = [1,2]\n", "b = [1,2]\n", "a is b"]}]