[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Les boucles `for`"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Exercice - niveau basique"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Liste des valeurs d'une fonction"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 4, "lines": ["On se donne une fonction polynomiale\n", "\n", "$P(x) = 2x^2 -3x -2$"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["On vous demande d'\u00e9crire une fonction `liste_P` qui prend en argument une liste de nombres r\u00e9els $x$ et qui retourne la liste des valeurs $P(x)$."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["\u00c9crivez votre code dans la cellule suivante (*On vous sugg\u00e8re d'\u00e9crire une fonction P qui impl\u00e9mente le poyn\u00f4me mais \u00e7a n'est pas strictement indispensable, seul le r\u00e9sultat de `liste_P` compte*):"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Et vous pouvez le v\u00e9rifier en \u00e9valuant cette cellule:"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["******"]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 11, "lines": ["Exercice - niveau basique"]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Tri de plusieurs listes"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 13, "lines": ["\u00c9crivez une fonction qui\n", " * accepte en argument une liste de listes,\n", " * et qui retourne **la m\u00eame liste**, mais avec toutes les sous-listes **tri\u00e9es en place**."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["\u00c9crivez votre code ici"]}, {"block": 13, "type": "heading", "linesLength": 1, "startIndex": 17, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 18, "lines": ["Tri de plusieurs listes, dans des directions diff\u00e9rentes"]}, {"block": 15, "type": "markdown", "linesLength": 7, "startIndex": 19, "lines": ["Modifiez votre code pour qu'il accepte cette fois **deux** arguments listes que l'on suppose de tailles \u00e9gales. \n", "\n", "Comme tout \u00e0 l'heure le premier argument est une liste de listes \u00e0 trier.\n", "\n", "\u00c0 pr\u00e9sent le second argument est une liste (ou un tuple) de bool\u00e9ens, de m\u00eame cardinal que le premier argument, et qui indiquent l'ordre dans lequel on veut trier la liste d'entr\u00e8e de m\u00eame rang. `True` signifie un tri descendant, `False` un tri ascendant.\n", "\n", "Comme dans l'exercice `multi_tri`, il s'agit de modifier en place les donn\u00e9es en entr\u00e9e, et de retourner la liste de d\u00e9part."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["\u00c0 vous de jouer"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["******"]}, {"block": 18, "type": "heading", "linesLength": 1, "startIndex": 28, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 29, "lines": ["Produit scalaire"]}, {"block": 20, "type": "markdown", "linesLength": 7, "startIndex": 30, "lines": ["On veut \u00e9crire une fonction qui retourne le produit scalaire de deux vecteurs. Pour ceci on va mat\u00e9rialiser les deux vecteurs en entr\u00e9e par deux listes que l'on suppose de m\u00eame taille. Cela est tout \u00e0 fait possible avec le bagage que nous avons appris jusqu'ici - bien que nous verrons plus tard d'autres techniques pour faire ceci de mani\u00e8re plus \u00e9l\u00e9gante.\n", "\n", "On rappelle que le produit de X et Y vaut\n", "\n", "$\\sum_{i} X_i * Y_i$\n", "\n", "On posera que le produit scalaire de deux listes vides vaut `0`."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Vous devez donc \u00e9crire"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["*****"]}, {"block": 23, "type": "heading", "linesLength": 1, "startIndex": 39, "lines": ["R\u00e9cr\u00e9ation"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Si vous avez correctement impl\u00e9ment\u00e9 la fonction `liste_P` telle que demand\u00e9 dans le premier exercice, vous pouvez visualiser le polyn\u00f4me `P` en utilisant `matplotlib` avec le code suivant&nbsp;:"]}]