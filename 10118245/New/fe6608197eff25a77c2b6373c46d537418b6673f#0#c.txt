[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["H\u00e9ritage, typage"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["\u00c0 quoi l'h\u00e9ritage **ne sert pas** en python"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["nous discuterons ensuite de ce pour quoi l'h\u00e9ritage **n'est pas fait** en python, une section qui peut \u00eatre b\u00e9n\u00e9fique aux gens d\u00e9j\u00e0 habitu\u00e9s \u00e0 C++ ou \u00e0 Java;"]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 4, "lines": ["Familles de classe / typage"]}, {"block": 5, "type": "markdown", "linesLength": 9, "startIndex": 5, "lines": ["Si vous \u00eates familiers avec un langage statiquement typ\u00e9 comme C++, vous \u00eates sans doute habitu\u00e9s \u00e0 appr\u00e9hender l'h\u00e9ritage *aussi* en terme de types. \n", "\n", "Commen\u00e7ons avec un exemple simple et classique. Imaginons que l'on veuille \u00e9crire un analyseur syntaxique pour un langage simple d'expressions arithm\u00e9tiques. En pratique cela voudra dire disposer d'un parser pour transformer un texte comme\n", "\n", "    (10 + 12) * (32 + 5)\n", "    \n", "en un arbre syntaxique construit avec les op\u00e9rateurs `Entier`, `Plus`, `Fois`, chacun repr\u00e9sent\u00e9 comme une classe; pour ce texte on obtiendrait donc l'objet\n", "\n", "    Fois(Plus(Entier(10), Entier(12)), Plus(Entier(32), Entier(5)))"]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["En C++"]}, {"block": 7, "type": "markdown", "linesLength": 8, "startIndex": 15, "lines": ["Avec un langage comme C++ \u00e0 nouveau, pour impl\u00e9menter ceci, on va avoir tendance \u00e0 d\u00e9finir un **type chapeau** qu'on appelle par exemple `Expression`, et on va concevoir un arbre d'h\u00e9ritage du genre de&nbsp;:\n", "\n", "    Expression\n", "    |-- Entier\n", "    |-- Plus\n", "    |-- Fois\n", "\n", "On n'a **pas vraiment le choix de le faire ou non**; en effet, il faut pour satisfaire le compilateur et surtout le type-checker statique, pouvoir **donner un type** \u00e0 une fonctionnalit\u00e9 qui ferait l'\u00e9valuation d'une telle expression. "]}, {"block": 8, "type": "raw", "linesLength": 4, "startIndex": 23, "lines": ["class Expression {\n", "  public:\n", "    virtual int evaluate ()=0;\n", "}"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Ce faisant on indique aussi que toutes les classes filles **doivent** impl\u00e9menter la m\u00e9thode en question, ce que le type-checker statique v\u00e9rifiera \u00e9galement."]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 28, "lines": ["En python"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["En python, pour r\u00e9soudre ce probl\u00e8me, on **peut** naturellement d\u00e9finir la m\u00eame hi\u00e9rarchie de classes. Cependant si on le fait on s'aper\u00e7oit que le gain est somme toute tr\u00e8s faible."]}]