[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Les g\u00e9n\u00e9rateurs "]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 6, "lines": ["* Montrer que si on appelle un g\u00e9n\u00e9rateur on re\u00e7oit un objet g\u00e9n\u00e9rateur\n", "  * que c'est propice dans un for\n", "  * mais que \u00e7a ne marche pas lorsqu'on veut cascader les appels"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 4, "type": "code", "linesLength": 6, "startIndex": 10, "lines": ["def dividers(n, verbose=False):\n", "    for i in range(1, n):\n", "        if n % i == 0:\n", "            if verbose: \n", "                print(f'trouv\u00e9 diviseur {i} de {n}')\n", "            yield i"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["dividers(28)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["dividers(28, verbose=True)"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["for d in dividers(28):\n", "    print(d)"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["# 28 est un nombre parfait\n", "sum(dividers(28))"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Maintenant si un g\u00e9n\u00e9rateur appelle un g\u00e9n\u00e9rateur .. il ne se passe rien"]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 24, "lines": ["def dividers_square(n):\n", "    for i in dividers(n):\n", "        dividers(i)"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 27, "lines": ["try:\n", "    for i in dividers_square(28):\n", "        print(i)\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Et si on utilise juste `yield` \u00e7a ne fait pas du tout ce qu'on veut\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 33, "lines": ["def dividers_square(n):\n", "    for i in dividers(n):\n", "        yield dividers(i)"]}, {"block": 15, "type": "code", "linesLength": 5, "startIndex": 36, "lines": ["try:\n", "    for i in dividers_square(28):\n", "        print(i)\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["Ce qu'il faut faire plut\u00f4t, c'est ceci\u00a0:"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 42, "lines": ["def dividers_square(n):\n", "    for i in dividers(n):\n", "        yield from dividers(i, verbose=True)"]}, {"block": 18, "type": "code", "linesLength": 5, "startIndex": 45, "lines": ["try:\n", "    for i in dividers_square(28):\n", "        print(i)\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}]