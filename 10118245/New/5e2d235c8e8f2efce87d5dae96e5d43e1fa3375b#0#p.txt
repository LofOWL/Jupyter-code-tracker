[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# coroutines et awaitables"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["### *my first loop*"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["# protocole awaitable"]}, {"block": 4, "type": "markdown", "linesLength": 6, "startIndex": 4, "lines": ["| instruction | classe d'objets  | protocole | exemple | \n", "|-------------|------------------|-----------|---------|\n", "|   `for`     |   it\u00e9rables      |  `__iter__` | liste, ensemble |\n", "|   `with`    | context managers | `__enter__` & `__exit__` | fichier |\n", "|   `dict[x]` | hashables        | `__hash__` | *builtins* immuables |\n", "|   `await`   |   awaitables     | `__await__` | objet coroutine |"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["# `__await__` renvoie un it\u00e9rateur"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 11, "lines": ["class Awaitable():\n", "    def __await__(self):\n", "        print(\"in awaitable\")\n", "        yield \"yielded\""]}, {"block": 7, "type": "code", "linesLength": 5, "startIndex": 15, "lines": ["# il nous faut \n", "# au moins une coroutine\n", "# pour pouvoir faire await\n", "async def main():\n", "    await Awaitable()"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["# l'objet coroutine\n", "coro = main()"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["coro.send(None)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["# un peu moins simple "]}, {"block": 11, "type": "code", "linesLength": 8, "startIndex": 24, "lines": ["# it\u00e9rateur \u00e0 deux coups \n", "class Awaitable2():\n", "    def __await__(self):\n", "        print(\"step1\")\n", "        yield \"yield 1\"\n", "        print(\"step2\")\n", "        yield \"yield 2\"\n", "        return \"returned\""]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["# boilerplate\n", "async def main():\n", "    return await Awaitable2()"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 35, "lines": ["# l'objet coroutine\n", "coro = main()\n"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["coro.send(None)"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["coro.send(None)"]}, {"block": 16, "type": "code", "linesLength": 5, "startIndex": 39, "lines": ["try:\n", "    coro.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["# plusieurs travaux en m\u00eame temps"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["coro1 = main()"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["coro2 = main()"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["coro1.send(None)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["coro2.send(None)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["coro1.send(None)"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["coro2.send(None)"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 51, "lines": ["try:\n", "    coro1.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 25, "type": "code", "linesLength": 5, "startIndex": 56, "lines": ["try:\n", "    coro2.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["# pile, await et yield"]}, {"block": 27, "type": "code", "linesLength": 10, "startIndex": 62, "lines": ["class w1:\n", "\n", "    def __init__(self, marker):\n", "        self.marker = marker\n", "    \n", "    def __await__(self):\n", "        # redonner la main \u00e0 la boucle\n", "        yield f\"yield {self.marker}\"\n", "        # retourn\u00e9 \u00e0 await\n", "        return 1"]}, {"block": 28, "type": "code", "linesLength": 10, "startIndex": 72, "lines": ["async def w2():\n", "    return await w1('first') + await w1('second')\n", "\n", "async def w3():\n", "    return await w2() + 1\n", "\n", "async def w4():\n", "    return await w3() + 1\n", "\n", "coro = w4()"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["coro.send(None)"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["coro.send(None)"]}, {"block": 31, "type": "code", "linesLength": 5, "startIndex": 84, "lines": ["try:\n", "    coro.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["# [animation](single-stack/index.html)"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["# dans les deux sens"]}, {"block": 34, "type": "code", "linesLength": 9, "startIndex": 91, "lines": ["class BothWays():\n", "    def __await__(self):\n", "        print(\"step1\")\n", "        received1 = yield \"yielded1\"\n", "        print(\"received1\", received1)\n", "        print(\"step2\")\n", "        received2 = yield \"yielded2\"\n", "        print(\"received2\", received2)\n", "        return \"returned\""]}, {"block": 35, "type": "code", "linesLength": 4, "startIndex": 100, "lines": ["# boilerplate\n", "async def main():\n", "    return await BothWays()\n", "\n"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 104, "lines": ["\n", "# l'objet coroutine\n", "coro = main()"]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 107, "lines": ["# La premi\u00e8re fois il FAUT envoyer None\n", "coro.send(None)"]}, {"block": 38, "type": "code", "linesLength": 2, "startIndex": 109, "lines": ["\n", "coro.send(\"message\")"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 111, "lines": ["# communication boucle - awaitable"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["![both ways](w8-s5-fig1.png) "]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 113, "lines": ["# conclusion"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 114, "lines": ["### protocole awaitable"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 115, "lines": ["### m\u00e9thode `send()`"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 116, "lines": ["### li\u00e9e aux `yield` "]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 117, "lines": ["### communication bi-directionnelle"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["### ~~`import asyncio`~~"]}]