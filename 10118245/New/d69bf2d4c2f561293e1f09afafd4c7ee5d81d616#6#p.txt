[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Exercice sur les ensembles"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Chargement des donn\u00e9es"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous reprenons le m\u00eame genre de donn\u00e9es marines en provenance de MarineTraffic que nous avons vues dans l'exercice pr\u00e9c\u00e9dent."]}, {"block": 4, "type": "code", "linesLength": 8, "startIndex": 4, "lines": ["# load data from files\n", "import json\n", "\n", "with open(\"data/marine-e2-ext.json\") as feed:\n", "    extended = json.load(feed)\n", "    \n", "with open(\"data/marine-e2-abb.json\") as feed:\n", "    abbreviated = json.load(feed)"]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Rappels sur les formats"]}, {"block": 6, "type": "markdown", "linesLength": 2, "startIndex": 13, "lines": ["    \u00e9tendu: [id, latitude, longitude, date_heure, nom_bateau, code_pays...]\n", "    abr\u00e9g\u00e9: [id, latitude, longitude, date_heure]"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["print \"extended has {} entries\".format(len(extended))\n", "print extended[12]"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["print \"abbreviated has {} entries\".format(len(abbreviated))\n", "print abbreviated[0]"]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 19, "lines": ["But de l'exercice"]}, {"block": 10, "type": "markdown", "linesLength": 5, "startIndex": 20, "lines": ["Sauf que cette fois il n'y a plus correspondance entre les bateaux rapport\u00e9s dans les donn\u00e9es \u00e9tendues et abr\u00e9g\u00e9es. On vous demande d'\u00e9crire une fonction qui retourne un tuple \u00e0 trois \u00e9l\u00e9ments\n", " * l'ensemble des noms des bateaux pr\u00e9sents dans `extended` mais pas dans abbreviated\n", " * l'ensemble des noms des bateaux pr\u00e9sents dans `extended` et dans abbreviated\n", " * l'ensemble des `id` des bateaux pr\u00e9sents dans `abbreviated`\n", " mais pas dans `extended`"]}, {"block": 11, "type": "code", "linesLength": 12, "startIndex": 25, "lines": ["# le r\u00e9sultat attendu\n", "from corrections.w3_marine_set import resultat_diff\n", "result = resultat_diff(extended, abbreviated)\n", "\n", "# combien de bateaux sont concern\u00e9s\n", "def show_result(result):\n", "    extended_only, both, abbreviated_only = result\n", "    print 'dans extended mais pas dans abbreviated', len(extended_only)\n", "    print 'dans les deux', len(both)\n", "    print 'dans abbreviated mais pas dans extended', len(abbreviated_only)\n", "\n", "show_result(result)"]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 37, "lines": ["Votre code"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["def diff(extended, abbreviated):\n", "    \"<votre_code>\""]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 40, "lines": ["Validation"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 41, "lines": ["from corrections.w3_marine_set import correction_diff\n", "correction_diff(diff, extended, abbreviated)"]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 43, "lines": ["Debugging\n"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 44, "lines": ["# pour utiliser ceci il faut que votre fonction renvoie un 3-tuple\n", "my_result = diff(extended, abbreviated)\n", "show_result(my_result)"]}]