[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Classes \"new style\""]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### La classe `object`"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Vous pouvez trouver du code dans lequel les classes h\u00e9ritent de la classe `object`, comme dans cet exemple tir\u00e9 du module standard `zipfile` :"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Ceci nous donne l'occasion de citer le module `zipfile`, qui permet de lire ou \u00e9crire, de mani\u00e8re transparente, des fichiers compress\u00e9s au format `zip`. "]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Les classes *new-style*"]}, {"block": 7, "type": "markdown", "linesLength": 7, "startIndex": 7, "lines": ["Mais le sujet de ce compl\u00e9ment est d'expliquer pourquoi la classe `ZipFile` h\u00e9rite de la classe `object`. Voici ce qu'il faut en retenir en version courte.", "", "Aux alentours de la version 2.2 - 2.3 de python, le langage a \u00e9t\u00e9 am\u00e9lior\u00e9 pour r\u00e9gler quelques probl\u00e8mes qui existaient dans le syst\u00e8me de types. En substance, et pour rester synth\u00e9tique :", "", " * Il n'\u00e9tait pas possible dans les anciennes versions de sp\u00e9cialiser un type pr\u00e9d\u00e9fini. Par exemple, si vous vous souvenez de la classe `collections.OrderedDict`, il s'agit d'une sp\u00e9cialisation du type *builtin* `dict`. Il n'aurait pas \u00e9t\u00e9 possible d'impl\u00e9menter cette classe avec les anciennes versions du langage.", " ", " * Dans l'ancien mod\u00e8le mental, les classes et les types jouent un r\u00f4le diff\u00e9rent. Or dans la logique d'un langage orient\u00e9 objet, le type d'une instance, c'est sa classe. Nous allons y revenir avec des exemples."]}, {"block": 8, "type": "markdown", "linesLength": 6, "startIndex": 14, "lines": ["Pour am\u00e9liorer le langage, la notion de classe *new-style* a alors \u00e9t\u00e9 introduite, et pour", "**ne pas casser la compatibilit\u00e9 ascendante**, il a \u00e9t\u00e9 convenu que pour qu'une classe soit ***new-style***, il faut qu'elle **h\u00e9rite** - directement ou indirectement - de la classe *builtin* `object`. Les classes qui n'h\u00e9ritent pas d'`object` sont appel\u00e9es les *classes classiques*. ", "", "Nous reviendrons largement sur ces notions de types, de *classes classiques* et de classes *new-style* en semaine 7. Il faut retenir pour le moment qu'il y a en python 2 deux types diff\u00e9rents de classes, les classes *new-style* et les *classes classiques* qui sont incompatibles. Cependant, pour la majorit\u00e9 des usages, le comportement de ces deux types de classes est le m\u00eame. Les classes *new-style* sont utiles pour des usages avanc\u00e9s, comme l'h\u00e9ritage multiple sur lequel nous allons revenir dans un prochain compl\u00e9ment, et n\u00e9cessaires pour, par exemple, l'extension des types de bases. ", "", "Vous pouvez alors vous demander quand utiliser les classes *new-style* et les *classe classiques*. La r\u00e9ponse est simple&nbsp;: les classes *new-style* sont sup\u00e9rieures aux *classes classiques*, les classes *new-style* doivent donc \u00eatre utilis\u00e9es pour tous vos nouveaux programmes. D'ailleurs, en python 3, toutes les classes sont maintenant *new-style* par d\u00e9faut (on n'a donc plus besoin d'h\u00e9riter explicitement d'`object`) et les *classes classiques* n'existent plus. Attention cependant si vous travaillez avec du code python 2 existant qui utilise des *classes classiques*, il est recommand\u00e9 dans ce cas de continuer \u00e0 utiliser les classes classiques. En effet, m\u00eame si pour la majorit\u00e9 des usages, les classes classiques et *new-style* ont le m\u00eame comportement, dans certains cas avanc\u00e9s, elles ont un comportement incompatible. "]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Toutes les classes de la librairie standard python sont des classes *new-style*, c'est pourquoi la classe `ZipFile` h\u00e9rite de `object`."]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["### Illustration"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Une instance d'une *classe classique* a pour type le type `instance` :"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Par contre, une instance d'une classe *new-style* a pour type la classe qu'on a utilis\u00e9e pour cr\u00e9er l'objet :"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["### Pour en savoir plus"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 26, "lines": ["Si ce sujet vous int\u00e9resse, vous pouvez commencer par [l'article initial de Guido Van Rossum](https://www.python.org/download/releases/2.2.3/descrintro) au sujet de la nouvelle impl\u00e9mentation. ", "", "D'autres liens pertinents sont aussi donn\u00e9s [ici dans la documentation python](https://www.python.org/doc/newstyle/)."]}]