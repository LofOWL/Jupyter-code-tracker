[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Langages typ\u00e9s ou non"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["# Typages statique et dynamique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Il est de tradition de distinguer, parmi les langages, ceux qui sont typ\u00e9s ou non. On parle aussi de langage \u00e0 typage statique ou \u00e0 typage dynamique. Ce notebook tente d'\u00e9claircir ces notions pour ceux qui n'y sont pas familiers."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["### Typage statique"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 6, "lines": ["\u00c0 une extr\u00e9mit\u00e9 du spectre, on trouve les langages dits fortement typ\u00e9s, comme par exemple C/C++. ", "", "En C on \u00e9crira, par exemple, une version simpliste de la fonction factoriel comme ceci"]}, {"block": 7, "type": "markdown", "linesLength": 10, "startIndex": 9, "lines": ["    #include <stdio.h>", "    ", "    int factoriel (int n) {", "      int result = 1;", "      int loop;", "      for (loop = 1; loop <= n; loop ++) {", "        result *= loop;", "      }", "      return result;", "    }"]}, {"block": 8, "type": "markdown", "linesLength": 4, "startIndex": 19, "lines": ["Comme vous pouvez le voir - ou le deviner - toutes les variables utilis\u00e9es ici (comme par exemple `n`, `result` et `loop`) sont typ\u00e9es.", " * On doit appeler `factoriel` avec un argument `n` qui doit \u00eatre un entier (`int` est le nom du type entier).", " * Les variables internes `result` et `loop` sont de type entier.", " * `factoriel` retourne une valeur de type entier."]}, {"block": 9, "type": "markdown", "linesLength": 4, "startIndex": 23, "lines": ["C'est pourquoi on dit que C est fortement typ\u00e9. Ces informations de type ont essentiellement trois fonctions.", " * En premier lieu, elles sont n\u00e9cessaires au compilateur; en C si le programmeur ne pr\u00e9cisait pas que `result` est de type entier, le compilateur n'aurait pas suffisamment d'\u00e9l\u00e9ments pour g\u00e9n\u00e9rer le code assembleur correspondant.", " * En contrepartie, le programmeur a un contr\u00f4le tr\u00e8s fin de l'usage qu'il fait de la m\u00e9moire et du hardware. Il peut choisir d'utiliser un entier sur 32 ou 64 bits, sign\u00e9 ou pas, ou construire avec `struct` et `union` un arrangement de ses donn\u00e9es.", " * Enfin, et surtout, ces informations de type permettent de faire un contr\u00f4le *a priori* de la validit\u00e9 du programme; par exemple si \u00e0 un autre endroit dans le code on trouve"]}, {"block": 10, "type": "markdown", "linesLength": 9, "startIndex": 27, "lines": ["    int main (int argc, char *argv[]) {", "      /* le premier argument de la ligne de commande est argv[1] */", "      char *input = argv[1];", "      /* calculer son factoriel et afficher le resultat */", "      printf (\"Factoriel (%s) = %d\\n\",input,factoriel(input));", "      /*                                               ^^^                */", "      /* ici on appelle factoriel avec une entree 'chaine de caractere'   */", "      return 0;", "    }"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 36, "lines": ["alors le compilateur va remarquer qu'on essaie d'appeler `factoriel` avec comme argument `input` qui, pour faire simple, est une cha\u00eene de caract\u00e8res; et comme `factoriel` s'attend \u00e0 recevoir un entier ce programme n'a aucune chance de fonctionner.", "", "On parle alors aussi de **typage statique**, en ce sens que chaque variable a exactement un type, qui est d\u00e9fini par le programmeur une bonne fois pour toutes."]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 39, "lines": ["C'est ce qu'on appelle le **contr\u00f4le de type**, ou *type-checking* en anglais. Si on ignore le point sur le contr\u00f4le fin de la m\u00e9moire, qui n'est pas crucial \u00e0 notre sujet, le contr\u00f4le de type pr\u00e9sente ", " * l'**inconv\u00e9nient** de demander davantage au programmeur, ", " * et l'**avantage** de permettre un contr\u00f4le \u00e9tendu, et surtout pr\u00e9coce (avant m\u00eame de l'ex\u00e9cuter) de la bonne correction du programme."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Cela \u00e9tant dit, le typage statique en C n'emp\u00eache pas le programmeur d\u00e9butant d'essayer d'\u00e9crire dans la m\u00e9moire \u00e0 partir d'un pointeur `NULL` - et le programme de s'interrompre brutalement. Il faut \u00eatre conscient des limites du typage statique."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["### Typage dynamique"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["\u00c0 l'autre bout du spectre, on trouve des langages comme, eh bien, python. "]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Pour comprendre cette notion de typage dynamique, regardons la fonction suivante `somme`:"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Naturellement vous n'\u00eates pas \u00e0 ce stade en mesure de comprendre le fonctionnement intime de la fonction. Mais vous pouvez tout de m\u00eame l'utiliser."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["Vous pouvez donc constater que `somme` peut fonctionner avec des objets de types diff\u00e9rents. En fait, telle qu'elle est \u00e9crite, elle va fonctionner s'il est possible de faire `+` entre ses arguments. Ainsi par exemple on pourrait m\u00eame faire"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Mais par contre on ne pourrait pas faire"]}, {"block": 20, "type": "markdown", "linesLength": 4, "startIndex": 49, "lines": ["On voit qu'on se trouve dans une situation tr\u00e8s diff\u00e9rente de celle du programmeur C++ en ce sens que", " * \u00e0 l'\u00e9criture du programme il n'y aucun des surco\u00fbts qu'on trouve avec C ou C++ en terme de d\u00e9finition de type,", " * aucun contr\u00f4le de type n'est effecu\u00e9 *a priori* par le langage au moment de la d\u00e9finition de la fonction `somme`,", " * par contre au moment de l'\u00e9x\u00e9cution, si on se retrouve en situation de faire une somme entre deux types qui ne peuvent pas \u00eatre additionn\u00e9s, comme ci-dessus avec un entier et une liste, le programme ne pourra pas se d\u00e9rouler correctement."]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 53, "lines": ["Il y a deux points de vue vis-\u00e0-vis de la question du typage. ", "", "Les gens habitu\u00e9s au typage statique se plaignent du typage dynamique en disant qu'on peut \u00e9crire des programmes faux et qu'on s'en rend compte trop tard - \u00e0 l'ex\u00e9cution, en insistant sur les parties qui traitent des cas particuliers, qui sont moins fr\u00e9quemment utilis\u00e9es, et qui donc n\u00e9cessitent des tests plus approfondis pour s'assurer que la couverture des tests est compl\u00e8te.", "", "\u00c0 l'inverse les gens habitu\u00e9s au typage dynamique font valoir que le typage statique est tr\u00e8s partiel; par exemple en C si on essaie d'\u00e9crire au bout d'un pointeur nul, l'OS ne le permet pas et le programme sort tout aussi brutalement. "]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["Selon le point de vue le typage dynamique est v\u00e9cu comme un inconv\u00e9nient (pas assez de bonnes propri\u00e9t\u00e9s d\u00e9tect\u00e9es par le langage) ou comme un avantage (pas besoin de passer du temps \u00e0 d\u00e9clarer le type des variables, ni \u00e0 faire des conversions pour satisfaire le compilateur)."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["### Inf\u00e9rence de type"]}, {"block": 24, "type": "markdown", "linesLength": 5, "startIndex": 60, "lines": ["Une approche, qu'on peut qualifier d'hybride entre ces deux approches, est connue sous le nom d'inf\u00e9rence de type, et a \u00e9t\u00e9 mise en \u0153uvre notamment dans le langage ML. L'id\u00e9e est de laisser au langage le soin de d\u00e9terminer le - ou les - type(s) qui sont permis \u00e0 un endroit du code en fonction du contexte.", "", "Pour ceux que ce sujet int\u00e9resse, sachez qu'il existe un projet baptis\u00e9 [`mypy`](http://www.mypy-lang.org) qui vise \u00e0 creuser cette voie pour python. ", "", "Guido van Rossum a expos\u00e9 [son avis sur cette proposition](https://mail.python.org/pipermail/python-ideas/2014-August/028618.html); il semble qu'on puisse s'attendre dans le futur (mais dans le cadre de python-3) \u00e0 avoir la possibilit\u00e9 (optionnelle) d'annoter le code d'une fonction avec des informations de type. On pourrait alors par exemple utiliser un outil comme `mypy` pour calculer de telles annotations."]}]