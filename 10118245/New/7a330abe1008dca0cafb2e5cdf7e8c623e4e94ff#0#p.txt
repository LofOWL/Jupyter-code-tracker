[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Expressions r\u00e9guli\u00e8res"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 2, "lines": ["Le langage perl avait \u00e9t\u00e9 le premier \u00e0 populariser l'utilisation des expressions r\u00e9guli\u00e8res, en en faisant un \"citoyen de premi\u00e8re classe\" dans le langage (c'est-\u00e0-dire support\u00e9 nativement dans le langage, et non au travers d'une librairie).\n", "\n", "En python, les expressions r\u00e9guli\u00e8res sont disponibles de mani\u00e8re plus traditionnelle, via le module `re` de la librairie standard, dont nous allons dire quelques mots."]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 5, "lines": ["Avertissement"]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 6, "lines": ["Un exemple simple"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Je vous conseille d'avoir sous la main la [documentation du module `re`](https://docs.python.org/2/library/re.html) pendant que vous lisez ce compl\u00e9ment."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["On peut chercher toutes les mots se terminant par a ou e dans une ligne en faisant&nbsp;:"]}, {"block": 7, "type": "markdown", "linesLength": 6, "startIndex": 9, "lines": ["Ce code permer de chercher dans la cha\u00eene `l1` toutes (`findall`) les occurrences de l'expression r\u00e9guli\u00e8re, qui ici est le *raw-string* c'est-\u00e0-dire la cha\u00eene\n", "\n", "    `r\"\\w+[ae][^\\w]\"`. \n", "    \n", "Nous verrons tout \u00e0 l'heure comment fabriquer des expressions r\u00e9guli\u00e8res plus en d\u00e9tail, mais pour d\u00e9mystifier au moins celle-ci&nbsp;:\n", " * `\\w+` : il nous faut trouver une sous-cha\u00eene qui commence par un nombre quelconque, mais au moins \u00e9gal \u00e0 1, de "]}]