[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Tris de listes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Python fournit une m\u00e9thode standard pour trier une liste, qui s'appelle, sans grande surprise, `sort`. "]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Utilisation basique"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Voyons comment se comporte `sort` sur un exemple simple."]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 6, "lines": ["liste = [8, 7, 4, 3, 2, 9, 1, 5, 6]\n", "print('avant tri', liste)\n", "liste.sort()\n", "print('apres tri', liste)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["On retrouve ici, avec l'instruction `liste.sort()` un cas d'appel de m\u00e9thode (ici `sort`) sur un objet (ici `liste`), comme on l'avait vu dans la vid\u00e9o sur la notion d'objet."]}, {"block": 8, "type": "markdown", "linesLength": 5, "startIndex": 11, "lines": ["La premi\u00e8re chose \u00e0 remarquer est que la liste d'entr\u00e9e a \u00e9t\u00e9 modifi\u00e9e, on dit \"en place\", ou encore \"par effet de bord\".\n", "\n", "On aurait pu imaginer que la liste d'entr\u00e9e soit rest\u00e9e inchang\u00e9e, et que la m\u00e9thode de tri renvoie une copie tri\u00e9e de la liste, ce n'est pas le choix qui a \u00e9t\u00e9 fait.\n", "\n", "De cette fa\u00e7on, c'est \u00e0 l'utilisateur de la m\u00e9thode de r\u00e9aliser au pr\u00e9alable une copie de la liste initiale si c'est n\u00e9cessaire dans son cas d'usage. On \u00e9vite ainsi d'imposer une op\u00e9ration de copie, qui peut \u00eatre co\u00fbteuse en m\u00e9moire, lorsque ce n'est pas utile."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["### Tri d\u00e9croissant"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["On remarque aussi que la liste est tri\u00e9e par ordre croissant. Si vous souhaitez au contraire l'ordre d\u00e9croissant, vous pouvez le faire comme ceci:"]}, {"block": 11, "type": "code", "linesLength": 4, "startIndex": 18, "lines": ["liste = [8, 7, 4, 3, 2, 9, 1, 5, 6]\n", "print('avant tri', liste)\n", "liste.sort(reverse=True)\n", "print('apres tri d\u00e9croissant', liste)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Nous n'avons pas encore vu \u00e0 quoi correspond cette formule `reverse=True` dans l'appel \u00e0 la m\u00e9thode - ceci sera approfondi dans le chapitre sur les appels de fonction - mais dans l'imm\u00e9diat vous pouvez utiliser cette technique telle quelle."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["### Cha\u00eenes de caract\u00e8res"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Cette technique fonctionne tr\u00e8s bien sur tous les types num\u00e9riques (enfin, \u00e0 l'exception des complexes; en guise d'exercice: pourquoi ?), ainsi que sur les cha\u00eenes de caract\u00e8res:"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["liste = ['spam', 'egg', 'bacon', 'beef']\n", "liste.sort()\n", "print('apr\u00e8s tri', liste)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Comme on s'y attend, il s'agit cette fois d'un **tri lexicographique**, d\u00e9riv\u00e9 de l'ordre total sur les caract\u00e8res. En gros, c'est l'ordre du dictionnaire. Il faut souligner toutefois, pour les personnes n'ayant jamais \u00e9t\u00e9 expos\u00e9es \u00e0 l'informatique, que cet ordre, quoique d\u00e9terministe, est arbitraire en dehors des lettres de l'alphabet."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Ainsi par exemple:"]}, {"block": 18, "type": "code", "linesLength": 3, "startIndex": 30, "lines": ["# deux caract\u00e8res minuscules se comparent \n", "# comme on s'y attend\n", "'a' < 'z'"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Bon; mais par contre:"]}, {"block": 20, "type": "code", "linesLength": 3, "startIndex": 34, "lines": ["# si l'un est en minuscule et l'autre en majuscule, \n", "# ce n'est plus le cas\n", "'Z' < 'a'"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Ce qui \u00e0 son tour explique ceci:"]}, {"block": 22, "type": "code", "linesLength": 4, "startIndex": 38, "lines": ["# la cons\u00e9quence de 'Z' < 'a', c'est que\n", "liste = ['abc', 'Zoo']\n", "liste.sort()\n", "print(liste)"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Et lorsque les chaines contiennent des espaces ou autres ponctuations, le r\u00e9sultat du tri peut para\u00eetre surprenant:"]}, {"block": 24, "type": "code", "linesLength": 6, "startIndex": 43, "lines": ["# attention ici notre premiere chaine commence par un espace\n", "# et le caract\u00e8re 'Espace' est plus petit \n", "# que tous les autres caract\u00e8res imprimables\n", "liste = [' zoo', 'ane']\n", "liste.sort()\n", "print(liste)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["### \u00c0 suivre"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Il est possible de d\u00e9finir soi-m\u00eame le crit\u00e8re \u00e0 utiliser pour trier une liste, et nous verrons cela tr\u00e8s bient\u00f4t une fois que nous aurons introduit la notion de fonction."]}]