[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Modes d'ex\u00e9cution"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Nous avons donc \u00e0 notre disposition plusieurs fa\u00e7ons d'ex\u00e9cuter un programme python. Nous allons les \u00e9tudier plus en d\u00e9tail: \n"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 3, "lines": ["| Quoi            | Avec quel outil                |\n", "|-----------------|--------------------------------|\n", "| ligne \u00e0 ligne   | avec IDLE ou python interactif |\n", "| fichier complet | `python3 <fichier>.py`                  |\n", "| par fragments   | dans un notebook               |"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 8, "lines": ["Pour cela nous allons voir le comportement d'un tout petit programme python lorsqu'on l'ex\u00e9cute sous ces trois environnements.\n", "\n", "L'objectif de cet exercice est de vous convaincre que - heureusement - les trois environnements se comportent de la m\u00eame fa\u00e7on, avec toutefois une petite diff\u00e9rence quant au niveau de d\u00e9tail de ce qui se trouve imprim\u00e9."]}, {"block": 5, "type": "markdown", "linesLength": 5, "startIndex": 11, "lines": ["Essentiellement, lorsqu'on utilise l'interpr\u00e9teur en mode interactif - ou sous IDLE - \u00e0 chaque fois que l'on tape une ligne, le r\u00e9sultat est **calcul\u00e9** (on dit aussi **\u00e9valu\u00e9**) **et imprim\u00e9**\n", "\n", "Par contre lorsqu'on \u00e9crit tout un programme, on ne peut plus imprimer le r\u00e9sultat de toutes les lignes, cela produirait un flot d'impression beaucoup trop important. \n", "\n", "Enfin en ce qui concerne le notebook, le comportement est un peu hybride entre les deux, en ce sens que seul le **dernier r\u00e9sultat** de la cellule est imprim\u00e9. "]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["### L'interpr\u00e9teur python interactif"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Le programme choisi est tr\u00e8s simple, c'est le suivant"]}, {"block": 8, "type": "markdown", "linesLength": 5, "startIndex": 18, "lines": ["```\n", "10 * 10\n", "20 * 20\n", "30 * 30\n", "```"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Voici comment se comporte l'interpr\u00e9teur interactif quand on lui soumet ces instructions"]}, {"block": 10, "type": "markdown", "linesLength": 14, "startIndex": 24, "lines": ["```\n", "$ python3\n", "Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)\n", "[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\n", "Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n", ">>> 10 * 10\n", "100\n", ">>> 20 * 20\n", "400\n", ">>> 30 * 30\n", "900\n", ">>> exit()\n", "$\n", "```"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 38, "lines": ["Notez que pour terminer la session, il nous faut \"sortir\" de l'interpr\u00e9teur en tapant `exit()`\n", "\n", "On peut aussi taper `Control-D` sous linux ou MacOS."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["Comme on le voit ici, l'interpr\u00e9teur imprime **le r\u00e9sultat de chaque ligne**. On voit bien appara\u00eetre toutes les valeurs calcul\u00e9es, 100, 400, puis enfin 900."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["### Sous forme de programme constitu\u00e9"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["Voyons \u00e0 pr\u00e9sent ce que donne cette m\u00eame s\u00e9quence de calculs dans un programme complet. Pour cela il nous faut tout d'abord fabriquer un fichier, que la tradition veut avec un suffixe en `.py`, en utilisant par exemple un \u00e9diteur de fichier. Le r\u00e9sultat doit ressembler \u00e0 ceci:"]}, {"block": 15, "type": "markdown", "linesLength": 7, "startIndex": 44, "lines": ["```\n", "$ cat foo.py\n", "10 * 10\n", "20 * 20\n", "30 * 30\n", "$ \n", "```"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Ex\u00e9cutons \u00e0 pr\u00e9sent ce programme:"]}, {"block": 17, "type": "markdown", "linesLength": 4, "startIndex": 52, "lines": ["```\n", "$ python foo.py\n", "$\n", "```"]}, {"block": 18, "type": "markdown", "linesLength": 5, "startIndex": 56, "lines": ["On constate donc que ce programme **ne fait rien!**. En tous cas selon toute apparence. \n", "\n", "Ce qui se passe en r\u00e9alit\u00e9, c'est que les 3 valeurs 100, 400 et 900 sont bien calcul\u00e9es, mais comme aucune instruction `print` n'est pr\u00e9sente, rien n'est imprim\u00e9 et le programme se termine sans signe apparent d'avoir r\u00e9ellement fonctionn\u00e9.\n", "\n", "Ce comportement peut para\u00eetre un peu d\u00e9routant au d\u00e9but, mais comme nous l'avons mentionn\u00e9 c'est tout \u00e0 fait d\u00e9lib\u00e9r\u00e9. Un programme fonctionnel faisant facilement plusieurs milliers de lignes, voire beaucoup plus, il ne serait pas du tout r\u00e9aliste que chaque ligne fasse l'objet d'une impression automatique, comme c'est le cas en mode interactif."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["### Dans un notebook"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["Voici \u00e0 pr\u00e9sent le m\u00eame programme dans un notebook"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 63, "lines": ["10 * 10\n", "20 * 20\n", "30 * 30"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["Lorsqu'on ex\u00e9cute cette cellule (rappel : s\u00e9lectionner la cellule, et utiliser le bouton en forme de fl\u00eache vers la droite, ou entrer **\"Shift+Enter\"** au clavier), on obtient une seule valeur dans la rubrique 'Out', 900, qui correspond **au r\u00e9sultat de la derni\u00e8re ligne.**"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["### Utiliser `print`"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["Ainsi pour afficher un r\u00e9sultat interm\u00e9diaire, on utilise l'instruction `print`. Nous verrons cette instruction en d\u00e9tail dans les semaines qui viennent, mais en guise d'introduction disons seulement que c'est une fonction comme les autres en python-3:"]}, {"block": 25, "type": "code", "linesLength": 4, "startIndex": 69, "lines": ["a = 10\n", "b = 20\n", "\n", "print(a, b)"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["On peut naturellement m\u00e9langer des objets de plusieurs types, et donc m\u00e9langer des strings et des nombres pour obtenir un r\u00e9sultat un peu plus lisible; en effet lorsque le programme devient gros, il est important de savoir \u00e0 quoi correspond une ligne dans le flot de toutes les impressions. Aussi on pr\u00e9f\u00e8rera quelque chose comme:"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["print(\"a=\", a, \"et b=\", b)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["Une pratique courante consiste d'ailleurs \u00e0 utiliser les commentaires pour laisser dans le code les instructions `print` qui correspondent \u00e0 du debug (c'est-\u00e0-dire qui ont pu \u00eatre utiles lors de la mise au point et qu'on veut pouvoir r\u00e9activer rapidement)."]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["### Utiliser `print` pour \"sous-titrer\" une affectation"]}, {"block": 30, "type": "markdown", "linesLength": 3, "startIndex": 77, "lines": ["Remarquons enfin le fait que l'affectation \u00e0 une variable ne retourne aucun r\u00e9sultat. \n", "\n", "C'est \u00e0 dire en pratique que si on \u00e9crit"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 80, "lines": ["a = 100"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 81, "lines": ["m\u00eame une fois l'expression \u00e9valu\u00e9e par l'interpr\u00e9teur, aucune ligne `Out[]` n'est ajout\u00e9e."]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["C'est pourquoi il nous arrivera parfois, et notamment lorsque l'expression est complexe, pour rendre plus explicite la valeur qui vient d'\u00eatre affect\u00e9e, d'\u00e9crire alors plut\u00f4t"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["a = 100 ; print(a)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["Notez bien que cette technique est uniquement p\u00e9dagogique et n'a absolument aucun autre int\u00e9r\u00eat dans la pratique, il n'est **pas recommand\u00e9** de l'utiliser en dehors de ce contexte."]}]