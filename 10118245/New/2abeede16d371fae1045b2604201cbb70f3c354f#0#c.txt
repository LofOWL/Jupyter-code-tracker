[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Programmation fonctionnelle"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 2, "type": "markdown", "linesLength": 7, "startIndex": 2, "lines": ["On vous demande d'\u00e9crire une fonction `numbers` qui prend en argument une liste d'entiers, et qui retourne un tuple contenant\n", " * la somme\n", " * le produit\n", " * le minimum\n", " * le maximum\n", "\n", "des \u00e9l\u00e9ments de la liste"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 9, "lines": ["Exercice - niveau avanc\u00e9"]}, {"block": 4, "type": "markdown", "linesLength": 9, "startIndex": 10, "lines": ["\u00c0 pr\u00e9sent nous allons \u00e9crire une version tr\u00e8s simplifi\u00e9e de l'outil qui est utilis\u00e9 dans ce cours pour corriger les exercices. Vous remarquerez que les fonctions de correction, comme par exemple `correction_numbers` ci-dessus, prennent en argument la fonction qu'il est question de corriger.\n", "\n", "On vous demande d'\u00e9crire une fonction `validation` qui prend en argument \n", " * deux fonctions `f` et `g`; imaginez ez que l'une d'entre elles fonctionne et qu'on cherche \u00e0 valider l'autre; dans cette version simplifi\u00e9e toutes les fonctions acceptent exactement un argument\n", " * une liste d'entr\u00e9es `entrees`; vous pouvez supposer que chacune de ces entr\u00e9es est dans le domaine de `f` et de `g` (dit autrement, on peut appeler `f` et `g` sur chacune des entr\u00e9es sans craindre qu'une exception soit lev\u00e9e;\n", "\n", "Le r\u00e9sultat attendu pour le retour de `validation` est une liste qui contient autant de bool\u00e9ens que d'\u00e9l\u00e9ments dans entr\u00e9es, chacun indiquant si avec l'entr\u00e9e correspondante on a pu v\u00e9rifier que `f(entree) == g(entree)`.\n", "\n", "Dans cette premi\u00e8re version de l'exercice vous pouvez enfin supposer que les entr\u00e9es ne sont pas modifi\u00e9es par `f` ou `g`. "]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 19, "lines": ["Pour information:\n", " * `factorial` correspond \u00e0 `math.factorial`\n", " * `fact` et `broken_fact` sont des fonctions impl\u00e9ment\u00e9es par nos soins, la prem\u00e8re est correcte alors que la seconde retourne 0 au lieu de 1 pour l'entr\u00e9e 0."]}]