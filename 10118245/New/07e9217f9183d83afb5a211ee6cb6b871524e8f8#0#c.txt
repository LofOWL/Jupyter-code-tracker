[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# `try` \u2026 `else` \u2026 `finally`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 7, "lines": ["L'instruction `try` est g\u00e9n\u00e9ralement assortie d'une une ou plusieurs clauses `except`, comme on l'a vu dans la vid\u00e9o.\n", "\n", "Sachez que l'on peut aussi utiliser - apr\u00e8s toutes les clauses `except`\u00a0:\n", "* une clause `else`, qui va \u00eatre ex\u00e9cut\u00e9e si aucune exception n'est attrap\u00e9e\u00a0;\n", "* et/ou une clause `finally` qui sera alors ex\u00e9cut\u00e9e quoi qu'il arrive."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Voyons cela sur des exemples."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### `finally`"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 14, "lines": ["C'est sans doute `finally` qui est la plus utile de ces deux clauses, car elle permet de faire un nettoyage **dans tous les cas de figure** - de ce point de vue, cela rappelle un peu les *context managers*.\n", "\n", "Et par exemple, comme avec les *context managers*, une fonction peut faire des choses m\u00eame apr\u00e8s un `return`."]}, {"block": 7, "type": "code", "linesLength": 9, "startIndex": 17, "lines": ["# une fonction qui fait des choses apr\u00e8s un return\n", "def return_with_finally(number):\n", "    try:\n", "        return 1/number\n", "    except ZeroDivisionError as e:\n", "        print(f\"OOPS, {type(e)}, {e}\")\n", "        return(\"zero-divide\")\n", "    finally:\n", "        print(\"on passe ici m\u00eame si on a vu un return\")"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 26, "lines": ["# sans exception\n", "return_with_finally(1)"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["# avec exception\n", "return_with_finally(0)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["### `else`"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["La logique ici est assez similaire, sauf que le code du `else` n'est ex\u00e9cut\u00e9e que dans le cas o\u00f9 aucune exception n'est attrap\u00e9e."]}, {"block": 12, "type": "markdown", "linesLength": 5, "startIndex": 32, "lines": ["En premi\u00e8re approximation, on pourrait penser que c'est \u00e9quivalent de mettre du code dans la clause `else` ou \u00e0 la fin de la clause `try`. En fait il y a une diff\u00e9rence subtile\u00a0:\n", "\n", "> *The use of the `else` clause is better than adding additional code to the `try` clause because it avoids accidentally catching an exception that wasn\u2019t raised by the code being protected by the `try` \u2026 `except` statement.*\n", "\n", "Dit autrement, si le code dans la clause `else` l\u00e8ve une exception, celle-ci ne **sera pas attrap\u00e9e** par le `try` courant, et sera donc propag\u00e9e."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Voici un exemple rapide, en pratique on rencontre assez peu souvent une clause `else` dans un `try`\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 9, "startIndex": 38, "lines": ["# pour montrer la clause else dans un usage banal\n", "def function_with_else(number):\n", "    try:\n", "        x = 1/number\n", "    except ZeroDivisionError as e:\n", "        print(f\"OOPS, {type(e)}, {e}\")\n", "    else:\n", "        print(\"on passe ici seulement avec un nombre non nul\")\n", "    return 'something else'"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 47, "lines": ["# sans exception\n", "function_with_else(1)"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["# avec exception\n", "function_with_else(0)"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Remarquez que `else` ne pr\u00e9sente pas cette particularit\u00e9 de \"traverser\" le `return`, que l'on a vue avec `finally`\u00a0:"]}, {"block": 18, "type": "code", "linesLength": 9, "startIndex": 52, "lines": ["# la clause else ne traverse pas les return\n", "def return_with_else(number):\n", "    try:\n", "        return 1/number\n", "    except ZeroDivisionError as e:\n", "        print(f\"OOPS, {type(e)}, {e}\")\n", "        return(\"zero-divide\")\n", "    else:\n", "        print(\"on ne passe jamais ici \u00e0 cause des return\")"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 61, "lines": ["# sans exception\n", "return_with_else(1)"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 63, "lines": ["# avec exception\n", "return_with_else(0)"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["### Pour en savoir plus"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["Voyez [le tutorial sur les exceptions](https://docs.python.org/3/tutorial/errors.html#handling-exceptions) dans la documentation officelle."]}]