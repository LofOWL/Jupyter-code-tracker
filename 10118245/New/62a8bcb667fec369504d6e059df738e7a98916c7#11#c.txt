[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Fichiers syst\u00e8mes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Dans ce compl\u00e9ment, nous allons voir comment un programme Python interagit avec ce qu'il est convenu d'appeler le syst\u00e8me d'entr\u00e9es-sorties standard du syst\u00e8me d'exploitation."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Introduction"]}, {"block": 5, "type": "markdown", "linesLength": 8, "startIndex": 9, "lines": ["Dans un ordinateur, le syst\u00e8me d'exploitation (Windows, Linux, macOS, etc.) comprend un noyau (*kernel*) qui est un logiciel qui a l'exclusivit\u00e9  pour interagir physiquement avec le mat\u00e9riel (processeur(s), m\u00e9moire, disque(s), p\u00e9riph\u00e9riques, etc.)\u00a0; il offre aux programmes utilisateur (*userspace*) des abstractions pour interagir avec ce mat\u00e9riel.\n", "\n", "La notion de fichier, telle qu'on l'a vue dans la vid\u00e9o, correspond \u00e0 une de ces abstractions\u00a0; elle repose principalement sur les quatre op\u00e9rations \u00e9l\u00e9mentaires\u00a0suivantes\u00a0:\n", "\n", " * `open`\u00a0;\n", " * `close`\u00a0;\n", " * `read`\u00a0;\n", " * `write`."]}, {"block": 6, "type": "markdown", "linesLength": 7, "startIndex": 17, "lines": ["Parmi les autres conventions d'interaction entre le syst\u00e8me (pour \u00eatre pr\u00e9cis\u00a0: le [*shell*](http://fr.wikipedia.org/wiki/Interface_syst\u00e8me)) et une application, il y a les notions de\u00a0:\n", "\n", " * entr\u00e9e standard (*standard input*, en abr\u00e9g\u00e9 `stdin`)\u00a0;\n", " * sortie standard (*standard output*, en abr\u00e9g\u00e9 `stdout`)\u00a0;\n", " * erreur standard (*standard error*, en abr\u00e9g\u00e9 `stderr`).\n", "\n", "Ceci est principalement pertinent dans le contexte d'un terminal. L'id\u00e9e c'est que l'on a envie de pouvoir [*rediriger* les entr\u00e9es-sorties](http://en.wikipedia.org/wiki/Redirection_%28computing%29) d'un programme sans avoir \u00e0 le modifier. De la sorte, on peut \u00e9galement *cha\u00eener* des traitements [\u00e0 l'aide de *pipes*](http://en.wikipedia.org/wiki/Redirection_%28computing%29#Piping), sans avoir besoin de sauver les r\u00e9sultats interm\u00e9diaires sur disque."]}, {"block": 7, "type": "markdown", "linesLength": 7, "startIndex": 24, "lines": ["Ainsi par exemple lorsque l'on \u00e9crit\u00a0:\n", "\n", "```\n", "    $ monprogramme < fichier_entree > fichier_sortie\n", "```\n", "\n", "Les deux fichiers en question sont ouverts par le *shell*, et pass\u00e9s \u00e0 `monprogramme` - que celui-ci soit \u00e9crit en C, en Python ou en Java - sous la forme des fichiers `stdin` et `stdout` respectivement, et donc **d\u00e9j\u00e0 ouverts**."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["### Le module `sys`"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["L'interpr\u00e9teur Python vous expose ces trois fichiers sous la forme d'attributs du module `sys`\u00a0:"]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 33, "lines": ["import sys\n", "for channel in (sys.stdin, sys.stdout, sys.stderr):\n", "    print(channel)"]}, {"block": 11, "type": "markdown", "linesLength": 7, "startIndex": 36, "lines": ["Dans le contexte du notebook vous pouvez constater que les deux flux de sortie sont impl\u00e9ment\u00e9s comme des classes sp\u00e9cifiques \u00e0 IPython. Si vous ex\u00e9cutez ce code localement dans votre ordinateur vous allez sans doute obtenir quelque chose comme\u00a0:\n", "\n", "```Python\n", "<_io.TextIOWrapper name='<stdin>' mode='r' encoding='UTF-8'>\n", "<_io.TextIOWrapper name='<stdout>' mode='w' encoding='UTF-8'>\n", "<_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>\n", "```"]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 43, "lines": ["On n'a pas extr\u00eamement souvent besoin d'utiliser ces variables en r\u00e8gle g\u00e9n\u00e9rale, mais elles peuvent s'av\u00e9rer utiles dans des contextes sp\u00e9cifiques.\n", "\n", "Par exemple, l'instruction `print` \u00e9crit dans `sys.stdout` (c'est-\u00e0-dire la sortie standard). Et comme `sys.stdout` est une variable (plus exactement `stdout` est un attribut dans le module r\u00e9f\u00e9renc\u00e9 par la variable `sys`) et qu'elle r\u00e9f\u00e9rence un objet fichier, on peut lui faire r\u00e9f\u00e9rencer un autre objet fichier et ainsi rediriger depuis notre programme tous les sorties, qui sinon iraient sur le terminal, vers un fichier de notre choix\u00a0:"]}, {"block": 13, "type": "code", "linesLength": 20, "startIndex": 46, "lines": ["# ici je fais expr\u00e8s de ne pas utiliser un `with`\n", "# car tr\u00e8s souvent les deux redirections apparaissent\n", "# dans des fonctions diff\u00e9rentes\n", "import sys\n", "# on ouvre le fichier destination\n", "autre_stdout = open('ma_sortie.txt', 'w', encoding='utf-8')\n", "# on garde un lien vers le fichier sortie standard\n", "# pour le r\u00e9installer plus tard si besoin.\n", "tmp = sys.stdout\n", "print('sur le terminal')\n", "\n", "# premi\u00e8re redirection\n", "sys.stdout = autre_stdout\n", "print('dans le fichier')\n", "\n", "# on remet comme c'\u00e9tait au d\u00e9but\n", "sys.stdout = tmp\n", "# et alors pour \u00eatre propre on n'oublie pas de fermer\n", "autre_stdout.close()\n", "print('de nouveau sur le terminal')"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 66, "lines": ["# et en effet, dans le fichier on a bien\n", "with open(\"ma_sortie.txt\", encoding='utf-8') as check:\n", "    print(check.read())"]}]