[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["`print` entre python2 et python3"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 2, "lines": ["Ce compl\u00e9ment est destin\u00e9 aux \u00e9tudiants qui s'int\u00e9ressent \u00e0 python3, et qui voudraient d\u00e8s le d\u00e9part prendre l'habitude d'utiliser `print` comme elle existe en python3, c'est-\u00e0-dire comme une fonction.\n", "\n", "N'h\u00e9sitez pas \u00e0 passer ce compl\u00e9ment si vous n'\u00eates pas concern\u00e9 par ce sujet."]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["**Notez toutefois** que les diff\u00e9rences entre python2 et python3 ne se limitent pas \u00e0 `print`. Si vous commencez python aujourd'hui, il peut en effet \u00eatre une bonne id\u00e9e d'utiliser `print` comme une fonction, mais restez conscient que ce cours est sur python2, et qu\u00edl ne suffit pas de mettre des parenth\u00e8ses autour de `print` pour transformer votre code en python3."]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 6, "lines": ["Les comportements de `print`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Apr\u00e8s ce pr\u00e9ambule, sachez que la diff\u00e9rence la plus visible entre python2 et python3 est certainement avec `print`:"]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 8, "lines": ["python2"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["En python2 `print` est une **instruction**"]}, {"block": 8, "type": "raw", "linesLength": 5, "startIndex": 10, "lines": [">>> import sys\n", ">>> sys.version\n", "'2.7.8 (default, Jul 13 2014, 17:11:32) \\n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]'\n", ">>> print \"Hello\",\"World\"\n", "Hello World"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["et comme c'est une instruction on ne peut pas comparer son r\u00e9sultat avec autre chose - ici 0"]}, {"block": 10, "type": "raw", "linesLength": 5, "startIndex": 16, "lines": [">>> 0 == print \"Hello\",\"World\"\n", "  File \"<stdin>\", line 1\n", "    0 == print \"Hello\",\"World\"\n", "             ^\n", "SyntaxError: invalid syntax"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["python3"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Alors qu'en python3 `print` est une **fonction** (et donc une **expression**)"]}, {"block": 13, "type": "raw", "linesLength": 5, "startIndex": 23, "lines": [">>> import sys\n", ">>> sys.version\n", "'3.4.1 (default, Sep 20 2014, 19:44:17) \\n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]'\n", ">>> print (\"Hello\",\"World\")\n", "Hello World"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["et comme toute expression elle retourne une valeur qu'on peut comparer - ici encore avec 0"]}, {"block": 15, "type": "raw", "linesLength": 3, "startIndex": 29, "lines": [">>> 0 == print (\"Hello\",\"World\")\n", "Hello World\n", "False"]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 32, "lines": ["Compatibilit\u00e9 avec `__future__`"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Il existe en python2 une couche de compatibilit\u00e9, le module `__future__`, dont le but est de gommer les diff\u00e9rences entre les deux versions. Ainsi si vous le souhaitez vous pouvez \u00e9crire du code python2 qui \"voit\" `print` comme une fonction en important ceci"]}, {"block": 18, "type": "raw", "linesLength": 1, "startIndex": 34, "lines": ["from __future__ import print_function"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Apr\u00e8s quoi vous pouver utilisez `print` comme si vous \u00e9criviez du python3"]}, {"block": 20, "type": "raw", "linesLength": 8, "startIndex": 36, "lines": [">>> import sys\n", ">>> sys.version\n", "'2.7.8 (default, Jul 13 2014, 17:11:32) \\n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]'\n", ">>>\n", ">>> from __future__ import print_function\n", ">>>\n", ">>> print (\"Hello\",\"World\")\n", "Hello World"]}, {"block": 21, "type": "heading", "linesLength": 1, "startIndex": 44, "lines": ["Remarque"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Si vous utilisez python2 et que **vous ne mentionnez pas cet import**, vous pouvez avoir l'**impression** qu'il est inutile:"]}, {"block": 23, "type": "raw", "linesLength": 6, "startIndex": 46, "lines": [">>> import sys\n", ">>> sys.version\n", "'2.7.8 (default, Jul 13 2014, 17:11:32) \\n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]'\n", ">>>\n", ">>> print (\"Hello\")\n", "Hello"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["En fait ce qui se passe ici, c'est que les parenth\u00e8ses sont consid\u00e9r\u00e9es dans leur r\u00f4le habituel de groupement dans les expressions; cela rejoint la discussion que l'on aura sur les tuples; en fait les parenth\u00e8ses ne jouent aucun r\u00f4le ici, exactement comme dans"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["Si bien qu'avec plusieurs arguments - plus exactement avec l'illusion d'appeler `print` avec plusieurs arguments:"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["les parenth\u00e8ses pr\u00e9sentes dans la sortie vous indiquent qu'en fait on a contruit un objet qui est un tuple, et qu'on l'a pass\u00e9 \u00e0 l'**instruction** `print`; bref, on ne peut pas utiliser `print` dans une expression"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["Une fois l'import charg\u00e9, tout fonctionne vraiment comme en python3"]}]