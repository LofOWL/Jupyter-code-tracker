[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# \u00c9cueils classiques"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 2, "lines": ["import asyncio"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## \u00c9cueil #1 :  fonction coroutine *vs* coroutine"]}, {"block": 4, "type": "code", "linesLength": 4, "startIndex": 4, "lines": ["# une fonction coroutine\n", "async def foo(delay):\n", "    await asyncio.sleep(1)\n", "    print(\"foo\")"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 8, "lines": ["# renvoie un objet coroutine\n", "# si on l'appelle normalement\n", "# il ne se passe rien\n", "foo(4)"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 12, "lines": ["# c'est exactement comme \n", "# une fonction g\u00e9n\u00e9ratrice\n", "def squares(n):\n", "    for i in range(n):\n", "        print(i)\n", "        yield i**2"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 18, "lines": ["# qui retourne un\n", "# it\u00e9rateur, et l\u00e0 encore\n", "# il ne se passe rien\n", "squares(4)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["### tous les sc\u00e9narios"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["def synchro():\n", "    pass"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["async def asynchro():\n", "    pass"]}, {"block": 11, "type": "code", "linesLength": 5, "startIndex": 27, "lines": ["def foo(): \n", "    synchro()        # 1 # OK\n", "    asynchro()       # 2 # ** ATTENTION **\n", "    await synchro()  # 3 # SyntaxError\n", "    await asynchro   # 4 # SyntaxError"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 32, "lines": ["async def afoo():\n", "    synchro()        # 5 # OK\n", "    await asynchro() # 6 # OK\n", "    asynchro()       # 7 # ** ATTENTION **\n", "    await synchro()  # 8 # ** ATTENTION **"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["### cas n\u00b02"]}, {"block": 14, "type": "markdown", "linesLength": 2, "startIndex": 38, "lines": ["* une fonction appelle une coroutine sans `await`\n", "* \u27a0 avertissement "]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["!cat calls2.py"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["!python calls2.py"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["### cas n\u00b07"]}, {"block": 18, "type": "markdown", "linesLength": 2, "startIndex": 43, "lines": ["* une coroutine appelle une autre coroutine sans `await`\n", "* idem : avertissement"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["# avec until_complete\n", "!cat calls7.py"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["!python calls7.py"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["# Cas n\u00b08"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["async def asynchro():\n", "    await synchro()"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["##### Protocole awaitable"]}, {"block": 24, "type": "markdown", "linesLength": 5, "startIndex": 52, "lines": ["| Instruction | classe d'objets  | protocole | exemple | \n", "|-------------|------------------|-----------|---------|\n", "|   `for`     |   it\u00e9rables      |  `__iter__` | liste, ensemble |\n", "|   `with`    | context managers | `__enter__` & `__exit__` | fichier |\n", "|   `await`   |   awaitables     | `__await__` | objet coroutine |\n"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["async def asynchro():\n", "    await synchro()"]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 59, "lines": ["* ***peut*** \u00eatre l\u00e9gitime - si `synchro()` retourne un awaitable\n", "\n", "* mais en g\u00e9n\u00e9ral, c'est suspect !"]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 62, "lines": ["import inspect\n", "inspect.iscoroutinefunction(synchro)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["inspect.iscoroutinefunction(asynchro)"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["## \u00c9cueil #2 : code trop bloquant"]}, {"block": 30, "type": "code", "linesLength": 5, "startIndex": 66, "lines": ["async def countdown(n, period):\n", "    while n >= 0:\n", "        print('.', end='', flush=True)\n", "        await asyncio.sleep(period)\n", "        n -= 1"]}, {"block": 31, "type": "code", "linesLength": 6, "startIndex": 71, "lines": ["import time\n", "async def compute(n, period):\n", "    for i in range(n):\n", "        # on simule un calcul\n", "        time.sleep(period)\n", "        print('x', end='', flush=True)"]}, {"block": 32, "type": "code", "linesLength": 4, "startIndex": 77, "lines": ["from asynchelpers import reset_loop\n", "reset_loop()\n", "asyncio.get_event_loop().run_until_complete(\n", "    asyncio.gather(countdown(20, .05), compute(20, .05)))"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 81, "lines": ["# Faites respirer votre code"]}, {"block": 34, "type": "code", "linesLength": 6, "startIndex": 82, "lines": ["async def countdown(n, period):\n", "    while n >= 0:\n", "        #print(f\"tick{n}\")\n", "        print('.', end='', flush=True)\n", "        await asyncio.sleep(period)\n", "        n -= 1"]}, {"block": 35, "type": "code", "linesLength": 9, "startIndex": 88, "lines": ["import time\n", "async def compute(wait, n, period):\n", "    await asyncio.sleep(wait)\n", "    for i in range(n):\n", "        # on simule un calcul\n", "        time.sleep(period)\n", "        print('x', end='', flush=True)\n", "        # await None n'est pas valide\n", "        await asyncio.sleep(0)"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 97, "lines": ["reset_loop()\n", "asyncio.get_event_loop().run_until_complete(\n", "    asyncio.gather(countdown(20, .05), compute(.1, 20, .05)))"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["!PYTHONASYNCIODEBUG=1 python3 calls7.py"]}, {"block": 38, "type": "markdown", "linesLength": 3, "startIndex": 101, "lines": ["Voir davantage de recettes de debug ici:\n", "\n", "https://docs.python.org/3/library/asyncio-dev.html#develop-with-asyncio"]}]