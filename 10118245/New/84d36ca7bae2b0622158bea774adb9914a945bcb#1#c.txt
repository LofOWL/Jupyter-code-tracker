[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Compr\u00e9hensions"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercice - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Il vous est demand\u00e9 d'\u00e9crire une fonction `aplatir` qui prend en argument `l_conteneurs` (ou plus g\u00e9n\u00e9ralement un it\u00e9rable de conteneurs), et qui retourne la liste ordonn\u00e9e de tous les \u00e9l\u00e9ment de tous les conteneurs."]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["\u00c0 pr\u00e9sent on attend en argument deux conteneurs (deux it\u00e9rables) `c1` et `c2` de m\u00eame taille et la fonction `alternat` doit construire une liste contenant les \u00e9l\u00e9ments pris alternativement dans `c1` et de `c2`."]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 5, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 6, "type": "markdown", "linesLength": 5, "startIndex": 6, "lines": ["On se donne deux ensembles A et B de tuples de la forme\n", "\n", "    (entier, valeur)\n", "\n", "On vous demande d'\u00e9crire une fonction `intersect` qui retourne l'ensemble des objets `valeur` associ\u00e9s (dans A ou dans B) \u00e0 un entier qui soit pr\u00e9sent dans (un tuple de) A *et* dans B."]}]