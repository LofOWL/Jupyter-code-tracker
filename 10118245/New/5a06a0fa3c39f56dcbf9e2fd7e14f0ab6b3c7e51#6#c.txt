[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Un exemple de classes de la librairie standard"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Le module `time`"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["En semaine 3, lorsque nous avons \u00e9tudi\u00e9 la performance des it\u00e9rateurs, nous avions introduit le module `time`. Il s'agit d'une interface de tr\u00e8s bas niveau avec l'OS, et en guise de rappel voici comment on peut calculer un d\u00e9lai"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Nous sommes donc ici clairement dans une approche non orient\u00e9e objet; on manipule des types de base"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Et comme on le voit les calculs se font sous une forme plus ou moins claire ou lisible."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Pour les rendre lisible on utilise des conversions plus ou moins explicites, comme"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["---"]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 8, "lines": ["Le module datetime"]}, {"block": 9, "type": "markdown", "linesLength": 5, "startIndex": 9, "lines": ["Voyons \u00e0 pr\u00e9sent, par comparaison, comment ce genre de calculs se pr\u00e9sente lorsqu'on utilise la programmation par objets.\n", "\n", "Le [module `datetime`](https://docs.python.org/2/library/datetime.html) expose un certain nombre de classes, que nous illustrer bri\u00e8vement avec les classes `datetime` (qui mod\u00e9lise la date et l'heure d'un instant) et `timedelta` (qui mod\u00e9lise une dur\u00e9e).\n", "\n", "La premi\u00e8re remarque qu'on peut faire, c'est qu'avec le module `time` on manipulait un flottant pour repr\u00e9senter ces deux sortes d'objet (instant et dur\u00e9e); avec deux classes diff\u00e9rentes notre code va \u00eatre plus clair quant \u00e0 ce qui est r\u00e9ellement repr\u00e9sent\u00e9."]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Le code ci-dessus s'\u00e9crirait alors, en utilisant le module `datetime`"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 15, "lines": ["Vous remarquez que c'est d\u00e9j\u00e0 un peu plus clair.\n", "\n", "Voyez aussi qu'on n'a d\u00e9j\u00e0 moins besoin de s'escrimer pour en avoir un aper\u00e7u lisible"]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 18, "lines": ["Conclusion"]}, {"block": 13, "type": "markdown", "linesLength": 5, "startIndex": 19, "lines": ["Une partie des inconv\u00e9nients du module `time` vient certainement du parti-pris de l'efficacit\u00e9. De plus c'est un module tr\u00e8s ancien, mais auquel on ne peut gu\u00e8re toucher pour des raisons de compatibilit\u00e9 ascendante.\n", "\n", "Quoi qu'il en soit, ceci vous procure tout de m\u00eame un premier exemple de classes expos\u00e9es par la librairie standard, et vous montre, nous l'esp\u00e9rons, certains des avantages de la programmation oerient\u00e9e objet en g\u00e9n\u00e9ral, et des classes de python en particulier.\n", "\n", "Si vous devez manipuler des dates ou des heures, le module `datetime` constitue tr\u00e8s certainement un bon candidat; voyez la [documentation compl\u00e8te du module](https://docs.python.org/2/library/datetime.html) pour plus de pr\u00e9cisions sur ce module."]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 24, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 25, "lines": ["Fuseaux horaires et temps local"]}, {"block": 16, "type": "markdown", "linesLength": 5, "startIndex": 26, "lines": ["Le temps nous manque pour traiter ce sujet dans toute sa profondeur.\n", "\n", "En substance c'est un sujet assez voisin, finalement, de celui des accents, en ce sens que lors d'\u00e9changes d'informations de type *timestamp* entre deux ordinateurs, il faut \u00e9changer d'une part une valeur (l'heure et la date), et d'autre part le r\u00e9f\u00e9rentiel (s'agit-il de temps UTC, ou bien de l'heure dans un fuseau horaire, et si oui lequel).\n", "\n", "La complexit\u00e9 est tout de m\u00eame moindre que dans le cas des accents; on s'en sort en g\u00e9n\u00e9ral en convenant d'\u00e9changer syst\u00e9matiquement des heures UTC. Par contre il existe une r\u00e9elle diversit\u00e9 quant au format utilis\u00e9 pour \u00e9changer ce type d'information, et cela reste une source d'erreurs assez fr\u00e9quente."]}, {"block": 17, "type": "heading", "linesLength": 1, "startIndex": 31, "lines": ["Classes et *marshalling*"]}, {"block": 18, "type": "markdown", "linesLength": 11, "startIndex": 32, "lines": ["Ceci nous procure une transition pour un sujet beaucoup plus g\u00e9n\u00e9ral.\n", "\n", "Nous avons \u00e9voqu\u00e9, en d\u00e9but de semaine 4, les formats comme JSON pour \u00e9changer les donn\u00e9es entre applications, au travers de fichiers ou d'un r\u00e9seau.\n", "\n", "On a vu par exemple que JSON est un format \"proche des langages\" en ce sens qu'il est capable d'\u00e9changer des objets de base comme des listes ou des dictionnaires, entre plusieurs langages comme JavaScript, python, ruby et autres. EN XML on a davantage de flexibilit\u00e9 puisqu'on peut d\u00e9finir une syntaxe sur les donn\u00e9es \u00e9chang\u00e9es.\n", "\n", "Mais il faut \u00eatre bien lucide sur le fait que, aussi bien pour JSON que pour XML, il n'est **pas  possible** d'\u00e9changer entre applications des **objets** en tant que tel. Ce que nous voulons dire, c'est que ces technologies de *marshalling* prennent bien en charge le *contenu* en termes de donn\u00e9es, mais pas les informations de type, et *a fortiori* pas non plus le code qui appartient \u00e0 la classe.\n", "\n", "On peut toujours, naturellement, s'en sortir en utilisant JSON pour \u00e9changer les donn\u00e9es d'un objet, et en reconstruisant plus ou moins \u00e0 la main les objets \u00e0 l'autre extr\u00e9mit\u00e9 de l'\u00e9change.\n", "\n", "Mais il peut \u00eatre important d'\u00eatre conscient de cette limitation lorsqu'on fait des choix de conception, notamment lorsqu'on est amen\u00e9 \u00e0 choisir entre classe et dictionnaire pour l'impl\u00e9mentation de telle ou telle abstraction."]}]