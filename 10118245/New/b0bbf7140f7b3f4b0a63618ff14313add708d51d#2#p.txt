[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Notebooks interactifs"]}, {"block": 2, "type": "code", "linesLength": 4, "startIndex": 6, "lines": ["%pylab inline\n", "import matplotlib.pyplot as plt\n", "import numpy as np\n", "plt.ion()"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Pour conclure cette s\u00e9rie sur les outils de visualisation, nous allons voir quelques fonctionnalit\u00e9s disponibles uniquement dans l'environnement des notebooks, et qui offrent des possibilit\u00e9s suppl\u00e9mentaires par rapport aux visualisations que l'on a vues jusqu'\u00e0 maintenant."]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 12, "lines": ["Pour commencer et en guise d'exemple, je vous invite \u00e0 consulter un [exemple de notebook publi\u00e9 par la c\u00e9l\u00e8bre revue *Nature*](http://www.nature.com/news/ipython-interactive-demo-7.21492), qui pourra vous donner une id\u00e9e de ce qu'il est possible de faire de cette fa\u00e7on\u00a0; essayez de bien penser \u00e0 cliquer sur `Expand to fullscreen` pour un meilleur confort.\n", "\n", "Je vous signale d'ailleurs que [ce notebook est disponible sur github ici](https://github.com/jupyter/nature-demo)."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### Une visualisation interactive simple\u00a0: `interact`"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Pour refaire de notre cot\u00e9 quelque chose d'analogue, nous allons commencer par animer la fonction sinus, avec un bouton pour r\u00e9gler la fr\u00e9quence. Pour cela nous allons utiliser la fonction `interact`\u00a0; \u00e0 nouveau c'est un utilitaire qui fait partie de l'\u00e9cosyst\u00e8me des notebooks, et plus pr\u00e9cis\u00e9ment du module `ipywidgets`\u00a0:"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["from ipywidgets import interact"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Ce que je fais dans un premier temps, c'est d'\u00e9crire une fonction qui prend en param\u00e8tre la fr\u00e9quence, et qui dessine la fonction sinus sur un intervalle fixe de 0. \u00e0 $4\\pi$\u00a0:"]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 19, "lines": ["def sinus(freq):\n", "    X = np.linspace(0., 4*np.pi, 200)\n", "    Y = np.sin(freq*X)\n", "    plt.plot(X, Y)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["sinus(1)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["sinus(0.5)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Maintenant, plut\u00f4t que de tracer individuellement les courbes une \u00e0 une, j'utilise `interact` qui va m'afficher une r\u00e9glette pour changer le param\u00e8tre `freq`. \u00c7a se pr\u00e9sente comme ceci\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 26, "lines": ["# je change maintenant la taille des visualisations\n", "pylab.rcParams['figure.figsize'] = (12, 4)"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["interact(sinus, freq=(0.5, 10., 0.25));"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["## M\u00e9canisme d'`interact`"]}, {"block": 17, "type": "markdown", "linesLength": 5, "startIndex": 30, "lines": ["La fonction `interact` s'attend \u00e0 recevoir\u00a0:\n", "* en premier argument\u00a0: une fonction `f`\u00a0;\n", "* et ensuite autant d'arguments nomm\u00e9s suppl\u00e9mentaires que de param\u00e8tres attendus par `f`.\n", "\n", "Comme dans mon cas la fonction `sinus` attend un param\u00e8tre nomm\u00e9 `freq`, le deuxi\u00e8me argument de `interact` lui est pass\u00e9 aussi avec le nom `freq`."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["### Les objets `Slider`"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Chacun des arguments \u00e0 `interact` (en plus de la fonction) correspond \u00e0 un objet de type `Slider` (dans la m\u00e9nagerie de `ipywidget`). Ici en passant juste le tuple `(0.5, 10., 0.25)` j'utilise un raccourci pour dire que je veux pouvoir r\u00e9gler le param\u00e8tre `freq` sur une plage allant de `0.5` \u00e0 `10` avec un pas de `0.25`."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Mon premier exemple avec `interact` est en r\u00e9alit\u00e9 \u00e9quivalent \u00e0 ceci\u00a0:"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["from ipywidgets import FloatSlider"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["# exactement \u00e9quivalent \u00e0 la version ci-dessus\n", "interact(sinus, freq=FloatSlider(min=0.5, max=10., step=0.25));"]}, {"block": 23, "type": "markdown", "linesLength": 4, "startIndex": 41, "lines": ["Mais en utilisant la forme bavarde, je peux choisir davantage d'options, comme notamment\u00a0:\n", "\n", "* mettre `continuous_update = False`\u00a0; l'effet de ce r\u00e9glage, c'est que l'on met \u00e0 jour la figure seulement lorsque je l\u00e2che la r\u00e9glette\u00a0; c'est utile lorsque les calculs sont un peu lents, comme ici avec l'infrastructure notebook qui est \u00e0 distance\u00a0;\n", "* mettre `value=1.` pour choisir la valeur initiale\u00a0:\n"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["# exactement \u00e9quivalent \u00e0 la version ci-dessus\n", "interact(sinus, freq=FloatSlider(min=0.5, max=10., step=0.25, value=1., continuous_update=False));"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Plusieurs param\u00e8tres"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Voyons tout de suite un exemple avec deux param\u00e8tres, je vais \u00e9crire maintenant une fonction qui me permet de changer aussi la phase\u00a0:"]}, {"block": 27, "type": "code", "linesLength": 4, "startIndex": 49, "lines": ["def sinus2(freq, phase):\n", "    X = np.linspace(0., 4*np.pi, 200)\n", "    Y = np.sin(freq*(X+phase))\n", "    plt.plot(X, Y)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["Et donc maintenant si je passe \u00e0 `interact` je passe un troisi\u00e8me param\u00e8tre\u00a0:"]}, {"block": 29, "type": "code", "linesLength": 4, "startIndex": 54, "lines": ["interact(sinus2,\n", "         freq=FloatSlider(min=0.5, max=10., step=0.5, continuous_update=False),\n", "         phase=FloatSlider(min=0., max=2*np.pi, step=np.pi/6, continuous_update=False),\n", "        );"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["## Bouche-trou\u00a0: `fixed`"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Si j'ai une fonction qui prend plus de param\u00e8tres que je ne veux montrer de r\u00e9glettes, je peux fixer un des param\u00e8tres  par exemple comme ceci\u00a0:"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["from ipywidgets import fixed"]}, {"block": 33, "type": "code", "linesLength": 6, "startIndex": 61, "lines": ["# avec une fonction \u00e0 deux argument,\n", "# je peux en fixer un, et n'avoir qu'une r\u00e9glette\n", "# pour fixer celui qui est libre\n", "interact(sinus2, freq=fixed(1.),\n", "         phase=FloatSlider(min=0., max=2*np.pi, step=np.pi/6),\n", "        );"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["## Widgets"]}, {"block": 35, "type": "markdown", "linesLength": 8, "startIndex": 68, "lines": ["Il existe toute une famille de widgets, dont `FloatSlider` est l'exemple le plus courant, mais vous pouvez aussi\u00a0:\n", "* cr\u00e9er des radio bouton pour entrer un param\u00e8tre bool\u00e9en\u00a0;\n", "* ou une saisie de texte pour entre un param\u00e8tre de type `str`\u00a0;\n", "* ou une liste \u00e0 choix multiples\u2026\n", "\n", "Bref, vous pouvez cr\u00e9er une mini interface-utilisateur avec des objets graphiques simples choisis dans une palette assez compl\u00e8te pour ce type d'application.\n", "\n", "Voyez [les d\u00e9tails complets sur `readthedocs.io`](http://ipywidgets.readthedocs.io/en/latest/examples/Using%20Interact.html)"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 76, "lines": ["# de m\u00eame qu'un tuple \u00e9tait ci-dessus un raccourci pour un FloatSlider\n", "# une liste ou un dictionnaire est transform\u00e9(e) en un Dropdown\n", "interact(sinus, freq={'rapide': 10., 'moyenne': 1., 'lente': 0.1});"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["Voyez la [liste compl\u00e8te des widgets ici](http://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html).\n"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 80, "lines": ["# Dashboards"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 81, "lines": ["Lorsqu'on a besoin de faire une interface un peu plus soign\u00e9e, on peut cr\u00e9er sa propre disposition de boutons et autres r\u00e9glages."]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["Voici un exemple de dashboard, uniquement pour vous donner une meilleure id\u00e9e, qui pour changer agit sur une visualisation r\u00e9alis\u00e9e avec plotly plut\u00f4t que matplotlib\u00a0:"]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 83, "lines": ["import plotly\n", "plotly.__version__"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 85, "lines": ["import plotly.plotly as py\n", "import plotly.graph_objs as go"]}, {"block": 43, "type": "code", "linesLength": 5, "startIndex": 87, "lines": ["# using plotly in offline mode is a requirement\n", "# in interactive mode - too slow otherwise\n", "import plotly.offline as pyoff\n", "\n", "pyoff.init_notebook_mode()"]}, {"block": 44, "type": "code", "linesLength": 4, "startIndex": 92, "lines": ["# interactive notebook widgets\n", "from ipywidgets import (interactive_output,\n", "                        IntSlider, Dropdown, Layout, HBox, VBox, Text)\n", "from IPython.display import display"]}, {"block": 45, "type": "code", "linesLength": 15, "startIndex": 96, "lines": ["# pas avec matplotlib mais avec pyplot\n", "def sinus4(freq, phase, amplitude, domain):\n", "\n", "    X = np.linspace(0., domain*np.pi, 500)\n", "    Y = amplitude * np.sin(freq*(X+phase))\n", "\n", "    data = [ go.Scatter(x=X, y=Y, mode='lines', name='sinus') ]\n", "    # je fixe l'amplitude \u00e0 10 pour que les animations\n", "    # soient plus parlantes\n", "    layout = go.Layout(\n", "        yaxis = {'range' : [-10, 10]},\n", "        title=\"Exemple de graphique interactif avec dashboard\",\n", "    )\n", "    figure = go.Figure(data = data, layout=layout)\n", "    pyoff.iplot(figure)"]}, {"block": 46, "type": "code", "linesLength": 33, "startIndex": 111, "lines": ["def my_dashboard():\n", "    \"\"\"\n", "    create and display a dashboard\n", "    return a dictionary name->widget suitable for interactive_output\n", "    \"\"\"\n", "    # dashboard pieces as widgets\n", "    l_75 = Layout(width='75%')\n", "    l_50 = Layout(width='50%')\n", "    l_25 = Layout(width='25%')\n", "\n", "    w_freq = Dropdown(options=list(range(1, 10)),\n", "                      value = 1,\n", "                      description = \"fr\u00e9quence\",\n", "                      layout=l_50)\n", "    w_phase = FloatSlider(min=0., max = 2*np.pi, step=np.pi/12,\n", "                          description=\"phase\",\n", "                          value=0., layout=l_75)\n", "    w_amplitude = Dropdown(options={\"micro\" : .1,\n", "                                    \"mini\" : .5,\n", "                                    \"normal\" : 1.,\n", "                                    \"grand\" : 3.,\n", "                                    \"\u00e9norme\" : 10.},\n", "                           value = 3.,\n", "                           description = \"amplitude\",\n", "                           layout = l_25)\n", "    w_domain = IntSlider(min=1, max=10, description=\"dom. n * \u03c0\", layout=l_50)\n", "\n", "    # make up a dashboard\n", "    dashboard = VBox([HBox([w_amplitude, w_phase]),\n", "                      HBox([w_domain, w_freq]),\n", "                     ])\n", "    display(dashboard)\n", "    return dict(freq=w_freq, phase=w_phase, amplitude=w_amplitude, domain=w_domain)"]}, {"block": 47, "type": "markdown", "linesLength": 2, "startIndex": 144, "lines": ["*****\n", "Avec tout ceci en place on peut montrer un dialogue interactif pour changer tous les param\u00e8tres de sinus4."]}, {"block": 48, "type": "code", "linesLength": 4, "startIndex": 146, "lines": ["# interactively call sinus4\n", "# il reste un bug, au d\u00e9but rien ne s'affiche,\n", "# il faut faire bouger au moins un r\u00e9glage\n", "interactive_output(sinus4, my_dashboard())"]}]