[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# L'instruction `if`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### R\u00e9partiteur (1)"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["# on charge l'exercice\n", "from corrections.exo_dispatch import exo_dispatch1"]}, {"block": 5, "type": "markdown", "linesLength": 11, "startIndex": 10, "lines": ["On vous demande d'\u00e9crire une fonction `dispatch1`, qui prend en argument deux entiers `a` et `b`, et qui renvoie selon les cas\u00a0:\n", "\n", "$$\n", "\\begin{array}{c|c|c}\n", "\\ & a\\  pair & a\\ impair \\\\\n", "\\hline\n", "b\\ pair & a^2+b^2 & (a-1)*b\\\\\n", "\\hline\n", "b\\ impair & a*(b-1)& a^2-b^2\\\\\n", "\\end{array}\n", "$$"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["# un petit exemple\n", "exo_dispatch1.example()"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["def dispatch1(a, b):\n", "    \"<votre_code>\""]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# pour v\u00e9rifier votre code\n", "exo_dispatch1.correction(dispatch1)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["## Exercice - niveau basique"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["### R\u00e9partiteur (2)"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["# chargement de l'exercice\n", "from corrections.exo_dispatch import exo_dispatch2"]}, {"block": 12, "type": "markdown", "linesLength": 16, "startIndex": 31, "lines": ["Dans une seconde version de cet exercice, on vous demande d'\u00e9crire une fonction `dispatch2` qui prend en arguments\u00a0:\n", "\n", "* `a` et `b` deux entiers\n", "* `A` et `B` deux ensembles (chacun pouvant \u00eatre mat\u00e9rialis\u00e9 par un ensemble, une liste ou un tuple)\n", "\n", "et qui renvoie selon les cas\u00a0:\n", "\n", "$$\n", "\\begin{array}{c|c|c}\n", "\\ & a \\in A & a\\notin A \\\\\n", "\\hline\n", "b\\in B & a^2+b^2 & (a-1)*b\\\\\n", "\\hline\n", "b\\notin B & a*(b-1)& a^2+b^2\\\\\n", "\\end{array}\n", "$$"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 47, "lines": ["def dispatch2(a, b, A, B):\n", "    \"<votre_code>\""]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["# pour v\u00e9rifier votre code\n", "exo_dispatch2.correction(dispatch2)"]}]