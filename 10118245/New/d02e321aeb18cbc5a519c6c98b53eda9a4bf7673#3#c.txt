[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["## Exercice - niveau interm\u00e9daire"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["# pour charger l'exercice\n", "from corrections.exo_doubler_premier import exo_doubler_premier"]}, {"block": 3, "type": "markdown", "linesLength": 7, "startIndex": 8, "lines": ["On vous demande d'\u00e9crire une fonction qui prend en argument\n", " * une fonction `f`, dont vous savez seulement que le premier argument est num\u00e9rique, et qu'elle ne prend **que des arguments positionnels** (sans valeur par d\u00e9faut)\n", " * un nombre quelconque - mais au moins 1 - d'arguments positionnels `args`, dont on sait qu'ils pourraient \u00eatre pass\u00e9s \u00e0 `f`\n", " \n", "Et on attend en retour le r\u00e9sultat de `f` appliqu\u00e9s \u00e0 tous ces arguments, mais avec le premier d'entre eux multipl\u00e9 par deux.\n", "\n", "Formellement: doubler_premier(f, $x_1$, $x_2$,..., $x_n$) = f($2*x_1$, $x_2$,..., $x_n$)"]}, {"block": 4, "type": "code", "linesLength": 5, "startIndex": 15, "lines": ["# quelques exemples de ce qui est attendu.\n", "# add et mul sont les op\u00e9rateurs binaires du module operator, \n", "# soit l'addition et la multiplication respectivement.\n", "# distance est la fonction de l'exercice pr\u00e9c\u00e9dent.\n", "exo_doubler_premier.example()"]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 20, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction\n", "def doubler_premier(votre, signature):\n", "    return \"votre code\""]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["exo_doubler_premier.correction(doubler_premier)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["## Exercice - niveau interm\u00e9daire"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# Pour charger l'exercice\n", "from corrections.exo_doubler_premier_kwds import exo_doubler_premier_kwds"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 27, "lines": ["Vous devez maintenant \u00e9crire une deuxi\u00e8me version qui peut fonctionner avec une fonction quelconque (elle peut avoir des arguments nomm\u00e9s avec valeurs par d\u00e9faut).\n", "\n", "La fonction `doubler_premier_kwds` que l'on vous demande d'\u00e9crire maintenant prend donc un premier argument `f` qui est une fonction, un second argument positionnel qui est le premier argument de `f` (et donc qu'il faut doubler), et le reste des arguments de f, qui donc, \u00e0 nouveau, peuvent \u00eatre nomm\u00e9s ou non."]}, {"block": 10, "type": "code", "linesLength": 10, "startIndex": 30, "lines": ["# quelques exemples de ce qui est attendu\n", "# avec ces deux fonctions \n", "\n", "def add3(x, y=0, z=0):\n", "    return x + y + z\n", "\n", "def mul3(x=1, y=1, z=1):\n", "    return x * y * z\n", "\n", "exo_doubler_premier_kwds.example()"]}, {"block": 11, "type": "markdown", "linesLength": 5, "startIndex": 40, "lines": ["Vous remarquerez que l'on n'a pas mentionn\u00e9 dans cette liste d'exemples\n", "\n", "    doubler_premier_kwds (muln, x=1, y=1)\n", "   \n", "que l'on ne demande pas de supporter puisqu'il est bien pr\u00e9cis\u00e9 que doubler_premier a deux arguments positionnels."]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 45, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction\n", "def doubler_premier_kwds(votre, signature):\n", "    \"<votre code>\""]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["exo_doubler_premier_kwds.correction(doubler_premier_kwds)"]}]