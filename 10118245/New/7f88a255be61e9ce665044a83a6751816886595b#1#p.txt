[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# coroutines et awaitables"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["# protocole awaitable"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 3, "lines": ["| instruction | classe d'objets  | protocole | exemple | \n", "|-------------|------------------|-----------|---------|\n", "|   `for`     |   it\u00e9rables      |  `__iter__` | liste, ensemble |\n", "|   `with`    | context managers | `__enter__` & `__exit__` | fichier |\n", "|   `await`   |   awaitables     | `__await__` | objet coroutine |"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["# `__await__` renvoie un it\u00e9rateur"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 9, "lines": ["class Awaitable():\n", "    def __await__(self):\n", "        print(\"awaiting\")\n", "        yield 10"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 13, "lines": ["# il nous faut au moins une coroutine\n", "# pour pouvoir faire await\n", "async def main():\n", "    await Awaitable()"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["# l'objet coroutine\n", "coro = main()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["coro.send(None)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["# un peu moins simple "]}, {"block": 10, "type": "code", "linesLength": 7, "startIndex": 21, "lines": ["class Awaitable2():\n", "    def __await__(self):\n", "        print(\"step1\")\n", "        yield 10\n", "        print(\"step2\")\n", "        yield 20\n", "        return \"FINAL\""]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 28, "lines": ["# boilerplate\n", "async def main():\n", "    return await(Awaitable2())"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 31, "lines": ["# l'objet coroutine\n", "coro = main()\n"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["coro.send(None)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["coro.send(None)"]}, {"block": 15, "type": "code", "linesLength": 5, "startIndex": 35, "lines": ["try:\n", "    coro.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["# Plusieurs travaux en m\u00eame temps"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["coro1 = main()"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["coro2 = main()"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["coro1.send(None)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["coro2.send(None)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["coro1.send(None)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["coro2.send(None)"]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 47, "lines": ["try:\n", "    coro1.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 52, "lines": ["try:\n", "    coro2.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["# pile, await et yield"]}, {"block": 26, "type": "code", "linesLength": 10, "startIndex": 58, "lines": ["class AwaitableValue:\n", "    counter = 0\n", "    def __init__(self, value):\n", "        self.value = value\n", "    def __await__(self):\n", "        AwaitableValue.counter += 1\n", "        # redonner la main \u00e0 la boucle\n", "        yield f\"y {self.counter}\"\n", "        # retourn\u00e9 \u00e0 await\n", "        return self.value"]}, {"block": 27, "type": "code", "linesLength": 13, "startIndex": 68, "lines": ["async def w4():\n", "    return await w3() + 1\n", "\n", "async def w3():\n", "    return await w2() + 1\n", "\n", "async def w2():\n", "    return await w1() + await w1()\n", "\n", "async def w1():\n", "    return await AwaitableValue(1)\n", "\n", "coro = w4()"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 81, "lines": ["coro.send(None)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["coro.send(None)"]}, {"block": 30, "type": "code", "linesLength": 5, "startIndex": 83, "lines": ["try:\n", "    coro.send(None)\n", "except Exception as e:\n", "    x = e\n", "    print('OOPS', type(e), e.value)"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["# [animation](single-stack/index.html)"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["# Conclusion"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["### protocole it\u00e9rable"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 91, "lines": ["### m\u00e9thode `send()`"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 92, "lines": ["### li\u00e9e aux `yield` "]}]