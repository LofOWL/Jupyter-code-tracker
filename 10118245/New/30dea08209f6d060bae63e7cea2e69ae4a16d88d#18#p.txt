[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Construction de liste par compr\u00e9hension"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["Ce m\u00e9canisme tr\u00e8s pratique permet de construire simplement une liste \u00e0 partir d'une autre (ou de **tout autre type iterable** en r\u00e9alit\u00e9, mais nous y viendrons).\n", "\n", "Pour l'introduire en deux mots, disons que la compr\u00e9hension de liste est \u00e0 l'instruction `for` ce que l'expression conditionnelle est \u00e0 l'instruction  `if`, c'est-\u00e0-dire qu'il s'agit d'une **expression \u00e0 part enti\u00e8re**."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Cas le plus simple"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Voyons tout de suite un exemple"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["depart = [3, 7, 14, 28]\n", "[x**2 for x in depart]"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Comme vous l'avez sans doute devin\u00e9, le r\u00e9sultat de cette expression est une liste, dont les \u00e9l\u00e9ments sont les r\u00e9sultats de l'expression `x**2` pour `x` prenant toutes les valeurs de `depart`"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["### Restriction \u00e0 certains \u00e9l\u00e9ments"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Il est possible \u00e9galement de ne prendre en compte que certains des \u00e9l\u00e9ments de la liste de d\u00e9part, comme ceci"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["[x**2 for x in depart if x%2 == 0]"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["qui cette fois ne contient que les carr\u00e9s des \u00e9l\u00e9ments pairs de `depart`"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### Autres types"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["On peut fabriquer une compr\u00e9hension \u00e0 partir de tout objet it\u00e9rable, pas forc\u00e9ment une liste, mais le r\u00e9sultat est toujours une liste, comme on le voit sur ces quelques exemples:"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["[ord(x) for x in 'abc']"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["[chr(x) for x in (97, 98, 99)]"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Nous verrons tr\u00e8s bient\u00f4t que des m\u00e9canismes similaires sont disponibles avec les dictionnaires et les ensembles."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["### Imbrications"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["On peut \u00e9galement imbriquer plusieurs niveaux pour ne construire qu'une seule liste, comme par exemple"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["[n + p for n in [2, 4] for p in [10, 20, 30]]"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Bien s\u00fbr on peut aussi restreindre ces compr\u00e9hensions, comme par exemple"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["[n + p for n in [2, 4] for p in [10, 20, 30] if n*p >= 40]"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Observez surtout que le r\u00e9sultat ci-dessus est une liste simple (de profondeur 1), \u00e0 comparer avec "]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["[[n + p for n in [2, 4]] for p in [10, 20, 30]]"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["qui est de profondeur 2, et o\u00f9 les r\u00e9sultats atomiques apparaissent dans un ordre diff\u00e9rent "]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Un moyen mn\u00e9motechnique pour se souvenir dans quel ordre les compr\u00e9hensions imbriqu\u00e9es produisent leur r\u00e9sultat, est de penser \u00e0 la version \"na\u00efve\" du code qui produirait le m\u00eame r\u00e9sultat; dans ce code les clause `for` et `if` apparaissent **dans le m\u00eame ordre** que dans la compr\u00e9hension"]}, {"block": 27, "type": "code", "linesLength": 6, "startIndex": 30, "lines": ["resultat=[]\n", "for n in [2, 4]:\n", "    for p in [10, 20, 30]:\n", "        if n*p >= 40:\n", "            resultat.append(n + p)\n", "resultat"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["### Note sur `map` et `filter`"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Avant que les compr\u00e9hensions ne soient introduites, on utilisait deux fonctions built-in intitul\u00e9es `map` (nom qui provient \u00e0 l'origine de Lisp) et `filter`. Leur usage est \u00e0 pr\u00e9sent d\u00e9conseill\u00e9, car le code est moins lisible. On les trouve encore dans du code existant."]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["Pour donner un aper\u00e7u de ces fonctions, au cas o\u00f9 vous en rencontriez dans du code existant, voici comment on \u00e9crirait"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["[x**2 for x in depart if x%2 == 0]"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["Avec `map` et `filter` cela donnerait"]}, {"block": 34, "type": "code", "linesLength": 7, "startIndex": 42, "lines": ["def pair(x): \n", "    return x%2 == 0\n", "\n", "def carre(x): \n", "    return x**2\n", "\n", "map(carre, filter(pair, depart))"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Ou encore, sur une ligne"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["map(lambda x: x**2, filter(lambda x: x%2 == 0, depart))"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["**Remarque**: l'instruction `lambda` permet permet de d\u00e9finir une fonction, que l'on appelle fonction lambda, \u00e0 la vol\u00e9e et sans la nommer. Nous reviendrons dessus dans les semaines \u00e0 venir. Mais \u00e0 notre avis au moins, les fonctions lambda ont perdu beaucoup de leur int\u00e9r\u00eat depuis, pr\u00e9cis\u00e9ment, l'introduction des compr\u00e9hensions. Aussi nous ne recommandons pas non plus de les utiliser dans du code nouveau."]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["### Pour en savoir plus"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["La [section sur les compr\u00e9hensions de liste](https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions) dans la documentation python"]}]