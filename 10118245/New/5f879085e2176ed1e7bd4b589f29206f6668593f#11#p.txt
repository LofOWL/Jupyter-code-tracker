[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# L'instruction `pass`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Nous avons vu qu'en python les blocs de code sont d\u00e9finis par leur indentation."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Une fonction vide"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Cette convention a une limitation lorsqu'on essaie de d\u00e9finir un bloc vide. Voyons par exemple comment on d\u00e9finirait en C une fonction qui ne fait rien"]}, {"block": 6, "type": "markdown", "linesLength": 2, "startIndex": 10, "lines": ["    /* une fonction C qui ne fait rien */\n", "    void foo () {}"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Comme en python on n'a pas d'accolade pour d\u00e9limiter les blocs de code, il existe une instruction `pass`, qui ne fait rien. \u00c0 l'aide de cette instruction on peut \u00e0 pr\u00e9sent d\u00e9finir une fonction vide comme ceci:"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["# une fonction python qui ne fait rien\n", "def foo():\n", "    pass"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["### Une boucle vide"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Pour prendre un second exemple un peu plus pratique, et pour anticiper un peu sur l'instruction `while` que nous verrons tr\u00e8s bient\u00f4t, voici un exemple d'une boucle vide, c'est \u00e0 dire sans corps, qui permet de \"d\u00e9piler\" dans une liste jusqu'\u00e0 l'obtention d'une certaine valeur:"]}, {"block": 11, "type": "code", "linesLength": 5, "startIndex": 18, "lines": ["liste = list(range(10))\n", "print('avant', liste)\n", "while liste.pop() != 5:\n", "    pass\n", "print('apr\u00e8s', liste)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["On voit qu'ici encore l'instruction `pass` a toute son utilit\u00e9."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["### Un `if` sans `then`"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 26, "lines": ["# on utilise dans ces exemples une condition fausse\n", "condition = False"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Imaginons qu'on parte d'un code hypoth\u00e9tique qui fasse ceci:"]}, {"block": 17, "type": "code", "linesLength": 5, "startIndex": 29, "lines": ["# la version initiale\n", "if condition:\n", "    print(\"non\")\n", "else:\n", "    print(\"bingo\")"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["et que l'on veuille modifier ce code pour simplement supprimer l'impression de `non`. La syntaxe du langage **ne permet pas** de simplement commenter le premier `print`:"]}, {"block": 19, "type": "code", "linesLength": 6, "startIndex": 35, "lines": ["# si on commente le premier print\n", "# la syntaxe devient incorrecte\n", "if condition:\n", "#    print \"non\"\n", "else:\n", "    print \"bingo\""]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["\u00c9videmment ceci pourrait \u00eatre r\u00e9crit autrement en inversant la condition, mais parfois on s'efforce de limiter au maximum l'impact d'une modification sur le code. Dans ce genre de situation on pr\u00e9f\u00e9rera \u00e9crire plut\u00f4t"]}, {"block": 21, "type": "code", "linesLength": 6, "startIndex": 42, "lines": ["# on peut s'en sortir en ajoutant une instruction pass\n", "if condition:\n", "#    print \"non\"\n", "    pass\n", "else:\n", "    print(\"bingo\")"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["### Une classe vide"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Enfin comme on vient de le voir dans la vid\u00e9o, on peut aussi utiliser `pass` pour d\u00e9finir une classe vide comme ceci:"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 50, "lines": ["class Foo:\n", "    pass"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["foo = Foo()"]}]