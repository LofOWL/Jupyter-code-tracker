[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Caract\u00e8res accentu\u00e9s"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Ce compl\u00e9ment expose quelques bases concernant les caract\u00e8res accentu\u00e9s, et notamment les pr\u00e9cautions \u00e0 prendre pour pouvoir en ins\u00e9rer dans un programme python. Nous allons voir que cette question, assez scabreuse, d\u00e9passe tr\u00e8s largement le cadre de python."]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["##### Un caract\u00e8re ce n'est pas un octet"]}, {"block": 5, "type": "markdown", "linesLength": 6, "startIndex": 9, "lines": ["Avec Unicode, on a cass\u00e9 le mod\u00e8le *un caract\u00e8re* == *un octet*. Aussi en python-3, lorsqu'il s'agit de manipuler des donn\u00e9es  provenant de diverses sources de donn\u00e9es&nbsp;:\n", " * le type `byte` est appropri\u00e9 si vous voulez charger en m\u00e9moire les donn\u00e9es binaires brutes, sous forme d'octets donc,\n", " * le type `str` est appropri\u00e9 pour repr\u00e9senter une cha\u00eene de caract\u00e8res - qui, \u00e0 nouveau ne sont pas forc\u00e9ment des octets,\n", " * on passe de l'un \u00e0 l'autre de ces types par des op\u00e9rations d'encodage et d\u00e9codage, comme illustr\u00e9 ci-dessous,\n", " * et pour **toutes** les op\u00e9rations d'encodage et d\u00e9codage, il est n\u00e9cessaire de conna\u00eetre l'encodage utilis\u00e9.\n", " "]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["![les types bytes et str](media/str-bytes.png)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["On peut appeler les m\u00e9thodes `encode` et `decode` sans pr\u00e9ciser l'encodage (dans ce cas python choisit l'encodage par d\u00e9faut sur votre syst\u00e8me). Cela dit, il est de loin pr\u00e9f\u00e9rable d'\u00eatre explicite et de choisir son encodage. En cas de doute, il est recommand\u00e9 de **sp\u00e9cifier explicitement** `utf-8`, qui se g\u00e9n\u00e9ralise au d\u00e9triment d'encodages anciens comme `cp1242` (windows) et `iso-latin-*`, que de laisser le syst\u00e8me h\u00f4te choisir pour vous. "]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["##### Utilisation des accents et autres c\u00e9dilles"]}, {"block": 9, "type": "markdown", "linesLength": 5, "startIndex": 18, "lines": ["Python-3 supporte Unicode par d\u00e9faut. Vous pouvez donc, maintenant, utiliser sans aucun risque des accents ou des c\u00e9dilles dans vos cha\u00eenes de caract\u00e8res. Il faut cependant faire attention \u00e0 deux choses. \n", " * Python supporte Unicode, donc tous les caract\u00e8res du monde, mais les ordinateurs n'ont pas forc\u00e9ment les polices de caract\u00e8res n\u00e9cessaires pour afficher ces caract\u00e8res. \n", " * Python permet d'utiliser des caract\u00e8res Unicode pour les noms de variables, mais nous vous recommandons dans toute la mesure du possible d'\u00e9crire votre code en anglais, comme c'est le cas pour la quasi-totalit\u00e9 du code que vous serez amen\u00e9s \u00e0 utiliser sous forme de librairies.\n", " \n", "Ainsi, il faut bien distinguer les cha\u00eenes de caract\u00e8res qui doivent par nature \u00eatre adapt\u00e9es au langage des utilisateurs du programme, et le code source qui lui est destin\u00e9 aux programmeurs et qui doit donc \u00e9viter d'utiliser autre chose que de l'anglais. "]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["### O\u00f9 peut-on mettre des accents ?"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Cela \u00e9tant dit, si vous devez vraiment mettre des accents dans vos sources, voici ce qu'il faut savoir."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["#### Noms de variables"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["* S'il n'\u00e9tait **pas possible en python-2** d'utiliser un caract\u00e8re accentu\u00e9 dans un **nom de variable** (ou d'un identificateur au sens large), cela est \u00e0 pr\u00e9sent **permis en python-3**:"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["# pas recommand\u00e9, mais autoris\u00e9 par le langage\n", "nb_\u00e9l\u00e8ves = 12"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["* On peut m\u00eame utiliser des symboles, comme par exemple"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["from math import cos, pi as \ud835\udf9f\n", "\u03b8 = \ud835\udf9f / 4\n", "cos(\u03b8)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["* Je vous recommande toutefois de **ne pas utiliser** cette possibilit\u00e9, si vous n'\u00eates pas extr\u00eamement familier avec les caract\u00e8res Unicode. "]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 35, "lines": ["* Enfin pour \u00eatre exhaustif, sachez que seule une partie des caract\u00e8res Unicode sont autoris\u00e9s dans ce cadre, c'est heureux parce que les caract\u00e8res comme, par exemple, [l'espace non-s\u00e9cable](http://www.fileformat.info/info/unicode/char/a0/index.htm) pourraient, s'ils \u00e9taient autoris\u00e9s, \u00eatre la cause de milliers d'heures de debugging \u00e0 frustration garantie :) \n", "\n", "Pour les curieux, vous pouvez en savoir plus [\u00e0 cet endroit de la documentation officielle (en anglais)](https://docs.python.org/3/reference/lexical_analysis.html#identifiers)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["#### Cha\u00eenes de caract\u00e8res"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 39, "lines": ["* Vous pouvez naturellement mettre des accents dans les cha\u00eenes de caract\u00e8res. Cela dit, les donn\u00e9es manipul\u00e9es par un programme proviennent pour l'essentiel de sources externes, comme une base de donn\u00e9es ou un formulaire web, et donc le plus souvent pas directement du code source. Les cha\u00eenes de caract\u00e8res pr\u00e9sentes dans du vrai code sont bien souvent limit\u00e9es \u00e0 des messages de logging, et le plus souvent d'ailleurs en anglais, donc sans accent. \n", "\n", "* Lorsque votre programme doit interagir avec les utilisateurs et qu'il doit donc parler leur langue, c'est une bonne pratique de cr\u00e9er un fichier sp\u00e9cifique, que l'on appelle fichier de ressources, qui contient toutes les cha\u00eenes de caract\u00e8res sp\u00e9cifiques \u00e0 une langue. Ainsi, la traduction de votre programme consistera \u00e0 simplement traduire ce fichier de ressources."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["    message = \"on peut mettre un caract\u00e8re accentu\u00e9 dans une cha\u00eene\""]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["#### Commentaires"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["  * Enfin on peut aussi bien s\u00fbr mettre dans les commentaires n'importe quel caract\u00e8re Unicode, et donc notamment des caract\u00e8res accentu\u00e9s si on choisit malgr\u00e9 tout d'\u00e9crire le code en fran\u00e7ais. "]}, {"block": 25, "type": "markdown", "linesLength": 2, "startIndex": 45, "lines": ["    # on peut mettre un caract\u00e8re accentu\u00e9 dans un commentaire\n", "    # ainsi que cos(\u0398) \u27a8 \u2200x \u2208 \u222bf(t)dt\u2230 vous voyez l'id\u00e9e g\u00e9n\u00e9rale"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Qu'est-ce qu'un encodage ?"]}, {"block": 27, "type": "markdown", "linesLength": 5, "startIndex": 48, "lines": ["Comme vous le savez, la m\u00e9moire - ou le disque - d'un ordinateur ne permet que de stocker des repr\u00e9sentations binaires. Il n'y a donc pas de fa\u00e7on \"naturelle\" de repr\u00e9senter un caract\u00e8re comme 'A' ou  un guillemet ou un point-virgule.\n", "\n", "On utilise pour cela un encodage, par exemple le code US-ASCII - http://www.asciitable.com/ - stipule, pour faire simple, qu'un 'A' est repr\u00e9sent\u00e9 par l'octet 65 qui s'\u00e9crit en binaire 01000001. Il se trouve qu'il existe plusieurs encodages, bien s\u00fbr incompatibles, selon les syst\u00e8mes et les langues. Vous trouverez plus de d\u00e9tails ci-dessous.\n", "\n", "Le point important est que pour pouvoir ouvrir un fichier \"proprement\", il faut bien entendu disposer du **contenu** du fichier, mais il faut aussi conna\u00eetre l'**encodage** qui a \u00e9t\u00e9 utilis\u00e9 pour l'\u00e9crire."]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["### Pr\u00e9cautions \u00e0 prendre pour l'encodage de votre code source"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["L'encodage ne concerne pas simplement les objets cha\u00eene de caract\u00e8res, mais \u00e9galement votre code source. **python-3** consid\u00e8re que votre code source utilise **par d\u00e9faut l'encodage utf-8**. Nous vous conseillons de conserver cet encodage qui est celui qui vous offrira le plus de flexibilit\u00e9. "]}, {"block": 30, "type": "markdown", "linesLength": 9, "startIndex": 55, "lines": ["Vous pouvez malgr\u00e9 tout changer l'encodage **de votre code source** en faisant figurer dans vos fichiers, **en premi\u00e8re ou deuxi\u00e8me ligne**, une d\u00e9claration comme ceci\n", "\n", "       # -*- coding: <nom_de_l_encodage> -*-\n", "    \n", "ou plus simplement, comme ceci\n", "\n", "       # coding: utf-8\n", "\n", "Notons que la premi\u00e8re option est \u00e9galement interpr\u00e9t\u00e9e par l'\u00e9diteur de texte _emacs_ pour utiliser le m\u00eame encodage. En dehors de l'utilisation d'emacs, la deuxi\u00e8me option, plus simple et donc plus pythonique, est \u00e0 pr\u00e9f\u00e9rer. "]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["Le nom **`utf-8`** fait r\u00e9f\u00e9rence \u00e0 **Unicode** (ou pour \u00eatre pr\u00e9cis, \u00e0 l'encodage le plus r\u00e9pandu parmi ceux qui sont d\u00e9finis dans la norme Unicode, comme nous le verrons plus bas). Sur certains syst\u00e8mes plus anciens vous pourrez \u00eatre amen\u00e9s \u00e0 utiliser un autre encodage. Pour d\u00e9terminer la valeur \u00e0 utiliser dans votre cas pr\u00e9cis vous pouvez faire dans l'interpr\u00e9teur interactif"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 65, "lines": ["    # ceci doit \u00eatre ex\u00e9cut\u00e9 sur votre machine\n", "    import sys\n", "    print sys.getdefaultencoding()"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["Par exemple avec d'anciennes versions de Windows (en principe de plus en plus rares) vous pouvez \u00eatre amen\u00e9s \u00e0 \u00e9crire"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["    # coding: cp1252"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["La syntaxe de la ligne `coding` est pr\u00e9cis\u00e9e dans [cette documentation](https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations) et dans le [pep263](https://www.python.org/dev/peps/pep-0263/)."]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["### Le grand malentendu"]}, {"block": 37, "type": "markdown", "linesLength": 8, "startIndex": 72, "lines": ["Si je vous envoie un fichier contenant du fran\u00e7ais encod\u00e9 avec, disons, ISO-latin-15 -- http://en.wikipedia.org/wiki/ISO/IEC_8859-15 --  vous pouvez voir dans la table qu'un caract\u00e8re '\u20ac' va \u00eatre mat\u00e9rialis\u00e9 dans mon fichier par un octet '0xA4', soit 164.\n", "\n", "Imaginez maintenant que vous essayez d'ouvrir ce m\u00eame fichier depuis un vieil ordinateur Windows configur\u00e9 pour le fran\u00e7ais.\n", "Si on ne lui donne aucune indication sur l'encodage, le programme qui va lire ce fichier sur Windows va utiliser l'encodage par d\u00e9faut du syst\u00e8me, c'est-\u00e0-dire `cp1252` -- http://en.wikipedia.org/wiki/Windows-1252. Comme vous le voyez dans cette table, l'octet '0xA4' correspond au caract\u00e8re \u00a4 et c'est \u00e7a que vous allez voir \u00e0 la place de \u20ac.\n", "\n", "C'est \u00e0 cela que sert la balise `# coding: <nom_de_l_encodage>` \n", "\n", "De cette mani\u00e8re, python lorsqu'il lit votre code source, a les moyens d'interpr\u00e9ter correctement son contenu car il sait quel encodage utiliser. On vous rappelle que si vous ne sp\u00e9cifiez aucun encodage pour votre code source, python utilisera un encodage utf-8, ce qui est souvent le meilleur choix."]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 80, "lines": ["### Pourquoi \u00e7a marche en local ?"]}, {"block": 39, "type": "markdown", "linesLength": 8, "startIndex": 81, "lines": ["Lorsque le producteur (le programme qui \u00e9crit le fichier) et le consommateur (le programme qui le lit) tournent dans le m\u00eame ordinateur, tout fonctionne bien - en g\u00e9n\u00e9ral - parce que les deux programmes se ram\u00e8nent \u00e0 l'encodage d\u00e9fini comme l'encodage par d\u00e9faut.  \n", "On a vu pourquoi il vaut mieux toutefois \u00eatre explicite, et sp\u00e9cifier la balise `# coding:` \n", "\n", "Il y a une limite toutefois, si vous utiliser un linux configur\u00e9 de mani\u00e8re minimale, il se peut qu'il utilise par d\u00e9faut l'encodage US-ASCII - voir plus bas - qui \u00e9tant tr\u00e8s ancien ne \"conna\u00eet\" pas un simple \u00e9, ni a fortiori \u20ac. Pour \u00e9crire du fran\u00e7ais, il faut donc au minimum que l'encodage par d\u00e9faut de votre ordinateur contienne les caract\u00e8res fran\u00e7ais, comme par exemple \n", " * iso-latin-1\n", " * iso-latin-15\n", " * utf-8\n", " * cp1252"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["### Un peu d'histoire sur les encodages"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["##### Le code US-ASCII"]}, {"block": 42, "type": "markdown", "linesLength": 3, "startIndex": 91, "lines": ["Jusque dans les ann\u00e9es 1980, les ordinateurs ne parlaient pour l'essentiel que l'anglais. La premi\u00e8re vague de standardisation avait cr\u00e9\u00e9 l'encodage dit ASCII, ou encore US-ASCII - voir par exemple http://www.asciitable.com, ou en version longue http://en.wikipedia.org/wiki/ASCII.\n", "\n", "Le code ASCII s'\u00e9tend sur 128 valeurs, soit 7 bits, mais est le plus souvent impl\u00e9ment\u00e9 sur un octet pour pr\u00e9server l'alignement, le dernier bit pouvant \u00eatre utilis\u00e9 par exemple pour ajouter un code correcteur d'erreur - ce qui \u00e0 l'\u00e9poque des modems n'\u00e9tait pas superflu. Bref, la pratique courante \u00e9tait alors de manipuler une cha\u00eene de caract\u00e8res comme un tableau d'octets."]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["##### Les encodages ISO-latin"]}, {"block": 44, "type": "markdown", "linesLength": 7, "startIndex": 95, "lines": ["Dans les ann\u00e9es 1990, pour satisfaire les besoins des pays europ\u00e9ens, ont \u00e9t\u00e9 d\u00e9finis plusieurs encodages alternatifs, connus sous le nom de [ISO-latin](http://en.wikipedia.org/wiki/ISO/IEC_8859), ou encore [ISO-8859](http://en.wikipedia.org/wiki/ISO/IEC_8859). Id\u00e9alement, on aurait pu et **certainement d\u00fb** d\u00e9finir un seul encodage pour repr\u00e9senter tous les nouveaux caract\u00e8res, mais entre toutes les langues europ\u00e9ennes, le nombre de caract\u00e8res \u00e0 ajouter \u00e9tait substantiel, et cet encodage unifi\u00e9 aurait largement d\u00e9pass\u00e9 256 caract\u00e8res diff\u00e9rents, il n'aurait donc **pas \u00e9t\u00e9 possible** de tout faire tenir sur un octet.\n", "\n", "On a pr\u00e9f\u00e9r\u00e9 pr\u00e9server la \"bonne propri\u00e9t\u00e9\" du mod\u00e8le *un caract\u00e8re* == *un octet*, ceci afin de pr\u00e9server le code existant qui aurait sinon d\u00fb \u00eatre retouch\u00e9 ou r\u00e9crit.\n", "\n", "D\u00e8s lors il n'y avait pas d'autre choix que de d\u00e9finir **plusieurs** encodages distincts, par exemple, pour le fran\u00e7ais on a utilis\u00e9 \u00e0 l'\u00e9poque [ISO-latin-1](http://en.wikipedia.org/wiki/ISO/IEC_8859-1), pour le russe [ISO-latin-5](http://en.wikipedia.org/wiki/ISO/IEC_8859-5).\n", "\n", "\u00c0 ce stade, le ver \u00e9tait dans le fruit. Depuis cette \u00e9poque pour ouvrir un fichier il faut conna\u00eetre son encodage.  "]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 102, "lines": ["##### Unicode"]}, {"block": 46, "type": "markdown", "linesLength": 9, "startIndex": 103, "lines": ["\n", "Lorsqu'on a ensuite cherch\u00e9 \u00e0 manipuler aussi les langues asiatiques, il a de toutes fa\u00e7ons fallu d\u00e9finir de nouveaux encodages beaucoup plus larges. C'est ce qui a \u00e9t\u00e9 fait par le standard [Unicode](http://en.wikipedia.org/wiki/Unicode) qui d\u00e9finit 3 nouveaux encodages.\n", " * [UTF-8](http://en.wikipedia.org/wiki/UTF-8) : un encodage \u00e0 taille variable, \u00e0 base d'octets, qui maximise la compatibilit\u00e9 avec ASCII,\n", " * [UTF-16](http://en.wikipedia.org/wiki/UTF-16) : un encodage \u00e0 taille variable, \u00e0 base de mots de 16 bits\n", " * [UTF-32](http://en.wikipedia.org/wiki/UTF-32) : un encodage \u00e0 taille fixe, \u00e0 base de mots de 32 bits\n", " \n", "Ces 3 standards couvrent le m\u00eame jeu de caract\u00e8res (113 021 tout de m\u00eame dans la derni\u00e8re version). Parmi ceux-ci le plus utilis\u00e9 est certainement `utf-8`. Un texte ne contenant que des caract\u00e8res du code US-ASCII initial peut \u00eatre lu avec l'encodage UTF-8.\n", "\n", "Pour \u00eatre enfin tout \u00e0 fait exhaustif, si on sait qu'un fichier est au format Unicode, on peut d\u00e9terminer quel est l'encodage qu'il utilise, en se basant sur les 4 premiers octets du document. Ainsi dans ce cas particulier (lorsqu'on est s\u00fbr qu'un document utilise un des trois encodages Unicode) il n'est plus n\u00e9cessaire de conna\u00eetre son encodage de mani\u00e8re \"externe\"."]}]