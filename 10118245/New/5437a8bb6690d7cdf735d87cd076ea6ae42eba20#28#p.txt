[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span>"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Sequence unpacking"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["**Remarque pr\u00e9liminaire** nous avons vainement cherch\u00e9 une traduction raisonnable pour ce trait du langage, connue en anglais sous le nom de *sequence unpacking* ou encore parfois *tuple unpacking*, aussi pour \u00e9viter de cr\u00e9er de la confusion nous avons finalement d\u00e9cid\u00e9 de conserver le terme anglais \u00e0 l'identique."]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 4, "lines": ["D\u00e9j\u00e0 rencontr\u00e9"]}, {"block": 5, "type": "markdown", "linesLength": 6, "startIndex": 5, "lines": ["L'affectation dans python peut concerner plusieurs variables \u00e0 la fois. En fait nous en avons d\u00e9j\u00e0 vu un exemple en Semaine 1, avec la fonction `fibonacci` dans laquelle il y avait ce fragment&nbsp;:\n", "\n", "    for i in range(2, n + 1):\n", "        f2, f1 = f1, f1 + f2\n", "\n", "Nous allons dans ce compl\u00e9ment d\u00e9cortiquer les m\u00e9canismes derri\u00e8re cette phrase qui a probablement excit\u00e9 votre curiosit\u00e9 :)"]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 11, "lines": ["Un exemple simple"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Commen\u00e7ons par un exemple simple \u00e0 base de tuple. Imaginons qu'on dispose d'un tuple `couple` dont on sait qu'il a deux \u00e9l\u00e9ments&nbsp;:"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["On souhaite \u00e0 pr\u00e9sent extraire les deux valeurs pour les affecter \u00e0 deux variables. Une solution na\u00efve consiste bien s\u00fbr \u00e0 faire simplement&nbsp;:"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 14, "lines": ["Cela fonctionne naturellement tr\u00e8s bien, mais n'est pas tr\u00e8s pythonique - comme on dit ;)\n", "\n", "On pr\u00e9f\u00e8rera la formulation \u00e9quivalente suivante&nbsp;:"]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["La logique ici consiste \u00e0 dire, affecter les deux variables de sorte que le tuple `(gauche, droite )` soit \u00e9gal \u00e0 `couple`\n", "\n", "Remarquons que les parenth\u00e8ses ici sont optionnelles, on peut tout aussi bien \u00e9crire&nbsp;:"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 20, "lines": ["Autres types"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Cette technique fonctionne aussi bien avec d'autres types. Par exemple&nbsp;:"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["En fait c'est m\u00eame encore plus flexible que \u00e7a puisqu'on pourrait m\u00eame \u00e9crire&nbsp;:"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["C'est presque magique, on a compar\u00e9 un tuple avec une liste !"]}, {"block": 15, "type": "markdown", "linesLength": 4, "startIndex": 24, "lines": ["En r\u00e9alit\u00e9, les seules contraintes fix\u00e9es par `python` sont que\n", " * le terme \u00e0 droite du signe *=* est un *iterable* (tuple, liste, string, etc.),\n", " * le terme \u00e0 gauche soit \u00e9crit comme un tuple ou une liste,\n", " * les deux termes ont la m\u00eame longueur."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["La plupart du temps le terme de gauche est \u00e9crit comme un tuple. C'est pour cette raison que les deux termes *tuple unpacking* et *sequence unpacking* sont en vigueur. "]}, {"block": 17, "type": "heading", "linesLength": 1, "startIndex": 29, "lines": ["La fa\u00e7on *pythonique* d'\u00e9changer deux variables"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Une caract\u00e9ristique int\u00e9ressante de l'affectation par *sequence unpacking* est qu'elle est s\u00fbre; on n'a pas \u00e0 se pr\u00e9occuper d'un \u00e9ventuel d'ordre d'\u00e9valuation, les valeurs **\u00e0 droite** de l'affectation sont **toutes** \u00e9valu\u00e9es en premier, et ainsi on peut par exemple \u00e9changer deux variables comme ceci&nbsp;:"]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 31, "lines": ["En profondeur"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Le *sequence unpacking* ne se limite pas au premier niveau dans les structures, on peut extraire des donn\u00e9es plus profond\u00e9ment imbriqu\u00e9es dans la structure de d\u00e9part; par exemple avec en entr\u00e9e la liste&nbsp;:"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Si on souhaite extraire la valeur qui se trouve \u00e0 l'emplacement de 3, on peut \u00e9crire&nbsp;:"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Ou encore, sans doute un peu plus lisible&nbsp;:"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Naturellement on aurait aussi bien pu \u00e9crire ici quelque chose comme&nbsp;:"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Affaire de go\u00fbt \u00e9videmment. Mais n'oublions pas une des phrases du zen de python $\\textit{Flat is better than nested}$, ce qui veut dire que \u00e7a n'est pas parce que vous pouvez faire des structures imbriqu\u00e9es complexes que vous devez le faire. Bien souvent, cela rend la lecture et la maintenance du code complexe, j'esp\u00e8re que l'exemple pr\u00e9c\u00e9dent vous en a convaincu."]}, {"block": 25, "type": "heading", "linesLength": 1, "startIndex": 37, "lines": ["Plusieurs occurrences d'une m\u00eame variable"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["On peut \u00e9galement utiliser **plusieurs fois** la m\u00eame variable dans la partie gauche de l'affectation. "]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["*Attention* toutefois, comme on le voit ici, python n'impose pas que les diff\u00e9rentes occurrences de `a` correspondent \u00e0 des valeurs identiques (en langage savant, on dirait que cela ne permet pas de faire de l'unification). De mani\u00e8re beaucoup plus pragmatique, l'interpr\u00e9teur se contente de faire comme s'il faisait l'affectation plusieurs fois de gauche \u00e0 droite, c'est-\u00e0-dire comme si il faisait&nbsp;:"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Cette technique n'est utilis\u00e9e en pratique que pour les parties de la structure dont on n'a que faire dans le contexte. Dans ces cas-l\u00e0, il arrive qu'on utilise le nom de variable `_`, dont on rappelle qu'il est l\u00e9gal, ou tout autre nom comme `ignored` pour manifester le fait que cette partie de la structure ne sera pas utilis\u00e9, par exemple&nbsp;:"]}]