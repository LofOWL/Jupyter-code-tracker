[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Instruction `if` et fonction `def`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Fonction de divisibilit\u00e9"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["# chargement de l'exercice\n", "from corrections.w2s6_if import exo_divisible"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 6, "lines": ["L'exercice consiste \u00e0 \u00e9crire une fonction baptis\u00e9e `divisible` qui retourne une valeur bool\u00e9enne, qui indique si un des deux arguments est divisible par l'autre. \n", "\n", "Vous pouvez supposer les entr\u00e9es `a` et `b` entiers et non nuls, mais pas forc\u00e9ment positifs. "]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["def divisible(a, b):\n", "    \"<votre_code>\""]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Vous pouvez \u00e0 pr\u00e9sent tester votre code en \u00e9valuant ceci, qui \u00e9crira un message d'erreur si un des jeux de test ne donne pas le r\u00e9sultat attendu. "]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["# tester votre code\n", "exo_divisible.correction(divisible)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["## Exercice - niveau basique"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["##### Fonction d\u00e9finie par morceaux"]}, {"block": 11, "type": "markdown", "linesLength": 11, "startIndex": 16, "lines": ["On veut d\u00e9finir en python une fonction qui est d\u00e9finie par morceaux:\n", "\n", "$\n", "f: x \\longrightarrow \\left\\{\n", "\\begin{array}{ll}\n", "-x -5 & \\mbox{si } x \\le -5 \\\\\n", "0 & \\mbox{si } x \\in [-5, 5] \\\\\n", "\\frac{1}{5}x -1 & \\mbox{si } x \\ge 5 \\\\\n", "\\end{array}\n", "\\right.\n", "$"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["# donc par exemple\n", "exo_morceaux.example()"]}, {"block": 13, "type": "code", "linesLength": 4, "startIndex": 29, "lines": ["# \u00e0 vous de jouer\n", "\n", "def morceaux(x):\n", "    return 0 # \"votre code\""]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 33, "lines": ["# pour corriger votre code\n", "from corrections.w2s6_if import morceaux"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["##### Repr\u00e9sentation graphique"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Voici ce qui est attendu comme courbe pour `morceaux`"]}, {"block": 17, "type": "markdown", "linesLength": 3, "startIndex": 37, "lines": ["Image fixe: \n", "\n", "![graphe morceaux](media/morceaux.png)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["En partant de votre code, vous pouvez produire votre propre courbe en utilisant `numpy` et `matplotlib` comme ceci:"]}, {"block": 19, "type": "code", "linesLength": 3, "startIndex": 41, "lines": ["# on importe les librairies\n", "import numpy as np\n", "import matplotlib.pyplot as plt"]}, {"block": 20, "type": "code", "linesLength": 5, "startIndex": 44, "lines": ["# un \u00e9chantillon des X entre -10 et 20\n", "X = np.linspace(-10, 20)\n", "\n", "# et les Y correspondants\n", "Y = np.vectorize(morceaux)(X)"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 49, "lines": ["# on n'a plus qu'\u00e0 dessiner\n", "plt.plot(X, Y)\n", "plt.show()"]}]