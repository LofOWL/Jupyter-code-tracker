[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Passage d'arguments par r\u00e9f\u00e9rence"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Entre le code qui appelle une fonction, et le code de la fonction elle-m\u00eame:"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["On peut se demander quel est exactement la nature de la relation entre l'appelant et l'appel\u00e9, c'est-\u00e0-dire ici `dans_appelant` et `dans_fonction`. \n", "\n", "C'est l'objet de ce compl\u00e9ment."]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 6, "lines": ["Passage par valeur - passage par r\u00e9f\u00e9rence "]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Si vous avez appris d'autres langages de programmation comme C ou C++, on a pu vous parler de deux modes de passage de param\u00e8tres:\n", " * par valeur: cela signifie qu'on communique \u00e0 la fonction, non pas l'entit\u00e9 dans l'appelant, mais seulement **sa valeur**; en clair, **une copie**;\n", " * par r\u00e9f\u00e9rence: cela signifie qu'on passe \u00e0 la fonction une **r\u00e9f\u00e9rence** \u00e0 l'argument dans l'appelant, donc essentiellement les deux codes **partagent** la m\u00eame m\u00e9moire."]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 10, "lines": ["python fait du passage par r\u00e9f\u00e9rence"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 11, "lines": ["Certains langages comme Pascal - et C++ si on veut - proposent ces deux modes. En python, tous les passage de param\u00e8tres se font **par r\u00e9f\u00e9rence**.\n", "\n", "Ce qui signifie qu'on peut, voir le code ci-dessus comme \u00e9tant - pour simplifier - \u00e9quivalent \u00e0 ceci"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["On peut le voir en instrumentant le code comme ceci"]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 15, "lines": ["Des r\u00e9f\u00e9rences partag\u00e9es"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Et notamment, tout ce que l'on a vu la semaine pass\u00e9e sur les r\u00e9f\u00e9rences partag\u00e9es s'applique \u00e0 l'identique."]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["Pour cette raison, il est important de bien pr\u00e9ciser, quand vous documentez une fonction, si elle fait des effets de bord sur ses arguments, ou si elle produit une copie. Rappelez vous par exemple le cas de la m\u00e9thode `sort` sur les listes, et de la fonction de commodit\u00e9 `sorted`, que nous avions vues en semaine 2.\n", "\n", "De cette fa\u00e7on, on saura s'il faut ou non copier l'argument avant de le passer \u00e0 votre fonction."]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 20, "lines": ["Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Notez bien enfin un comportement un peu \u00e9trange des op\u00e9rateurs du genre de `+=`."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Ce r\u00e9sultat est surprenant si on consid\u00e8re cette forme, qu'on pourrait croire \u00e9quivalente"]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 23, "lines": ["mais dont vous voyez qu'elle donne un r\u00e9sultat diff\u00e9rent. \n", "\n", "Historiquement, ces op\u00e9rateurs viennent du C o\u00f9 ils op\u00e8rent sur des type s num\u00e9riques, et o\u00f9 ils fonctionnent par effet de bord sur l'op\u00e9rande. \n", "\n", "Dans le cas des types num\u00e9riques en python, qui sont immuables, on ne peut pas les impl\u00e9menter de cette fa\u00e7on. Par contre sur les listes, qui sont mutables, c'est le choix qui a \u00e9t\u00e9 fait de les impl\u00e9menter, de respecter l'esprit initial de l'op\u00e9rateur, et de proc\u00e9der par effet de bord."]}]