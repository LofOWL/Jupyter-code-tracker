[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Arguments *keyword-only*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Rappel"]}, {"block": 4, "type": "markdown", "linesLength": 8, "startIndex": 8, "lines": ["Nous avons vu dans un pr\u00e9c\u00e9dent compl\u00e9ment les 4 familles de param\u00e8tres qu'on peut d\u00e9clarer dans une fonction\u00a0:\n", "\n", "1. param\u00e8tres positionnels (usuels)\n", "1. param\u00e8tres nomm\u00e9s (forme *name=default*)\n", "1. param\u00e8tres **args* qui attrape dans un tuple le reliquat des arguments positionnels \n", "1. param\u00e8tres ***kwds* qui attrape dans un dictionnaire le reliquat des arguments nomm\u00e9s\n", "\n", "Pour rappel\u00a0:"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 16, "lines": ["# une fonction qui combine les diff\u00e9rents \n", "# types de param\u00e8tres\n", "def foo(a, b=100, *args, **kwds):\n", "    print(f\"a={a}, b={b}, args={args}, kwds={kwds}\")"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["foo(1)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["foo(1, 2)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["foo(1, 2, 3)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["foo(1, 2, 3, bar=1000)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["### Un seul param\u00e8tre attrape-tout"]}, {"block": 11, "type": "markdown", "linesLength": 9, "startIndex": 25, "lines": ["Notez \u00e9galement que, de bon sens, on ne peut d\u00e9clarer qu'un seul param\u00e8tre de chacune des formes d'attrape-tout\u00a0; on ne peut pas par exemple d\u00e9clarer\n", "\n", "```python\n", "# c'est ill\u00e9gal de faire ceci\n", "def foo(*args1, *args2):\n", "    pass\n", "```\n", "\n", "car \u00e9videmment on ne saurait pas d\u00e9cider de ce qui va dans `args1` et ce qui va dans `args2`."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Ordre des d\u00e9clarations"]}, {"block": 13, "type": "markdown", "linesLength": 5, "startIndex": 35, "lines": ["L'ordre dans lequel sont d\u00e9clar\u00e9s les  diff\u00e9rents types de param\u00e8tres d'une fonction est impos\u00e9 par le langage. Ce que vous avez peut-\u00eatre en t\u00eate si vous avez appris **Python 2**, c'est qu'\u00e0 l'\u00e9poque on devait imp\u00e9rativement les d\u00e9clarer dans cet ordre\u00a0:\n", "\n", "> positionnels, nomm\u00e9s, forme `*`, forme `**`\n", "\n", "comme dans notre fonction `foo`."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["\u00c7a reste une bonne approximation, mais depuis Python-3, les choses ont un petit peu chang\u00e9 suite \u00e0 [l'adoption du PEP 3102](https://www.python.org/dev/peps/pep-3102/), qui vise \u00e0 introduire la notion de param\u00e8tre qu'il faut imp\u00e9rativement nommer lors de l'appel (en anglais\u00a0: *keyword-only* argument)"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 41, "lines": ["Pour r\u00e9sumer, il est maintenant possible de d\u00e9clarer des **param\u00e8tres nomm\u00e9s apr\u00e8s la forme `*`**\n", "\n", "Voyons cela sur un exemple"]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 44, "lines": ["# on peut d\u00e9clarer un param\u00e8tre nomm\u00e9 **apr\u00e8s** l'attrape-tout *args\n", "def bar(a, *args, b=100, **kwds):\n", "        print(f\"a={a}, b={b}, args={args}, kwds={kwds}\")"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["L'effet de cette d\u00e9claration est que, si je veux passer un argument au param\u00e8tre `b`, **je dois le nommer**"]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 48, "lines": ["# je peux toujours faire ceci\n", "bar(1)"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 50, "lines": ["# mais si je fais ceci l'argument 2 va aller dans args\n", "bar(1, 2)"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["# pour passer b=2, je **dois** nommer mon argument\n", "bar(1, b=2)"]}, {"block": 21, "type": "markdown", "linesLength": 4, "startIndex": 54, "lines": ["Ce trait n'est objectivement pas utilis\u00e9 massivement en Python, mais cela peut \u00eatre utile de le savoir\u00a0:\n", "\n", "* en tant qu'utilisateur d'une biblioth\u00e8que, car cela vous impose une certaine fa\u00e7on d'appeler une fonction\u00a0;\n", "* en tant que concepteur d'une fonction, car cela vous permet de manifester qu'un param\u00e8tre optionnel joue un r\u00f4le particulier."]}]