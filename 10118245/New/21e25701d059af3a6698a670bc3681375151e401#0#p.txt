[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Les boucles `for`"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercices - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Tri de plusieurs listes"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["\u00c9crivez une fonction qui accepte en argument une liste de listes, et qui retourne la m\u00eame liste mais avec toutes les sous-listes tri\u00e9es."]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["# pour la correction, et un exemple\n", "from corrections.w2_for import exo_multi_tri"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["# voici un exemple de ce qui est attendu\n", "exo_multi_tri.exemple()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["\u00c9crivez votre code ici"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["def multi_tri(listes): \n", "    \"<votre_code>\""]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["# xxx remove me\n", "from corrections.w2_for import multi_tri"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Vous pouvez le v\u00e9rifier ici"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["exo_multi_tri.correction(multi_tri)"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 15, "lines": ["Tri de plusieurs listes, dans des directions diff\u00e9rentes"]}, {"block": 12, "type": "markdown", "linesLength": 5, "startIndex": 16, "lines": ["Modifiez votre code pour qu'il accepte cette fois deux arguments listes que l'on suppose de tailles \u00e9gales. \n", "\n", "Comme tout \u00e0 l'heure le premier argument est une liste de listes \u00e0 trier.\n", "\n", "\u00c0 pr\u00e9sent le second argument est une liste (ou un tuple) de bool\u00e9ens, de m\u00eame cardinal que le premier argument, et qui indiquent l'ordre dans lequel on veut trier la liste d'entr\u00e8e de m\u00eame rang. True signifie un tri descendant, False un tri ascendant"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["# pour la correction, et un exemple\n", "from corrections.w2_for import exo_multi_tri_reverse"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["# Pour \u00eatre un peu plus clair, voici \u00e0 quoi on s'attend\n", "exo_multi_tri_reverse.exemple()"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["def multi_tri_reverse(listes, reverses):\n", "    \"<votre_code>\" "]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["# xxx remove me\n", "from corrections.w2_for import multi_tri_reverse"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["# pour v\u00e9rifier votre code\n", "exo_multi_tri_reverse.correction(multi_tri_reverse)"]}, {"block": 18, "type": "heading", "linesLength": 1, "startIndex": 31, "lines": ["Exercices - niveau interm\u00e9diaire"]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 32, "lines": ["Liste des racines p-i\u00e8mes de l'unit\u00e9"]}, {"block": 20, "type": "markdown", "linesLength": 5, "startIndex": 33, "lines": ["Dans le notebook sur l'utilisation de python comme un calculette, nous avions \u00e9crit de mani\u00e8re un peu fastidieuse les racines 3-i\u00e8mes de l'unit\u00e9 gr\u00e2ce \u00e0 la formule\n", "\n", "$r_n = e^{2i\\pi \\frac{n}{3}},$ pour $n\\in \\{0,1,2\\}$\n", "\n", "On vous demande \u00e0 pr\u00e9sent d'\u00e9crire une fonction qui retourne la liste de ces valeurs. Cette fois on n'utilisera plus le nombre '3', mais on le passera en argument \u00e0 la fonction comme le nombre `p` que l'on peut supposer $>=2$"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 38, "lines": ["# retourne la liste des racine p-i\u00e8mes de l'unit\u00e9 \n", "def liste_racines(p): \n", "    \"<votre_code>\""]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 41, "lines": ["# xxx remove me\n", "from corrections.w2_for import liste_racines"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 43, "lines": ["# pour v\u00e9rifier votre code\n", "from corrections.w2_for import exo_liste_racines\n", "exo_liste_racines.correction(liste_racines)"]}, {"block": 24, "type": "heading", "linesLength": 1, "startIndex": 46, "lines": ["Produit scalaire"]}, {"block": 25, "type": "markdown", "linesLength": 7, "startIndex": 47, "lines": ["On veut \u00e9crire une fonction qui retourne le produit scalaire de deux vecteurs. Pour ceci on va mat\u00e9rialiser les deux vecteurs en entr\u00e9e par deux listes que l'on suppose de m\u00eame taille. Cela est tout \u00e0 fait possible avec le bagage que nous avons appris jusqu'ici - bien que nous verrons plus tard d'autres techniques pour faire ceci de mani\u00e8re plus \u00e9l\u00e9gante.\n", "\n", "On rappelle que le produit de X et Y vaut\n", "\n", "$\\sum_{i} X_i * Y_i$\n", "\n", "On posera que le produit scalaire de deux listes vides vaut `0`."]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["Vous devez donc \u00e9crire"]}, {"block": 27, "type": "code", "linesLength": 3, "startIndex": 55, "lines": ["def produit_scalaire(X,Y): \n", "    \"\"\"retourne le produit scalaire de deux listes de m\u00eame taille\"\"\"\n", "    \"<votre_code>\""]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["# xxx remove me\n", "from corrections.w2_for import produit_scalaire"]}, {"block": 29, "type": "code", "linesLength": 3, "startIndex": 60, "lines": ["# pour v\u00e9rifier votre code\n", "from corrections.w2_for import exo_produit_scalaire\n", "exo_produit_scalaire.correction(produit_scalaire)"]}]