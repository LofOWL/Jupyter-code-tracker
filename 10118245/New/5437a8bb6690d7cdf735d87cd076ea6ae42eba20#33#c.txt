[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Fonctions avec ou sans valeur de retour"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Le style proc\u00e9dural"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Une proc\u00e9dure est une fonction qui se contente de d\u00e9rouler des instructions. Prenons un exemple d'une telle fonction"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["qui s'utiliserait comme ceci"]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 5, "lines": ["Le style fonctionnel"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Mais en fait, il serait dans notre cas beaucoup plus commode de d\u00e9finir une fonction qui retourne le carr\u00e9 d'un nombre, afin de pouvoir \u00e9crire quelque chose comme"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["    carre15 = carre(15)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["quitte \u00e0 imprimer cette valeur ensuite si n\u00e9cessaire - m\u00eame si jusqu'ici nous avons fait beaucoup appel \u00e0 `print`, dans la pratique, imprimer n'est pas un but en soi, au contraire bien souvent."]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 9, "lines": ["L'instruction `return`"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Voici comment on pourrait \u00e9crire une fonction `carre` qui renvoie le carr\u00e9 de son argument:"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["La s\u00e9mantique (le mot savant pour \"comportement\") de l'instruction `return` est assez simple. La fonction qui est en cours d'ex\u00e9cution s'ach\u00e8ve tout de suite, et l'objet pass\u00e9 en argument \u00e0 `return` est retourn\u00e9 \u00e0 l'appelant, qui peut utiliser cette valeur comme n'importe quelle expression. "]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Le singleton `None`"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Le terme m\u00eame de fonction, si vous vous rappelez vos souvenirs de math\u00e9matiques, sugg\u00e8re qu'on calcule un r\u00e9sultat \u00e0 partir de valeurs d'entr\u00e9e. Dans la pratique il est assez rare qu'on d\u00e9finisse une fonction qui ne retourne rien."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["En fait **toutes** les fonctions retournent quelque chose. Lorsque le programmeur n'a pas pr\u00e9vu d'instruction `return`, python retourne un objet sp\u00e9cial, baptis\u00e9 `None`. Voici par exemple ce qu'on obtient si on essaie d'afficher la valeur de retour de notre premi\u00e8re fonction, qui, on le rappelle, ne retourne rien:"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Ceci est notre premi\u00e8re rencontre avec l'objet `None`, qui est un singleton pr\u00e9d\u00e9fini par python, un peu comme `True` et `False`. Ce n'est pas par contre une valeur bool\u00e9enne, nous aurons l'occasion d'en reparler."]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 16, "lines": ["Un exemple un peu plus r\u00e9aliste"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Pour illustrer l'utilisation de `return` sur un exemple plus utile, voyons le code suivant"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Cette fonction teste si un entier est premier ou non; il s'agit naturellement d'une version d'\u00e9cole, il existe bien entendu d'autres m\u00e9thodes beaucoup plus adapt\u00e9es \u00e0 cette t\u00e2che. On peut toutefois v\u00e9rifier que cette version est fonctionnelle pour de petits entiers comme suit. On rappelle que 1 n'est pas consid\u00e9r\u00e9 comme un nombre premier:"]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 19, "lines": ["`return` sans valeur "]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["Pour les besoins de cette discussion, nous avons choisi de retourner `None` pour les entiers n\u00e9gatifs ou nuls, une mani\u00e8re comme une autre de signaler que la valeur en entr\u00e9e n'est pas valide. \n", "\n", "Ceci n'est pas forc\u00e9ment une bonne pratique, mais elle nous permet ici d'illustrer que dans le cas ou on ne mentionne pas de valeur de retour, python retourne `None`. "]}, {"block": 21, "type": "heading", "linesLength": 1, "startIndex": 23, "lines": ["`return` interrompt la fonction"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Comme on peut s'en convaincre en instrumentant le code - que vous pouvez faire \u00e0 titre d'exercice, dans le cas d'un nombre qui n'est pas premier la boucle for ne va pas jusqu'\u00e0 son terme"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["On aurait pu d'ailleurs tirer profit de cette propri\u00e9t\u00e9 pour \u00e9crire la fonction de mani\u00e8re l\u00e9g\u00e8rement diff\u00e9rente comme ceci"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Ici encore c'est une question de style et de go\u00fbt. En tous cas, les deux versions sont tout \u00e0 fait \u00e9quivalentes, comme on le voit ici"]}]