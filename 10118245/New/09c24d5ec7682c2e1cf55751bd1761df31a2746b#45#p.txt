[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# `matplotlib` 3D"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Nous poursuivons notre introduction \u00e0 `matplotlib` avec les visualisations en 3 dimensions. Comme pour la premi\u00e8re partie sur les fonctions en 2 dimensions, nous allons seulement paraphraser [le tutoriel en ligne](https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html), avec l'avantage toutefois que nous procurent les notebooks."]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 7, "lines": ["# la ration habituelle d'imports\n", "import matplotlib.pyplot as plt\n", "# et aussi numpy, m\u00eame si \u00e7a n'est pas strictement n\u00e9cessaire\n", "import numpy as np"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Pour pouvoir faire des visualisations en 3D, il vous faut importer ceci\u00a0:"]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 12, "lines": ["# m\u00eame si l'on n'utilise pas explicitement\n", "# d'attributs du module Axes3D\n", "# cet import est n\u00e9cessaire pour faire\n", "# des visualisations en 3D\n", "from mpl_toolkits.mplot3d import Axes3D"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Dans ce notebook nous allons utiliser un mode de visualisation un peu plus \u00e9labor\u00e9, mieux int\u00e9gr\u00e9 \u00e0 l'environnement des notebooks\u00a0:"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 18, "lines": ["# ce mode d'interaction va nous permettre de nous d\u00e9placer\n", "# dans l'espace pour voir les courbes en 3D\n", "# depuis plusieurs points de vue\n", "%matplotlib notebook"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Comme on va le voir tr\u00e8s vite, avec ces r\u00e9glages vous aurez la possibilit\u00e9 d'explorer interactivement les visualisations en 3D."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["### Un premier exemple\u00a0: une courbe"]}, {"block": 10, "type": "markdown", "linesLength": 8, "startIndex": 24, "lines": ["Commen\u00e7ons par le premier exemple du tutorial, qui nous montre comment dessiner une ligne suivant une courbe d\u00e9finie de mani\u00e8re param\u00e9trique (ici, $x$ et $y$ sont fonctions de $z$). Les points importants sont\u00a0:\n", "\n", "* la composition d'un plot (plusieurs figures, chacune compos\u00e9e de plusieurs *subplots*), reste bien entendu valide\u00a0; j'ai enrichi l'exemple initial pour m\u00e9langer un *subplot* en 3D avec un *subplot* en 2D\u00a0;\n", "* l'utilisation du param\u00e8tre `projection='3d'` lorsqu'on cr\u00e9e un *subplot* qui va se pr\u00eater \u00e0 une visualisation en 3D\u00a0;\n", "* l'objet *subplot* ainsi cr\u00e9\u00e9 est une instance de la classe `Axes3DSubplot`\u00a0;\n", "* on peut envoyer \u00e0 cet objet\u00a0:\n", "  * la m\u00e9thode `plot` qu'on avait d\u00e9j\u00e0 vue pour la dimension 2 (c'est ce que l'on fait dans ce premier exemple)\u00a0;\n", "  * des m\u00e9thodes sp\u00e9cifiques \u00e0 la 3D, que l'on voit dans les exemples suivants."]}, {"block": 11, "type": "code", "linesLength": 29, "startIndex": 32, "lines": ["# je choisis une taille raisonnable compte tenu de l'espace\n", "# disponible dans fun-mooc\n", "fig = plt.figure(figsize=(6, 3))\n", "\n", "# voici la fa\u00e7on de cr\u00e9er un *subplot*\n", "# qui se pr\u00eate \u00e0 une visualisation en 3D\n", "ax = fig.add_subplot(121, projection='3d')\n", "\n", "# \u00e0 pr\u00e9sent, copi\u00e9 de\n", "# https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#line-plots\n", "# on cr\u00e9e une courbe param\u00e9trique\n", "# o\u00f9 x et y sont fonctions de z\n", "theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\n", "z = np.linspace(-2, 2, 100)\n", "r = z**2 + 1\n", "x = r * np.sin(theta)\n", "y = r * np.cos(theta)\n", "# on fait maitenant un appel \u00e0 plot normal\n", "# mais avec un troisi\u00e8me param\u00e8tre\n", "ax.plot(x, y, z, label='parametric curve')\n", "ax.legend()\n", "\n", "# on peut tout \u00e0 fait ajouter un plot usuel\n", "# dans un subplot, comme on l'a vu pour la 2D\n", "ax2 = fig.add_subplot(122)\n", "x = np.linspace(0, 10)\n", "y = x**2\n", "ax2.plot(x, y)\n", "plt.show()"]}, {"block": 12, "type": "markdown", "linesLength": 7, "startIndex": 61, "lines": ["Un autre point \u00e0 remarquer est qu'avec le mode d'interaction que nous avons choisi\u00a0:\n", "\n", "```python\n", "%matplotlib notebook\n", "```\n", "\n", "vous b\u00e9n\u00e9ficiez d'un mode d'interaction plus riche avec la figure. Par exemple, vous pouvez cliquer dans la figure en 3D, et vous d\u00e9placer pour changer de point de vue\u00a0; par exemple si vous s\u00e9lectionnez l'outil `Pan/Zoom` (l'outil avec 4 fl\u00e8ches), vous pouvez arriver \u00e0 voir ceci\u00a0:"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["![rotated](media/rotated-3d.png)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["Les diff\u00e9rents boutons d'outil [sont d\u00e9crits plus en d\u00e9tail ici](https://matplotlib.org/users/navigation_toolbar.html). Je dois avouer ne pas arriver \u00e0 tout utiliser lorsque la visualisation est faite dans un notebook, mais la possibilit\u00e9 de modifier le point de vue peut s'av\u00e9rer int\u00e9ressante pour explorer les donn\u00e9es."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["*****"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["En explorant les autres exemples du tutorial, vous pouvez commencer \u00e0 d\u00e9couvrir l'\u00e9ventail des possibilit\u00e9s offertes par `matplotlib`."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["### `Axes3DSubplot.scatter`"]}, {"block": 18, "type": "markdown", "linesLength": 3, "startIndex": 73, "lines": ["Comme en dimension 2, `scatter` permet de montrer un nuage de points.\n", "\n", "Tutoriel original\u00a0:\u00a0https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#scatter-plots"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["`scatter3d_demo.py`"]}, {"block": 20, "type": "code", "linesLength": 11, "startIndex": 77, "lines": ["'''\n", "==============\n", "3D scatterplot\n", "==============\n", "\n", "Demonstration of a basic scatterplot in 3D.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 21, "type": "code", "linesLength": 23, "startIndex": 88, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "\n", "def randrange(n, vmin, vmax):\n", "    '''\n", "    Helper function to make an array of random numbers having shape (n, )\n", "    with each number distributed Uniform(vmin, vmax).\n", "    '''\n", "    return (vmax - vmin)*np.random.rand(n) + vmin\n", "\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "n = 100\n", "\n", "# For each set of style and range settings, plot n random points in the box\n", "# defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].\n", "for c, m, zlow, zhigh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:\n", "    xs = randrange(n, 23, 32)\n", "    ys = randrange(n, 0, 100)\n", "    zs = randrange(n, zlow, zhigh)\n", "    ax.scatter(xs, ys, zs, c=c, marker=m)\n", "\n", "ax.set_xlabel('X Label')\n", "plt.show()"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 111, "lines": ["### `Axes3DSubplot.plot_wireframe`"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["Utilisez cette m\u00e9thode pour dessiner en mode \"fil de fer\"."]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 113, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#wireframe-plots>."]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 114, "lines": ["`wire3d_demo.py`"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 115, "lines": ["from mpl_toolkits.mplot3d import axes3d"]}, {"block": 27, "type": "code", "linesLength": 10, "startIndex": 116, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "# Grab some test data.\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "\n", "# Plot a basic wireframe.\n", "ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n", "plt.show()"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 126, "lines": ["### `Axes3DSubplot.plot_surface`"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["Comme on s'en doute, `plot_surface` sert \u00e0 dessiner des surfaces dans l'espace\u00a0; ces exemples montrent surtout comment utiliser des couleurs ou des *patterns*."]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 128, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#surface-plots>."]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["`surface3d_demo.py`"]}, {"block": 32, "type": "code", "linesLength": 17, "startIndex": 130, "lines": ["'''\n", "======================\n", "3D surface (color map)\n", "======================\n", "\n", "Demonstrates plotting a 3D surface colored with the coolwarm color map.\n", "The surface is made opaque by using antialiased=False.\n", "\n", "Also demonstrates using the LinearLocator and custom formatting for the\n", "z axis tick labels.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm\n", "from matplotlib.ticker import LinearLocator, FormatStrFormatter\n", "import numpy as np"]}, {"block": 33, "type": "code", "linesLength": 24, "startIndex": 147, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "\n", "ax = fig.gca(projection='3d')\n", "\n", "# Make data.\n", "X = np.arange(-5, 5, 0.25)\n", "Y = np.arange(-5, 5, 0.25)\n", "X, Y = np.meshgrid(X, Y)\n", "R = np.sqrt(X**2 + Y**2)\n", "Z = np.sin(R)\n", "\n", "# Plot the surface.\n", "surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n", "                       linewidth=0, antialiased=False)\n", "\n", "# Customize the z axis.\n", "ax.set_zlim(-1.01, 1.01)\n", "ax.zaxis.set_major_locator(LinearLocator(10))\n", "ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n", "\n", "# Add a color bar which maps values to colors.\n", "fig.colorbar(surf, shrink=0.5, aspect=5)\n", "\n", "plt.show()"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 171, "lines": ["`surface3d_demo2.py`"]}, {"block": 35, "type": "code", "linesLength": 11, "startIndex": 172, "lines": ["'''\n", "========================\n", "3D surface (solid color)\n", "========================\n", "\n", "Demonstrates a very basic plot of a 3D surface using a solid color.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 36, "type": "code", "linesLength": 14, "startIndex": 183, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "# Make data\n", "u = np.linspace(0, 2 * np.pi, 30)\n", "v = np.linspace(0, np.pi, 30)\n", "x = 10 * np.outer(np.cos(u), np.sin(v))\n", "y = 10 * np.outer(np.sin(u), np.sin(v))\n", "z = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n", "\n", "# Plot the surface\n", "ax.plot_surface(x, y, z, color='b')\n", "\n", "plt.show()"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 197, "lines": ["`surface3d_demo3.py`"]}, {"block": 38, "type": "code", "linesLength": 13, "startIndex": 198, "lines": ["'''\n", "=========================\n", "3D surface (checkerboard)\n", "=========================\n", "\n", "Demonstrates plotting a 3D surface colored in a checkerboard pattern.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm\n", "from matplotlib.ticker import LinearLocator\n", "import numpy as np"]}, {"block": 39, "type": "code", "linesLength": 28, "startIndex": 211, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "# Make data.\n", "X = np.arange(-5, 5, 0.25)\n", "xlen = len(X)\n", "Y = np.arange(-5, 5, 0.25)\n", "ylen = len(Y)\n", "X, Y = np.meshgrid(X, Y)\n", "R = np.sqrt(X**2 + Y**2)\n", "Z = np.sin(R)\n", "\n", "# Create an empty array of strings with the same shape as the meshgrid, and\n", "# populate it with two colors in a checkerboard pattern.\n", "colortuple = ('y', 'b')\n", "colors = np.empty(X.shape, dtype=str)\n", "for y in range(ylen):\n", "    for x in range(xlen):\n", "        colors[x, y] = colortuple[(x + y) % len(colortuple)]\n", "\n", "# Plot the surface with face colors taken from the array we made.\n", "surf = ax.plot_surface(X, Y, Z, facecolors=colors, linewidth=0)\n", "\n", "# Customize the z axis.\n", "ax.set_zlim(-1, 1)\n", "ax.w_zaxis.set_major_locator(LinearLocator(6))\n", "\n", "plt.show()"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 239, "lines": ["### `Axes3DSubplot.plot_trisurf`"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 240, "lines": ["`plot_trisurf` se pr\u00eate aussi au rendu de surfaces, mais sur la base de maillages en triangles."]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 241, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#tri-surface-plots>."]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 242, "lines": ["`trisurf3d_demo.py`"]}, {"block": 44, "type": "code", "linesLength": 11, "startIndex": 243, "lines": ["'''\n", "======================\n", "Triangular 3D surfaces\n", "======================\n", "\n", "Plot a 3D surface with a triangular mesh.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 45, "type": "code", "linesLength": 27, "startIndex": 254, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "n_radii = 8\n", "n_angles = 36\n", "\n", "# Make radii and angles spaces (radius r=0 omitted to eliminate duplication).\n", "radii = np.linspace(0.125, 1.0, n_radii)\n", "angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n", "\n", "# Repeat all angles for each radius.\n", "angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n", "\n", "# Convert polar (radii, angles) coords to cartesian (x, y) coords.\n", "# (0, 0) is manually added at this stage,  so there will be no duplicate\n", "# points in the (x, y) plane.\n", "x = np.append(0, (radii*np.cos(angles)).flatten())\n", "y = np.append(0, (radii*np.sin(angles)).flatten())\n", "\n", "# Compute z to make the pringle surface.\n", "z = np.sin(-x*y)\n", "\n", "ax = fig.gca(projection='3d')\n", "\n", "ax.plot_trisurf(x, y, z, linewidth=0.2, antialiased=True)\n", "\n", "plt.show()"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 281, "lines": ["`trisurf3d_demo2.py`"]}, {"block": 47, "type": "code", "linesLength": 16, "startIndex": 282, "lines": ["'''\n", "===========================\n", "More triangular 3D surfaces\n", "===========================\n", "\n", "Two additional examples of plotting surfaces with triangular mesh.\n", "\n", "The first demonstrates use of plot_trisurf's triangles argument, and the\n", "second sets a Triangulation object's mask and passes the object directly\n", "to plot_trisurf.\n", "'''\n", "\n", "import numpy as np\n", "import matplotlib.pyplot as plt\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.tri as mtri"]}, {"block": 48, "type": "code", "linesLength": 61, "startIndex": 298, "lines": ["fig = plt.figure(figsize=(6, 3))\n", "\n", "#============\n", "# First plot\n", "#============\n", "\n", "# Make a mesh in the space of parameterisation variables u and v\n", "u = np.linspace(0, 2.0 * np.pi, endpoint=True, num=50)\n", "v = np.linspace(-0.5, 0.5, endpoint=True, num=10)\n", "u, v = np.meshgrid(u, v)\n", "u, v = u.flatten(), v.flatten()\n", "\n", "# This is the Mobius mapping, taking a u, v pair and returning an x, y, z\n", "# triple\n", "x = (1 + 0.5 * v * np.cos(u / 2.0)) * np.cos(u)\n", "y = (1 + 0.5 * v * np.cos(u / 2.0)) * np.sin(u)\n", "z = 0.5 * v * np.sin(u / 2.0)\n", "\n", "# Triangulate parameter space to determine the triangles\n", "tri = mtri.Triangulation(u, v)\n", "\n", "# Plot the surface.  The triangles in parameter space determine which x, y, z\n", "# points are connected by an edge.\n", "ax = fig.add_subplot(1, 2, 1, projection='3d')\n", "ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=plt.cm.Spectral)\n", "ax.set_zlim(-1, 1)\n", "\n", "\n", "#============\n", "# Second plot\n", "#============\n", "\n", "# Make parameter spaces radii and angles.\n", "n_angles = 36\n", "n_radii = 8\n", "min_radius = 0.25\n", "radii = np.linspace(min_radius, 0.95, n_radii)\n", "\n", "angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n", "angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n", "angles[:, 1::2] += np.pi/n_angles\n", "\n", "# Map radius, angle pairs to x, y, z points.\n", "x = (radii*np.cos(angles)).flatten()\n", "y = (radii*np.sin(angles)).flatten()\n", "z = (np.cos(radii)*np.cos(angles*3.0)).flatten()\n", "\n", "# Create the Triangulation; no triangles so Delaunay triangulation created.\n", "triang = mtri.Triangulation(x, y)\n", "\n", "# Mask off unwanted triangles.\n", "xmid = x[triang.triangles].mean(axis=1)\n", "ymid = y[triang.triangles].mean(axis=1)\n", "mask = np.where(xmid**2 + ymid**2 < min_radius**2, 1, 0)\n", "triang.set_mask(mask)\n", "\n", "# Plot the surface.\n", "ax = fig.add_subplot(1, 2, 2, projection='3d')\n", "ax.plot_trisurf(triang, z, cmap=plt.cm.CMRmap)\n", "\n", "plt.show()"]}, {"block": 49, "type": "markdown", "linesLength": 1, "startIndex": 359, "lines": ["### `Axes3DSubplot.contour`"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 360, "lines": ["Pour dessiner des contours."]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 361, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#contour-plots>."]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 362, "lines": ["`contour3d_demo.py`"]}, {"block": 53, "type": "code", "linesLength": 3, "startIndex": 363, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 54, "type": "code", "linesLength": 7, "startIndex": 366, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.add_subplot(111, projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "cset = ax.contour(X, Y, Z, cmap=cm.coolwarm)\n", "ax.clabel(cset, fontsize=9, inline=1)\n", "\n", "plt.show()"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 373, "lines": ["`contour3d_demo2.py`"]}, {"block": 56, "type": "code", "linesLength": 3, "startIndex": 374, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 57, "type": "code", "linesLength": 7, "startIndex": 377, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "cset = ax.contour(X, Y, Z, extend3d=True, cmap=cm.coolwarm)\n", "ax.clabel(cset, fontsize=9, inline=1)\n", "\n", "plt.show()"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 384, "lines": ["`contour3d_demo3.py`"]}, {"block": 59, "type": "code", "linesLength": 3, "startIndex": 385, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 60, "type": "code", "linesLength": 16, "startIndex": 388, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)\n", "cset = ax.contour(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)\n", "cset = ax.contour(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)\n", "cset = ax.contour(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)\n", "\n", "ax.set_xlabel('X')\n", "ax.set_xlim(-40, 40)\n", "ax.set_ylabel('Y')\n", "ax.set_ylim(-40, 40)\n", "ax.set_zlabel('Z')\n", "ax.set_zlim(-100, 100)\n", "\n", "plt.show()"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 404, "lines": ["### `Axes3DSubplot.contourf`"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 405, "lines": ["Comme `Axes3DSubplot.contour`, mais avec un rendu plein plut\u00f4t que sous forme de lignes (le `f` provient de l'anglais *filled*)."]}, {"block": 63, "type": "markdown", "linesLength": 1, "startIndex": 406, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#filled-contour-plots>."]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 407, "lines": ["`contourf3d_demo.py`"]}, {"block": 65, "type": "code", "linesLength": 3, "startIndex": 408, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 66, "type": "code", "linesLength": 7, "startIndex": 411, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "cset = ax.contourf(X, Y, Z, cmap=cm.coolwarm)\n", "ax.clabel(cset, fontsize=9, inline=1)\n", "\n", "plt.show()"]}, {"block": 67, "type": "markdown", "linesLength": 1, "startIndex": 418, "lines": ["`contourf3d_demo2.py`"]}, {"block": 68, "type": "code", "linesLength": 8, "startIndex": 419, "lines": ["\"\"\"\n", ".. versionadded:: 1.1.0\n", "   This demo depends on new features added to contourf3d.\n", "\"\"\"\n", "\n", "from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 69, "type": "code", "linesLength": 16, "startIndex": 427, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)\n", "cset = ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)\n", "cset = ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)\n", "cset = ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)\n", "\n", "ax.set_xlabel('X')\n", "ax.set_xlim(-40, 40)\n", "ax.set_ylabel('Y')\n", "ax.set_ylim(-40, 40)\n", "ax.set_zlabel('Z')\n", "ax.set_zlim(-100, 100)\n", "\n", "plt.show()"]}, {"block": 70, "type": "markdown", "linesLength": 1, "startIndex": 443, "lines": ["### `Axes3DSubplot.add_collection3d`"]}, {"block": 71, "type": "markdown", "linesLength": 1, "startIndex": 444, "lines": ["Pour afficher des polygones."]}, {"block": 72, "type": "markdown", "linesLength": 1, "startIndex": 445, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#polygon-plots>."]}, {"block": 73, "type": "code", "linesLength": 15, "startIndex": 446, "lines": ["\"\"\"\n", "=============================================\n", "Generate polygons to fill under 3D line graph\n", "=============================================\n", "\n", "Demonstrate how to create polygons which fill the space under a line\n", "graph. In this example polygons are semi-transparent, creating a sort\n", "of 'jagged stained glass' effect.\n", "\"\"\"\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "from matplotlib.collections import PolyCollection\n", "import matplotlib.pyplot as plt\n", "from matplotlib import colors as mcolors\n", "import numpy as np"]}, {"block": 74, "type": "code", "linesLength": 27, "startIndex": 461, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "def cc(arg):\n", "    return mcolors.to_rgba(arg, alpha=0.6)\n", "\n", "xs = np.arange(0, 10, 0.4)\n", "verts = []\n", "zs = [0.0, 1.0, 2.0, 3.0]\n", "for z in zs:\n", "    ys = np.random.rand(len(xs))\n", "    ys[0], ys[-1] = 0, 0\n", "    verts.append(list(zip(xs, ys)))\n", "\n", "poly = PolyCollection(verts, facecolors=[cc('r'), cc('g'), cc('b'),\n", "                                         cc('y')])\n", "poly.set_alpha(0.7)\n", "ax.add_collection3d(poly, zs=zs, zdir='y')\n", "\n", "ax.set_xlabel('X')\n", "ax.set_xlim3d(0, 10)\n", "ax.set_ylabel('Y')\n", "ax.set_ylim3d(-1, 4)\n", "ax.set_zlabel('Z')\n", "ax.set_zlim3d(0, 1)\n", "\n", "plt.show()"]}, {"block": 75, "type": "markdown", "linesLength": 1, "startIndex": 488, "lines": ["### `Axes3DSubplot.bar`"]}, {"block": 76, "type": "markdown", "linesLength": 1, "startIndex": 489, "lines": ["Pour construire des diagrammes \u00e0 barres."]}, {"block": 77, "type": "markdown", "linesLength": 1, "startIndex": 490, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#bar-plots>."]}, {"block": 78, "type": "markdown", "linesLength": 1, "startIndex": 491, "lines": ["`bars3d_demo.py`"]}, {"block": 79, "type": "code", "linesLength": 12, "startIndex": 492, "lines": ["\"\"\"\n", "========================================\n", "Create 2D bar graphs in different planes\n", "========================================\n", "\n", "Demonstrates making a 3D plot which has 2D bar graphs projected onto\n", "planes y=0, y=1, etc.\n", "\"\"\"\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 80, "type": "code", "linesLength": 17, "startIndex": 504, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.add_subplot(111, projection='3d')\n", "for c, z in zip(['r', 'g', 'b', 'y'], [30, 20, 10, 0]):\n", "    xs = np.arange(20)\n", "    ys = np.random.rand(20)\n", "\n", "    # You can provide either a single color or an array. To demonstrate this,\n", "    # the first bar of each set will be colored cyan.\n", "    cs = [c] * len(xs)\n", "    cs[0] = 'c'\n", "    ax.bar(xs, ys, zs=z, zdir='y', color=cs, alpha=0.8)\n", "\n", "ax.set_xlabel('X')\n", "ax.set_ylabel('Y')\n", "ax.set_zlabel('Z')\n", "\n", "plt.show()"]}, {"block": 81, "type": "markdown", "linesLength": 1, "startIndex": 521, "lines": ["### `Axes3DSubplot.quiver`"]}, {"block": 82, "type": "markdown", "linesLength": 1, "startIndex": 522, "lines": ["Pour afficher des champs de vecteurs sous forme de traits."]}, {"block": 83, "type": "markdown", "linesLength": 1, "startIndex": 523, "lines": ["Tutoriel original\u00a0:\u00a0<https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#quiver>."]}, {"block": 84, "type": "markdown", "linesLength": 1, "startIndex": 524, "lines": ["`quiver3d_demo.py`"]}, {"block": 85, "type": "code", "linesLength": 11, "startIndex": 525, "lines": ["'''\n", "==============\n", "3D quiver plot\n", "==============\n", "\n", "Demonstrates plotting directional arrows at points on a 3d meshgrid.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 86, "type": "code", "linesLength": 17, "startIndex": 536, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "# Make the grid\n", "x, y, z = np.meshgrid(np.arange(-0.8, 1, 0.2),\n", "                      np.arange(-0.8, 1, 0.2),\n", "                      np.arange(-0.8, 1, 0.8))\n", "\n", "# Make the direction data for the arrows\n", "u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)\n", "v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)\n", "w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *\n", "     np.sin(np.pi * z))\n", "\n", "ax.quiver(x, y, z, u, v, w, length=0.1, normalize=True)\n", "\n", "plt.show()"]}]