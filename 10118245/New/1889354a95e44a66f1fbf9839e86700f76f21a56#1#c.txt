[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["\u00c0 quoi servent les classes ?"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Un exemple simpliste"]}, {"block": 3, "type": "markdown", "linesLength": 6, "startIndex": 3, "lines": ["On d\u00e9finit une classe lorsqu'on a besoin de se cr\u00e9er un type sp\u00e9cifique au contexte de l'application. Il faut donc voir une classe au m\u00eame niveau qu'un type *builtin* comme `list` ou `dict`. \n", "\n", "Par exemple on a besoin de manipuler des matrices $2\\times 2$\n", "\n", "$ A = \\left( \\begin{array}{cc} a_{11} & a_{12} \\\\\n", "a_{21} & a_{22}\\end{array} \\right) $"]}, {"block": 4, "type": "markdown", "linesLength": 4, "startIndex": 9, "lines": ["Pour cela on pourrait utiliser la classe `matrix` de `numpy`.  \n", "\n", "Mais nous allons utiliser ce cas d'\u00e9tude comme exercice; nous allons \u00e9crire **notre propre classe `Matrix2`** pour voir les m\u00e9canismes de base des classes de python en action sur cet exemple concret.\n", "Naturellement cette impl\u00e9mentation n'a **qu'une fonction p\u00e9dagogique**, et a un certain nombre de d\u00e9fauts par ailleurs - comme le fait d'avoir une dimension 2x2 qui n'est pas param\u00e9trable."]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 13, "lines": ["Discutons \u00e0 pr\u00e9sent cette toute premi\u00e8re version de `Matrix2`."]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 14, "lines": ["La classe d\u00e9finit deux m\u00e9thodes, nomm\u00e9es `__init__` et `determinant`. \n", "\n", "La m\u00e9thode **`__init__`**, comme toutes celles qui ont un nom en `__nom__`, est une **m\u00e9thode sp\u00e9ciale**. En l'occurrence, il s'agit de ce qu'on appelle le **constructeur** de la classe, c'est-\u00e0-dire le code qui va \u00eatre appel\u00e9 lorsqu'on cr\u00e9e une instance. Voyons cela tout de suite sur un exemple."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Vous remarquez que `__init__` s'attend \u00e0 recevoir *deux arguments* que nous avons choisi de nommer `self` et `a`. Le **premier** de ces arguments correspond \u00e0 l'**instance en cours de cr\u00e9ation**, et comme pour toutes les m\u00e9thodes de classe, la **convention** est de le nommer **`self`**. "]}, {"block": 8, "type": "markdown", "linesLength": 16, "startIndex": 18, "lines": ["<table>\n", "<tr><td>\n", "<pre>\n", "class Foo:\n", "    def __init__ (self, id, name):\n", "        self.id = id\n", "        self.name = name\n", "</pre>\n", "</td>\n", "<td>\n", "<pre>\n", "foo = Foo (id, name)\n", "</pre>\n", "</td>\n", "</tr>\n", "</table>"]}]