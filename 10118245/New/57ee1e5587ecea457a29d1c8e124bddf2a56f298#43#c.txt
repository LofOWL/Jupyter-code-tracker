[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Ensembles"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 2, "startIndex": 3, "lines": ["Ce document r\u00e9sume les op\u00e9rations courantes disponibles sur le type `set`.", "On rappelle que le type `set` est un type **mutable**."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["### Cr\u00e9ation en extension"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["On cr\u00e9e un ensemble avec les accolades, comme les dictionnaires (mais sans utiliser le caract\u00e8re `:`) et cela donne par exemple"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Cr\u00e9ation - la fonction `set`"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Il devrait \u00eatre clair \u00e0 ce stade que, le nom du type \u00e9tant `set`, la fonction `set` est un constructeur d'ensembles. On aurait donc aussi bien pu faire"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["### Cr\u00e9er un ensemble vide"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Il faut remarquer que l'on ne peut pas cr\u00e9er un ensemble vide en extension. En effet "]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Ceci est li\u00e9 \u00e0 des raisons historiques, les ensembles n'ayant fait leur apparition que tardivement dans le langage en tant que <em>citoyen de premi\u00e8re classe</em>."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Pour cr\u00e9er un ensemble vide, la pratique la plus courante est celle-ci&nbsp;:"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Ou \u00e9galement, moins \u00e9l\u00e9gant mais que l'on trouve parfois dans du vieux code&nbsp;:"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["### Un \u00e9l\u00e9ment dans un ensemble doit \u00eatre globalement immuable"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["On a vu pr\u00e9c\u00e9demment que les cl\u00e9s dans un dictionnaire doivent \u00eatre globalement immuables. Pour exactement les m\u00eames raisons, les \u00e9l\u00e9ments d'un ensemble doivent aussi \u00eatre globalement immuables."]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 16, "lines": ["    # on ne peut pas ins\u00e9rer un tuple qui contient une liste", "    >>> ensemble = {(1, 2, [3, 4])}", "    Traceback (most recent call last):", "      File \"<stdin>\", line 1, in <module>", "    TypeError: unhashable type: 'list'"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Le type `set` \u00e9tant lui-m\u00eame mutable, on ne peut pas cr\u00e9er un ensemble d'ensembles"]}, {"block": 17, "type": "markdown", "linesLength": 4, "startIndex": 22, "lines": ["    >>> ensemble = {{1, 2}}", "    Traceback (most recent call last):", "      File \"<stdin>\", line 1, in <module>", "    TypeError: unhashable type: 'set'"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Et c'est une des raisons d'\u00eatre du type `frozenset`."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["### Cr\u00e9ation - la fonction `frozenset`"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Un `frozenset` est un ensemble qu'on ne peut pas modifier, et qui donc peut servir de cl\u00e9 dans un dictionnaire, ou \u00eatre inclus dans un autre ensemble (mutable ou pas)."]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["Il n'existe pas de raccourci syntaxique comme les `{}` pour cr\u00e9er un ensemble immuable, qui doit \u00eatre cr\u00e9\u00e9 avec la fonction `frozenset`. Toutes les op\u00e9rations document\u00e9es dans ce notebook, et qui n'ont pas besoin de modifier l'ensemble, sont disponibles sur un `frozenset`. ", "", "Parmi les fonctions exclues sur un `frozenset`, on peut citer:  `update`, `pop`, `clear`, `remove`, `discard`..."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["### Op\u00e9rations simples"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["##### Test d'appartenance"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["##### Cardinal"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["##### Manipulations"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["La capture d'exception avec `try` et `except`  sert \u00e0 capturer une erreur d'ex\u00e9cution du programme (qu'on appelle exception) pour continuer le programme. Le but de cet exemple est simplement de montrer (d'une mani\u00e8re plus \u00e9l\u00e9gante que de voir simplement le programme planter avec une exception non captur\u00e9e) que l'expression `ensemble.remove('foo')` g\u00e9n\u00e8re une exception. Si ce concept vous para\u00eet obscur, pas d'inqui\u00e9tude, nous reviendrons dessus en d\u00e9tail en semaine 6. "]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["### Op\u00e9rations classiques sur les ensembles"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Donnons nous deux ensembles simples."]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["N'oubliez pas que les ensembles, comme les dictionnaires, ne sont **pas ordonn\u00e9s**."]}, {"block": 30, "type": "markdown", "linesLength": 3, "startIndex": 40, "lines": ["**Remarques** ", " * Les notations des op\u00e9rateurs sur les ensembles rappellent les op\u00e9rateurs \"bit-\u00e0-bit\" sur les entiers.", " * Ces op\u00e9rateurs sont \u00e9galement disponibles sous la forme de m\u00e9thodes"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["##### Union"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["##### Intersection"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["##### Diff\u00e9rence"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["##### Diff\u00e9rence sym\u00e9trique"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["On rappelle que $A \\Delta B = (A - B) \\cup (B - A)$"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["### Comparaisons"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Ici encore on se donne deux ensembles"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["##### \u00c9galit\u00e9"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["##### Inclusion"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["##### Ensembles disjoints"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["### Pour en savoir plus"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["Reportez vous \u00e0 [la section sur les ensembles](https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset) dans la documentation python"]}]