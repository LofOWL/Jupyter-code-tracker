[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les slices en python"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Ce support de cours reprend les notions de \"slicing\" vues dans la vid\u00e9o."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Nous allons illustrer les slices sur la chaine suivante; rappelez-vous toutefois que ce m\u00e9canisme fonctionne avec toutes les s\u00e9quences comme les listes ou les tuples."]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 5, "lines": ["chaine = \"abcdefghijklmnopqrstuvwxyz\" ; print chaine"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Slice sans pas"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["On a vu en cours qu'une slice permet de d\u00e9signer toute une plage d'\u00e9l\u00e9ments d'une s\u00e9quence. Ainsi on peut \u00e9crire"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 8, "lines": ["chaine[2:6]"]}, {"block": 9, "type": "markdown", "linesLength": 9, "startIndex": 9, "lines": ["Les d\u00e9butants ont parfois du mal avec les bornes. Il faut se souvenir que\n", "\n", "* les indices commencent comme toujours \u00e0 z\u00e9ro\n", "* le premier indice `debut` est inclus\n", "* le second indice `fin` est exclu\n", "* on obtient en tout `fin-debut` items dans le r\u00e9sultat\n", "\n", "Ainsi ci-dessus le r\u00e9sultat contient 4 \u00e9l\u00e9ments = 6-2\n", " "]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["On peut omettre une borne"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["chaine[:6]"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["et utiliser des indices n\u00e9gatifs pour compter \u00e0 partir de la fin,"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["chaine[3:-3]"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["chaine[-3:]"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["### Slice avec pas"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Il est \u00e9galement possible de pr\u00e9ciser un 'pas', de fa\u00e7on \u00e0 ne choisir, dans la plage donn\u00e9e, que par exemple un \u00e9l\u00e9ment sur deux. Par exemple:"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["chaine[3:-3:2]"]}, {"block": 18, "type": "markdown", "linesLength": 3, "startIndex": 26, "lines": ["Comme on le devine, le troisi\u00e8me \u00e9l\u00e9ment de la slice, ici '2', d\u00e9termine le pas. On ne retient donc, dans la chaine \"def...\" que \"d\", puis \"f\", et ainsi de suite.\n", "\n", "On peut pr\u00e9ciser du coup la borne de fin (ici -3) avec un peu de libert\u00e9 puisqu'on obtiendrait un r\u00e9sultat identique avec -4:"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["chaine[3:-4:2]"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["### Pas n\u00e9gatif"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 31, "lines": ["Il est m\u00eame possible de sp\u00e9cifier un pas n\u00e9gatif. Dans ce cas, de mani\u00e8re un peu contre-intuitive, il faut pr\u00e9ciser un d\u00e9but (le premier indice de la slice) qui soit \"plus \u00e0 droite\" que la fin (le second indice).\n", "\n", "Pour prendre un exemple, comme l'\u00e9l\u00e9ment \"-3\" i.e. 'x' est plus \u00e0 droite que l'\u00e9l\u00e9ment \"3\" i.e. 'd', \u00e9videmment on obtiendrait une liste vide si on ne pr\u00e9cisait pas le pas"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["chaine[-3:3]"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Si maintenant on pr\u00e9cise un pas n\u00e9gatif, on obtient cette fois"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["chaine[-3:3:-2]"]}]