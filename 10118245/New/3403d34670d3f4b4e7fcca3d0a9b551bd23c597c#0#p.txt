[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Autres librairies"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["import numpy as np"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["from ipywidgets import interact, fixed, FloatSlider"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["from bokeh.plotting import figure, show\n", "from bokeh.io import push_notebook, output_notebook"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["output_notebook()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["*****"]}, {"block": 7, "type": "code", "linesLength": 5, "startIndex": 12, "lines": ["fig1 = figure(\n", "    title=\"fonctions trigonom\u00e9triques\",\n", "    plot_height=300, plot_width=600,\n", "    y_range=(-5, 5),\n", ")"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["x = np.linspace(0, 2*np.pi, 2000)\n", "y = np.sin(x)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["courbe_trigo = fig1.line(x, y, color=\"#2222aa\", line_width=3)"]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 20, "lines": ["def update_trigo(function_name, frequence=1, amplitude=1, phase=0, handle=None):\n", "    func = getattr(np, function_name)\n", "    courbe_trigo.data_source.data['y'] = amplitude * func(frequence * x + phase)\n", "    push_notebook(handle)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["handle1 = show(fig1, notebook_handle=True)"]}, {"block": 12, "type": "code", "linesLength": 6, "startIndex": 25, "lines": ["interact(update_trigo, function_name=[\"sin\", \"cos\", \"tan\"],\n", "         frequence=(1,20),\n", "         amplitude=[0.5, 1, 3, 5],\n", "         phase=(0, 2*np.pi, 0.05),\n", "         handle=fixed(handle1),\n", "        );"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["*****"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["### distribution uniforme"]}, {"block": 15, "type": "code", "linesLength": 9, "startIndex": 33, "lines": ["def uniform_distribution(N):\n", "    # on tire au hasard un rho et un rayon\n", "    rhos = 2 * np.pi * np.random.sample(N)\n", "    rads = np.random.sample(N)\n", "    # il faut prendre la racine carr\u00e9e du rayon \n", "    # sinon ce n'est pas uniforme dans le plan\n", "    circle_x = np.sqrt(rads) * np.cos(rhos)\n", "    circle_y = np.sqrt(rads) * np.sin(rhos)\n", "    return circle_x, circle_y"]}, {"block": 16, "type": "code", "linesLength": 7, "startIndex": 42, "lines": ["N = 1000\n", "radii = np.random.random(size=N) * .25\n", "reds = 50 + 200*np.random.random(size=N)\n", "greens = 30 + 220*np.random.random(size=N)\n", "colors = [f\"#{int(r):02x}{int(g):02x}{150:02x}\"\n", "          for r, g in zip(reds, greens)\n", "         ]"]}, {"block": 17, "type": "code", "linesLength": 5, "startIndex": 49, "lines": ["fig2 = figure(title=\"uniform distribution example\",\n", "              plot_height=300, plot_width=300,\n", "              x_range=(-10, 10),\n", "              y_range=(-10, 10),\n", "              )"]}, {"block": 18, "type": "code", "linesLength": 7, "startIndex": 54, "lines": ["x0, y0 = uniform_distribution(N)\n", "cloud = fig2.circle(\n", "    x0, y0, \n", "    radius = radii,\n", "    fill_color=colors, fill_alpha=0.6, \n", "    line_color=None, line_width=.1\n", ")"]}, {"block": 19, "type": "code", "linesLength": 9, "startIndex": 61, "lines": ["def update_cloud(rx, ry, dx, dy, alpha, handle):\n", "    # on recalcule les x et y \n", "    # \u00e0 partir des valeurs initiales\n", "    s, c = np.sin(alpha), np.cos(alpha)\n", "    x = dx + c * rx * x0 - s * ry * y0\n", "    y = dy + s * rx * x0 + c * ry * y0 \n", "    cloud.data_source.data['x'] = x\n", "    cloud.data_source.data['y'] = y\n", "    push_notebook(handle)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["handle2 = show(fig2, notebook_handle=True)"]}, {"block": 21, "type": "code", "linesLength": 11, "startIndex": 71, "lines": ["interact(\n", "    update_cloud,\n", "    rx=FloatSlider(min=.5, max=8, \n", "                   step=.1, value=1.),\n", "    ry=FloatSlider(min=.5, max=8,\n", "                   step=.1, value=1.),\n", "    dx=(-3, +3, .2),\n", "    dy=(-3, +3, .2),\n", "    alpha=(0., np.pi, .05),\n", "    handle=fixed(handle2)\n", ");"]}]