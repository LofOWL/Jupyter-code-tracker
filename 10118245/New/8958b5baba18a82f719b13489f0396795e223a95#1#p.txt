[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Boucle d'\u00e9v\u00e9nements"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["[`asyncio.get_event_loop().run_complete(<future>)`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_until_complete)"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 3, "lines": ["```\n", "asyncio.get_event_loop().run_complete(\n", "    asyncio.gather(coro1, coro2, ...)\n", "))\n", "```"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["## Ajout de traitements"]}, {"block": 5, "type": "markdown", "linesLength": 4, "startIndex": 9, "lines": ["`asyncio.ensure_future(coro)`\n", "\n", "* pour ajouter une coroutine dans la boucle\n", "* avant ou apr\u00e8s le lancement de la boucle"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["[`asyncio.get_event_loop().run_forever()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_forever)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["# Utilitaire #1"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 15, "lines": ["import asyncio\n", "\n", "from asynchelpers import start_timer, show_timer"]}, {"block": 9, "type": "code", "linesLength": 5, "startIndex": 18, "lines": ["import time\n", "\n", "start_timer()\n", "time.sleep(0.5)\n", "show_timer('un message')"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["# Utilitaire #2"]}, {"block": 11, "type": "code", "linesLength": 7, "startIndex": 24, "lines": ["from asynchelpers import sequence\n", "\n", "start_timer()\n", "asyncio.get_event_loop().run_until_complete(\n", "    sequence(\"hello\", 1)\n", ")\n", "print(\"done\")"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["# Boucle sans fin"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 32, "lines": ["import asyncio\n", "\n", "loop = asyncio.get_event_loop()\n", "asyncio.ensure_future(sequence('foo', delay=0.5))\n", "asyncio.ensure_future(sequence('bar', delay=1))"]}, {"block": 14, "type": "code", "linesLength": 8, "startIndex": 37, "lines": ["# on lance la boucle sans fin\n", "# interrompre aver Kernel -> Interrupt \n", "# raccourci clavier : 'i' (doubler si n\u00e9cessaire)\n", "try:\n", "    start_timer()\n", "    asyncio.get_event_loop().run_forever()\n", "except KeyboardInterrupt as e:\n", "    print(\"bye\")"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["# `run_until_complete` vs `run_forever`"]}, {"block": 16, "type": "markdown", "linesLength": 4, "startIndex": 46, "lines": ["* `run_until_complete`\n", "\n", "   * prend exactement un argument\n", "   * retourne la valeur\n"]}, {"block": 17, "type": "markdown", "linesLength": 4, "startIndex": 50, "lines": ["* `run_forever`\n", "  * ne prend pas d'argument\n", "  * ne retourne pas\n", "  * orient\u00e9 traitement massivement asynchrone"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["# `get_event_loop()`"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 55, "lines": ["* `get_event_loop()` \n", "  * boucle par d\u00e9faut du thread courant\n", "  * ne *cr\u00e9e pas* de boucle en dehors du thread principal"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["# `{set,new}_event_loop()`"]}, {"block": 21, "type": "code", "linesLength": 7, "startIndex": 59, "lines": ["# pour repartir d'une boucle vierge:\n", "\n", "# loop = asyncio.new_event_loop()\n", "# asyncio.set_event_loop(loop)\n", "\n", "# ou encore tout simplement\n", "asyncio.set_event_loop(asyncio.new_event_loop())"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## Ajout de traitements \u00e0 la vol\u00e9e (*fork*)"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["![fork](w8-s5-av-fig1.png)"]}, {"block": 24, "type": "code", "linesLength": 6, "startIndex": 68, "lines": ["# c1 et c3 sont tr\u00e8s simples\n", "async def c1():\n", "    await sequence(\"c1\", delay=2)\n", "\n", "async def c3():\n", "    await sequence(\"c3\", delay=2)    "]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["![fork](w8-s5-av-fig1.png)"]}, {"block": 26, "type": "code", "linesLength": 7, "startIndex": 75, "lines": ["async def c2():\n", "    show_timer('>>> c2')\n", "    await asyncio.sleep(1)\n", "    show_timer('=== ensure_future')\n", "    asyncio.ensure_future(c3())\n", "    await asyncio.sleep(1)\n", "    show_timer('<<< c2')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["# *fork* avec `ensure_future`"]}, {"block": 28, "type": "code", "linesLength": 9, "startIndex": 83, "lines": ["# interrompre apr\u00e8s 3s\n", "asyncio.ensure_future(c1())\n", "asyncio.ensure_future(c2())\n", "\n", "start_timer()\n", "try:\n", "   asyncio.get_event_loop().run_forever()\n", "except:\n", "    print('interrupted')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 92, "lines": ["![fork](w8-s5-av-fig1.png)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["# `run_{until_complete,forever}`"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 94, "lines": ["asyncio.set_event_loop(\n", "    asyncio.new_event_loop())"]}, {"block": 32, "type": "code", "linesLength": 6, "startIndex": 96, "lines": ["async def c1():\n", "    await sequence('c1', delay=1)\n", "async def c2():\n", "    await sequence('c2', delay=2)\n", "async def c3():\n", "    await sequence('c3', delay=3)"]}, {"block": 33, "type": "code", "linesLength": 8, "startIndex": 102, "lines": ["loop = asyncio.get_event_loop()\n", "\n", "asyncio.ensure_future(c1())\n", "asyncio.ensure_future(c3())\n", "\n", "start_timer()\n", "loop.run_until_complete(c2())\n", "print(\"done 1\")"]}, {"block": 34, "type": "code", "linesLength": 5, "startIndex": 110, "lines": ["# interrompre apr\u00e8s 1s\n", "try:\n", "    loop.run_forever()\n", "except:\n", "    print(\"interrupted\")"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 115, "lines": ["# R\u00e9sum\u00e9"]}, {"block": 36, "type": "markdown", "linesLength": 3, "startIndex": 116, "lines": ["* `get_event_loop()` \n", "  * acc\u00e9de \u00e0 la boucle courante\n", "  * `new_event_loop()` et `set_event_loop()`"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 119, "lines": ["* `ensure_future()`"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 120, "lines": ["* `run_until_complete()` et `run_forever()`"]}]