[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["## Exercice - niveau basique"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 2, "lines": ["from corrections.exo_laccess import exo_laccess"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 3, "lines": ["Vous devez \u00e9crire une fonction `laccess` qui prend en argument une liste, et qui retourne:\n", "\n", "* `None` si la liste est vide\n", "* sinon le dernier \u00e9l\u00e9ment de la liste si elle est de taille paire\n", "* et sinon l'\u00e9l\u00e9ment du milieu."]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 8, "lines": ["exo_laccess.example()"]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 9, "lines": ["# \u00e9crivez votre code ici\n", "def laccess(liste):\n", "    return \"votre code\""]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["# pour le corriger\n", "exo_laccess.correction(laccess)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Une fois que votre code fonctionne, vous pouvez regarder si par hasard il marcherait aussi avec des chaines:"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["from corrections.exo_laccess import exo_laccess_strings"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["exo_laccess_strings.correction(laccess)"]}]