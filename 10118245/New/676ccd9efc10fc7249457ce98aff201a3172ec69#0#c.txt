[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Listes infinies & r\u00e9f\u00e9rences circulaires"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["%load_ext ipythontutor"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Nous allons maintenant construire un objet un peu abscons. Cet exemple pr\u00e9cis n'a aucune utilit\u00e9 pratique, mais permet de bien comprendre la logique du langage."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Construisons une liste \u00e0 un seul \u00e9l\u00e9ment, peu importe quoi\u00a0:"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["infini_1 = [None]"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["\u00c0 pr\u00e9sent nous allons remplacer le premier et seul \u00e9l\u00e9ment de la liste par\u2026 la liste elle-m\u00eame\u00a0:"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["infini_1[0] = infini_1\n", "print(infini_1)"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 14, "lines": ["Pour essayer de d\u00e9crire l'objet liste ainsi obtenu, on pourrait dire qu'il s'agit d'une liste de taille 1 et de profondeur infinie, une sorte de fil infini en quelque sorte.\n", "\n", "Naturellement, l'objet obtenu est difficile \u00e0 imprimer de mani\u00e8re convaincante. Pour faire en sorte que cet objet soit tout de m\u00eame imprimable, et \u00e9viter une boucle infinie, python utilise l'ellipse `...` pour indiquer ce qu'on appelle une r\u00e9f\u00e9rence circulaire. Si on n'y prenait pas garde en effet, il faudrait \u00e9crire `[[[[ etc. ]]]]` avec une infinit\u00e9 de crochets."]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["Voici la m\u00eame s\u00e9quence ex\u00e9cut\u00e9e sous http://pythontutor.com\u00a0; il s'agit d'un site tr\u00e8s utile pour comprendre comment python impl\u00e9mente les objets, les r\u00e9f\u00e9rences et les partages.\n", "\n", "Cliquez sur le bouton `Forward` pour avancer dans l'ex\u00e9cution de la s\u00e9quence. \u00c0 la fin de la s\u00e9quence vous verrez - ce n'est pas forc\u00e9ment clair - la seule cellule de la liste \u00e0 se r\u00e9f\u00e9rencer elle-m\u00eame\u00a0:"]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 20, "lines": ["%%ipythontutor height=230\n", "infini_1 = [None]\n", "infini_1[0] = infini_1"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Toutes les fonctions de python ne sont pas aussi intelligentes que `print`. Bien qu'on puisse comparer cette liste avec elle-m\u00eame\u00a0:"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["infini_1 == infini_1"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["il n'en est pas de m\u00eame si on la compare avec un objet analogue mais pas identique\u00a0:"]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 26, "lines": ["infini_2 = [0]\n", "infini_2[0] = infini_2\n", "print(infini_2)\n", "infini_1 == infini_2"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["### G\u00e9n\u00e9ralisation aux r\u00e9f\u00e9rences circulaires"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["On obtient un ph\u00e9nom\u00e8ne \u00e9quivalent d\u00e8s lors qu'un \u00e9l\u00e9ment contenu dans un objet fait r\u00e9f\u00e9rence \u00e0 l'objet lui-m\u00eame. Voici par exemple comment on peut construire un dictionnaire qui contient une r\u00e9f\u00e9rence circulaire\u00a0:"]}, {"block": 18, "type": "code", "linesLength": 13, "startIndex": 32, "lines": ["collection_de_points = [\n", "    {'x': 10,'y': 20},\n", "    {'x': 30,'y': 50},\n", "    # imaginez plein de points\n", "]\n", "\n", "# on rajoute dans chaque dictionnaire une cl\u00e9 'points'\n", "# qui r\u00e9f\u00e9rence la collection compl\u00e8te\n", "for point in collection_de_points:\n", "    point['points'] = collection_de_points\n", "\n", "# la structure poss\u00e8de maintenant des r\u00e9f\u00e9rences circulaires\n", "print(collection_de_points)"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 45, "lines": ["On voit \u00e0 nouveau r\u00e9appara\u00eetre les ellipses, qui indiquent que pour chaque point, le nouveau champ `points` est un objet qui a d\u00e9j\u00e0 \u00e9t\u00e9 imprim\u00e9.\n", "\n", "Cette technique est cette fois tr\u00e8s utile et tr\u00e8s utilis\u00e9e dans la pratique, d\u00e8s lors qu'on a besoin de naviguer de mani\u00e8re arbitraire dans une structure de donn\u00e9es compliqu\u00e9e. Dans cet exemple, pas tr\u00e8s r\u00e9aliste naturellement, on pourrait \u00e0 pr\u00e9sent acc\u00e9der depuis un point \u00e0 tous les autres points de la collection dont il fait partie."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["\u00c0 nouveau il peut \u00eatre int\u00e9ressant de voir le comportement de cet exemple avec <http://pythontutor.com> pour bien comprendre ce qui se passe, si cela ne vous semble pas clair \u00e0 premi\u00e8re vue\u00a0:"]}, {"block": 21, "type": "code", "linesLength": 8, "startIndex": 49, "lines": ["%%ipythontutor curInstr=7\n", "points = [\n", "    {'x': 10,'y': 20},\n", "    {'x': 30,'y': 50},\n", "]\n", "\n", "for point in points:\n", "    point['points'] = points"]}]