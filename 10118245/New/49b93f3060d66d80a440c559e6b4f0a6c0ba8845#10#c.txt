[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# \u00e9cueils classiques"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 2, "lines": ["import asyncio"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## \u00e9cueil n\u00b01 :  fonction coroutine *vs* coroutine"]}, {"block": 4, "type": "code", "linesLength": 4, "startIndex": 4, "lines": ["# une fonction coroutine\n", "async def foo(delay):\n", "    await asyncio.sleep(1)\n", "    print(\"foo\")"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 8, "lines": ["# renvoie un objet coroutine\n", "# si on l'appelle normalement\n", "# il ne se passe rien\n", "foo(4)"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 12, "lines": ["# c'est exactement comme \n", "# une fonction g\u00e9n\u00e9ratrice\n", "def squares(scope):\n", "    for i in scope:\n", "        print(i)\n", "        yield i**2 "]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 18, "lines": ["# qui retourne un\n", "# it\u00e9rateur, et l\u00e0 encore\n", "# il ne se passe rien\n", "squares(4)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["### tous les sc\u00e9narios"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["def synchro():\n", "    pass"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["async def asynchro():\n", "    pass"]}, {"block": 11, "type": "code", "linesLength": 5, "startIndex": 27, "lines": ["def foo(): \n", "    synchro()        # 1 # OK\n", "    asynchro()       # 2 # ** ATTENTION **\n", "    await synchro()  # 3 # SyntaxError\n", "    await asynchro   # 4 # SyntaxError"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 32, "lines": ["async def afoo():\n", "    synchro()        # 5 # OK\n", "    await asynchro() # 6 # OK\n", "    asynchro()       # 7 # ** ATTENTION **\n", "    await synchro()  # 8 # ** ATTENTION **"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["### cas n\u00b02"]}, {"block": 14, "type": "markdown", "linesLength": 2, "startIndex": 38, "lines": ["* une fonction appelle une coroutine sans `await`\n", "* \u27a0 avertissement "]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["!cat calls2.py"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["!python calls2.py "]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["### cas n\u00b07"]}, {"block": 18, "type": "markdown", "linesLength": 2, "startIndex": 43, "lines": ["* une coroutine appelle une autre coroutine sans `await`\n", "* idem : avertissement"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["# avec until_complete\n", "!cat calls7.py"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["!python calls7.py"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["### cas n\u00b08"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["async def asynchro():\n", "    await synchro()"]}, {"block": 23, "type": "markdown", "linesLength": 3, "startIndex": 51, "lines": ["* ***peut*** \u00eatre l\u00e9gitime - si `synchro()` retourne un awaitable\n", "\n", "* mais en g\u00e9n\u00e9ral, c'est suspect !"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 54, "lines": ["import inspect\n", "inspect.isawaitable(synchro())"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["## \u00e9cueil n\u00b02 : code trop bloquant"]}, {"block": 26, "type": "code", "linesLength": 5, "startIndex": 57, "lines": ["async def countdown(n, period):\n", "    while n >= 0:\n", "        print('.', end='', flush=True)\n", "        await asyncio.sleep(period)\n", "        n -= 1"]}, {"block": 27, "type": "code", "linesLength": 6, "startIndex": 62, "lines": ["import time\n", "async def compute(n, period):\n", "    for i in range(n):\n", "        # on simule un calcul\n", "        time.sleep(period)\n", "        print('x', end='', flush=True)"]}, {"block": 28, "type": "code", "linesLength": 4, "startIndex": 68, "lines": ["from asynchelpers import reset_loop\n", "reset_loop()\n", "asyncio.get_event_loop().run_until_complete(\n", "    asyncio.gather(countdown(10, .05), compute(10, .05)))"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["### faites respirer votre code"]}, {"block": 30, "type": "code", "linesLength": 5, "startIndex": 73, "lines": ["async def countdown(n, period):\n", "    while n >= 0:\n", "        print('.', end='', flush=True)\n", "        await asyncio.sleep(period)\n", "        n -= 1"]}, {"block": 31, "type": "code", "linesLength": 8, "startIndex": 78, "lines": ["import time\n", "async def compute(n, period):\n", "    for i in range(n):\n", "        # on simule un calcul\n", "        time.sleep(period)\n", "        print('x', end='', flush=True)\n", "        # await None n'est pas valide\n", "        await asyncio.sleep(0)"]}, {"block": 32, "type": "code", "linesLength": 3, "startIndex": 86, "lines": ["reset_loop()\n", "asyncio.get_event_loop().run_until_complete(\n", "    asyncio.gather(countdown(10, .05), compute(10, .05)))"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["# \u00e9cueil n\u00b03 "]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["* exceptions non lues"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 91, "lines": ["!cat raise.py"]}, {"block": 36, "type": "code", "linesLength": 2, "startIndex": 92, "lines": ["# interrompre avec ii\n", "!python raise.py"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["# bonnes pratiques de d\u00e9veloppement"]}, {"block": 38, "type": "markdown", "linesLength": 4, "startIndex": 95, "lines": ["* voir davantage de recettes de debug ici:\n", "  https://docs.python.org/3/library/asyncio-dev.html\n", "\n", "* notamment variable d'environnement `PYTHONASYNCIODEBUG`"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["# r\u00e9sum\u00e9"]}, {"block": 40, "type": "markdown", "linesLength": 4, "startIndex": 100, "lines": ["* bien utiliser `await` avec les coroutines\n", "* appels synchrones: oui mais brefs \n", "* lire les exceptions une fois la boucle termin\u00e9e\n", "* penser \u00e0 activer le mode debug en cas de souci"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 104, "lines": ["# conclusion"]}, {"block": 42, "type": "markdown", "linesLength": 6, "startIndex": 105, "lines": ["* (`async def` et `await`) + `asyncio`\n", "\n", "  = une interface de programmation unifi\u00e9e pour\n", "  * les acc\u00e8s r\u00e9seau\n", "  * les processus externes\n", "  * objets utilitaires asynchrones"]}, {"block": 43, "type": "markdown", "linesLength": 4, "startIndex": 111, "lines": ["* technologie r\u00e9cente\n", "\n", "  * tr\u00e8s gros potentiel\n", "  * \u00e9volutions \u00e0 pr\u00e9voir"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 115, "lines": ["************ Suppl\u00e9ments"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 116, "lines": ["# quel type de fonction ?"]}, {"block": 46, "type": "code", "linesLength": 2, "startIndex": 117, "lines": ["from inspect import iscoroutinefunction\n", "iscoroutinefunction(synchro)"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 119, "lines": ["iscoroutinefunction(asynchro)"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 120, "lines": ["##### attention toutefois"]}, {"block": 49, "type": "code", "linesLength": 2, "startIndex": 121, "lines": ["# une vraie fonction qui renvoie un awaitable\n", "iscoroutinefunction(asyncio.gather)"]}, {"block": 50, "type": "code", "linesLength": 2, "startIndex": 123, "lines": ["# ditto\n", "iscoroutinefunction(asyncio.wait)"]}]