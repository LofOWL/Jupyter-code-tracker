[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les diff\u00e9rentes copies"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 2, "lines": ["%load_ext ipythontutor"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Deux types de copie"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 5, "lines": ["Pour r\u00e9sumer les deux grands types de copie que l'on a vues dans la vid\u00e9o: \n", " * La *shallow copy* - de l'anglais *shallow* qui signifie superficiel\n", " * La *deep copy* - de *deep* qui signifie profond"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Le module `copy`"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 9, "lines": ["Pour r\u00e9aliser une copie, la m\u00e9thode la plus simple, en ceci qu'elle fonctionne avec tous les types de mani\u00e8re identique, consiste \u00e0 utiliser [le module standard `copy`](https://docs.python.org/3/library/copy.html), et notamment\n", " * `copy.copy` pour une copie superficielle\n", " * `copy.deepcopy` pour une copie en profondeur"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 12, "lines": ["import copy\n", "#help(copy.copy)\n", "#help(copy.deepcopy)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### Un exemple"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Nous allons voir le r\u00e9sultat des deux formes de copies sur un m\u00eame sujet de d\u00e9part."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["#### La copie superficielle / *shallow* copie / `copy.copy` "]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["N'oubliez pas de cliquer le bouton `Forward` dans la fen\u00eatre pythontutor:"]}, {"block": 13, "type": "code", "linesLength": 12, "startIndex": 19, "lines": ["%%ipythontutor height=410 curInstr=6\n", "import copy\n", "# On se donne un objet de d\u00e9part\n", "source = [ \n", "    [1, 2, 3],  # une liste\n", "    {1, 2, 3},  # un ensemble\n", "    (1, 2, 3),  # un tuple\n", "    '123',       # un string\n", "    123,         # un entier\n", "]\n", "# une copie simple renvoie ceci\n", "shallow_copy = copy.copy(source)"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 31, "lines": ["Vous remarquez que \n", "* la source et la copie partagent tous leurs (sous-)\u00e9l\u00e9ments, et notamment la liste `source[0]` et l'ensemble `source[1]`;\n", "* ainsi, apr\u00e8s cette copie, on peut modifier l'un de ces deux objets (la liste ou l'ensemble), et ainsi modifier la source **et** la copie;"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 34, "lines": ["On rappelle aussi que, la source \u00e9tant une liste, on aurait pu aussi bien faire la copie superficielle avec \n", "\n", "     `shallow2 = source[:]`"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["#### La copie profonde / *deep* copie / `copy.deepcopy` "]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Sur le m\u00eame objet de d\u00e9part, voici ce que fait la copie profonde:"]}, {"block": 18, "type": "code", "linesLength": 12, "startIndex": 39, "lines": ["%%ipythontutor height=410 curInstr=6\n", "import copy\n", "# On se donne un objet de d\u00e9part\n", "source = [ \n", "    [1, 2, 3],  # une liste\n", "    {1, 2, 3},  # un ensemble\n", "    (1, 2, 3),  # un tuple\n", "    '123',       # un string\n", "    123,         # un entier\n", "]\n", "# une copie profonde renvoie ceci\n", "deep_copy = copy.deepcopy(source)"]}, {"block": 19, "type": "markdown", "linesLength": 7, "startIndex": 51, "lines": ["Ici, il faut remarquer que\n", "* les deux objets mutables accessibles via `source`, c'est-\u00e0-dire la liste `source[0]` et l'ensemble `source[1]`, ont \u00e9t\u00e9 tous deux dupliqu\u00e9s;\n", "* le tuple correpondant \u00e0 `source[2]` n'est pas dupliqu\u00e9, mais comme il n'est pas mutable on ne peut pas modifier la copie au travers de la source;\n", "* de mani\u00e8re g\u00e9n\u00e9rale, on a la bonne propri\u00e9t\u00e9 que la source et sa copie ne partagent rien qui soit modifiable,\n", "* et donc on ne peut pas modifier l'un au travers de l'autre. \n", "\n", "On retrouve donc \u00e0 nouveau l'optimisation qui est mise en place dans python pour impl\u00e9menter les types immuables comme des singletons lorsque c'est possible. Cela a \u00e9t\u00e9 vu en d\u00e9tail dans le compl\u00e9ment consacr\u00e9 \u00e0 l'op\u00e9rateur `is`."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 21, "type": "code", "linesLength": 11, "startIndex": 59, "lines": ["# on r\u00e9p\u00e8te car le code pr\u00e9c\u00e9dent a seulement \u00e9t\u00e9 expos\u00e9 \u00e0 pythontutor\n", "import copy\n", "source = [ \n", "    [1, 2, 3],  # une liste\n", "    {1, 2, 3},  # un ensemble\n", "    (1, 2, 3),  # un tuple\n", "    '123',       # un string\n", "    123,         # un entier\n", "]\n", "shallow_copy = copy.copy(source)\n", "deep_copy = copy.deepcopy(source)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["### Objets *\u00e9gaux* au sens logique"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["Bien s\u00fbr ces trois objets se ressemblent si on fait une comparaison *logique* avec `==`"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 72, "lines": ["print('source == shallow_copy:', source == shallow_copy)\n", "print('source == deep_copy:', source == deep_copy)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["### Inspectons les objets de premier niveau"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["Mais par contre si on compare **l'identit\u00e9** des objets de premier niveau, on voit que `source` et `shallow_copy` partagent leurs objets:"]}, {"block": 27, "type": "code", "linesLength": 4, "startIndex": 76, "lines": ["# voir la cellule ci-dessous si ceci vous parait peu clair\n", "for i, (source_item, copy_item) in enumerate(zip(source, shallow_copy)):\n", "    print(\"source[{i}] is shallow_copy[{i}] -> {compare}\"\n", "          .format(i=i, compare=source_item is copy_item))"]}, {"block": 28, "type": "code", "linesLength": 5, "startIndex": 80, "lines": ["# pour ceux qui ne sont pas encore familiers avec zip et enumerate\n", "# la cellule ci-dessous est essentiellement \u00e9quivalente \u00e0\n", "for i in range(len(source)):\n", "    print(\"source[{i}] is shallow_copy[{i}] -> {compare}\"\n", "          .format(i=i, compare=source[i] is shallow_copy[i]))"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["Alors que naturellement ce **n'est pas le cas** avec la copie en profondeur"]}, {"block": 30, "type": "code", "linesLength": 4, "startIndex": 86, "lines": ["# voir la cellule ci-dessous si ceci vous parait peu clair\n", "for i, (source_item, deep_item) in enumerate(zip(source, deep_copy)):\n", "    print(\"source[{i}] is deep_copy[{i}] -> {compare}\"\n", "          .format(i=i, compare=source_item is deep_item))"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["On retrouve ici ce qu'on avait d\u00e9j\u00e0 remarqu\u00e9 sous pythontutor, \u00e0 savoir que les trois derniers objets - immutables - n'ont pas \u00e9t\u00e9 dupliqu\u00e9s comme on aurait pu s'y attendre."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 91, "lines": ["### On modifie la source"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 92, "lines": ["Il doit \u00eatre clair \u00e0 pr\u00e9sent que, pr\u00e9cis\u00e9ment parce que `deep_copy` est une copie en profondeur, on peut modifier `source` sans impacter du tout `deep_copy`."]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["S'agissant de `shallow_copy`, par contre, seuls les \u00e9l\u00e9ments de premier niveau ont \u00e9t\u00e9 copi\u00e9s. Aussi si on fait une modification par exemple **\u00e0 l'int\u00e9rieur** de la liste qui est le premier fils de `source`, cela sera **r\u00e9percut\u00e9** dans `shallow_copy`"]}, {"block": 35, "type": "code", "linesLength": 5, "startIndex": 94, "lines": ["print(\"avant, source      \", source)\n", "print(\"avant, shallow_copy\", shallow_copy)\n", "source[0].append(4)\n", "print(\"apr\u00e8s, source      \", source)\n", "print(\"apr\u00e8s, shallow_copy\", shallow_copy)"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["Si par contre on remplace compl\u00e8tement un \u00e9l\u00e9ment de premier niveau dans la source, cela ne sera pas r\u00e9percut\u00e9 dans la copie superficielle"]}, {"block": 37, "type": "code", "linesLength": 5, "startIndex": 100, "lines": ["print(\"avant, source      \", source)\n", "print(\"avant, shallow_copy\", shallow_copy)\n", "source[0] = 'remplacement'\n", "print(\"apr\u00e8s, source      \", source)\n", "print(\"apr\u00e8s, shallow_copy\", shallow_copy)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 105, "lines": ["### Copie et circularit\u00e9"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 106, "lines": [" Le module `copy` est semble-t-il capable de copier - m\u00eame en profondeur - des objets contenant des r\u00e9f\u00e9rences circulaires."]}, {"block": 40, "type": "code", "linesLength": 3, "startIndex": 107, "lines": ["l = [None] \n", "l[0] = l\n", "l"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 110, "lines": ["copy.copy(l)"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["copy.deepcopy(l)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["### Pour en savoir plus"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 113, "lines": ["On peut se reporter \u00e0 [la section sur le module `copy`](https://docs.python.org/3/library/copy.html) dans la documentation python."]}]