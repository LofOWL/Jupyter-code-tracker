[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# It\u00e9rateurs"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9daire"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["Dans ce compl\u00e9ment nous allons&nbsp;:", " * tout d'abord dire quelques mots du module `itertools` qui fournit sous forme d'it\u00e9rateurs des utilitaires communs qui peuvent \u00eatre tr\u00e8s utiles&nbsp;;", " * puis dans la partie avanc\u00e9e du compl\u00e9ment nous allons voir, comme un autre exemple d'it\u00e9rateurs, comment impl\u00e9menter notre propre it\u00e9rateur des permutations d'un ensemble fini."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Le module `itertools`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["\u00c0 ce stade, j'esp\u00e8re que vous savez trouver [la documentation du module](https://docs.python.org/2/library/itertools.html) que je vous invite \u00e0 avoir sous la main."]}, {"block": 6, "type": "markdown", "linesLength": 6, "startIndex": 8, "lines": ["Comme vous le voyez dans la doc, les fonctionnalit\u00e9s de `itertools` tombent dans 3 cat\u00e9gories&nbsp;:", " * des it\u00e9rateurs infinis, comme par exemple `cycle`,", " * des it\u00e9rateurs pour \u00e9num\u00e9rer les combinatoires usuelles en math\u00e9matiques, comme les permutations, les combinaisons, le produit cart\u00e9sien, etc.,", " * et enfin des it\u00e9rateurs correspondants \u00e0 des traits que nous avons d\u00e9j\u00e0 rencontr\u00e9s, mais impl\u00e9ment\u00e9s sous forme d'it\u00e9rateurs.", " ", "\u00c0 nouveau, toutes ces fonctionnalit\u00e9s sont offertes **sous la forme d'it\u00e9rateurs**."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Pour d\u00e9tailler un tout petit peu cette derni\u00e8re famille, signalons&nbsp;:"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": [" * `chain` qui permet de **concat\u00e9ner** plusieurs it\u00e9rables sous la forme d'un **it\u00e9rateur**&nbsp;:"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": [" * `izip` qui comme son nom l'indique fait comme `zip` mais sous la forme d'un it\u00e9rateur&nbsp;:"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": [" * `islice` qui est une g\u00e9n\u00e9ralisation de `xrange`. Vous vous souvenez que `xrange` est similaire \u00e0 `range` mais renvoie d\u00e9j\u00e0 un it\u00e9rateur. `islice` permet de travailler sur une s\u00e9quence qui n'est pas les premiers entiers&nbsp;:"]}, {"block": 11, "type": "markdown", "linesLength": 5, "startIndex": 18, "lines": [" * `imap` et `ifilter` qui sont les \u00e9quivalents de `filter` et `map`. Ces deux-l\u00e0 sont donc \u00e0 mettre en rapport avec les fonctions g\u00e9n\u00e9ratrices que l'on a vues dans la s\u00e9quence pr\u00e9c\u00e9dente, dans le sens que nous allons expliciter.", " ", " Vous vous souvenez que `map` et `filter` sont devenus obsol\u00e8tes avec les compr\u00e9hensions de liste. Sauf que, les compr\u00e9hensions retournent, eh bien justement, une liste. Alors qu'en fait, une fois qu'on s'est habitu\u00e9s \u00e0 penser en termes d'it\u00e9rateurs, on r\u00e9alise que c'est souvent dommage que les compr\u00e9hensions ne retournent pas plut\u00f4t un it\u00e9rateur aussi.", " ", " Dans tous les cas, vous voyez que `imap` et `ifilter` sont un peu aux expressions g\u00e9n\u00e9ratrices   ce que `map` et `filter` sont aux compr\u00e9hensions de liste."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["### Impl\u00e9menter un it\u00e9rateur de permutations"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["##### C'est quoi d\u00e9j\u00e0 les permutations ?"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["En guise de rappel, l'ensemble des permutations d'un ensemble fini correspond \u00e0 toutes les fa\u00e7ons d'ordonner ses \u00e9l\u00e9ments&nbsp;; si l'ensemble est de cardinal $n$, il poss\u00e8de $n!$ permutations&nbsp;: on a $n$ fa\u00e7ons de choisir le premier \u00e9l\u00e9ment, $n-1$ fa\u00e7ons de choisir le second, etc."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Un it\u00e9rateur sur les permutations est disponible au travers du module standard `itertools`. Cependant il nous a sembl\u00e9 int\u00e9ressant de vous montrer comment on pourrait \u00e9crire nous-m\u00eames cette fonctionnalit\u00e9, de mani\u00e8re relativement simple."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Pour illustrer le concept, voici \u00e0 quoi ressemblent les 6 permutations d'un ensemble \u00e0 trois \u00e9l\u00e9ments&nbsp;:"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["##### Une impl\u00e9mentation "]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Voici une impl\u00e9mentation possible pour un it\u00e9rateur de permutations&nbsp;:"]}, {"block": 20, "type": "markdown", "linesLength": 15, "startIndex": 31, "lines": ["Ce qu'on a essay\u00e9 d'expliquer dans les commentaires, c'est qu'on proc\u00e8de en fin de compte par r\u00e9currence. Un objet `Permutations` de rang `n` poss\u00e8de un sous-it\u00e9rateur de rang `n-1` qu'on cr\u00e9e dans le constructeur. Ensuite l'objet de rang `n` va faire successivement (c'est-\u00e0-dire \u00e0 chaque appel de `next()`)&nbsp;:", " * appel *0* : ", "   * demander \u00e0 son sous-it\u00e9rateur une permutation de rang `n-1` (en lui envoyant `next`),", "   * la stocker dans l'objet de rang `n`, ce sera utilis\u00e9 par les *n* premier appels,", "   * et construire une liste de taille `n` en ins\u00e9rant `n-1` \u00e0 la fin de la s\u00e9quence de taille `n-1`,", " * appel *1* : ", "   * ins\u00e9rer `n-1` dans la m\u00eame s\u00e9quence de rang `n-1` mais cette fois 1 cran avant la fin,", " * ...", " * appel *n-1* :", "   * ins\u00e9rer `n-1` au d\u00e9but de la s\u00e9quence de rang `n-1`,", " * appel *n* :", "    * refaire `next()` sur le sous-it\u00e9rateur pour traiter une nouvelle sous-s\u00e9quence,", "    * la stocker dans l'objet de rang `n`, comme \u00e0 l'appel *0*, pour ce bloc de n appels,", "    * et construire la permutation en ins\u00e9rant *n-1* \u00e0 la fin, comme \u00e0 l'appel 0,", " * ..."]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 46, "lines": ["On voit donc le caract\u00e8re cyclique d'ordre *n* qui est mat\u00e9rialis\u00e9 par `counter`, que l'on incr\u00e9mente \u00e0 chaque boucle mais modulo *n* - notez d'ailleurs que pour ce genre de comportement on dispose aussi de `itertools.cycle` comme on le verra dans une deuxi\u00e8me version, mais pour l'instant j'ai pr\u00e9f\u00e9r\u00e9 ne pas l'utiliser pour ne pas tout embrouiller ;) ", "", "La terminaison se g\u00e8re tr\u00e8s simplement, car une fois que l'on a trait\u00e9 toutes les s\u00e9quences d'ordre *n-1* eh bien on a fini, on n'a m\u00eame pas besoin de lever StopIteration explicitement, sauf bien s\u00fbr dans le cas *n=1*.", "", "Le seul point un peu d\u00e9licat, si on veut avoir les permutations dans le \"bon\" ordre, consiste \u00e0 commencer \u00e0 ins\u00e9rer `n-1` par la droite (la fin de la sous-s\u00e9quence)."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["##### Discussion"]}, {"block": 23, "type": "markdown", "linesLength": 5, "startIndex": 52, "lines": ["Il existe certainement des tas d'autres fa\u00e7ons de faire bien entendu. Le point important ici, et qui donne toute sa puissance \u00e0 la notion d'it\u00e9rateur, c'est **qu'\u00e0 aucun moment on ne construit** une liste ou une s\u00e9quence quelconque de** $n!$ termes**. ", "", "C'est une erreur fr\u00e9quente chez les d\u00e9butants que de calculer une telle liste dans le constructeur, mais proc\u00e9der de cette fa\u00e7on c'est aller exactement \u00e0 l'oppos\u00e9 de ce pourquoi les it\u00e9rateurs ont \u00e9t\u00e9 con\u00e7us&nbsp;; au contraire, on veut \u00e9viter \u00e0 tout prix le co\u00fbt d'une telle construction.", "", "On peut le voir sur un code qui n'utiliserait que les 20 premi\u00e8res valeurs de l'it\u00e9rateur, vous constatez que ce code est imm\u00e9diat&nbsp;:"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["Ce tableau vous montre par ailleurs sous un autre angle comment fonctionne l'algorithme, si vous observez le `11` qui balaie en diagonale les 12 premi\u00e8res lignes, puis les 12 suivantes, etc.."]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["##### Ultimes am\u00e9liorations"]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 59, "lines": ["Derni\u00e8res remarques, sur des am\u00e9liorations possibles - mais tout \u00e0 fait optionnelles&nbsp;:", " * le lecteur attentif aura remarqu\u00e9 qu'au lieu d'un entier `counter` on aurait pu profitablement utiliser une instance de `itertools.cycle`, ce qui aurait eu l'avantage d'\u00eatre plus clair sur le propos de ce compteur;", " * aussi dans le m\u00eame mouvement, au lieu de se livrer \u00e0 la gymnastique qui calcule `cutter` \u00e0 partir de `counter`, on pourrait d\u00e8s le d\u00e9part cr\u00e9er dans le cycle les bonnes valeurs en commen\u00e7ant \u00e0 `n-1`."]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["C'est ce qu'on a fait dans cette deuxi\u00e8me version; apr\u00e8s avoir enlev\u00e9 la loghorr\u00e9e de commentaires \u00e7a redevient presque lisible ;)"]}]