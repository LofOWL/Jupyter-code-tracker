[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Enregistrements et instances"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Un enregistrement impl\u00e9ment\u00e9 comme une instance de classe"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Nous reprenons ici la discussion commenc\u00e9e en semaine 3, o\u00f9 nous avions vu comment impl\u00e9menter un enregistrement comme un dictionnaire. Un enregistrement est l'\u00e9quivalent, selon les langages, de *struct* ou *record*."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Notre exemple \u00e9tait celui des personnes, et nous avions alors \u00e9crit quelque chose comme\u00a0:"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["pierre = {'nom': 'pierre', 'age': 25, 'email': 'pierre@foo.com'}\n", "print(pierre)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Cette fois-ci nous allons impl\u00e9menter la m\u00eame abstraction, mais avec une classe `Personne` comme ceci\u00a0:"]}, {"block": 8, "type": "code", "linesLength": 12, "startIndex": 13, "lines": ["class Personne:\n", "    \"\"\"Une personne poss\u00e8de un nom, un \u00e2ge et une adresse e-mail\"\"\"\n", "    \n", "    def __init__(self, nom, age, email):\n", "        self.nom = nom\n", "        self.age = age\n", "        self.email = email\n", "        \n", "    def __repr__(self):\n", "        # comme nous avons la chance de disposer de python-3.6\n", "        # utilisons un f-string\n", "        return f\"<<{self.nom}, {self.age} ans, email:{self.email}>>\""]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Le code de cette classe devrait \u00eatre limpide \u00e0 pr\u00e9sent\u00a0; voyons comment on l'utiliserait - en guise rappel sur le passage d'arguments aux fonctions\u00a0:"]}, {"block": 10, "type": "code", "linesLength": 13, "startIndex": 26, "lines": ["personnes = [\n", "\n", "    # on se fie \u00e0 l'ordre des arguments dans le cr\u00e9ateur\n", "    Personne('pierre', 25, 'pierre@foo.com'),\n", "\n", "    # ou bien on peut \u00eatre explicite\n", "    Personne(nom='paul', age=18, email='paul@bar.com'),\n", "\n", "    # ou bien on m\u00e9lange\n", "    Personne('jacques', 52, email='jacques@cool.com'),\n", "]\n", "for personne in personnes:\n", "    print(personne)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["### Un dictionnaire pour indexer les enregistrements"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Nous pouvons appliquer exactement la m\u00eame technique d'indexation qu'avec les dictionnaires\u00a0:"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 41, "lines": ["# on cr\u00e9e un index pour pouvoir rechercher efficacement\n", "# une personne par son nom\n", "index_par_nom = {personne.nom: personne for personne in personnes}"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["De fa\u00e7on \u00e0 pouvoir facilement localiser une personne\u00a0:"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["pierre = index_par_nom['pierre']\n", "print(pierre)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Encapsulation"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Pour marquer l'anniversaire d'une personne, nous pourrions faire\u00a0:"]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["pierre.age += 1\n", "pierre"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 51, "lines": ["\u00c0 ce stade, surtout si vous venez de C++ ou de Java, vous devriez vous dire que \u00e7a ne va pas du tout\u00a0!\n", "\n", "En effet, on a parl\u00e9 dans le compl\u00e9ment pr\u00e9c\u00e9dent des m\u00e9rites de l'encapsulation, et vous vous dites que l\u00e0, la classe n'est pas du tout encapsul\u00e9e car le code utilisateur a besoin de conna\u00eetre l'impl\u00e9mentation."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["En r\u00e9alit\u00e9, avec les classes python on a la possibilit\u00e9, gr\u00e2ce aux *properties*, de conserver ce style de programmation qui a l'avantage d'\u00eatre tr\u00e8s simple, tout en pr\u00e9servant une bonne encapsulation, comme on va le voir dans le prochain compl\u00e9ment."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 22, "type": "markdown", "linesLength": 3, "startIndex": 56, "lines": ["Illustrons maintenant qu'en python on peut ajouter des m\u00e9thodes \u00e0 une classe *\u00e0 la vol\u00e9e* - c'est-\u00e0-dire en dehors de l'instuction `class`.\n", "\n", "Pour cela on tire simplement profit du fait que **les m\u00e9thodes sont impl\u00e9ment\u00e9es comme des attributs de l'objet classe**."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Ainsi, on peut \u00e9tendre l'objet `classe` lui-m\u00eame dynamiquement\u00a0:"]}, {"block": 24, "type": "code", "linesLength": 10, "startIndex": 60, "lines": ["# pour une impl\u00e9mentation r\u00e9elle voyez la librairie smtplib\n", "# https://docs.python.org/3/library/smtplib.html\n", "\n", "def sendmail(self, subject, body):\n", "    \"Envoie un mail \u00e0 la personne\"\n", "    print(f\"To: {self.email}\")\n", "    print(f\"Subject: {subject}\")\n", "    print(f\"Body: {body}\")\n", "    \n", "Personne.sendmail = sendmail"]}, {"block": 25, "type": "markdown", "linesLength": 5, "startIndex": 70, "lines": ["Ce code commence par d\u00e9finir une fonction en utilisant `def` et la signature de la m\u00e9thode. La fonction accepte un premier argument `self`\u00a0; exactement comme si on avait d\u00e9fini la m\u00e9thode dans l'instruction `class`. \n", "\n", "Ensuite, il suffit d'affecter la fonction ainsi d\u00e9finie \u00e0 **l'attribut `sendmail`** de l'objet classe.\n", "\n", "Vous voyez que c'est tr\u00e8s simple, et \u00e0 pr\u00e9sent la classe a connaissance de cette m\u00e9thode exactement comme si on l'avait d\u00e9finie dans la clause `class`, comme le montre l'aide\u00a0:"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["help(Personne)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["Et on peut \u00e0 pr\u00e9sent utiliser cette m\u00e9thode\u00a0:"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 77, "lines": ["pierre.sendmail(\"Coucou\", \"Salut \u00e7a va ?\")"]}]