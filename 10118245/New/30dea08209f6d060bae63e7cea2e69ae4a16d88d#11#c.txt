[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# `print` entre python2 et python3"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Ce compl\u00e9ment est destin\u00e9 aux \u00e9tudiants qui seraient amen\u00e9s \u00e0 \u00e9crire du code pour python2 **et** python3, notamment vis-\u00e0-vis de `print`."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["**Notez bien** que les diff\u00e9rences entre python2 et python3 ne se limitent pas \u00e0 `print`. "]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["N'h\u00e9sitez pas \u00e0 passer ce compl\u00e9ment si vous n'\u00eates pas concern\u00e9 par ce sujet."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Les comportements de `print`"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Apr\u00e8s ce pr\u00e9ambule, sachez que la diff\u00e9rence la plus visible entre python2 et python3, est certainement avec `print` - en tous cas dans des tutos o\u00f9 il est difficile de s'en passer, car dans la vraie vie on n'utilise pas si souvent `print`..."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["##### python3"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["En python-3, `print` est une **fonction** (et donc une **expression**):"]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 10, "lines": ["# affichons le num\u00e9ro de version de notre python\n", "import sys\n", "major, minor, *_ = sys.version_info\n", "print(\"ce notebooke est en python:\", major, \".\", minor)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["##### python2"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["En python-2 au contraire, `print` est une **instruction**, on n'a pas besoin de mettre de parenth\u00e8ses:"]}, {"block": 13, "type": "code", "linesLength": 4, "startIndex": 16, "lines": ["%%python2\n", "import sys\n", "major, minor = sys.version_info[0], sys.version_info[1]\n", "print \"cette cellule est en\", major, \".\", minor "]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["### Compatibilit\u00e9 avec `__future__`"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Il existe en python-2 une couche de compatibilit\u00e9, le module `__future__`, dont le but est de gommer les diff\u00e9rences entre les deux versions. Ainsi si vous le souhaitez vous pouvez \u00e9crire du code python-2 qui \"voit\" `print` comme une fonction en important ceci"]}, {"block": 16, "type": "markdown", "linesLength": 4, "startIndex": 22, "lines": ["```\n", "# ceci fonctionne dans les deux langages\n", "from __future__ import print_function\n", "```"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Apr\u00e8s quoi vous pouver utilisez `print` en python-2 comme si vous \u00e9criviez du python-3"]}, {"block": 18, "type": "markdown", "linesLength": 8, "startIndex": 27, "lines": ["    >>> import sys\n", "    >>> sys.version\n", "    '2.7.8 (default, Jul 13 2014, 17:11:32) \\n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]'\n", "    >>>\n", "    >>> from __future__ import print_function\n", "    >>>\n", "    >>> print(\"Hello\",\"World\")\n", "    Hello World"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["### Remarque"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Si vous utilisez python-2 et que **vous ne mentionnez pas cet import**, vous pouvez avoir l'**impression** qu'il est inutile:"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 37, "lines": ["%%python2\n", "print(\"Hello\")"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["**Mais attention:** en fait ce qui se passe ici, c'est que les parenth\u00e8ses sont consid\u00e9r\u00e9es dans leur r\u00f4le habituel de groupement dans les expressions; cela rejoint la discussion que l'on aura sur les tuples; en fait les parenth\u00e8ses ne jouent aucun r\u00f4le ici, exactement comme dans"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["('Hello')"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["Si bien qu'avec plusieurs arguments - ou plus exactement, avec l'**illusion** d'appeler `print` avec plusieurs arguments:"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["%%python2\n", "print(\"Hello\", \"World\")"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["les parenth\u00e8ses pr\u00e9sentes dans la sortie vous indiquent qu'en fait on a construit un objet qui est **un tuple**, et qu'on l'a pass\u00e9 \u00e0 l'**instruction** `print`."]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Une fois l'import charg\u00e9, tout fonctionne vraiment comme en python3"]}, {"block": 28, "type": "code", "linesLength": 4, "startIndex": 46, "lines": ["%%python2\n", "from __future__ import print_function\n", "\n", "print(\"Hello\", \"World\")"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Tout ceci sera plus clair apr\u00e8s le chapitre sur les tuples, en Semaine 2 - S\u00e9quence 5 \"Les tuples et la virgule terminale\"."]}]