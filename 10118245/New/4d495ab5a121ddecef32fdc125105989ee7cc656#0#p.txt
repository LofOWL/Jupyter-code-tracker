[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# D\u00e9corateurs"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau (tr\u00e8s) avanc\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 3, "lines": ["Le m\u00e9canisme des d\u00e9corateurs - qui rappelle un peu, pour ceux qui connaissent, les macros Lisp - est un m\u00e9canisme tr\u00e8s puissant. Sa port\u00e9e va bien au del\u00e0 de simplement rajouter du code avant et apr\u00e8s une fonction, comme dans le cas de `NbAppels` que nous avons vu dans la vid\u00e9o.  \n", "\n", "Par exemple, les notions de m\u00e9thodes de classe (`@classmethod`) et de m\u00e9thodes statiques (`@staticmethod`) sont impl\u00e9ment\u00e9es comme des d\u00e9corateurs. Pour une liste plus repr\u00e9sentative de ce qu'il est possible de faire avec les d\u00e9corateurs, je vous invite \u00e0 parcourir m\u00eame rapidement ce [recueil de d\u00e9corateurs](https://wiki.python.org/moin/PythonDecoratorLibrary) qui propose du code (\u00e0 titre indicatif car rien de ceci ne fait partie de la librairie standard) pour des th\u00e8mes qui sont propices \u00e0 la d\u00e9coration de code.\n", "\n", "Nous allons voir en d\u00e9tails quelques-uns de ces exemples, nos d\u00e9corateurs `caching` et `singleton` ont la m\u00eame fonctionnalit\u00e9 que les `memoize` et `singleton` du recueil de d\u00e9corateurs, mais impl\u00e9ment\u00e9s diff\u00e9remment."]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 8, "lines": ["from __future__ import print_function"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["### Un d\u00e9corateur impl\u00e9ment\u00e9 comme une classe"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Dans la vid\u00e9o on a vu `NbAppels` pour compter le nombre de fois qu'on appelle une fonction. Pour m\u00e9moire on avait \u00e9crit&nbsp;:"]}, {"block": 7, "type": "code", "linesLength": 10, "startIndex": 11, "lines": ["# un rappel du code montr\u00e9 dans la vid\u00e9o\n", "class NbAppels(object):\n", "    def __init__(self, f):\n", "        self.f = f\n", "        self.appels = 0\n", "    def __call__(self, *args):\n", "        self.appels += 1\n", "        print(\"{}: {} appels\".format(self.f.__name__, self.appels))\n", "        return self.f(*args)\n", "        "]}, {"block": 8, "type": "code", "linesLength": 14, "startIndex": 21, "lines": ["@NbAppels\n", "def fibo_aux(n):\n", "    \"Fibonacci en log(n), credits Bernardi\"\n", "    if n < 1: \n", "        return 0, 1\n", "    u, v = fibo_aux(n/2)\n", "    u, v = u * (2 * v - u), u*u + v*v\n", "    if n & 1:\n", "        return v, u + v\n", "    else:\n", "        return u, v\n", "\n", "def fibo_log(n):\n", "    return fibo_aux(n)[0]"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["fibo_log(300)"]}, {"block": 10, "type": "markdown", "linesLength": 4, "startIndex": 36, "lines": ["\n", "Ici nous allons impl\u00e9menter `caching`, un d\u00e9corateur qui permet de m\u00e9moriser les r\u00e9sultats d'une fonction, et de les cacher pour ne pas avoir \u00e0 les recalculer la fois suivante. \n", "\n", "Alors que `NbAppels` \u00e9tait **impl\u00e9ment\u00e9 comme une classe**, pour varier un peu, nous allons impl\u00e9menter cette fois **`caching` comme une vraie fonction**, pour vous montrer les deux alternatives que l'on a quand on veut impl\u00e9menter un d\u00e9corateur&nbsp;: une vraie fonction ou une classe de callables."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["##### Le code du d\u00e9corateur"]}, {"block": 12, "type": "code", "linesLength": 28, "startIndex": 41, "lines": ["# une premi\u00e8re impl\u00e9mentation de caching\n", "\n", "# un decorateur de fonction\n", "# impl\u00e9ment\u00e9 comme une fonction\n", "def caching(a_decorer):\n", "    \"\"\"\n", "    Un d\u00e9corateur pour conserver les r\u00e9sultats\n", "    pr\u00e9c\u00e9dents et \u00e9viter de les recalculer\n", "    \"\"\"\n", "    def decoree(*args):\n", "        # si on a d\u00e9j\u00e0 calcul\u00e9 le r\u00e9sultat\n", "        # on le renvoie\n", "        try:\n", "            return decoree.cache[args]\n", "        # si les arguments ne sont pas hashables, \n", "        # par exemple une liste, on ne peut pas cacher \n", "        # et on re\u00e7oit TypeError\n", "        except TypeError:\n", "            return a_decorer(*args)\n", "        # les arguments sont hashables mais on\n", "        # n'a pas encore calcul\u00e9 cette valeur\n", "        except KeyError:\n", "            result = a_decorer(*args)\n", "            decoree.cache[args] = result\n", "            return result\n", "    # on initialise l'attribut 'cache'\n", "    decoree.cache = {}\n", "    return decoree"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["##### Comment l'utiliser"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["Avant de rentrer dans le d\u00e9tail du code, voyons comment cela s'utiliserait; il n'y a pas de changement de ce point de vue par rapport \u00e0 l'option d\u00e9velopp\u00e9e dans la vid\u00e9o&nbsp;:"]}, {"block": 15, "type": "code", "linesLength": 8, "startIndex": 71, "lines": ["# cr\u00e9er une fonction d\u00e9cor\u00e9e\n", "@caching\n", "def fibo_cache(n):\n", "    \"\"\"\n", "    Un fibonacci hyper-lent (exponentiel) se transforme\n", "    en temps lin\u00e9aire une fois que les r\u00e9sultats sont cach\u00e9s\n", "    \"\"\"\n", "    return n if n <= 1 else fibo_cache(n-1) + fibo_cache(n-2)"]}, {"block": 16, "type": "markdown", "linesLength": 5, "startIndex": 79, "lines": ["Bien que l'impl\u00e9mentation utilise un algorithme \u00e9pouvantablement lent, le fait de lui rajouter du caching redonne \u00e0 l'ensemble un caract\u00e8re lin\u00e9aire. \n", "\n", "En effet, si vous y r\u00e9fl\u00e9chissez une minute, vous verrez qu'avec le cache, lorsqu'on calcule `fibo_cache(n)`, on calcule d'abord `fibo_cache(n-1)`, puis lorsqu'on \u00e9value `fibo_cache(n-2)` le r\u00e9sultat **est d\u00e9j\u00e0 dans le cache** si bien qu'on peut consid\u00e9rer ce deuxi\u00e8me calcul comme, sinon instantan\u00e9, du moins du m\u00eame ordre de grandeur qu'une addition. \n", "\n", "On peut calculer par exemple&nbsp;:"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 84, "lines": ["fibo_cache(300)"]}, {"block": 18, "type": "markdown", "linesLength": 3, "startIndex": 85, "lines": ["qu'il serait hors de question de calculer sans le caching.\n", "\n", "On peut naturellement inspecter le cache, qui est rang\u00e9 dans l'attribut `cache` de l'objet fonction lui-m\u00eame&nbsp;:"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["len(fibo_cache.cache)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["et voir que, comme on aurait pu le pr\u00e9dire, on a calcul\u00e9 et m\u00e9moris\u00e9 les 301 premiers r\u00e9sultats, pour n allant de 0 \u00e0 300."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["##### Comment \u00e7a marche ?"]}, {"block": 22, "type": "markdown", "linesLength": 6, "startIndex": 91, "lines": ["On l'a vu dans la vid\u00e9o avec `NbAppels`, tout se passe exactement comme si on avait \u00e9crit&nbsp;:\n", "\n", "    def fibo_cache(n):\n", "        <le code>\n", "        \n", "    fibo_cache = caching(fibo_cache)"]}, {"block": 23, "type": "markdown", "linesLength": 13, "startIndex": 97, "lines": ["Donc `caching` est une fonction qui prend en argument une fonction `a_decorer` qui ici vaut `fibo_cache`, et retourne une autre fonction, `decoree`; on s'arrange naturellement pour que `decoree` retourne le m\u00eame r\u00e9sultat que `a_decorer`, avec seulement des choses suppl\u00e9mentaires.\n", "\n", "Les points cl\u00e9s de l'impl\u00e9mentation sont les suivants.\n", " * On attache \u00e0 l'objet fonction `decoree` un dictionnaire `cache` qui va nous permettre de retrouver les valeurs d\u00e9j\u00e0 calcul\u00e9es, \u00e0 partir d'un hash des arguments.\n", " * On ne peut pas cacher le r\u00e9sultat d'un objet qui ne serait pas globalement immuable; or si on essaie on re\u00e7oit l'exception `TypeError`, et dans ce cas on recalcule toujours le r\u00e9sultat. C'est de toute fa\u00e7ons plus s\u00fbr.\n", " * Si on ne trouve pas les arguments dans le cache, on re\u00e7oit l'exception `KeyError`, dans ce cas on calcule le r\u00e9sultat, et on le retourne apr\u00e8s l'avoir rang\u00e9 dans le cache.\n", " \n", " * Vous remarquerez aussi qu'on initialise l'attribut `cache` dans l'objet `decoree` \u00e0 l'appel du d\u00e9corateur (une seule fois, juste apr\u00e8s avoir d\u00e9fini la fonction), et non pas dans le code de `decoree` qui lui est \u00e9valu\u00e9 \u00e0 chaque appel.\n", "\n", "Cette impl\u00e9mentation, sans \u00eatre parfaite, est tout \u00e0 fait utilisable dans un environnement r\u00e9el, modulo les remarques de bon sens suivantes&nbsp;:\n", " * \u00e9videmment l'approche ne fonctionne que pour des fonctions d\u00e9terministes; s'il y a de l'al\u00e9atoire dans la logique de la fonction, il ne faut pas utiliser ce d\u00e9corateur&nbsp;;\n", " * tout aussi \u00e9videmment, la consommation m\u00e9moire peut \u00eatre importante si on applique le caching sans discrimination&nbsp;;\n", " * enfin en l'\u00e9tat la fonction decoree ne peut pas \u00eatre appel\u00e9e avec des arguments nomm\u00e9s; en effet on utilise le tuple `args` comme cl\u00e9 pour retrouver dans le cache la valeur associ\u00e9e aux arguments."]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["### D\u00e9corateurs, *docstring* et `help`"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 111, "lines": ["En fait, avec cette impl\u00e9mentation, il reste aussi un petit souci&nbsp;:"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 112, "lines": ["help(fibo_cache)"]}, {"block": 27, "type": "markdown", "linesLength": 4, "startIndex": 113, "lines": ["Ce n'est pas exactement ce qu'on veut; ce qui se passe ici c'est que `help` utilise les attributs `__doc__` et `__name__` de l'objet qu'on lui passe. Et dans notre cas `fibo_cache` est une fonction qui a \u00e9t\u00e9 cr\u00e9\u00e9e par l'instruction\n", "\n", "    def decoree(*args):\n", "        # etc."]}, {"block": 28, "type": "markdown", "linesLength": 2, "startIndex": 117, "lines": ["Pour arranger \u00e7a et faire en sorte que `help` nous affiche ce qu'on veut, il faut s'occuper de ces deux attributs. Et plut\u00f4t que de faire \u00e7a \u00e0 la main, il existe un utilitaire dans le module `functools`, qui fait tout le travail n\u00e9cessaire. Ce qui nous donne une deuxi\u00e8me version de ce d\u00e9corateur, avec deux lignes suppl\u00e9mentaires signal\u00e9es par des `+++`\n", ";:"]}, {"block": 29, "type": "code", "linesLength": 33, "startIndex": 119, "lines": ["# une deuxi\u00e8me impl\u00e9mentation de caching, avec la doc \n", "\n", "import functools                                 # +++\n", "\n", "# un decorateur de fonction\n", "# impl\u00e9ment\u00e9 comme une fonction\n", "def caching(a_decorer):\n", "    \"\"\"\n", "    Un d\u00e9corateur pour conserver les r\u00e9sultats\n", "    pr\u00e9c\u00e9dents et \u00e9viter de les recalculer\n", "    \"\"\"\n", "    # on d\u00e9core la fonction pour qu'elle ait les\n", "    # propri\u00e9t\u00e9s de a_decorer : __doc__ et __name__\n", "    @functools.wraps(a_decorer)                  # +++\n", "    def decoree (*args):\n", "        # si on a d\u00e9j\u00e0 calcul\u00e9 le r\u00e9sultat\n", "        # on le renvoie\n", "        try:\n", "            return decoree.cache[args]\n", "        # si les arguments ne sont pas hashables, \n", "        # par exemple une liste, on ne peut pas cacher \n", "        # et on re\u00e7oit TypeError\n", "        except TypeError:\n", "            return a_decorer(*args)\n", "        # les arguments sont hashables mais on\n", "        # n'a pas encore calcul\u00e9 cette valeur\n", "        except KeyError:\n", "            result = a_decorer(*args)\n", "            decoree.cache[args] = result\n", "            return result\n", "    # on initialise l'attribut 'cache'\n", "    decoree.cache = {}\n", "    return decoree"]}, {"block": 30, "type": "code", "linesLength": 8, "startIndex": 152, "lines": ["# cr\u00e9er une fonction d\u00e9cor\u00e9e\n", "@caching\n", "def fibo_cache2(n):\n", "    \"\"\"\n", "    Un fibonacci hyper-lent (exponentiel) se transforme\n", "    en temps lin\u00e9aire une fois que les r\u00e9sultats sont cach\u00e9s\n", "    \"\"\"\n", "    return n if n <= 1 else fibo_cache2(n-1) + fibo_cache2(n-2)"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 160, "lines": ["Et on obtient \u00e0 pr\u00e9sent une aide en ligne coh\u00e9rente&nbsp;:"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 161, "lines": ["help(fibo_cache2)"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 162, "lines": ["### On peut d\u00e9corer les classes aussi"]}, {"block": 34, "type": "markdown", "linesLength": 5, "startIndex": 163, "lines": ["De la m\u00eame fa\u00e7on qu'on peut d\u00e9corer une fonction, on peut d\u00e9corer une classe. \n", "\n", "Voyons comment tirer profit des d\u00e9corateurs pour impl\u00e9menter le pattern de `singleton`&nbsp;; une classe impl\u00e9ment\u00e9e comme [un singleton](http://en.wikipedia.org/wiki/Singleton_pattern) est une classe qui n'existe qu'en un seul exemplaire (une seule instance); tous les appels au constructeur retournent une r\u00e9f\u00e9rence vers le m\u00eame objet.\n", "\n", "Le d\u00e9corateur `singleton` va nous permettre de transformer une classe en un singleton."]}, {"block": 35, "type": "code", "linesLength": 50, "startIndex": 168, "lines": ["# le d\u00e9corateur qui transforme une classe en singleton\n", "\n", "# ATTENTION ce code ne peut d\u00e9corer qu'une classe 'new-style'\n", "\n", "# le code g\u00e8re correctement *args et **kwds, m\u00eame si g\u00e9n\u00e9ralement\n", "# dans le cas d'un singleton on n'a pas d'argument \u00e0 passer\n", "# au constructeur\n", "\n", "# vous pouvez r\u00e9activier les lignes de print si vous voulez \n", "# mieux voir ce qui se passe\n", "\n", "class singleton(object):\n", "    '''\n", "    a decorator to transform a class into \n", "    a class of one singleton\n", "    \n", "    the modified class must be a new-style class\n", "    '''\n", "\n", "    def __init__(self, classe):\n", "        \"\"\"construit l'instance de la classe d\u00e9cor\u00e9e\"\"\"\n", "\n", "        print(\"d\u00e9coration de la classe\", classe)\n", "        # on garde une r\u00e9f\u00e9rence vers la classe \u00e0 d\u00e9corer\n", "        self.classe = classe\n", "        # l'instance \n", "        self.instance = None\n", "        # on met de cote la methode __new__\n", "        self.new_original = classe.__new__\n", "        # on red\u00e9finit la m\u00e9thode __new__\n", "        @classmethod\n", "        def singleton_new(classe, *args, **kwds):\n", "            #print('in singleton_new','classe', classe, 'args', args, 'kwds', kwds)\n", "            instance = self.new_original(classe, *args, **kwds)\n", "            self.instance = instance\n", "            return instance\n", "        # on 'installe' singleton_new comme le __new__ de la nouvelle classe\n", "        self.classe.__new__ = singleton_new\n", "        # pour la doc, quoi que ce soit apparemment insuffisant pour help()\n", "        self.__name__ = classe.__name__\n", "        self.__doc__ = classe.__doc__\n", "\n", "    # l'objet doit \u00eatre un callable, et si on l'appelle\n", "    # il faut construire un objet de la classe a decorer\n", "    def __call__(self, *args, **kwds):\n", "        #print('in __call__','self', self, 'instance', self.instance, 'args', args, 'kwds', kwds)\n", "        if self.instance:\n", "            return self.instance\n", "        else:\n", "            return self.classe(*args, **kwds)\n"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 218, "lines": ["##### Le d\u00e9corateur en action"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 219, "lines": ["Voyons avec une classe 'normale' un sc\u00e9nario tout simple o\u00f9 l'on cr\u00e9e deux instances&nbsp;:"]}, {"block": 38, "type": "code", "linesLength": 14, "startIndex": 220, "lines": ["# avec une classe 'normale'\n", "class Eggs(object): \n", "    \"La classe Eggs n'est pas un singleton\"\n", "    \n", "    # une variable qui enregistre tous les appels au constructeur \n", "    inits = []\n", "    \n", "    def __init__(self, info):\n", "        print(\"initialisation de Egg avec {}\".format(info))\n", "\n", "# si on cr\u00e9e deux objets ils sont diff\u00e9rents\n", "obj1 = Eggs(\"premier\")\n", "obj2 = Eggs(\"deuxi\u00e8me\")\n", "print(\"obj1 is obj2:\", obj1 is obj2)"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 234, "lines": ["Le m\u00eame sc\u00e9nario, avec la m\u00eame classe mais d\u00e9cor\u00e9e avec `singleton`, nous donne ceci&nbsp;:"]}, {"block": 40, "type": "code", "linesLength": 8, "startIndex": 235, "lines": ["# avec une classe d\u00e9cor\u00e9e\n", "\n", "@singleton\n", "class Spam(object): \n", "    \"La classe Spam est un singleton\"\n", "    \n", "    def __init__(self, info):\n", "        print(\"initialisation de Spam avec {}\".format(info))\n"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 243, "lines": ["obj1 = Spam(\"premier\")"]}, {"block": 42, "type": "code", "linesLength": 4, "startIndex": 244, "lines": ["# deux instances cr\u00e9\u00e9s successivement donnent le m\u00eame objet\n", "# remarquez qu'on ne passe plus dans __init__ cette fois-ci\n", "obj2 = Spam(\"deuxi\u00e8me\")\n", "print(\"obj1 is obj2:\", obj1 is obj2)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 248, "lines": ["##### Comment \u00e7a marche"]}, {"block": 44, "type": "markdown", "linesLength": 25, "startIndex": 249, "lines": ["La subtilit\u00e9 ici r\u00e9side dans le fait que \n", "\n", "La m\u00e9thode `__new__` fait partie de la m\u00eame famille que `__init__` et autres `__repr__` dont on a parl\u00e9 dans la Semaine 5, S\u00e9quence 'surcharge des op\u00e9rateurs'.\n", "C'est une m\u00e9thode sp\u00e9ciale \u00e9galement, et comme `__init__` elle est mise en jeu au moment de la cr\u00e9ation d'un objet. \n", "\n", "Par contre, elle est vraiment particuli\u00e8re dans la m\u00e9nagerie des m\u00e9thodes sp\u00e9ciales, car c'est la seule qui soit une **m\u00e9thode statique**, et \u00e7a se comprend quand on sait qu'elle est appel\u00e9e **pour** cr\u00e9er l'objet instance&nbsp;; on ne peut donc pas lui passer en param\u00e8tre l'instance en cours de cr\u00e9ation, puisqu'elle n'est pas encore l\u00e0.\n", "\n", "Rappelez-vous que lorsqu'on d\u00e9finit `Spam` d\u00e9cor\u00e9e avec singleton, on fait essentiellement\n", "\n", "    Spam = singleton(Spam)\n", "    \n", "C'est donc que l'instance de la classe singleton est consid\u00e9r\u00e9 comme une classe&nbsp;; cette instance doit \u00eatre un callable, qui est utilis\u00e9 lorsqu'on cr\u00e9e une instance de `Spam` en faisant\n", "\n", "    obj1 = Spam()\n", "\n", "Notre d\u00e9corateur, pour l'essentiel, fait les op\u00e9rations suivantes.\n", " * Dans le constructeur `__init__` de la classe `singleton`, l'objet d\u00e9cor\u00e9 m\u00e9morise la classe \u00e0 d\u00e9corer (ici `Spam`) dans son attribut `classe`.\n", " * On cr\u00e9e l'attribut `instance` qui contiendra une r\u00e9f\u00e9rence vers l'unique objet cr\u00e9\u00e9 pour cette classe.\n", " * On m\u00e9morise \u00e9galement la m\u00e9thode `__new__` de la classe \u00e0 d\u00e9corer dont on aura besoin \u00e0 l'int\u00e9rieur de notre propre version de `__new__`. \n", " * On d\u00e9finit une m\u00e9thode statique (parce que `__new__`doit \u00eatre statique) `singleton_new` qui est destin\u00e9e \u00e0 remplacer la m\u00e9thode `__new__` dans la classe d\u00e9cor\u00e9e.\n", " * Cette nouvelle m\u00e9thode `__new__`\n", "   * renvoie l'attribut `instance` sur la classe d\u00e9cor\u00e9e lorsqu'il existe (c'est qu'on d\u00e9j\u00e0 cr\u00e9\u00e9  l'unique objet de la classe \u00e0 d\u00e9corer); \n", "   * et sinon utilise les m\u00e9thode `__new__` et `__init__` originales pour instancier un objet, le m\u00e9moriser, et le renvoyer.\n", " * `singleton_new` est *install\u00e9e* dans la classe d\u00e9cor\u00e9e, dans l'attribut de nom `__new__`.\n", " * On met \u00e0 jour `__name__` et `__doc__` dans la classe d\u00e9cor\u00e9e \u00e0 partir de la classe originale."]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 274, "lines": ["### Toutes les combinaisons (fonction, classe) x (fonction, classe)"]}, {"block": 46, "type": "markdown", "linesLength": 9, "startIndex": 275, "lines": ["Nous avons choisi d'impl\u00e9menter `singleton` comme une classe&nbsp;; vous [trouverez ici une version impl\u00e9ment\u00e9e comme une fonction](https://wiki.python.org/moin/PythonDecoratorLibrary#Singleton).\n", "\n", "Si bien qu'avec ces 4 exemples\n", " * `NbAppels` de la vid\u00e9o, \n", " * notre version de  `caching`, \n", " * notre version de `singleton`,\n", " * et le `singleton` de [la r\u00e9f\u00e9rence ci-dessus](https://wiki.python.org/moin/PythonDecoratorLibrary#Singleton),\n", " \n", "vous avez toutes les combinaisons de d\u00e9corateurs, de classes ou de fonctions, impl\u00e9ment\u00e9s comme une classe ou comme une fonction."]}, {"block": 47, "type": "markdown", "linesLength": 1, "startIndex": 284, "lines": ["### Un d\u00e9corateur peut lui-m\u00eame avoir des arguments"]}, {"block": 48, "type": "markdown", "linesLength": 11, "startIndex": 285, "lines": ["Reprenons l'exemple de `caching`, mais imaginons qu'on veuille ajouter un trait de \"dur\u00e9e de validit\u00e9 du cache\". Le code du d\u00e9corateur a besoin de conna\u00eetre la dur\u00e9e pendant laquelle on doit garder les r\u00e9sultats dans le cache. \n", "\n", "On veut pouvoir pr\u00e9ciser ce param\u00e8tre, appelons le `cache_timeout`,  pour chaque fonction&nbsp;; par exemple on voudrait \u00e9crire quelque chose comme\n", "\n", "    @caching_expire(600)\n", "    def resolve_host(hostname):\n", "        ...\n", "       \n", "    @caching_expire(3600*24)\n", "    def network_neighbours(hostname):\n", "        ..."]}, {"block": 49, "type": "markdown", "linesLength": 12, "startIndex": 296, "lines": ["Ceci est possible \u00e9galement avec les d\u00e9corateurs, avec cette syntaxe pr\u00e9cis\u00e9ment. Le mod\u00e8le qu'il faut avoir \u00e0 l'esprit pour bien comprendre le code qui suit est le suivant et se base sur deux objets :\n", " * le premier objet, `caching_expire`, est ce qu'on appelle une *factory* \u00e0 d\u00e9corateurs, c'est-\u00e0-dire que l'interpr\u00e9teur va d'abord appeler `caching_expire(600)` qui doit retourner un d\u00e9corateur&nbsp;;\n", " * le deuxi\u00e8me objet est ce d\u00e9corateur retourn\u00e9 par `caching_expire(600)` qui lui m\u00eame doit se comporter commes les d\u00e9corateurs sans argument que l'on a vus jusqu'ici.\n", " \n", "Pour faire court, cela signifie que l'interpr\u00e9teur fera\n", "\n", "    resolve_host = (caching_expire(600))(resolve_host)\n", "    \n", "Ou encore si vous pr\u00e9f\u00e9rez\n", "\n", "    caching = caching_expire(600)\n", "    resolve_host = caching(resolve_host)"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 308, "lines": ["Ce qui nous m\u00e8ne au code suivant&nbsp;:"]}, {"block": 51, "type": "code", "linesLength": 43, "startIndex": 309, "lines": ["import time\n", "\n", "# comme pour caching, on est limit\u00e9 ici et on ne peut pas\n", "# supporter les appels \u00e0 la **kwds, voir plus haut \n", "# la discussion sur l'impl\u00e9mentation de caching\n", "\n", "# caching_expire est une factory \u00e0 d\u00e9corateur\n", "def caching_expire(timeout):\n", "\n", "    # caching_expire va retourner un decorateur sans argument\n", "    # c'est \u00e0 dire un objet qui se comporte\n", "    # comme notre tout premier `caching`\n", "    def caching(a_decorer):\n", "        # \u00e0 partir d'ici on fait un peu comme dans\n", "        # la premiere version de caching\n", "        def decoree(*args):\n", "            try:\n", "                # sauf que disons qu'on met dans le cache un tuple\n", "                # (valeur, timestamp)\n", "                valeur, timestamp = decoree.cache[args]\n", "                # et la on peut acceder a timeout\n", "                # parce que la liaison en python est lexicale \n", "                if (time.time()-timestamp) <= timeout:\n", "                    return valeur\n", "                else:\n", "                    # on fait comme si on ne connaissait pas,\n", "                    raise KeyError\n", "            # si les arguments ne sont pas hashables, \n", "            # par exemple une liste, on ne peut pas cacher \n", "            # et on re\u00e7oit TypeError\n", "            except TypeError:\n", "                return a_decorer(*args)\n", "            # les arguments sont hashables mais on\n", "            # n'a pas encore calcul\u00e9 cette valeur\n", "            except KeyError:\n", "                result = a_decorer(*args)\n", "                decoree.cache[args] = (result, time.time())\n", "                return result\n", "\n", "        decoree.cache = {}\n", "        return decoree\n", "    # le retour de caching_expire, c'est caching\n", "    return caching"]}, {"block": 52, "type": "code", "linesLength": 3, "startIndex": 352, "lines": ["@caching_expire(0.5)\n", "def fibo_cache_expire(n):\n", "    return n if n<=1 else fibo_cache_expire(n-2)+fibo_cache_expire(n-1)"]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 355, "lines": ["fibo_cache_expire(300)"]}, {"block": 54, "type": "code", "linesLength": 1, "startIndex": 356, "lines": ["fibo_cache_expire.cache[(200,)]"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 357, "lines": ["##### Remarquez la cl\u00f4ture"]}, {"block": 56, "type": "markdown", "linesLength": 5, "startIndex": 358, "lines": ["Pour conclure sur cet exemple, vous remarquez que dans le code de `decoree` on acc\u00e8de \u00e0 la variable `timeout`. \u00c7a peut para\u00eetre un peu \u00e9tonnant, si vous pensez que `decoree` est appel\u00e9e **bien apr\u00e8s** que la fonction `caching_expire` ait fini son travail. En effet, `caching_expire` est \u00e9valu\u00e9e **une fois** juste apr\u00e8s **la d\u00e9finition** de `fibo_cache`. Et donc on pourrait penser que la valeur de `timeout` ne serait plus disponible dans le contexte de `decoree`.\n", "\n", "Pour comprendre ce qui se passe, il faut se souvenir que python est un langage \u00e0 liaison lexicale. Cela signifie que la *r\u00e9solution* de la variable `timeout` se fait au moment de la compilation (de la production du byte-code), et non au moment o\u00f9 est appel\u00e9 `decoree`. \n", "\n", "Ce type de construction s'appelle [une **clot\u00fbre**](http://fr.wikipedia.org/wiki/Fermeture_%28informatique%29), en r\u00e9f\u00e9rence au lambda calcul&nbsp;: on parle de terme clos lorsqu'il n'y a plus de r\u00e9f\u00e9rence non r\u00e9solue dans une expression. C'est une technique de programmation tr\u00e8s r\u00e9pandue notamment dans les applications r\u00e9actives, o\u00f9 on programme beaucoup avec des *callbacks*&nbsp;; par exemple il est presque impossible de programmer en JavaScript sans \u00e9crire une cl\u00f4ture. "]}, {"block": 57, "type": "markdown", "linesLength": 1, "startIndex": 363, "lines": ["### On peut cha\u00eener les d\u00e9corateurs"]}, {"block": 58, "type": "markdown", "linesLength": 9, "startIndex": 364, "lines": ["Pour revenir \u00e0 notre sujet, signalons enfin que l'on peut aussi \"cha\u00eener les d\u00e9corateurs\"&nbsp;; imaginons par exemple qu'on dispose d'un d\u00e9corateur `add_field` qui ajoute dans une classe un *getter* et un *setter* bas\u00e9s sur un nom d'attribut.\n", "\n", "C'est-\u00e0-dire que\n", "\n", "    @add_field('name')\n", "    class Foo:\n", "        pass\n", "\n", "donnerait pour `Foo` une classe qui dispose des m\u00e9thodes `get_name` et `set_name` (exercice pour les courageux: \u00e9crire `add_field`)."]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 373, "lines": ["Alors la syntaxe des d\u00e9corateurs vous permet de faire quelque chose comme&nbsp;:"]}, {"block": 60, "type": "markdown", "linesLength": 4, "startIndex": 374, "lines": ["    @add_field('name')\n", "    @add_field('address')\n", "    class Foo:\n", "        pass"]}, {"block": 61, "type": "markdown", "linesLength": 5, "startIndex": 378, "lines": ["Ce qui revient \u00e0 faire&nbsp;:\n", "\n", "    class Foo: pass\n", "    Foo = (add_field('address'))(Foo)\n", "    Foo = (add_field('name'))(Foo)"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 383, "lines": ["### Discussion"]}, {"block": 63, "type": "markdown", "linesLength": 11, "startIndex": 384, "lines": ["Dans la pratique, \u00e9crire un d\u00e9corateur est un exercice assez d\u00e9licat. Le vrai probl\u00e8me est bien souvent la cr\u00e9ation d'objets suppl\u00e9mentaires&nbsp;: on n'appelle plus la fonction de d\u00e9part mais un wrapper autour de la fonction de d\u00e9part. \n", "\n", "Ceci a tout un tas de cons\u00e9quences, et le lecteur attentif aura par exemple remarqu\u00e9&nbsp;:\n", " * que dans l'\u00e9tat du code de `singleton`, bien que l'on ait correctement mis \u00e0 jour `__doc__` et `__name__` sur la classe d\u00e9cor\u00e9e, `help(Spam)` ne renvoie pas le texte attendu, il semble que `help` sur une instance de classe ne se comporte pas exactement comme attendu&nbsp;;\n", " * que si on essaie de combiner les d\u00e9corateurs `NbAppels` et `caching` sur une - encore nouvelle - version de fibonacci, le code obtenu ne converge pas&nbsp;; en fait les technique que nous avons utilis\u00e9es dans les deux cas ne sont pas compatibles entre elles.\n", "\n", "De mani\u00e8re plus g\u00e9n\u00e9rale, il y a des gens pour trouver des d\u00e9fauts \u00e0 ce syst\u00e8me de d\u00e9corateurs&nbsp;; je vous renvoie notamment \u00e0 [ce blog](http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html) qui, pour r\u00e9sumer, insiste sur le fait que les objets d\u00e9cor\u00e9s n'ont **pas exactement** les m\u00eames propri\u00e9t\u00e9s que les objets originaux. L'auteur y explique que lorsqu'on fait de l'introspection profonde - c'est-\u00e0-dire lorsqu'on \u00e9crit du code qui \"fouille\" dans les objets qui repr\u00e9sentent le code lui-m\u00eame - les objets d\u00e9cor\u00e9s ont parfois du mal \u00e0 se *faire passer* pour les objets qu'ils remplacent.\n", "\n", "\u00c0 chacun de voir les avantages et les inconv\u00e9nients de cette technique. C'est l\u00e0 encore beaucoup une question de go\u00fbt. Dans certains cas simples, comme par exemple pour `NbAppels`, la d\u00e9coration revient \u00e0 simplement ajouter du code avant et apr\u00e8s l'appel \u00e0 la fonction \u00e0 d\u00e9corer. Et dans ce cas, vous remarquerez qu'on peut aussi faire le m\u00eame genre de choses avec un *context manager* (je laisse \u00e7a en exercice aux \u00e9tudiants int\u00e9ress\u00e9s).\n", "\n", "Ce qui est clair toutefois est que la technique des d\u00e9corateurs est quelque chose qui peut \u00eatre tr\u00e8s  utile, mais dont il ne faut pas abuser. En particulier de notre point de vue, la possibilit\u00e9 de combiner les d\u00e9corateurs, si elle existe bien dans le langage d'un point de vue syntaxique, est dans la pratique \u00e0 utiliser avec la plus extr\u00eame prudence. "]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 395, "lines": ["### Pour en savoir plus"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 396, "lines": ["Maintenant que vous savez presque tout sur les d\u00e9corateurs, vous pouvez retourner lire ce [recueil de d\u00e9corateurs](https://wiki.python.org/moin/PythonDecoratorLibrary) mais plus en d\u00e9tails."]}]