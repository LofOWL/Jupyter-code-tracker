[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# matplotlib 3D"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 6, "lines": ["# la ration habituelle d'imports\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 3, "type": "code", "linesLength": 5, "startIndex": 9, "lines": ["# m\u00eame si l'on n'utilise pas explicitement \n", "# d'attributs du module Axes3D\n", "# cet import est necessaire pour faire\n", "# des visualisations en 3D\n", "from mpl_toolkits.mplot3d import Axes3D"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 14, "lines": ["# ce mode d'interaction va nous permettre de nous d\u00e9placer \n", "# dans l'espace pour voir la courbe depuis plusieurs points de vue\n", "%matplotlib notebook"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["### Un premier exemple"]}, {"block": 6, "type": "code", "linesLength": 29, "startIndex": 18, "lines": ["# je choisis une taille raisonnable compte tenu de l'espace \n", "# disponible dans fun-mooc\n", "fig = plt.figure(figsize=(8, 4))\n", "\n", "# voici la fa\u00e7on de cr\u00e9er un *subplot*\n", "# qui se pr\u00eate \u00e0 une visualisation en 3D\n", "ax = fig.add_subplot(121, projection='3d')\n", "\n", "# \u00e0 pr\u00e9sent, copi\u00e9 de\n", "# https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#line-plots\n", "# on cr\u00e9e une courbe param\u00e9trique \n", "# o\u00f9 x et y sont fonctions de z\n", "theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\n", "z = np.linspace(-2, 2, 100)\n", "r = z**2 + 1\n", "x = r * np.sin(theta)\n", "y = r * np.cos(theta)\n", "# on fait maitenant un appel \u00e0 plot normal\n", "# mais avec un troisi\u00e8me param\u00e8tre\n", "ax.plot(x, y, z, label='parametric curve')\n", "ax.legend()\n", "\n", "# on peut tout \u00e0 fait ajouter un plot usuel\n", "# dans un subplot, comme on l'a vu pour la 2D\n", "ax2 = fig.add_subplot(122)\n", "x = np.linspace(0, 10)\n", "y = x**2\n", "ax2.plot(x, y)\n", "plt.show()"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### `Axes3DSubplot.scatter`"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#scatter-plots"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["`scatter3d_demo.py`"]}, {"block": 10, "type": "code", "linesLength": 11, "startIndex": 50, "lines": ["'''\n", "==============\n", "3D scatterplot\n", "==============\n", "\n", "Demonstration of a basic scatterplot in 3D.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 11, "type": "code", "linesLength": 23, "startIndex": 61, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "\n", "def randrange(n, vmin, vmax):\n", "    '''\n", "    Helper function to make an array of random numbers having shape (n, )\n", "    with each number distributed Uniform(vmin, vmax).\n", "    '''\n", "    return (vmax - vmin)*np.random.rand(n) + vmin\n", "\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "n = 100\n", "\n", "# For each set of style and range settings, plot n random points in the box\n", "# defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].\n", "for c, m, zlow, zhigh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:\n", "    xs = randrange(n, 23, 32)\n", "    ys = randrange(n, 0, 100)\n", "    zs = randrange(n, zlow, zhigh)\n", "    ax.scatter(xs, ys, zs, c=c, marker=m)\n", "\n", "ax.set_xlabel('X Label')\n", "plt.show()"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["### `Axes3DSubplot.plot_wireframe`"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#wireframe-plots"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["`wire3d_demo.py`"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 87, "lines": ["from mpl_toolkits.mplot3d import axes3d"]}, {"block": 16, "type": "code", "linesLength": 10, "startIndex": 88, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "# Grab some test data.\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "\n", "# Plot a basic wireframe.\n", "ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n", "plt.show()"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 98, "lines": ["### `Axes3DSubplot.plot_surface`"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#surface-plots"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 100, "lines": ["`surface3d_demo.py`"]}, {"block": 20, "type": "code", "linesLength": 17, "startIndex": 101, "lines": ["'''\n", "======================\n", "3D surface (color map)\n", "======================\n", "\n", "Demonstrates plotting a 3D surface colored with the coolwarm color map.\n", "The surface is made opaque by using antialiased=False.\n", "\n", "Also demonstrates using the LinearLocator and custom formatting for the\n", "z axis tick labels.\n", "'''\n", "\n", "#from mpl_toolkits.mplot3d import Axes3D\n", "#import matplotlib.pyplot as plt\n", "from matplotlib import cm\n", "from matplotlib.ticker import LinearLocator, FormatStrFormatter\n", "#import numpy as np"]}, {"block": 21, "type": "code", "linesLength": 24, "startIndex": 118, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "\n", "ax = fig.gca(projection='3d')\n", "\n", "# Make data.\n", "X = np.arange(-5, 5, 0.25)\n", "Y = np.arange(-5, 5, 0.25)\n", "X, Y = np.meshgrid(X, Y)\n", "R = np.sqrt(X**2 + Y**2)\n", "Z = np.sin(R)\n", "\n", "# Plot the surface.\n", "surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n", "                       linewidth=0, antialiased=False)\n", "\n", "# Customize the z axis.\n", "ax.set_zlim(-1.01, 1.01)\n", "ax.zaxis.set_major_locator(LinearLocator(10))\n", "ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n", "\n", "# Add a color bar which maps values to colors.\n", "fig.colorbar(surf, shrink=0.5, aspect=5)\n", "\n", "plt.show()"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 142, "lines": ["`surface3d_demo2.py`"]}, {"block": 23, "type": "code", "linesLength": 11, "startIndex": 143, "lines": ["'''\n", "========================\n", "3D surface (solid color)\n", "========================\n", "\n", "Demonstrates a very basic plot of a 3D surface using a solid color.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 24, "type": "code", "linesLength": 14, "startIndex": 154, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "# Make data\n", "u = np.linspace(0, 2 * np.pi, 30)\n", "v = np.linspace(0, np.pi, 30)\n", "x = 10 * np.outer(np.cos(u), np.sin(v))\n", "y = 10 * np.outer(np.sin(u), np.sin(v))\n", "z = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n", "\n", "# Plot the surface\n", "ax.plot_surface(x, y, z, color='b')\n", "\n", "plt.show()"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 168, "lines": ["`surface3d_demo3.py`"]}, {"block": 26, "type": "code", "linesLength": 13, "startIndex": 169, "lines": ["'''\n", "=========================\n", "3D surface (checkerboard)\n", "=========================\n", "\n", "Demonstrates plotting a 3D surface colored in a checkerboard pattern.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm\n", "from matplotlib.ticker import LinearLocator\n", "import numpy as np"]}, {"block": 27, "type": "code", "linesLength": 28, "startIndex": 182, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "# Make data.\n", "X = np.arange(-5, 5, 0.25)\n", "xlen = len(X)\n", "Y = np.arange(-5, 5, 0.25)\n", "ylen = len(Y)\n", "X, Y = np.meshgrid(X, Y)\n", "R = np.sqrt(X**2 + Y**2)\n", "Z = np.sin(R)\n", "\n", "# Create an empty array of strings with the same shape as the meshgrid, and\n", "# populate it with two colors in a checkerboard pattern.\n", "colortuple = ('y', 'b')\n", "colors = np.empty(X.shape, dtype=str)\n", "for y in range(ylen):\n", "    for x in range(xlen):\n", "        colors[x, y] = colortuple[(x + y) % len(colortuple)]\n", "\n", "# Plot the surface with face colors taken from the array we made.\n", "surf = ax.plot_surface(X, Y, Z, facecolors=colors, linewidth=0)\n", "\n", "# Customize the z axis.\n", "ax.set_zlim(-1, 1)\n", "ax.w_zaxis.set_major_locator(LinearLocator(6))\n", "\n", "plt.show()"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 210, "lines": ["### `Axes3DSubplot.plot_trisurf`"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 211, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#tri-surface-plots"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 212, "lines": ["`trisurf3d_demo.py`"]}, {"block": 31, "type": "code", "linesLength": 11, "startIndex": 213, "lines": ["'''\n", "======================\n", "Triangular 3D surfaces\n", "======================\n", "\n", "Plot a 3D surface with a triangular mesh.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 32, "type": "code", "linesLength": 27, "startIndex": 224, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "n_radii = 8\n", "n_angles = 36\n", "\n", "# Make radii and angles spaces (radius r=0 omitted to eliminate duplication).\n", "radii = np.linspace(0.125, 1.0, n_radii)\n", "angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n", "\n", "# Repeat all angles for each radius.\n", "angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n", "\n", "# Convert polar (radii, angles) coords to cartesian (x, y) coords.\n", "# (0, 0) is manually added at this stage,  so there will be no duplicate\n", "# points in the (x, y) plane.\n", "x = np.append(0, (radii*np.cos(angles)).flatten())\n", "y = np.append(0, (radii*np.sin(angles)).flatten())\n", "\n", "# Compute z to make the pringle surface.\n", "z = np.sin(-x*y)\n", "\n", "ax = fig.gca(projection='3d')\n", "\n", "ax.plot_trisurf(x, y, z, linewidth=0.2, antialiased=True)\n", "\n", "plt.show()"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 251, "lines": ["`trisurf3d_demo2.py`"]}, {"block": 34, "type": "code", "linesLength": 16, "startIndex": 252, "lines": ["'''\n", "===========================\n", "More triangular 3D surfaces\n", "===========================\n", "\n", "Two additional examples of plotting surfaces with triangular mesh.\n", "\n", "The first demonstrates use of plot_trisurf's triangles argument, and the\n", "second sets a Triangulation object's mask and passes the object directly\n", "to plot_trisurf.\n", "'''\n", "\n", "import numpy as np\n", "import matplotlib.pyplot as plt\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.tri as mtri"]}, {"block": 35, "type": "code", "linesLength": 61, "startIndex": 268, "lines": ["fig = plt.figure(figsize=(8, 4))\n", "\n", "#============\n", "# First plot\n", "#============\n", "\n", "# Make a mesh in the space of parameterisation variables u and v\n", "u = np.linspace(0, 2.0 * np.pi, endpoint=True, num=50)\n", "v = np.linspace(-0.5, 0.5, endpoint=True, num=10)\n", "u, v = np.meshgrid(u, v)\n", "u, v = u.flatten(), v.flatten()\n", "\n", "# This is the Mobius mapping, taking a u, v pair and returning an x, y, z\n", "# triple\n", "x = (1 + 0.5 * v * np.cos(u / 2.0)) * np.cos(u)\n", "y = (1 + 0.5 * v * np.cos(u / 2.0)) * np.sin(u)\n", "z = 0.5 * v * np.sin(u / 2.0)\n", "\n", "# Triangulate parameter space to determine the triangles\n", "tri = mtri.Triangulation(u, v)\n", "\n", "# Plot the surface.  The triangles in parameter space determine which x, y, z\n", "# points are connected by an edge.\n", "ax = fig.add_subplot(1, 2, 1, projection='3d')\n", "ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=plt.cm.Spectral)\n", "ax.set_zlim(-1, 1)\n", "\n", "\n", "#============\n", "# Second plot\n", "#============\n", "\n", "# Make parameter spaces radii and angles.\n", "n_angles = 36\n", "n_radii = 8\n", "min_radius = 0.25\n", "radii = np.linspace(min_radius, 0.95, n_radii)\n", "\n", "angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n", "angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n", "angles[:, 1::2] += np.pi/n_angles\n", "\n", "# Map radius, angle pairs to x, y, z points.\n", "x = (radii*np.cos(angles)).flatten()\n", "y = (radii*np.sin(angles)).flatten()\n", "z = (np.cos(radii)*np.cos(angles*3.0)).flatten()\n", "\n", "# Create the Triangulation; no triangles so Delaunay triangulation created.\n", "triang = mtri.Triangulation(x, y)\n", "\n", "# Mask off unwanted triangles.\n", "xmid = x[triang.triangles].mean(axis=1)\n", "ymid = y[triang.triangles].mean(axis=1)\n", "mask = np.where(xmid**2 + ymid**2 < min_radius**2, 1, 0)\n", "triang.set_mask(mask)\n", "\n", "# Plot the surface.\n", "ax = fig.add_subplot(1, 2, 2, projection='3d')\n", "ax.plot_trisurf(triang, z, cmap=plt.cm.CMRmap)\n", "\n", "plt.show()"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 329, "lines": ["### `Axes3DSubplot.contour`"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 330, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#contour-plots"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 331, "lines": ["`contour3d_demo.py`"]}, {"block": 39, "type": "code", "linesLength": 3, "startIndex": 332, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 40, "type": "code", "linesLength": 7, "startIndex": 335, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.add_subplot(111, projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "cset = ax.contour(X, Y, Z, cmap=cm.coolwarm)\n", "ax.clabel(cset, fontsize=9, inline=1)\n", "\n", "plt.show()"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 342, "lines": ["`contour3d_demo2.py`"]}, {"block": 42, "type": "code", "linesLength": 3, "startIndex": 343, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 43, "type": "code", "linesLength": 7, "startIndex": 346, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "cset = ax.contour(X, Y, Z, extend3d=True, cmap=cm.coolwarm)\n", "ax.clabel(cset, fontsize=9, inline=1)\n", "\n", "plt.show()"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 353, "lines": ["`contour3d_demo3.py`"]}, {"block": 45, "type": "code", "linesLength": 3, "startIndex": 354, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 46, "type": "code", "linesLength": 16, "startIndex": 357, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)\n", "cset = ax.contour(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)\n", "cset = ax.contour(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)\n", "cset = ax.contour(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)\n", "\n", "ax.set_xlabel('X')\n", "ax.set_xlim(-40, 40)\n", "ax.set_ylabel('Y')\n", "ax.set_ylim(-40, 40)\n", "ax.set_zlabel('Z')\n", "ax.set_zlim(-100, 100)\n", "\n", "plt.show()"]}, {"block": 47, "type": "markdown", "linesLength": 1, "startIndex": 373, "lines": ["### `Axes3DSubplot.contourf`"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 374, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#filled-contour-plots"]}, {"block": 49, "type": "markdown", "linesLength": 1, "startIndex": 375, "lines": ["`contourf3d_demo.py`"]}, {"block": 50, "type": "code", "linesLength": 3, "startIndex": 376, "lines": ["from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 51, "type": "code", "linesLength": 7, "startIndex": 379, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "cset = ax.contourf(X, Y, Z, cmap=cm.coolwarm)\n", "ax.clabel(cset, fontsize=9, inline=1)\n", "\n", "plt.show()"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 386, "lines": ["`contourf3d_demo2.py`"]}, {"block": 53, "type": "code", "linesLength": 8, "startIndex": 387, "lines": ["\"\"\"\n", ".. versionadded:: 1.1.0\n", "   This demo depends on new features added to contourf3d.\n", "\"\"\"\n", "\n", "from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "from matplotlib import cm"]}, {"block": 54, "type": "code", "linesLength": 16, "startIndex": 395, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "X, Y, Z = axes3d.get_test_data(0.05)\n", "ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)\n", "cset = ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)\n", "cset = ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)\n", "cset = ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)\n", "\n", "ax.set_xlabel('X')\n", "ax.set_xlim(-40, 40)\n", "ax.set_ylabel('Y')\n", "ax.set_ylim(-40, 40)\n", "ax.set_zlabel('Z')\n", "ax.set_zlim(-100, 100)\n", "\n", "plt.show()"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 411, "lines": ["### `Axes3DSubplot.add_collection3d`"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 412, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#polygon-plots"]}, {"block": 57, "type": "code", "linesLength": 15, "startIndex": 413, "lines": ["\"\"\"\n", "=============================================\n", "Generate polygons to fill under 3D line graph\n", "=============================================\n", "\n", "Demonstrate how to create polygons which fill the space under a line\n", "graph. In this example polygons are semi-transparent, creating a sort\n", "of 'jagged stained glass' effect.\n", "\"\"\"\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "from matplotlib.collections import PolyCollection\n", "import matplotlib.pyplot as plt\n", "from matplotlib import colors as mcolors\n", "import numpy as np"]}, {"block": 58, "type": "code", "linesLength": 28, "startIndex": 428, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "\n", "def cc(arg):\n", "    return mcolors.to_rgba(arg, alpha=0.6)\n", "\n", "xs = np.arange(0, 10, 0.4)\n", "verts = []\n", "zs = [0.0, 1.0, 2.0, 3.0]\n", "for z in zs:\n", "    ys = np.random.rand(len(xs))\n", "    ys[0], ys[-1] = 0, 0\n", "    verts.append(list(zip(xs, ys)))\n", "\n", "poly = PolyCollection(verts, facecolors=[cc('r'), cc('g'), cc('b'),\n", "                                         cc('y')])\n", "poly.set_alpha(0.7)\n", "ax.add_collection3d(poly, zs=zs, zdir='y')\n", "\n", "ax.set_xlabel('X')\n", "ax.set_xlim3d(0, 10)\n", "ax.set_ylabel('Y')\n", "ax.set_ylim3d(-1, 4)\n", "ax.set_zlabel('Z')\n", "ax.set_zlim3d(0, 1)\n", "\n", "plt.show()"]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 456, "lines": ["### `Axes3DSubplot.bar`"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 457, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#bar-plots"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 458, "lines": ["`bars3d_demo.py`"]}, {"block": 62, "type": "code", "linesLength": 12, "startIndex": 459, "lines": ["\"\"\"\n", "========================================\n", "Create 2D bar graphs in different planes\n", "========================================\n", "\n", "Demonstrates making a 3D plot which has 2D bar graphs projected onto\n", "planes y=0, y=1, etc.\n", "\"\"\"\n", "\n", "from mpl_toolkits.mplot3d import Axes3D\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 63, "type": "code", "linesLength": 17, "startIndex": 471, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.add_subplot(111, projection='3d')\n", "for c, z in zip(['r', 'g', 'b', 'y'], [30, 20, 10, 0]):\n", "    xs = np.arange(20)\n", "    ys = np.random.rand(20)\n", "\n", "    # You can provide either a single color or an array. To demonstrate this,\n", "    # the first bar of each set will be colored cyan.\n", "    cs = [c] * len(xs)\n", "    cs[0] = 'c'\n", "    ax.bar(xs, ys, zs=z, zdir='y', color=cs, alpha=0.8)\n", "\n", "ax.set_xlabel('X')\n", "ax.set_ylabel('Y')\n", "ax.set_zlabel('Z')\n", "\n", "plt.show()"]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 488, "lines": ["### `Axes3DSubplot.quiver`"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 489, "lines": ["https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#quiver"]}, {"block": 66, "type": "markdown", "linesLength": 1, "startIndex": 490, "lines": ["`quiver3d_demo.py`"]}, {"block": 67, "type": "code", "linesLength": 11, "startIndex": 491, "lines": ["'''\n", "==============\n", "3D quiver plot\n", "==============\n", "\n", "Demonstrates plotting directional arrows at points on a 3d meshgrid.\n", "'''\n", "\n", "from mpl_toolkits.mplot3d import axes3d\n", "import matplotlib.pyplot as plt\n", "import numpy as np"]}, {"block": 68, "type": "code", "linesLength": 17, "startIndex": 502, "lines": ["fig = plt.figure(figsize=(4, 4))\n", "ax = fig.gca(projection='3d')\n", "\n", "# Make the grid\n", "x, y, z = np.meshgrid(np.arange(-0.8, 1, 0.2),\n", "                      np.arange(-0.8, 1, 0.2),\n", "                      np.arange(-0.8, 1, 0.8))\n", "\n", "# Make the direction data for the arrows\n", "u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)\n", "v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)\n", "w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *\n", "     np.sin(np.pi * z))\n", "\n", "ax.quiver(x, y, z, u, v, w, length=0.1, normalize=True)\n", "\n", "plt.show()"]}]