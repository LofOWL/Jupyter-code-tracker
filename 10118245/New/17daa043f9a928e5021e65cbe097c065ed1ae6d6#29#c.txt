[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# M\u00e9thodes sp\u00e9ciales (3/3)"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Ce compl\u00e9ment termine la s\u00e9rie sur les m\u00e9thodes sp\u00e9ciales."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### `__getattr__` et apparent\u00e9s"]}, {"block": 5, "type": "markdown", "linesLength": 5, "startIndex": 9, "lines": ["Dans cette derni\u00e8re partie nous allons voir comment avec la m\u00e9thode `__getattr__`, on peut red\u00e9finir la fa\u00e7on que le langage a d'\u00e9valuer\u00a0:\n", "\n", "```python\n", "objet.attribut\n", "```"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["**Avertissement\u00a0:** on a vu dans la s\u00e9quence consacr\u00e9e \u00e0 l'h\u00e9ritage que, pour l'essentiel, le m\u00e9canisme d'h\u00e9ritage repose **pr\u00e9cis\u00e9ment** sur la fa\u00e7on d'\u00e9valuer les attributs d'un objet, aussi nous vous recommandons d'utiliser ce trait avec pr\u00e9caution, car il vous donne la possibilit\u00e9 de \"faire muter le langage\" comme on dit."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["**Remarque\u00a0:** on verra en toute derni\u00e8re semaine que `__getattr__` est *une* fa\u00e7on d'agir sur la fa\u00e7on dont le langage op\u00e8re les acc\u00e8s aux attributs. Sachez qu'en r\u00e9alit\u00e9, le protocole d'acc\u00e8s aux attributs peut \u00eatre modifi\u00e9 beaucoup plus profond\u00e9ment si n\u00e9cessaire."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["##### Un exemple\u00a0: la classe `RPCProxy`"]}, {"block": 9, "type": "markdown", "linesLength": 9, "startIndex": 17, "lines": ["Pour illustrer `__getattr__`, nous allons consid\u00e9rer le probl\u00e8me suivant. Une application utilise un service distant, avec laquelle elle interagit au travers d'une API.\n", "\n", "C'est une situation tr\u00e8s fr\u00e9quente\u00a0: lorsqu'on utilise un service m\u00e9t\u00e9o, ou de g\u00e9olocalisation, ou de r\u00e9servation, le prestataire vous propose une **API** (Application Programming Interface) qui se pr\u00e9sente bien souvent comme une **liste de fonctions**, que votre fonction peut appeler \u00e0 distance au travers d'un m\u00e9canisme de **RPC** (Remote Procedure Call).\n", "\n", "Imaginez pour fixer les id\u00e9es que vous utilisez un service de r\u00e9servation de ressources dans un Cloud, qui vous permet d'appeler les fonctions suivantes\u00a0:\n", "\n", " * `GetNodes`(...) pour obtenir des informations sur les noeuds disponibles\u00a0;\n", " * `BookNode`(...) pour r\u00e9server un noeud\u00a0;\n", " * `ReleaseNode`(...) pour abandonner un noeud."]}, {"block": 10, "type": "markdown", "linesLength": 4, "startIndex": 26, "lines": ["Naturellement ceci est une API extr\u00eamement simplifi\u00e9e. Le point que nous voulons illustrer ici est que le dialogue avec le service distant\u00a0:\n", "\n", " * requiert ses propres donn\u00e9es - comme l'URL o\u00f9 on peut joindre le service, et les identifiants \u00e0 utiliser pour s'authentifier\u00a0;\n", " * et poss\u00e8de sa propre logique - dans le cas d'une authentification par session par exemple, il faut s'authentifier une premi\u00e8re fois avec un login/password, pour obtenir une session qu'on peut utiliser dans les appels suivants."]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 30, "lines": ["Pour ces raisons il est naturel de concevoir une classe `RPCProxy` dans laquelle on va rassembler \u00e0 la fois ces donn\u00e9es et cette logique, pour soulager toute l'application de ces d\u00e9tails, comme on l'a illustr\u00e9 ci-dessous\u00a0:\n", "\n", "<img src=\"media/rpcproxy.png\">"]}, {"block": 12, "type": "markdown", "linesLength": 6, "startIndex": 33, "lines": ["Pour impl\u00e9menter la plomberie li\u00e9e \u00e0 RPC, \u00e0 l'encodage et d\u00e9codage des donn\u00e9es, et qui sera interne \u00e0 la classe `RPCProxy`, on pourra en vraie grandeur utiliser des outils comme\u00a0:\n", "\n", " * [`xmlrpc.client`](https://docs.python.org/3/library/xmlrpc.client.html) qui fait partie de la biblioth\u00e8que standard\u00a0; \n", " * ou, pour JSON, une des nombreuses impl\u00e9mentations qu'un moteur de recherche vous exposera si vous cherchez `python rpc json`, comme par exemple [`json-rpc`](https://pypi.python.org/pypi/json-rpc/).\n", "\n", "Cela n'est toutefois pas notre sujet ici, et nous nous contenterons, dans notre code simplifi\u00e9, d'imprimer un message."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["##### Une approche na\u00efve"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Se pose donc la question de savoir quelle interface la classe `RPCProxy` doit offrir au reste du monde. Dans une premi\u00e8re version na\u00efve on pourrait \u00e9crire quelque chose comme\u00a0:"]}, {"block": 15, "type": "code", "linesLength": 24, "startIndex": 41, "lines": ["# la version na\u00efve de la classe RPCProxy\n", "\n", "class RPCProxy:\n", "    \n", "    def __init__(self, url, login, password):\n", "        self.url = url\n", "        self.login = login\n", "        self.password = password\n", "        \n", "    def _forward_call(self, functionname, *args):\n", "        \"\"\"\n", "        helper method that marshalls and forwards \n", "        the function and arguments to the remote end\n", "        \"\"\"\n", "        print(f\"\"\"Envoi \u00e0 {self.url}\n", "de la fonction {functionname} -- args= {args}\"\"\")\n", "        return \"retour de la fonction \" + functionname\n", "    \n", "    def GetNodes (self, *args):\n", "        return self._forward_call ('GetNodes', *args)\n", "    def BookNode (self, *args):\n", "        return self._forward_call ('BookNode', *args)\n", "    def ReleaseNode (self, *args):\n", "        return self._forward_call ('ReleaseNode', *args)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["Ainsi l'application utilise la classe de cette fa\u00e7on\u00a0:"]}, {"block": 17, "type": "code", "linesLength": 16, "startIndex": 66, "lines": ["# cr\u00e9ation d'une instance de RPCProxy\n", "\n", "rpc_proxy = RPCProxy(url='http://cloud.provider.com/JSONAPI', \n", "                     login='dupont',\n", "                     password='***')\n", "\n", "# cette partie du code, en tant qu'utilisateur de l'API, \n", "# est suppos\u00e9e conna\u00eetre les d\u00e9tails\n", "# des arguments \u00e0 passer \n", "# et de comment utiliser les valeurs de retour\n", "nodes_list = rpc_proxy.GetNodes ( \n", "    [ ('phy_mem', '>=', '32G') ] )\n", "\n", "# r\u00e9server un noeud\n", "node_lease = rpc_proxy.BookNode (\n", "    { 'id' : 1002, 'phy_mem' : '32G' } )"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["##### Discussion"]}, {"block": 19, "type": "markdown", "linesLength": 6, "startIndex": 83, "lines": ["Quelques commentaires en vrac au sujet de cette approche\u00a0:\n", "\n", "* l'interface est correcte\u00a0; l'objet `rcp_proxy` se comporte bien comme un proxy, on a donn\u00e9 au programmeur l'illusion compl\u00e8te qu'il utilise une classe locale (sauf pour les performances bien entendu...)\u00a0;\n", "* la s\u00e9paration des r\u00f4les est raisonnable \u00e9galement, la classe RPCProxy n'a pas \u00e0 conna\u00eetre le d\u00e9tail de la signature de chaque m\u00e9thode, charge \u00e0 l'appelant d'utiliser l'API correctement\u00a0;\n", "* par contre ce qui cloche, c'est que l'impl\u00e9mentation de la classe RPCProxy d\u00e9pend de la liste des fonctions expos\u00e9es par l'API\u00a0; imaginez une API avec 100 ou 200 m\u00e9thodes, cela donne une d\u00e9pendance assez forte et surtout inutile\u00a0;\n", "* enfin, nous avons escamot\u00e9 la n\u00e9cessit\u00e9 de faire de RPCProxy un [singleton](http://en.wikipedia.org/wiki/Singleton_pattern), mais c'est une toute autre histoire."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["##### Une approche plus subtile"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["Pour obtenir une impl\u00e9mentation qui conserve toutes les qualit\u00e9s de la version na\u00efve, mais sans la n\u00e9cessit\u00e9 de d\u00e9finir une \u00e0 une toutes les fonctions de l'API, on peut tirer profit de `__getattr__`, comme dans cette deuxi\u00e8me version\u00a0:"]}, {"block": 22, "type": "code", "linesLength": 19, "startIndex": 91, "lines": ["# une deuxi\u00e8me impl\u00e9mentation de RPCProxy\n", "\n", "class RPCProxy:\n", "    \n", "    def __init__(self, url, login, password):\n", "        self.url = url\n", "        self.login = login\n", "        self.password = password\n", "        \n", "    def __getattr__(self, function):\n", "        \"\"\"\n", "        Cr\u00e9e \u00e0 la vol\u00e9e une m\u00e9thode sur RPCProxy qui correspond\n", "        \u00e0 la fonction distante 'function'\n", "        \"\"\"\n", "        def forwarder(*args):\n", "            print(f\"Envoi \u00e0 {self.url}...\")\n", "            print(f\"de la fonction {function} -- args= {args}\")\n", "            return \"retour de la fonction \" + function\n", "        return forwarder"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["Qui est cette fois **totalement d\u00e9coupl\u00e9e** des d\u00e9tails de l'API, et qu'on peut utiliser exactement comme tout \u00e0 l'heure\u00a0:"]}, {"block": 24, "type": "code", "linesLength": 16, "startIndex": 111, "lines": ["# cr\u00e9ation d'une instance de RPCProxy\n", "\n", "rpc_proxy = RPCProxy (url='http://cloud.provider.com/JSONAPI', \n", "                      login='dupont',\n", "                      password='***')\n", "\n", "# cette partie du code, en tant qu'utilisateur de l'API, \n", "# est suppos\u00e9e conna\u00eetre les d\u00e9tails\n", "# des arguments \u00e0 passer \n", "# et de comment utiliser les valeurs de retour\n", "nodes_list = rpc_proxy.GetNodes ( \n", "    [ ('phy_mem', '>=', '32G') ] )\n", "\n", "# r\u00e9server un noeud\n", "node_lease = rpc_proxy.BookNode (\n", "    { 'id' : 1002, 'phy_mem' : '32G' } )"]}]