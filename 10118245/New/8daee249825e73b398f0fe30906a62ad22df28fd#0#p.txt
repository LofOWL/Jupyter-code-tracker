[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Passage d'arguments"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 3, "lines": ["# pour charger l'exercice", "from corrections.w4s8_fun_args import exo_distance"]}, {"block": 4, "type": "markdown", "linesLength": 6, "startIndex": 5, "lines": ["Vous devez \u00e9crire une fonction `distance` qui prend un nombre quelconque d'arguments num\u00e9riques non complexes, et qui retourne la racine carr\u00e9e de la somme des carr\u00e9s des arguments. ", "", "Plus pr\u00e9cis\u00e9ment :", "$distance$ ($x_1$, ..., $x_n$) = $\\sqrt{\\sum x_i^2}$", "", "Par convention on fixe que $ distance() = 0 $"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["# des exemples", "exo_distance.example()"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction", "def distance(votre, signature):", "    \"<votre code>\""]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["# la correction", "exo_distance.correction(distance)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["## Exercice - niveau interm\u00e9daire"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["# pour charger l'exercice", "from corrections.w4s8_fun_args import exo_doubler_premier"]}, {"block": 10, "type": "markdown", "linesLength": 7, "startIndex": 21, "lines": ["On vous demande d'\u00e9crire une fonction qui prend en argument", " * une fonction `f`, dont vous savez seulement que le premier argument est num\u00e9rique, et qu'elle ne prend **que des arguments positionnels** (sans valeur par d\u00e9faut)", " * un nombre quelconque - mais au moins 1 - d'arguments positionnels `args`, dont on sait qu'ils pourraient \u00eatre pass\u00e9s \u00e0 `f`", " ", "Et on attend en retour le r\u00e9sultat de `f` appliqu\u00e9s \u00e0 tous ces arguments, mais avec le premier d'entre eux multipl\u00e9 par deux.", "", "Formellement: doubler_premier(f, $x_1$, $x_2$,..., $x_n$) = f($2*x_1$, $x_2$,..., $x_n$)"]}, {"block": 11, "type": "code", "linesLength": 5, "startIndex": 28, "lines": ["# quelques exemples de ce qui est attendu.", "# add et mul sont les op\u00e9rateurs binaires du module operator, ", "# soit l'addition et la multiplication respectivement.", "# distance est la fonction de l'exercice pr\u00e9c\u00e9dent.", "exo_doubler_premier.example()"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 33, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction", "def doubler_premier(votre, signature):", "    \"<votre_code>\""]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["exo_doubler_premier.correction(doubler_premier)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["## Exercice - niveau interm\u00e9daire"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["# Pour charger l'exercice", "from corrections.w4s8_fun_args import exo_doubler_premier_kwds"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 40, "lines": ["Vous devez maintenant \u00e9crire une deuxi\u00e8me version qui peut fonctionner avec une fonction quelconque (elle peut avoir des arguments nomm\u00e9s avec valeurs par d\u00e9faut).", "", "La fonction `doubler_premier_kwds` que l'on vous demande d'\u00e9crire maintenant prend donc un premier arguments `f` qui est une fonction, un second argument positionnel qui est le premier argument \u00e0 `f` (et donc qu'il faut doubler), et le reste des arguments \u00e0 f, qui donc, \u00e0 nouveau, peuvent \u00eatre nomm\u00e9s ou non."]}, {"block": 17, "type": "code", "linesLength": 10, "startIndex": 43, "lines": ["# quelques exemples de ce qui est attendu", "# avec ces deux fonctions ", "", "def add3(x, y=0, z=0):", "    return x + y + z", "", "def mul3(x=1, y=1, z=1):", "    return x * y * z", "", "exo_doubler_premier_kwds.example()"]}, {"block": 18, "type": "markdown", "linesLength": 5, "startIndex": 53, "lines": ["Vous remarquerez que l'on n'a pas mentionn\u00e9 dans cette liste d'exemples", "", "    doubler_premier_kwds (muln, x=1, y=1)", "   ", "que l'on ne demande pas de supporter puisqu'il est bien pr\u00e9cis\u00e9 que doubler_premier a deux arguments positionnels."]}, {"block": 19, "type": "code", "linesLength": 3, "startIndex": 58, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction", "def doubler_premier_kwds(votre, signature):", "    \"<votre code>\""]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["exo_doubler_premier_kwds.correction(doubler_premier_kwds)"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["## Exercice - niveau avanc\u00e9"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 63, "lines": ["# Pour charger l'exercice", "from corrections.w4s8_fun_args import exo_compare_args"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["### `compare` revisit\u00e9e"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["Nous avons d\u00e9j\u00e0 fait un peu plus t\u00f4t cette semaine, au sujet de la programmation fonctionnelle, un exercice au sujet d'une fonction `compare` qui comparait le r\u00e9sultat de deux fonctions, toutes deux \u00e0 un argument, sur une liste de valeurs d'entr\u00e9e."]}, {"block": 25, "type": "markdown", "linesLength": 9, "startIndex": 67, "lines": ["Nous reprenons ici la m\u00eame id\u00e9e, mais en levant l'hypoth\u00e8se que les deux fonctions attendent un seul argument. Il faut \u00e9crire une nouvelle fonction `compare_args` qui prend en entr\u00e9e", " * deux fonctions `f` et `g` comme la derni\u00e8re fois,", " * mais cette fois une liste (ou un tuple) `argument_tuples` de **tuples** d'arguments d'entr\u00e9e", " ", " Et comme la fois pr\u00e9c\u00e9dente on attend en retour une liste `retour` de bool\u00e9ens, de m\u00eame taille que `argument_tuples`, telle que, si `len(argument_tuples)` vaut $n$:", " ", "$\\forall i \\in \\{1,...,n\\}$, si `argument_tuples[i]` == [ $a_1$,...,$a_j$ ], alors", "", "`retour(i) == True` $\\Longleftrightarrow$  f ($a_1$,...,$a_j$) == g ($a_1$,...,$a_j$)"]}, {"block": 26, "type": "markdown", "linesLength": 5, "startIndex": 76, "lines": ["Pour information, dans tout cet exercice:", " * `factorial` correspond \u00e0 `math.factorial`", " * `fact` et `broken_fact` sont des fonctions impl\u00e9ment\u00e9es par nos soins, la premi\u00e8re est correcte alors que la seconde retourne 0 au lieu de 1 pour l'entr\u00e9e 0.", " * `add` correspond \u00e0 l'addition binaire `operator.add`", " * `plus` et `broken_plus` sont des additions binaires \u00e9crites par nous, l'une \u00e9tant correcte et l'autre \u00e9tant fausse lorsque le premier argument est nul."]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 81, "lines": ["exo_compare_args.example()"]}, {"block": 28, "type": "code", "linesLength": 3, "startIndex": 82, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction", "def compare_args(votre, signature):", "    \"<votre_code>\""]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 85, "lines": ["exo_compare_args.correction(compare_args)"]}]