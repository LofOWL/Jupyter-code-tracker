[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# H\u00e9ritage multiple"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### La classe `object`"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Le symbole `object` est une variable pr\u00e9d\u00e9finie (qui donc fait partie du module `builtins`)\u00a0:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["object"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 10, "lines": ["import builtins\n", "\n", "builtins.object is object"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["La classe `object` est une classe sp\u00e9ciale\u00a0; toutes les classes en Python h\u00e9ritent de la classe `object`, m\u00eame lorsqu'aucun h\u00e9ritage n'est sp\u00e9cifi\u00e9\u00a0:"]}, {"block": 8, "type": "code", "linesLength": 4, "startIndex": 14, "lines": ["class Foo:\n", "    pass\n", "\n", "Foo.__bases__"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["L'attribut sp\u00e9cial `__bases__`, comme on le devine, nous permet d'acc\u00e9der aux superclasses directes, ici de la classe `Foo`."]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["En Python moderne, on n'a **jamais besoin de mentionner** `object` dans le code. La raison de sa pr\u00e9sence dans les symboles pr\u00e9d\u00e9finis est li\u00e9e \u00e0 l'histoire de Python, et \u00e0 la distinction que faisait Python 2 entre classes *old-style* et classes *new-style*. Nous le mentionnons seulement car on rencontre encore parfois du code qui fait quelque chose comme\u00a0:"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["class Bar(object):\n", "    pass"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["qui est un reste de Python 2, et que Python 3 accepte uniquement au titre de la compatibilit\u00e9."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["### Rappels"]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 25, "lines": ["L'h\u00e9ritage en Python consiste principalement en l'algorithme de recherche d'un attribut d'une instance\u00a0; celui-ci regarde\u00a0:\n", "\n", "0. d'abord dans l'instance\u00a0;\n", "0. ensuite dans la classe\u00a0;\n", "0. ensuite dans les super-classes."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["### Ordre sur les super-classes"]}, {"block": 17, "type": "markdown", "linesLength": 10, "startIndex": 31, "lines": ["Le probl\u00e8me revient donc, pour le dernier point, \u00e0 d\u00e9finir un **ordre** sur l'ensemble des **super-classes**. On parle bien, naturellement, de **toutes** les super-classes, pas seulement celles dont on h\u00e9rite directement - en termes savants on dirait qu'on s'int\u00e9resse \u00e0 la fermeture transitive de la relation d'h\u00e9ritage.\n", "\n", "L'algorithme utilis\u00e9 pour cela depuis la version 2.3 est connu sous le nom de **lin\u00e9arisation C3**. Cet algorithme n'est pas propre \u00e0 python, comme vous pourrez le lire dans les r\u00e9f\u00e9rences cit\u00e9es dans la derni\u00e8re section.\n", "\n", "Nous ne d\u00e9crirons pas ici l'algorithme lui-m\u00eame dans le d\u00e9tail\u00a0; par contre nous allons\u00a0:\n", "\n", "* dans un premier temps r\u00e9sumer **les raisons** qui ont guid\u00e9 ce choix, en d\u00e9crivant les bonnes propri\u00e9t\u00e9s que l'on attend, ainsi que les **limitations** qui en d\u00e9coulent\u00a0;\n", "* puis voir l'ordre obtenu sur quelques **exemples** concrets de hi\u00e9rarchies de classes.\n", " \n", "Vous trouverez dans les r\u00e9f\u00e9rences (voir ci-dessous la derni\u00e8re section, \"Pour en savoir plus\") des liens vers des documents plus techniques si vous souhaitez creuser le sujet."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["### Les bonnes propri\u00e9t\u00e9s attendues"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Il y a un certain nombre de bonnes propri\u00e9t\u00e9s que l'on attend de cet algorithme."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["##### Priorit\u00e9 au sp\u00e9cifique"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Lorsqu'une classe A h\u00e9rite d'une classe B, on s'attend \u00e0 ce que les m\u00e9thodes d\u00e9finies sur A, qui sont en principe plus sp\u00e9cifiques, soient utilis\u00e9es de pr\u00e9f\u00e9rence \u00e0 celles d\u00e9finies sur B."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["##### Priorit\u00e9 \u00e0 gauche"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Lorsqu'on utilise l'h\u00e9ritage multiple, on mentionne les classes m\u00e8res dans un certain ordre, qui n'est pas anodin. Les classes mentionn\u00e9es en premier sont bien entendu celles desquelles on veut h\u00e9riter en priorit\u00e9."]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["# La Method Resolution Order (MRO)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["##### De mani\u00e8re un peu plus formelle"]}, {"block": 26, "type": "markdown", "linesLength": 4, "startIndex": 49, "lines": ["Pour reformuler les deux points ci-dessus, on s'int\u00e9resse \u00e0 la `mro` d'une classe O, et on veut avoir les deux bonnes propri\u00e9t\u00e9s suivantes\u00a0:\n", "\n", "* si O h\u00e9rite (pas forc\u00e9ment directement) de A qui elle m\u00eame h\u00e9rite de B, alors A est avant B dans la `mro` de O\u00a0;\n", "* si O h\u00e9rite (pas forc\u00e9ment directement) de A, qui elle h\u00e9rite de B, puis (pas forc\u00e9ment imm\u00e9diatement) de C, alors dans la `mro` A est avant B qui est avant C."]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["##### Limitations\u00a0: toutes les hi\u00e9rarchies ne peuvent pas \u00eatre trait\u00e9es"]}, {"block": 28, "type": "markdown", "linesLength": 3, "startIndex": 54, "lines": ["L'algorithme C3 permet de calculer un ordre sur $\\cal{S}$ qui respecte toutes ces contraintes, lorsqu'il en existe un. \n", "\n", "En effet, dans certains cas on ne peut pas trouver un tel ordre, on le verra plus bas, mais dans la pratique, il est assez rare de tomber sur de tels cas pathologiques\u00a0; et lorsque cela se produit c'est en g\u00e9n\u00e9ral le signe d'erreurs de conception plus profondes."]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["### Un exemple tr\u00e8s simple"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["On se donne la hi\u00e9rarchie suivante\u00a0:"]}, {"block": 31, "type": "code", "linesLength": 21, "startIndex": 59, "lines": ["class LeftTop(object):\n", "    def attribut(self): \n", "        return \"attribut(LeftTop)\"\n", "    \n", "class LeftMiddle(LeftTop): \n", "    pass\n", "\n", "class Left(LeftMiddle): \n", "    pass\n", "\n", "class Middle(object): \n", "    pass\n", "\n", "class Right(object):\n", "    def attribut(self): \n", "        return \"attribut(Right)\"\n", "\n", "class Class(Left, Middle, Right): \n", "    pass\n", "\n", "instance = Class()"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 80, "lines": ["qui donne en version dessin\u00e9e, avec deux points rouges pour repr\u00e9senter les deux d\u00e9finitions de la m\u00e9thode `attribut`\u00a0:\n", "\n", "<img src=\"media/heritage-multiple01.png\" height=\"40\">"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["Les deux r\u00e8gles, telles que nous les avons \u00e9nonc\u00e9es en premier lieu (priorit\u00e9 \u00e0 gauche, priorit\u00e9 au sp\u00e9cifique) sont un peu contradictoires ici. En fait, c'est la m\u00e9thode de `LeftTop` qui est h\u00e9rit\u00e9e dans `Class`, comme on le voit ici\u00a0:"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 84, "lines": ["instance.attribut() == 'attribut(LeftTop)'"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["**Exercice**\u00a0: Remarquez qu'ici `Right` a elle-m\u00eame un h\u00e9ritage tr\u00e8s simple. \u00c0 titre d'exercice, modifiez le code ci-dessus pour faire que `Right` h\u00e9rite de la classe `LeftMiddle`\u00a0; de quelle classe d'apr\u00e8s vous est-ce que `Class` h\u00e9rite `attribut` dans cette configuration\u00a0?"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["##### Si cela ne vous convient pas"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["C'est une \u00e9vidence, mais cela va peut-\u00eatre mieux en le rappelant\u00a0: si la m\u00e9thode que vous obtenez \"gratuitement\" avec l'h\u00e9ritage n'est pas celle qui vous convient, vous avez naturellement toujours la possibilit\u00e9 de la red\u00e9finir, et ainsi d'en **choisir** une autre. Dans notre exemple si on pr\u00e9f\u00e8re la m\u00e9thode impl\u00e9ment\u00e9e dans `Right`, on d\u00e9finira plut\u00f4t la classe `Class` comme ceci\u00a0:"]}, {"block": 38, "type": "code", "linesLength": 10, "startIndex": 88, "lines": ["class Class(Left, Middle, Right):\n", "    # en red\u00e9finissant explicitement la m\u00e9thode\n", "    # attribut ici on court-circuite la mro\n", "    # et on peut appeler explicitement une autre\n", "    # version de attribut()\n", "    def attribut(*args, **kwds):\n", "        return Right.attribut(*args, **kwds)\n", "    \n", "instance2 = Class()\n", "instance2.attribut()"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 98, "lines": ["Ou encore bien entendu, si dans votre contexte vous devez appelez **les deux** m\u00e9thodes dont vous pourriez h\u00e9riter et les combiner, vous pouvez le faire aussi, par exemple comme ceci\u00a0:"]}, {"block": 40, "type": "code", "linesLength": 8, "startIndex": 99, "lines": ["class Class(Left, Middle, Right):\n", "    # pour faire un composite des deux m\u00e9thodes\n", "    # trouv\u00e9es dans les classes m\u00e8res\n", "    def attribut(*args, **kwds):\n", "        return LeftTop.attribut(*args, **kwds) + \" ** \" + Right.attribut(*args, **kwds) \n", "    \n", "instance3 = Class()\n", "instance3.attribut()"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 107, "lines": ["### Un exemple un peu plus compliqu\u00e9"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 108, "lines": ["Voici un exemple, assez parlant, tir\u00e9 de la deuxi\u00e8me r\u00e9f\u00e9rence (voir ci-dessous la derni\u00e8re section, \"Pour en savoir plus\")."]}, {"block": 43, "type": "code", "linesLength": 7, "startIndex": 109, "lines": ["O = object\n", "class F(O): pass\n", "class E(O): pass\n", "class D(O): pass\n", "class C(D, F): pass\n", "class B(E, D): pass\n", "class A(B, C): pass"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 116, "lines": ["Cette hi\u00e9rarchie nous donne, en partant de A, l'ordre suivant\u00a0:"]}, {"block": 45, "type": "markdown", "linesLength": 22, "startIndex": 117, "lines": ["                               6\n", "                              ---\n", "    Level 3                  | O |\n", "                           /  ---  \\\n", "                          /    |    \\\n", "                         /     |     \\\n", "                        /      |      \\\n", "                      ---     ---    ---\n", "    Level 2        2 | E | 4 | D |  | F | 5\n", "                      ---     ---    ---\n", "                       \\      / \\     /\n", "                        \\    /   \\   /\n", "                         \\  /     \\ /\n", "                          ---     ---\n", "    Level 1            1 | B |   | C | 3\n", "                          ---     ---\n", "                           \\       /\n", "                            \\     /\n", "                              ---\n", "    Level 0                0 | A |\n", "                              ---\n", "    "]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 139, "lines": ["Que l'on peut calculer, sous l'interpr\u00e9teur python, avec la m\u00e9thode `mro` sur la classe de d\u00e9part\u00a0:"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 140, "lines": ["A.mro()"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 141, "lines": ["### Un exemple qui ne peut pas \u00eatre trait\u00e9"]}, {"block": 49, "type": "markdown", "linesLength": 3, "startIndex": 142, "lines": ["Voici enfin un exemple de hi\u00e9rarchie pour laquelle on ne **peut pas trouver d'ordre** qui respecte les bonnes propri\u00e9t\u00e9s que l'on a vues tout \u00e0 l'heure, et qui pour cette raison sera **rejet\u00e9e par l'interpr\u00e9teur python**. D'abord en version dessin\u00e9e\u00a0:\n", "\n", "<img src=\"media/heritage-multiple02.png\">"]}, {"block": 50, "type": "code", "linesLength": 12, "startIndex": 145, "lines": ["# puis en version code\n", "class X: pass\n", "class Y: pass\n", "class XY(X, Y): pass\n", "class YX(Y, X): pass\n", "\n", "# on essaie de cr\u00e9er une sous-classe de XY et YX\n", "try:\n", "    class Class(XY, YX): pass \n", "# mais ce n'est pas possible\n", "except Exception as e:\n", "    print(f\"OOPS, {type(e)}, {e}\")"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 157, "lines": ["### Pour en savoir plus"]}, {"block": 52, "type": "markdown", "linesLength": 4, "startIndex": 158, "lines": ["0. Un [blog de Guido Van Rossum](http://python-history.blogspot.fr/2010/06/method-resolution-order.html\n", ") qui retrace l'historique des diff\u00e9rents essais qui ont \u00e9t\u00e9 faits avant de converger sur le mod\u00e8le actuel.\n", "0. Un [article technique](https://www.python.org/download/releases/2.3/mro/) qui d\u00e9crit le fonctionnement de l'algorithme de calcul de la MRO, et donne des exemples.\n", "0. L'[article de Wikipedia](http://en.wikipedia.org/wiki/C3_linearization) sur l'algorithme C3."]}]