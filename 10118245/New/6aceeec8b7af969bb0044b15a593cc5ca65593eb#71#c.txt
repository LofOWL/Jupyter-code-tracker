[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Programmation fonctionnelle"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Pour r\u00e9sumer"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["La notion de programmation fonctionnelle consiste essentiellement \u00e0 pouvoir manipuler les fonctions comme des objets \u00e0 part enti\u00e8re, et \u00e0 les passer en argument \u00e0 d'autres fonctions, comme cela a illustr\u00e9 dans la vid\u00e9o."]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 4, "lines": ["On peut cr\u00e9er une fonction par l'interm\u00e9diaire de\n", " * l'*expression* `lambda:` - on obtient alors une fonction *anonyme*\n", " * ou de l'*instruction* `def`\n", "\n", "Pour des raisons de syntaxe surtout, on a davantage de puissance d'expression avec `def`."]}, {"block": 5, "type": "markdown", "linesLength": 5, "startIndex": 9, "lines": ["On peut calculer la liste des r\u00e9sultats d'une fonction sur une liste d'entr\u00e9es par\n", " * `map`, \u00e9ventuellement combin\u00e9 \u00e0 `filter`\n", " * ou par une compr\u00e9hension de liste, \u00e9ventuellement assortie d'un `if`.\n", "\n", "Nous allons revoir les compr\u00e9hensions de listes dans la prochaine vid\u00e9o."]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Voici \u00e0 pr\u00e9sent quelques autres constructions classiques en programmation fonctionnelle"]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 16, "lines": ["`reduce`"]}, {"block": 9, "type": "markdown", "linesLength": 7, "startIndex": 17, "lines": ["La fonction `reduce` permet d'appliquer une op\u00e9ration associative \u00e0 une liste d'entr\u00e9es. Pour faire simple, \u00e9tant donn\u00e9 un op\u00e9rateur binaire $\\otimes$ on veut pouvoir calculer\n", "\n", " $ x_1 \\otimes x_2 ... \\otimes x_n $\n", "\n", "De mani\u00e8re un peu moins abstraite, on suppose qu'on dispose d'une **fonction binaire** `f` qui impl\u00e9mente l'op\u00e9rateur $\\otimes$, et alors \n", "\n", "   `reduce` $( f, [x_1, .. x_n] ) = f ( ... f(f(x_1,x_2), x_3), .. , x_n)$"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["En fait `reduce` accepte un troisi\u00e8me argument - qu'il faut comprendre comme l'\u00e9l\u00e9ment neutre de l'op\u00e9rateur/fonction en question - et qui est retourn\u00e9 lorsque la liste en entr\u00e9e est vide."]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 25, "lines": ["Par exemple voici - encore - une autre impl\u00e9mentation possible de la fonction `factoriel`.\n", "\n", "On utilise ici [le module `operator`](https://docs.python.org/2/library/operator.html), qui fournit sous forme de fonctions la plupart des op\u00e9rateurs du langage, et notamment dans notre cas `operator.mul`; cette fonction retourne tout simplement le produit de sees deux arguments."]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 28, "lines": ["Cas fr\u00e9quents de `reduce`"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Par commodit\u00e9, python fournit des fonctions \"builtin\" qui correspondent en fait \u00e0 des `reduce` fr\u00e9quents pour la somme, et les op\u00e9rations `min` et `max`:"]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 30, "lines": ["apply"]}, {"block": 15, "type": "markdown", "linesLength": 4, "startIndex": 31, "lines": ["La fonction `apply` est un lointain descendant de Lisp, comme `map`, `filter` et `reduce`. \n", "L'id\u00e9e est simplement que\n", "\n", "`apply` $(f, [x_1, ... x_n]) \\Longleftrightarrow f (x_1, ... x_n)$"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Ainsi par exemple"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Cette fonction est toutefois tr\u00e8s rarement utilis\u00e9e, et a m\u00eame \u00e9t\u00e9 supprim\u00e9e en python3. Nous verrons tr\u00e8s bient\u00f4t que le m\u00e9canisme g\u00e9n\u00e9ral de passage d'arguments en python permet de r\u00e9aliser nativement l'\u00e9quivalent de `apply`. Ceci sera abord\u00e9 dans la derni\u00e8re vid\u00e9o de cette semaine, mais pour vous en donner un avant-go\u00fbt, l'appel \u00e0 `apply` ci-dessus s'\u00e9crit plut\u00f4t "]}]