[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les slices en python"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Ce support de cours reprend les notions de *slicing* vues dans la vid\u00e9o."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Nous allons illustrer les slices sur la chaine suivante; rappelez-vous toutefois que ce m\u00e9canisme fonctionne avec toutes les s\u00e9quences comme les listes ou les tuples."]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 5, "lines": ["chaine = \"abcdefghijklmnopqrstuvwxyz\" ; print(chaine)"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Slice sans pas"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["On a vu en cours qu'une slice permet de d\u00e9signer toute une plage d'\u00e9l\u00e9ments d'une s\u00e9quence. Ainsi on peut \u00e9crire"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 8, "lines": ["chaine[2:6]"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["### Conventions de d\u00e9but et fin"]}, {"block": 10, "type": "markdown", "linesLength": 8, "startIndex": 10, "lines": ["Les d\u00e9butants ont parfois du mal avec les bornes. Il faut se souvenir que:\n", "\n", "* les indices **commencent** comme toujours **\u00e0 z\u00e9ro**\n", "* le premier indice `debut` est inclus\n", "* le second indice `fin` est exclu\n", "* on obtient en tout `fin-debut` items dans le r\u00e9sultat\n", "\n", "Ainsi ci-dessus le r\u00e9sultat contient `6 - 2 = 4` \u00e9l\u00e9ments."]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 18, "lines": ["Pour vous aider \u00e0 vous souvenir des conventions de d\u00e9but et de fin, souvenez-vous qu'on veut pouvoir facilement juxtaposer deux slices qui ont une borne commune.\n", "\n", "C'est-\u00e0-dire qu'avec:"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["![d\u00e9but et fin](media/brackets.png)"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["# chaine[a:b] + chaine[b:c] == chaine[a:c]\n", "chaine[0:3] + chaine[3:7] == chaine[0:7]"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["#### Bornes omises"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["On peut omettre une borne:"]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 26, "lines": ["# si on omet la premi\u00e8re borne, cela signifie que \n", "# la slice commence au d\u00e9but de l'objet\n", "chaine[:6]"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["# et bien entendu c'est la m\u00eame chose si on omet la deuxi\u00e8me borne:\n", "chaine[24:]"]}, {"block": 18, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["# ou m\u00eame omettre les deux bornes, auquel cas on\n", "# fait une copie de l'objet - on y reviendra plus tard:\n", "chaine[:]"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["#### Indices n\u00e9gatifs"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["On peut utiliser des indices n\u00e9gatifs pour compter \u00e0 partir de la fin:"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["chaine[3:-3]"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["chaine[-3:]"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["### Slice avec pas"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["Il est \u00e9galement possible de pr\u00e9ciser un *pas*, de fa\u00e7on \u00e0 ne choisir par exemple, dans la plage donn\u00e9e, qu'un \u00e9l\u00e9ment sur deux:"]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 40, "lines": ["# le pas est pr\u00e9cis\u00e9 apr\u00e8s un deuxi\u00e8me deux-points (:)\n", "# ici on va choisir un caract\u00e8re sur deux dans la plage [3:-3]\n", "chaine[3:-3:2]"]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 43, "lines": ["Comme on le devine, le troisi\u00e8me \u00e9l\u00e9ment de la slice, ici `2`, d\u00e9termine le pas. On ne retient donc, dans la chaine `def...` que `d`, puis `f`, et ainsi de suite.\n", "\n", "On peut pr\u00e9ciser du coup la borne de fin (ici `-3`) avec un peu de libert\u00e9, puisqu'ici on obtiendrait un r\u00e9sultat identique avec `-4`:"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["chaine[3:-4:2]"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Pas n\u00e9gatif"]}, {"block": 29, "type": "markdown", "linesLength": 3, "startIndex": 48, "lines": ["Il est m\u00eame possible de sp\u00e9cifier un pas n\u00e9gatif. Dans ce cas, de mani\u00e8re un peu contre-intuitive, il faut pr\u00e9ciser un d\u00e9but (le premier indice de la slice) qui soit *plus \u00e0 droite* que la fin (le second indice).\n", "\n", "Pour prendre un exemple, comme l'\u00e9l\u00e9ment d'indice `-3` - c-\u00e0-d. `x` - est plus \u00e0 droite que l'\u00e9l\u00e9ment d'indice `3` - c-\u00e0-d. `d` - \u00e9videmment so on ne pr\u00e9cisait pas le pas (qui revient \u00e0 choisir un pas \u00e9gal \u00e0 `1`), on obtiendrait une liste vide:"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["chaine[-3:3]"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["Si maintenant on pr\u00e9cise un pas n\u00e9gatif, on obtient cette fois"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["chaine[-3:3:-2]"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["### Conclusion"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["\u00c0 nouveau, souvenez-vous que tous ces m\u00e9canismes fonctionnent avec de nombreux autres types que les chaines de caract\u00e8res. En voici deux exemples, qui anticipent tous les deux sur la suite, mais qui devraient illustrer les vastes possiblit\u00e9s qui sont offertes avec les slices."]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["#### Listes"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["Par exemple sur les listes: "]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["liste = [0, 2, 4, 8, 16, 32, 64, 128]\n", "liste"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["liste[-1:1:-2]"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Et m\u00eame ceci - qui peut \u00eatre d\u00e9routant (nous reviendrons naturellement sur tout ceci)"]}, {"block": 40, "type": "code", "linesLength": 2, "startIndex": 62, "lines": ["liste[2:4] = [100, 200, 300, 400, 500]\n", "liste"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["#### `numpy`"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["La librairie `numpy` permet de manipuler des tableaux ou matrices. En anticipant (beaucoup) sur son usage que nous reverrons bien entendu en d\u00e9tails, voici un aper\u00e7u de ce qu'on peut faire avec des slices sur des objets `numpy`:"]}, {"block": 44, "type": "code", "linesLength": 6, "startIndex": 67, "lines": ["# ces deux premi\u00e8res cellules sont \u00e0 admettre\n", "# on construit un tableau ligne\n", "import numpy as np\n", "\n", "un_cinq = np.array([1, 2, 3, 4, 5]) \n", "un_cinq"]}, {"block": 45, "type": "code", "linesLength": 6, "startIndex": 73, "lines": ["# ces deux premi\u00e8res cellules sont \u00e0 admettre\n", "# on le combine avec lui-m\u00eame - et en utilisant une slice un peu magique\n", "# pour former un tableau carr\u00e9 5x5\n", "\n", "array = 10 * un_cinq[:, np.newaxis] + un_cinq\n", "array"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["Sur ce tableau de taille 5x5, nous pouvons aussi faire du slicing et extraire le sous-tableau 3x3 au centre:"]}, {"block": 47, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["centre = array[1:4, 1:4]\n", "centre"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["On peut bien s\u00fbr \u00e9galement utiliser un pas:"]}, {"block": 49, "type": "code", "linesLength": 2, "startIndex": 83, "lines": ["coins = array[::4, ::4]\n", "coins"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["Ou bien retourner compl\u00e8tement dans une direction:"]}, {"block": 51, "type": "code", "linesLength": 2, "startIndex": 86, "lines": ["tete_en_bas = array[::-1,:]\n", "tete_en_bas"]}]