[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["if .. else if .. else .."]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Pour \u00eatre tout \u00e0 fait exhaustif sur l'instruction conditionnelle, signalons qu'elle permet d'impl\u00e9menter simplement des branchements \u00e0 plusieurs choix, comme dans cet exemple:"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Comme on s'en doute, les expressions conditionnelles sont \u00e9valu\u00e9es jusqu'\u00e0 obtenir un r\u00e9sultat vrai, et le bloc correspondant est alors ex\u00e9cut\u00e9, puis on sort de l'expression conditionnelle sans \u00e9valuer les autres conditions. "]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 4, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 5, "lines": ["\u00c9valuation des conditions"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 6, "lines": ["Il est important de bien assimiler ce que cela signifie de dire dans la phrase ci-dessus que \"les expressions conditionnelles sont \u00e9valu\u00e9es\". Cela signifie effectivement que si le premier test est vrai, on ne cherche pas du tout \u00e0 savoir ce que donnerait le second. \n", "\n", "Ceci n'a en g\u00e9n\u00e9ral pas grande importance, sauf dans le cas o\u00f9 l'\u00e9valuation des ces expressions bool\u00e9ennes donne lieu \u00e0 des **effets de bord**. Pour illustrer ce point, nous revenons sur la m\u00e9thode `pop()` qui, on le rappelle, renvoie un \u00e9l\u00e9ment de liste apr\u00e8s l'avoir effac\u00e9 de la liste. "]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Une fois ce rappel fait, nous consid\u00e9rons \u00e0 pr\u00e9sent l'exemple suivant:"]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 10, "lines": ["Avec cette entr\u00e9e, le premier test est positif (car `pop(0)` renvoie 0), aussi on n'ex\u00e9cute en tout `pop()` qu'une seule fois, et donc \u00e0 la sortie la liste n'a \u00e9t\u00e9 raccourcie que d'un \u00e9l\u00e9ment.\n", "\n", "Ex\u00e9cutons \u00e0 pr\u00e9sent le m\u00eame code avec une entr\u00e9e diff\u00e9rente (vivement les fonctions !)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["On observe que cette fois la liste a \u00e9t\u00e9 raccourcie 3 fois, car les trois tests se sont r\u00e9v\u00e9l\u00e9s n\u00e9gatifs."]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["\u00c9valuation paresseuse"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 15, "lines": ["Ce comportement est d'ailleurs \u00e0 mettre en rapport avec ce qui se passe en g\u00e9n\u00e9ral dans l'\u00e9valuation d'une expression bool\u00e9enne, mais en dehors du contexte d'un `if`\n", "\n", "Voyons un exemple tr\u00e8s voisin de ce qui pr\u00e9c\u00e8de"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["On voit ici que pour \u00e9valuer l'expression "]}, {"block": 13, "type": "raw", "linesLength": 1, "startIndex": 19, "lines": ["liste.pop(0) <= 0 or liste.pop(0) <= 1 or liste.pop(0) <= 2"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["on a commenc\u00e9 par \u00e9valuer le premier terme, qui s'est av\u00e9r\u00e9 vrai, il n'\u00e9tait pas n\u00e9cessaire d'\u00e9valuer les autres termes, on ne l'a donc pas fait du tout, c'est pourquoi la liste en sortie n'a \u00e9t\u00e9 raccourcie que d'un \u00e9l\u00e9ment."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Ce comportement est connu sous le nom d'\u00e9valuation paresseuse, en ce sens que seules les \u00e9valuations strictement n\u00e9cessaires \u00e0 l'obtention du r\u00e9sultat sont r\u00e9alis\u00e9es. En python, les instructions `and` et `or` font de l'\u00e9valuation paresseuse. Regardons un exemple avec `and` maintenant"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Comme un seul `False` est suffisant pour que toute l'expression soit fausse, les `list.pop(0)` ne sont pas \u00e9valu\u00e9s. "]}]