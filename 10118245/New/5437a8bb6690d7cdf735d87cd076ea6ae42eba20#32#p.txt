[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span>"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["La construction de tuples"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Les tuples et la virgule terminale"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Comme on l'a vu on peut construire un couple indiff\u00e9remment comme ceci"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 5, "lines": ["En r\u00e9alit\u00e9, la parenth\u00e8se est superflue, il se trouve toutefois qu'elle est largement utilis\u00e9e pour am\u00e9liorer la lisibilit\u00e9 des programmes.\n", "\n", "Ajoutons que la derni\u00e8re virgule est optionnelle - en g\u00e9n\u00e9ral, c'est-\u00e0-dire pour les tuples \u00e0 au moins 2 \u00e9l\u00e9ments. C'est-\u00e0-dire qu'on peut aussi bien \u00e9crire aussi:"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Qui est bien \u00e9quivalent aussi aux deux premi\u00e8res formes"]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 9, "lines": ["Conseil pour la pr\u00e9sentation sur plusieurs lignes"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["En g\u00e9n\u00e9ral d'ailleurs, la forme avec virgule terminale est plus pratique. Consid\u00e9rez par exemple l'initialisation suivante; on veut cr\u00e9er un tuple qui contient des listes (naturellement un tuple peut contenir n'importe quel objet python), et comme c'est assez long on pr\u00e9f\u00e8re mettre un \u00e9l\u00e9ment du tuple par ligne:"]}, {"block": 9, "type": "markdown", "linesLength": 5, "startIndex": 11, "lines": ["L'avantage lorsqu'on choisit cette forme (avec parenth\u00e8ses, et avec virgule terminale), c'est que d'abord il n'est pas n\u00e9cessaire de mettre un backslash \u00e0 la fin de chaque ligne; parce que l'on est \u00e0 l'int\u00e9rieur d'une zone parenth\u00e9s\u00e9e, l'interpr\u00e9teur python \"sait\" que l'instruction n'est pas termin\u00e9e et va se continuer sur la ligne suivante. \n", "\n", "Deuxi\u00e8mement, si on doit ult\u00e9rieurement ajouter ou enlever un \u00e9l\u00e9ment dans le tuple, il suffira d'enlever ou d'ajouter toute une ligne, sans avoir \u00e0 s'occuper des virgules; si on avait choisi de ne pas faire figurer la virgule terminale, alors pour ajouter un item dans le tuple apr\u00e8s le dernier, il ne faut pas oublier d'ajouter une virgule \u00e0 la ligne pr\u00e9c\u00e9dente. Cette simplicit\u00e9 se r\u00e9percute au niveau du gestionnaire de code source, ou les diff\u00e9rences dans le code sont plus faciles \u00e0 visualiser.\n", "\n", "Signalons enfin que ceci n'est pas propre aux tuples. La virgule terminale est \u00e9galement optionnelle pour les listes, ainsi d'ailleurs que pour tous les types python o\u00f9 cela fait du sens, comme les dictionnaires et les ensembles que nous verrons bient\u00f4t. Et dans tous les cas o\u00f9 on opte pour une pr\u00e9sentation multi-lignes, il est conseill\u00e9 de faire figurer une virgule terminale."]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 16, "lines": ["Tuples \u00e0 un \u00e9l\u00e9ment"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Pour revenir \u00e0 pr\u00e9sent sur le cas des tuples \u00e0 un seul \u00e9l\u00e9ment, c'est un cas particulier; parmi les 4 syntaxes qu'on a vues ci-dessus, on obtiendrait dans ce cas"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Il est bien \u00e9vident que la premi\u00e8re forme ne cr\u00e9e pas de tuple; en fait la seconde non plus, python lit ceci comme une expression parenth\u00e9s\u00e9e, et en fait ces deux formes cr\u00e9ent un entier simple:"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Les deux autres formes cr\u00e9ent par contre toutes les deux un tuple \u00e0 un \u00e9l\u00e9ment comme on cherchait \u00e0 le faire:"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Pour conclure, disons donc qu'il est conseill\u00e9 de **toujours mentionner une virgule terminale** lorsqu'on construit des tuples"]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Parenth\u00e8se parfois obligatoire"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Dans certains cas vous vous apercevrez que la parenth\u00e8se est obligatoire. Par exemple on peut \u00e9crire"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Mais si on essaie d'\u00e9crire le m\u00eame test sans les parenth\u00e8ses:"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["python l\u00e8ve une erreur de syntaxe. Encore une bonne raison pour utiliser les parenth\u00e8ses."]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 25, "lines": ["Addition de tuples"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Bien que le type tuple est immuable, il est tout \u00e0 fait l\u00e9gal d'additionner deux tuples puisque l'addition va produire un **nouveau** tuple."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Ainsi on peut \u00e9galement utiliser avec un tuple l'op\u00e9rateur +="]}, {"block": 22, "type": "heading", "linesLength": 1, "startIndex": 28, "lines": ["Construire des tuples \u00e9labor\u00e9s"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Malgr\u00e9 la possibilit\u00e9 de proc\u00e9der par additions successives, la construction d'un tuple peut s'av\u00e9rer fastidieuse. "]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Une astuce utile consiste \u00e0 penser aux fonctions de conversion, pour construire un tuple \u00e0 partir de - par exemple - une liste"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Ainsi il est tout \u00e0 fait possible par exemple de faire ceci"]}, {"block": 26, "type": "heading", "linesLength": 1, "startIndex": 32, "lines": ["Digression sur les noms de fonctions pr\u00e9d\u00e9finies"]}, {"block": 27, "type": "markdown", "linesLength": 3, "startIndex": 33, "lines": ["*Remarque*. Vous avez peut-\u00eatre observ\u00e9 que nous avons choisi de ne pas appeler notre tuple simplement `tuple`. C'est une bonne pratique en g\u00e9n\u00e9ral d'\u00e9viter les noms de fonctions pr\u00e9d\u00e9finies par python. \n", "\n", "Ces variables en effet sont des variables \"comme les autres\". Imaginez qu'on ait en fait deux tuples \u00e0 construire comme ci-dessus, voici ce qu'on obtiendrait si on n'avait pas pris cette pr\u00e9caution"]}, {"block": 28, "type": "markdown", "linesLength": 3, "startIndex": 36, "lines": ["Il y a une erreur parce que nous avons remplac\u00e9 (ligne 2) la valeur de la variable `tuple`, qui au d\u00e9part r\u00e9f\u00e9ren\u00e7ait vers la fonction de conversion, par un objet tuple. Ainsi en ligne 4, lorsqu'on appelle \u00e0 nouveau `tuple`, on essaie d'ex\u00e9cuter un objet qui n'est pas 'appelable' (not callable en anglais).\n", "\n", "D'un autre cot\u00e9, l'erreur est relativement facile \u00e0 trouver dans ce cas. En cherchant toutes les occurences de `tuple` dans notre propre code on voit assez vite le probl\u00e8me. De plus, je vous rappelle que votre \u00e9diteur de texte **doit** faire de la coloration syntaxique, et que toutes les fonctions built-in (dont `tuple` et `list` font parties) sont color\u00e9es sp\u00e9cifiquement (par exemple, en violet sous IDLE). En pratique, avec un bon \u00e9diteur de texte et un peu d'exp\u00e9rience, cette erreur est tr\u00e8s rare."]}]