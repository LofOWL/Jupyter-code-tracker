[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Classes \"new style\""]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["La classe `object`"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Vous pouvez trouver du code dans lequel les classes h\u00e9ritent de la classe `object`, comme dans cet exemple tir\u00e9 du module standard `zipfile` :"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Ceci nous donne l'occasion de citer le module `zipfile`, qui permet de lire ou \u00e9crire, de mani\u00e8re transparente, des fichiers compress\u00e9s au format `zip`. "]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 5, "lines": ["Les classes *new-style*"]}, {"block": 6, "type": "markdown", "linesLength": 7, "startIndex": 6, "lines": ["Mais le sujet de ce compl\u00e9ment est l'h\u00e9ritage entre `ZipFile` et la classe `object`. Voici ce qu'il faut en retenir en version courte.\n", "\n", "Aux alentours de la version 2.2 - 2.3 de python, on a am\u00e9lior\u00e9 le langage pour r\u00e9gler quelques probl\u00e8mes qui existaient dans le syst\u00e8me de types. En substance, et pour rester synth\u00e9tique :\n", "\n", " * Il n'\u00e9tait pas possible dans les anciennes versions de sp\u00e9cialier un type pr\u00e9d\u00e9fini. Par exemple si vous vous souvenez de la classe `collections.OrderedDict`, il s'agit d'une sp\u00e9cialisation du type *builtin* `dict`. Il n'aurait pas \u00e9t\u00e9 possible d'impl\u00e9menter cette classe avec les anciennes versions du langage.\n", " \n", " * Dans l'ancien mod\u00e8le mental, les classes et les types jouent un r\u00f4le diff\u00e9rent. Or dans la logique d'un langage orient\u00e9 objet, le type d'une instance, c'est sa classe. Nous allons y revenir avec des exemples."]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 13, "lines": ["Pour am\u00e9liorer le langage, on a alors introduit la notion de classe *new-style*. \n", "\n", "Pour **ne pas casser la compatibilit\u00e9 ascendante**, on a convenu que pour qu'une classe soit ***new-style***, il faut qu'elle **h\u00e9rite** - directement ou indirectement - de la classe *builtin* `object`."]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 16, "lines": ["Illustration"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Une instance d'une classe *old-style* a pour type le type `instance` :"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Par contre une instance d'une classe *new-style* a pour type la classe qu'on a utilis\u00e9e pour cr\u00e9er l'objet :"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 19, "lines": ["Digression sur python3"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["En python 3, toutes les classes sont maintenant *new-style*, qu'elles h\u00e9ritent ou non de `object`. C'est pourquoi il est **conseill\u00e9**, dans vos programmes python2, de **syst\u00e9matiquement \u00e9crire des classes new-style**."]}, {"block": 13, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 22, "lines": ["Pour en savoir plus"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 23, "lines": ["Si ce sujet vous int\u00e9resse, vous pouvez commencer par [l'article initial de Guido Van Rossum](https://www.python.org/download/releases/2.2.3/descrintro) au sujet de la nouvelle impl\u00e9mentation. \n", "\n", "D'autres liens pertinents sont aussi donn\u00e9s [ici dans la documentation python](https://www.python.org/doc/newstyle/)."]}]