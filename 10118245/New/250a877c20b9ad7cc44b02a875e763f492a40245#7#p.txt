[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Tris de listes"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["python fournit une fonction standard pour trier une liste, qui s'appelle, sans grande surprise, $\\texttt{sort}$ "]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Utilisation basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Voyons comment se comporte $\\texttt{sort}$ sur un exemple simple"]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 4, "lines": ["On retrouve ici, avec l'instruction $\\texttt{liste.sort()}$ un cas d'appel de m\u00e9thode (ici $\\texttt{sort}$) sur un objet (ici $\\texttt{liste}$), comme on l'avait vu dans la vid\u00e9o sur la notion d'objet.\n", "\n", "La premi\u00e8re chose \u00e0 remarquer est que la liste d'entr\u00e9e a \u00e9t\u00e9 modifi\u00e9e, on dit \"en place\", ou encore \"par effet de bord\".\n", "\n", "On aurait pu imaginer que la liste d'entr\u00e9e soit rest\u00e9e inchang\u00e9e, et que la m\u00e9thode de tri renvoie une copie tri\u00e9e de la liste, ce n'est pas le choix qui a \u00e9t\u00e9 fait. De cette fa\u00e7on, c'est \u00e0 l'utilisateur de la m\u00e9thode de r\u00e9aliser au pr\u00e9alable une copie de la liste initiale si c'est n\u00e9cessaire dans son cas d'usage. On \u00e9vite ainsi d'imposer une op\u00e9ration de copie, qui peut \u00eatre co\u00fbteuse en m\u00e9moire, lorsque ce n'est pas utile."]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 9, "lines": ["Tri d\u00e9croissant"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["On remarque aussi que la liste est tri\u00e9e par ordre croissant. Si vous souhaitez au contraire l'ordre d\u00e9croissant, vous pouvez le faire comme ceci:"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Nous n'avons pas encore vu \u00e0 quoi correspond cette formule $\\texttt{reverse=True}$ dans l'appel \u00e0 la m\u00e9thode, ceci sera approfondi dans le chapitre sur les appels de fonction, mais dans l'imm\u00e9diat vous pouvez utiliser cette technique telle quelle."]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Cha\u00eenes de caract\u00e8res"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Cette technique fonctionne tr\u00e8s bien sur tous les types num\u00e9riques (enfin, \u00e0 l'exception des complexes, pourquoi ?), ainsi que sur les cha\u00eenes de caract\u00e8res:"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Comme on s'y attend, il s'agit cette fois d'un tri lexicographique, d\u00e9riv\u00e9 de l'ordre total sur les caract\u00e8res. Il faut souligner toutefois, pour les personnes n'ayant jamais \u00e9t\u00e9 expos\u00e9es \u00e0 l'informatique, que cet ordre, quoique d\u00e9terministe, est arbitraire en dehors des lettres de l'alphabet."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Ainsi par exemple:"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["bon; mais par contre"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Ce qui explique ceci"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Et lorsque les chaines contiennent des espaces ou autres ponctuations, le r\u00e9sultat du tri peut para\u00eetre surprenant:"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Le codage ASCII, d'o\u00f9 d\u00e9rive l'ordre total sur les caract\u00e8res, peut \u00eatre consult\u00e9 en googlant \"ASCII\", par exemple ici http://www.ascii-code.com"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["$\\textit{Remarque}$: nous avons d\u00e9lib\u00e9r\u00e9ment dans cette discussion ignor\u00e9 le cas des caract\u00e8res accentu\u00e9s, sur lequel nous reviendrons plus tard."]}, {"block": 17, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Cas g\u00e9n\u00e9ral"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["XXX je mets ceci pour \u00eatre complet par rapport \u00e0 la demande d'Arnaud mais \u00e7a n\u00e9cessite de passer une fonction en argument \u00e0 une autre fonction, qui peut sembler pr\u00e9matur\u00e9; On pourra toujours d\u00e9couper \u00e7a en deux et remettre la fin dans un autre notebook pr\u00e9sent\u00e9 + tard XXX"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Dans le cas g\u00e9n\u00e9ral, on est souvent amen\u00e9 \u00e0 trier des objets selon un crit\u00e8re propre \u00e0 l'application. Imaginons par exemple que l'on dispose d'une liste de tuples \u00e0 deux \u00e9l\u00e9ments, dont le premier est la latitude et le second la longitude"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 24, "lines": ["Il est possible d'utiliser la m\u00e9thode $\\texttt{sort}$ pour faire cela, mais il va falloir l'aider un peu plus, et lui expliquer comment comparer deux \u00e9l\u00e9ments de la liste.\n", "\n", "Voyons comment on pourrait proc\u00e9der pour trier par longitude"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 27, "lines": ["Comme on le devine, le proc\u00e9d\u00e9 ici consiste \u00e0 indiquer \u00e0 $\\texttt{sort}$ comment calculer, \u00e0 partir de chaque \u00e9l\u00e9ment, une valeur num\u00e9rique qui sert de base au tri. \n", "\n", "Pour cela on passe \u00e0 la m\u00e9thode $\\texttt{sort}$ un argument $\\texttt{key}$ qui d\u00e9signe une fonction, qui lorsqu'elle est appliqu\u00e9e \u00e0 un \u00e9l\u00e9ment de la liste, retourne la valeur qui doit servir de base au tri (ici donc dans notre exemple, la fonction $\\texttt{longitude}$, qui renvoie le second \u00e9l\u00e9ment du tuple."]}, {"block": 22, "type": "heading", "linesLength": 1, "startIndex": 30, "lines": ["Fonction de commodit\u00e9 : $\\texttt{sorted}$"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["On a vu que $\\texttt{sort}$ r\u00e9alise le tri de la liste \"en place\". Pour les cas ou une copie est n\u00e9cessaire, python fournit \u00e9galement une fonction de commodit\u00e9, qui permet pr\u00e9cis\u00e9ment de renvoyer la copie tri\u00e9e d'une liste d'entr\u00e9e. Cette fonction est baptis\u00e9e $\\texttt{sorted}$, elle s'utilise par exemple comme ceci, sachant que les arguments $\\texttt{reverse}$ et $\\texttt{key}$ peuvent \u00eatre mentionn\u00e9s comme avec $\\texttt{sort}$"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Nous avons qualifi\u00e9 $\\texttt{sorted}$ de fonction de commodit\u00e9 car il est tr\u00e8s facile de s'en passer; en effet on aurait pu \u00e9crire \u00e0 la place du fragment pr\u00e9c\u00e9dent:"]}]