[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Expressions r\u00e9guli\u00e8res"]}, {"block": 1, "type": "markdown", "linesLength": 3, "startIndex": 1, "lines": ["Nous vous proposons dans ce notebook quelques exercices sur les expressions r\u00e9guli\u00e8res. Faisons quelques remarques avant de commencer&nbsp;:\n", " * nous nous concentrons sur l'\u00e9criture de l'expression r\u00e9guli\u00e8re en elle-m\u00eame, et pas sur l'utilisation de la librairie; \n", " * en particulier tous les exercices font appel \u00e0 `re.match` entre votre *regexp* et une liste de cha\u00eenes d'entr\u00e9e qui servent de jeux de test."]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 4, "lines": ["Exercice - niveau basique"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 5, "lines": ["Identificateurs python"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["\u00c9crivez une expression r\u00e9guli\u00e8re qui d\u00e9crit ce qu'on peut utiliser comme nom de variable en python."]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 7, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 8, "lines": ["M\u00e9thodes sp\u00e9ciales"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 9, "lines": ["Nous avons vu la semaine pass\u00e9e les m\u00e9thodes sp\u00e9ciales utilis\u00e9es par python pour vous permettre de red\u00e9finir le comportement du langage avec les objets de vos classes.\n", "\n", "Le but de cet exercice est d'\u00e9crire une expression r\u00e9guli\u00e8re qui d\u00e9crive une classe de noms de m\u00e9thodes susceptibles, d'\u00eatre consid\u00e9r\u00e9s comme des noms de m\u00e9thodes sp\u00e9ciales."]}, {"block": 8, "type": "markdown", "linesLength": 4, "startIndex": 12, "lines": ["Pour pr\u00e9ciser l'exercice, on recherche des noms de m\u00e9thodes qui doivent&nbsp;:\n", " 1. commencer par exactement deux underscores - ou tirets-bas `_`,\n", " 1. se terminer par exactement deux underscores,\n", " 1. contenir dans la partie centrale un identificateur qui pourrait \u00eatre un identificateur python (mais qui pour respecter les deux premiers points ne peut pas commencer ou finir par un underscore)"]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 16, "lines": ["Exercice - niveau avanc\u00e9"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Vu comment sont con\u00e7us les exercices, vous ne pouvez pas passer \u00e0 `re.compile` un *flag* comme `re.IGNORECASE` ou autre; sachez cependant que vous pouvez ***embarquer* ces flags dans la *regexp*** elle-m\u00eame; par exemple pour rendre la regexp insensible \u00e0 la casse de caract\u00e8res, au lieu d'appeler `re.compile` avec le flag `re.I`, vous pouvez utiliser `(?i)` comme ceci&nbsp;:"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Remarquez bien que l'emplacement o\u00f9 vous ajoutez le *flag* dans la * regexp* n'a pas d'importance, le flag agit toujours sur toute la *regexp* ."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Pour plus de pr\u00e9cisions sur ce trait, que nous avons laiss\u00e9 de cot\u00e9 dans le compl\u00e9ment pour ne pas trop l'alourdir, voyez [la documentation sur les expressions r\u00e9guli\u00e8res](https://docs.python.org/2/library/re.html#regular-expression-syntax) et cherchez la premi\u00e8re occurrence de `iLmsux`."]}, {"block": 13, "type": "heading", "linesLength": 1, "startIndex": 20, "lines": ["D\u00e9cortiquer une URL"]}, {"block": 14, "type": "markdown", "linesLength": 24, "startIndex": 21, "lines": ["On vous demande d'\u00e9crire une expression r\u00e9guli\u00e8re qui permette d'analyser des URLs. \n", "\n", "Voici les conventions que nous avons adopt\u00e9es pour l'exercice&nbsp;:\n", " * la cha\u00eene contient les parties suivantes\n", "   * `<protocol>://<location>/<path>`\n", " * l'url commence par le nom d'un protocole qui doit \u00eatre parmi `http`, `https`, `ftp`, `ssh`\n", " * le nom du protocole peut contenir de mani\u00e8re indiff\u00e9rente des minuscules ou des majuscules,\n", " * ensuite doit venir la s\u00e9quence `://`\n", " * ensuite on va trouver une cha\u00eene `<location>` qui contient&nbsp;:\n", "   * potentiellement un nom d'utilisateur, et s'il est pr\u00e9sent, potentiellement un mot de passe,\n", "   * obligatoirement un nom de `hostname`,\n", "   * potentiellement un num\u00e9ro de port;\n", " * lorsque les 4 parties sont pr\u00e9sentes dans `<location>`, cela se pr\u00e9sente comme ceci&nbsp;:\n", "   * `<location> = <user>:<password>@<hostname>:<port>`\n", " * si l'on note entre crochets les parties optionnelles, cela donne&nbsp;:\n", "   * `<location> = [<user>[:<password>]@]<hostname>[:<port>]`\n", " * le champ `<user>` ne peut contenir que des caract\u00e8res alphanum\u00e9riques; si le `@` est pr\u00e9sent le champ `<user>` ne peut pas \u00eatre vide\n", " * le champ `<password>` peut contenir tout sauf un `:`; de m\u00eame si le `:` est pr\u00e9sent le champs `<password>` ne peut pas \u00eatre vide\n", " * le champ `<hostname>` peut contenir un suite non-vide de caract\u00e8res alphanum\u00e9riques, underscores, ou `.`\n", " * le champ `<port>` ne contient que des chiffres, et il est non vide si le `:` est sp\u00e9cifi\u00e9\n", " * le champ `<path>` peut 6etre vide.\n", " \n", "   \n", "Enfin vous devez d\u00e9finir les groupes `proto`, `user`, `password`, `hostname`, `port` et `path` qui sont utilis\u00e9s pour v\u00e9rifier votre r\u00e9sultat. Dans la case `R\u00e9sultat attendu`, vous trouverez soit `None` si la regexp ne filtre pas l'int\u00e9gralit\u00e9 de l'entr\u00e9e, ou bien une liste ordonn\u00e9e de tuples qui donnent la valeur de ces groupes; vous n'avez rien \u00e0 faire pour construire ces tuples, c'est l'exercice qui s'en occupe."]}]