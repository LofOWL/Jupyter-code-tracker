[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# M\u00e9thodes sp\u00e9cifiques aux listes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Voici quelques unes des m\u00e9thodes disponibles sur le type `list`."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Trouver l'information"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Pour commencer, rappelons comment retrouver la liste des m\u00e9thodes d\u00e9finies sur le type `list`:"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["help(list)"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Si vous ignorez pour l'instant les m\u00e9thodes dont le nom commence et termine par `__` (nous parlerons de ceci en semaine 5),  vous trouvez les m\u00e9thodes utiles list\u00e9es entre `append` et `sort`. \n", "\n", "Certaines de ces m\u00e9thodes ont \u00e9t\u00e9 vues dans la vid\u00e9o sur les s\u00e9quences, c'est le cas notamment de `count` et `index`."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": [" Nous allons \u00e0 pr\u00e9sent d\u00e9crire les autres, partiellement et bri\u00e8vement. Un autre compl\u00e9ment d\u00e9crit la m\u00e9thode `sort`. Reportez-vous au lien donn\u00e9 en fin de notebook pour obtenir une information plus compl\u00e8te."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Donnons nous pour commencer une liste t\u00e9moin"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["liste = range(4)\n", "print 'liste', liste"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["**Avertissement** soyez bien attentifs au nombre de fois o\u00f9 vous ex\u00e9cutez les cellules de ce notebook; par exemple une liste renvers\u00e9e deux fois peut donner l'impression que `reverse` ne marche pas :) N'h\u00e9sitez pas \u00e0 utiliser le menu `Cell -> Run All' pour r\u00e9ex\u00e9cuter une seule fois le notebook entier."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### `append`"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["La m\u00e9thode `append` permet d'ajouter un \u00e9l\u00e9ment \u00e0 la fin d'une liste:"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["liste.append('ap')\n", "print 'liste', liste"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["### `extend`"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["La m\u00e9thode `extend` r\u00e9alise la m\u00eame op\u00e9ration mais avec tous les \u00e9l\u00e9ments de la liste qu'on lui passe en argument&nbsp;:"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["liste.extend(['ex1', 'ex2'])\n", "print 'liste', liste"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Ces deux m\u00e9thodes `append` et `extend` sont donc assez voisines; avant de voir d'autres m\u00e9thodes de `list`, prenons un peu le temps de comparer leur comportement avec l'addition `+` de liste. L'\u00e9l\u00e9ment cl\u00e9 ici, on l'a d\u00e9j\u00e0 vu dans la vid\u00e9o, est que la liste est un objet **mutable**. `append` et `extend` **modifient** la liste sur laquelle elles travaillent, alors que l'addition **cr\u00e9e un nouvel objet**"]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 24, "lines": ["l1 = range(5)\n", "l2 = l1 + ['ap', 'ex1' , 'ex2']\n", "print 'l1', l1\n", "print 'l2', l2"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Comme on le voit, apr\u00e8s une addition, les deux termes de l'addition sont inchang\u00e9s; c'est pour cela que l'addition est disponible sur tous les types s\u00e9quences, mais que `append` et `extend` ne sont par exemple **pas disponibles** sur les cha\u00eenes de caract\u00e8res, qui sont **immuables**."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["### `insert`"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["La m\u00e9thode `insert` permet, comme le nom le sugg\u00e8re, d'ins\u00e9rer un \u00e9l\u00e9ment \u00e0 une certaine position; comme toujours les indices commencent \u00e0 z\u00e9ro et donc"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 31, "lines": ["liste.insert(2, 'remplace 2')\n", "print 'liste', liste"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["On peut remarquer qu'un r\u00e9sultat analogue peut \u00eatre obtenu avec une affectation de slice; par exemple pour ins\u00e9rer au rang 5 (i.e. avant 'ap'), on pourrait aussi bien faire "]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["liste[5:5] = ['sl']\n", "print 'liste', liste"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["### `remove`"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["La m\u00e9thode `remove` d\u00e9truit la premi\u00e8re occurence d'un objet dans la liste. "]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["liste.remove(3)\n", "print 'liste', liste"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["### `pop`"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["La m\u00e9thode `pop` prend en argument un indice; elle permet d'extraire l'\u00e9l\u00e9ment \u00e0 cet indice. En un seul appel on obtient la valeur de l'\u00e9l\u00e9ment et on l'enl\u00e8ve de la liste:"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["popped = liste.pop(0)\n", "print 'popped', popped, 'liste', liste"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Si l'indice n'est pas pr\u00e9cis\u00e9, c'est le dernier \u00e9l\u00e9ment de la liste qui est vis\u00e9"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["popped = liste.pop()\n", "print 'popped', popped, 'liste', liste"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### `reverse`"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Enfin `reverse` renverse la liste, le premier \u00e9l\u00e9ment devient le dernier:"]}, {"block": 36, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["liste.reverse()\n", "print 'liste', liste"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["On peut remarquer ici que le r\u00e9sultat se rapproche de ce qu'on peut obtenir avec une op\u00e9ration de slicing comme ceci"]}, {"block": 38, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["liste2 = liste[::-1]\n", "print 'liste2', liste2"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["**\u00e0 la diff\u00e9rence toutefois** qu'avec le slicing c'est une copie de la liste initiale qui est retourn\u00e9e, la liste de d\u00e9part n'est quant \u00e0 elle pas modifi\u00e9e."]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["### Pour en savoir plus"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["https://docs.python.org/2/tutorial/datastructures.html#more-on-lists"]}]