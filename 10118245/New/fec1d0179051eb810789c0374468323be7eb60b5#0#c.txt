[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Bonnes pratiques de pr\u00e9sentation de code"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["La PEP-008"]}, {"block": 3, "type": "markdown", "linesLength": 7, "startIndex": 3, "lines": ["On trouve [dans la PEP-008 (en anglais)](http://legacy.python.org/dev/peps/pep-0008/) les conventions de codage qui s'appliquent \u00e0 toute la librairie standard, et qui sont certainement un bon point de d\u00e9part pour vous aider \u00e0 trouver le style de pr\u00e9sentation qui vous convient. \n", "\n", "Nous vous recommandons en particulier les sections sur\n", " * [l'indentation](http://legacy.python.org/dev/peps/pep-0008/#code-lay-out)\n", " * [les espaces](http://legacy.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements) \n", " * [les commentaires](http://legacy.python.org/dev/peps/pep-0008/#comments)\n", "\n"]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 10, "lines": ["Un peu de lecture"]}, {"block": 5, "type": "markdown", "linesLength": 8, "startIndex": 11, "lines": ["Voici par exemple le code du module `pprint` (comme PrettyPrint) de la librairie standard, que nous avons d\u00e9j\u00e0 rencontr\u00e9 et qui permet d'imprimer des donn\u00e9es. \n", "\n", "La fonction du module - le pretty printing - est \u00e9videmment accessoire ici, mais vous pouvez y voir illustr\u00e9\n", " * les indentations, comme nous l'avons d\u00e9j\u00e0 mentionn\u00e9 sont \u00e0 4 espaces, et sans tabulation\n", " * l'utilisation des espaces, notamment autour des affectations et op\u00e9rateurs, des d\u00e9finitions de fonction, des appels de fontions...)\n", " * les lignes qui restent dans une largeur \"raisonnable\" (79 caract\u00e8res); vous pouvez voir notamment\n", " * la fa\u00e7on de couper les lignes pour respecter cette limite en largeur\n", " "]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 19, "lines": ["Coupures de ligne"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["Voyons un peu plus en d\u00e9tails quelques exemples de coupure de ligne\n", "\n", "****"]}, {"block": 8, "type": "markdown", "linesLength": 6, "startIndex": 23, "lines": ["La fonction `pprint` (ligne ~55) est une commodit\u00e9 (qui cr\u00e9e une instance de `PrettyPrinter`, sur lequel on envoie la m\u00e9thode `pprint`).\n", "\n", "Vous voyez ici qu'il n'est pas n\u00e9cessaire d'ins\u00e9rer un backslash (`\\`) \u00e0 la fin de la ligne 57 car il y a une parenth\u00e8se ouvrante qui n'est pas ferm\u00e9e\n", "\n", "\n", "*****"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["Dans ce fragment au contraire, vous voyez en ligne 290 qu'il a fallu cette fois ins\u00e9rer un *backslash* caract\u00e8re de continuation `\\` pour que l'instruction puisse se poursuive en ligne 291.\n", "\n", "****"]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 32, "lines": ["Les deux-points ':'"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Vous pouvez [vous reporter \u00e0 ce lien](https://docs.python.org/2/faq/design.html#why-are-colons-required-for-the-if-while-def-class-statements) si vous \u00eates int\u00e9ress\u00e9 par la question de savoir pourquoi on a choisi un d\u00e9limiteur (le caract\u00e8re deux-points `:`) pour terminer les instructions comme `if`, `for` et `def`."]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 34, "lines": ["Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 35, "lines": ["Signalons enfin, pour ceux qui sont int\u00e9ress\u00e9s par les conventions de codage, que tout ceci ne s'applique bien entendu qu'\u00e0 python. Pour quelques exemples qui s'appliqueraient au langage C, vous pouvez par curiosit\u00e9 voir le [CodingStyle pour le noyau linux](https://www.kernel.org/doc/Documentation/CodingStyle) , qui lui-m\u00eame fait r\u00e9f\u00e9rence - et pas en bien - aux [Gnu Coding Standards](http://www.gnu.org/prep/standards/standards.html). \n", "\n", "M\u00eame si le langage est diff\u00e9rent, le but des conventions de codage est toujours le m\u00eame, il s'agit d'am\u00e9liorer la lisibilit\u00e9, et il peut \u00eatre int\u00e9ressant de voir ce que Linus Torvalds a \u00e0 dire, dans le style qui est le sien, sur les indentations (le tout premier chapitre)."]}]