[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Conditions & expressions bool\u00e9ennes"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["Nous pr\u00e9sentons rapidement dans ce notebook comment construire la condition qui contr\u00f4le l'ex\u00e9cution d'un `if`"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Tests consid\u00e9r\u00e9s comme vrai"]}, {"block": 3, "type": "markdown", "linesLength": 8, "startIndex": 3, "lines": ["Lorsqu'on \u00e9crit une instuction comme\n", "\n", "    if <expression>:\n", "       <do_something>\n", "    \n", "le r\u00e9sultat de l'expression peut ne pas \u00eatre un bool\u00e9en. Pour la plupart des types il existe des valeurs particuli\u00e8res qui ne **sont pas** consid\u00e9r\u00e9es comme vraies. \n", "\n", "Par exemple, pour n'importe quel type num\u00e9rique, la valeur 0 est consid\u00e9r\u00e9e comme fausse. Cela signifie que"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["if 3-3:\n", "    print \"ne passera pas par l\u00e0\""]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["De m\u00eame, une cha\u00eene vide, une liste vide, un tuple vide, sont consid\u00e9r\u00e9s comme faux. Bref vous voyez l'id\u00e9e g\u00e9n\u00e9rale.."]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 14, "lines": ["if \"\": \n", "    print \"ne passera pas par l\u00e0\"\n", "if []: \n", "    print \"ne passera pas par l\u00e0\"\n", "if ():\n", "    print \"ne passera pas par l\u00e0\""]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Enfin le singleton `None`, que nous verrons bient\u00f4t, est lui aussi consid\u00e9r\u00e9 comme faux. "]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["\u00c9galit\u00e9"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Les tests les plus simples se font \u00e0 l'aide des op\u00e9rateurs d'\u00e9galit\u00e9, qui fonctionnent sur presque tous les objets (nous verrons un contrexemple dans la section sur les r\u00e9f\u00e9rences partag\u00e9es). Comme nous l'avons d\u00e9j\u00e0 vu, l'op\u00e9rateur `==` v\u00e9rifie si deux objets ont la m\u00eame valeur"]}, {"block": 10, "type": "code", "linesLength": 8, "startIndex": 23, "lines": ["bas = 12\n", "haut = 25.82\n", "# \u00e9galit\u00e9 \n", "if bas == haut:\n", "    print '=='\n", "# non \u00e9galit\u00e9\n", "if bas != haut:\n", "    print '!='"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Deux objets de types diff\u00e9rents peuvent \u00eatre \u00e9gaux"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["bas_reel = 12.\n", "if bas == bas_reel:\n", "    print '=='"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Signalons \u00e0 titre un peu anecdotique une syntaxe ancienne: historiquement on pouvait aussi noter `<>` le test de non \u00e9galit\u00e9. On trouve ceci dans du code ancien mais il faut \u00e9viter de l'utiliser"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["# l'ancienne forme de !=\n", "if bas <> haut:\n", "    print '<> est obsolete'\n"]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 39, "lines": ["Les op\u00e9rateurs de comparaison "]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Sans grande surprise on peut aussi \u00e9crire"]}, {"block": 17, "type": "code", "linesLength": 8, "startIndex": 41, "lines": ["if bas <= haut:\n", "    print '<='\n", "if bas < haut:\n", "    print '<'\n", "if bas >= haut:\n", "    print '>='\n", "if bas > haut:\n", "    print '>'\n"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["On peut l\u00e0 aussi les utiliser sur une palette assez large de types, comme par exemple avec les listes"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["[1,2] <= [2,3]"]}, {"block": 20, "type": "markdown", "linesLength": 8, "startIndex": 51, "lines": ["Il est parfois utile de v\u00e9rifier le sens qui est donn\u00e9 \u00e0 ces op\u00e9rateurs selon le type; ainsi par exemple ils d\u00e9signent l'inclusion sur les ensembles - que nous verrons bient\u00f4t. \n", "\n", "Il faut aussi se m\u00e9fier avec les types num\u00e9riques, si un complexe est impliqu\u00e9, comme par exemple:\n", "\n", "    >>> 3 <= 3j\n", "    Traceback (most recent call last):\n", "      File \"<stdin>\", line 1, in <module>\n", "    TypeError: no ordering relation is defined for complex numbers\n"]}, {"block": 21, "type": "heading", "linesLength": 1, "startIndex": 59, "lines": ["Connecteurs logiques et / ou / non"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["On peut bien s\u00fbr combiner facilement plusieurs expressions entre elles, gr\u00e2ce aux op\u00e9rateurs `and`, `or` et `not`"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 61, "lines": ["# il ne faut pas faire ceci, mettez des parenth\u00e8ses\n", "if 12 <= 25. or [1,2] <= [2,3] and not 12 <= 32 :\n", "    print \"OK mais pourrait \u00eatre mieux\""]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["En termes de priorit\u00e9s: le plus simple si vous avez une expression compliqu\u00e9e reste de mettre les parenth\u00e8ses qui rendent son \u00e9valuation claire et lisible pour tous. Aussi on pr\u00e9f\u00e8rera de beaucoup la formulation \u00e9quivalente"]}, {"block": 25, "type": "code", "linesLength": 7, "startIndex": 65, "lines": ["# c'est mieux\n", "if 12 <= 25. or ( [1,2] <= [2,3] and not 12 <= 32 ) :\n", "    print \"OK, c'est \u00e9quivalent et plus clair\"\n", "\n", "# c'est bien le parenth\u00e9sage ci-dessus, puisque:\n", "if ( 12 <= 25. or [1,2] <= [2,3] ) and not 12 <= 32 :\n", "    print \"ce n'est pas \u00e9quivalent, ne passera pas par l\u00e0\""]}, {"block": 26, "type": "heading", "linesLength": 1, "startIndex": 72, "lines": ["Pour en savoir plus"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["Reportez-vous \u00e0 la section sur les [op\u00e9rateurs bool\u00e9ens](https://docs.python.org/2/library/stdtypes.html#truth-value-testing) dans la documentation python"]}]