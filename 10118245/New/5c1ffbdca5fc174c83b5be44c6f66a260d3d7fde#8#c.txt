[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# *Sequence unpacking*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# chargeons l'exercice\n", "from corrections.exo_surgery import exo_surgery"]}, {"block": 4, "type": "markdown", "linesLength": 4, "startIndex": 9, "lines": ["Cet exercice consiste \u00e0 \u00e9crire une fonction `surgery`, qui prend en argument une liste, et qui retourne la **m\u00eame** liste **modifi\u00e9e** comme suit:\n", " * si la liste est de taille 0 ou 1, elle n'est pas modifi\u00e9e,\n", " * si la liste est de taille paire, on intervertit les deux premiers \u00e9l\u00e9ments de la liste,\n", " * si elle est de taille impaire, on intervertit les deux derniers \u00e9l\u00e9ments."]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["# voici quelques exemples de ce qui est attendu\n", "exo_surgery.example()"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 15, "lines": ["# \u00e9crivez votre code \n", "def surgery(liste):\n", "    \"<votre_code>\""]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["# pour le v\u00e9rifier, \u00e9valuez cette cellule\n", "exo_surgery.correction(surgery)"]}]