[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# La boucle `while` .. `else`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Boucles sans fin - `break`"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Utiliser `while` plut\u00f4t que `for` est une affaire de style et d'habitude. Cela dit en python, avec les notions d'it\u00e9rable et d'it\u00e9rateur, on a tendance \u00e0 privil\u00e9gier l'usage du `for` pour les boucles finies et d\u00e9terministes."]}, {"block": 5, "type": "markdown", "linesLength": 6, "startIndex": 9, "lines": ["Le `while` reste malgr\u00e9 tout d'un usage courant, et notamment avec une condition `True`.\n", "\n", "Par exemple le code de l'interpreteur interactif de python pourrait ressembler, vu de tr\u00e8s loin, \u00e0 quelque chose comme ceci\n", "\n", "    while True:\n", "        print(eval(read()))"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 15, "lines": ["Notez bien par ailleurs que les instructions `break` et `continue` fonctionnent, \u00e0 l'int\u00e9rieur d'une boucle `while`, exactement comme dans un `for`, c'est-\u00e0-dire que:\n", "* `continue` termine l'it\u00e9ration courante mais reste dans la boucle, alors que\n", "* `break` interrompt l'it\u00e9ration courante et sort \u00e9galement de la boucle."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["### Rappel sur les conditions"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["On peut utiliser dans une boucle `while` toutes les formes de conditions que l'on a vues \u00e0 l'occasion de l'instruction `if`.\n", "\n", "Dans le contexte de la boucle `while` on comprend mieux, toutefois, pourquoi le langage autorise d'\u00e9crire des conditions dont le r\u00e9sultat n'est **pas n\u00e9cessairement un bool\u00e9en**. Voyons cela sur un exemple simple:"]}, {"block": 10, "type": "code", "linesLength": 6, "startIndex": 23, "lines": ["# une autre fa\u00e7on de parcourir une liste\n", "liste = ['a', 'b', 'c']\n", "\n", "while liste:\n", "    element = liste.pop()\n", "    print(element)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["### Une curiosit\u00e9 : la clause `else`"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Signalons enfin que la boucle `while` - au m\u00eame titre d'ailleurs que la boucle `for`, peut \u00eatre assortie [d'une clause `else`](https://docs.python.org/3/reference/compound_stmts.html#the-while-statement), qui est ex\u00e9cut\u00e9e \u00e0 la fin de la boucle, **sauf dans le cas d'une sortie avec `break`**"]}, {"block": 13, "type": "code", "linesLength": 15, "startIndex": 31, "lines": ["# Un exemple de while avec une clause else\n", "\n", "# si break_mode est vrai on va faire un break\n", "# apr\u00e8s le premier \u00e9l\u00e9ment de la liste\n", "def scan(liste, break_mode):\n", "\n", "    # un message qui soit un peu parlant\n", "    message = \"avec break\" if break_mode else \"sans break\"\n", "    print(message)\n", "    while liste:\n", "        print(liste.pop())\n", "        if break_mode:\n", "            break\n", "    else:\n", "        print('else...')"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 46, "lines": ["# sortie de la boucle sans break:\n", "# on passe par else\n", "scan(['a'], False)"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["# on sort de la boucle par le break\n", "scan(['a'], True)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Ce trait est toutefois **tr\u00e8s rarement** utilis\u00e9."]}]