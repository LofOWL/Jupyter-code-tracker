[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Les *property*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Comme on l'a vu dans le compl\u00e9ment pr\u00e9c\u00e9dent, il est fr\u00e9quent en python qu'une classe expose dans sa documentation un ou plusieurs attributs; c'est une pratique qui, en apparence seulement, para\u00eet casser l'id\u00e9e d'une bonne encapsulation.\n", "\n", "En r\u00e9alit\u00e9, gr\u00e2ce au m\u00e9canisme de *property*, il n'en est rien. Nous allons voir dans ce compl\u00e9ment comment une classe peut en quelque sorte intercepter les acc\u00e8s \u00e0 ses attributs, et par l\u00e0 fournir une encapsulation forte."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Pour \u00eatre concret, on va parler d'une classe `Temperature`. Au lieu de proposer, comme ce serait l'usage dans d'autres langages, une interface avec `get_kelvin()` et `set_kelvin()`, on va se contenter d'exposer l'attribut `kelvin`, et malgr\u00e9 cela on va pouvoir faire diverses v\u00e9rifications et autres."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["##### Impl\u00e9mentation na\u00efve"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Je vais commencer par une impl\u00e9mentation na\u00efve, qui ne tire pas profit des *properties*:"]}, {"block": 7, "type": "code", "linesLength": 9, "startIndex": 13, "lines": ["# dans sa version la plus \u00e9pur\u00e9e, une classe\n", "# temp\u00e9rature pourrait ressembler \u00e0 \u00e7a:\n", "\n", "class Temperature1:\n", "    def __init__(self, kelvin):\n", "        self.kelvin = kelvin\n", "        \n", "    def __repr__(self):\n", "        return f\"{self.kelvin}\u00b0K\""]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 22, "lines": ["# cr\u00e9ons une instance\n", "t1 = Temperature1(20)\n", "t1"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# et pour acc\u00e9der \u00e0 la valeur num\u00e9rique je peux faire\n", "t1.kelvin"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Avec cette impl\u00e9mentation il est tr\u00e8s facile de cr\u00e9er une temp\u00e9rature n\u00e9gative, qui n'a bien s\u00fbr pas de sens physique, ce n'est pas bon."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["##### Interface *getter/setter*"]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["Si vous avez \u00e9t\u00e9 d\u00e9j\u00e0 expos\u00e9s \u00e0 des langages orient\u00e9s objet comme C++, Java ou autre, vous avez peut-\u00eatre l'habitude d'acc\u00e9der aux donn\u00e9es internes des instances par des **m\u00e9thodes** de type *getter** ou **setter*, de fa\u00e7on \u00e0 contr\u00f4ler les acc\u00e8s et, dans une optique d'encapsulation, de pr\u00e9server des invariants, comme ici le fait que la temp\u00e9rature doit \u00eatre positive.\n", "\n", "C'est-\u00e0-dire que vous vous dites peut-\u00eatre, \u00e7a ne devrait pas \u00eatre fait comme \u00e7a, on devrait plut\u00f4t proposer une interface pour acc\u00e9der \u00e0 l'impl\u00e9mentation interne; quelque chose comme:"]}, {"block": 13, "type": "code", "linesLength": 19, "startIndex": 32, "lines": ["class Temperature2:\n", "    def __init__(self, kelvin):\n", "        # au lieu d'\u00e9crire l'attribut il est plus s\u00fbr\n", "        # d'utiliser le setter\n", "        self.set_kelvin(kelvin)\n", "        \n", "    def set_kelvin(self, kelvin):\n", "        # je m'assure que _kelvin est toujours positif\n", "        # et j'utilise un nom d'attribut avec un _ pour signifier\n", "        # que l'attribut est priv\u00e9 et qu'il ne faut pas y toucher directement\n", "        # on pourrait aussi bien s\u00fbr lever une exception \n", "        # mais ce n'est pas mon sujet ici\n", "        self._kelvin = max(0, kelvin)\n", "        \n", "    def get_kelvin(self):\n", "        return self._kelvin\n", "        \n", "    def __repr__(self):\n", "        return f\"{self._kelvin}\u00b0K\""]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Bon c'est vrai que d'un cot\u00e9, c'est mieux parce que je garantis un invariant, la temp\u00e9rature est toujours positive:"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["t2 = Temperature2(-30)\n", "t2"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["Mais par contre, d'un autre cot\u00e9, c'est tr\u00e8s lourd, parce que chaque fois que je veux utiliser mon objet, je dois faire pour y acc\u00e9der"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["t2.get_kelvin()"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["et aussi, si j'avais d\u00e9j\u00e0 du code qui utilisait `t.kelvin` il va falloir le modifier enti\u00e8rement."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["##### Impl\u00e9mentation pythonique"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 58, "lines": ["La fa\u00e7on de s'en sortir ici consiste \u00e0 d\u00e9finir une property. Comme on va le voir ce m\u00e9canisme permet d'\u00e9crire du code qui fait r\u00e9f\u00e9rence \u00e0 l'attribut `kelvin` de l'instance, mais qui passe tout de m\u00eame par une couche de logique.\n", "\n", "\u00c7a ressemblerait \u00e0 ceci"]}, {"block": 21, "type": "code", "linesLength": 20, "startIndex": 61, "lines": ["class Temperature3:\n", "    def __init__(self, kelvin):\n", "        self.kelvin = kelvin\n", "\n", "    # je d\u00e9finis bel et bien mes accesseurs de type getter et setter\n", "    # mais _get_kelvin commence avec un _ \n", "    # car il n'est pas cens\u00e9 \u00eatre appel\u00e9 par l'ext\u00e9rieur\n", "    def _get_kelvin(self):\n", "        return self._kelvin\n", "\n", "    # idem\n", "    def _set_kelvin(self, kelvin):\n", "        self._kelvin = max(0, kelvin)\n", "        \n", "    # une fois que j'ai ces deux \u00e9l\u00e9ments je peux cr\u00e9er une property\n", "    kelvin = property(_get_kelvin, _set_kelvin)\n", "    \n", "    # et toujours la fa\u00e7on d'imprimer\n", "    def __repr__(self):\n", "        return f\"{self._kelvin}\u00b0K\"    "]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 81, "lines": ["t3 = Temperature3(200)\n", "t3"]}, {"block": 23, "type": "code", "linesLength": 4, "startIndex": 83, "lines": ["# par contre ici on va le mettre \u00e0 z\u00e9ro\n", "# \u00e0 nouveau, une exception serait pr\u00e9f\u00e9rable sans doute\n", "t3.kelvin = -30\n", "t3"]}, {"block": 24, "type": "markdown", "linesLength": 5, "startIndex": 87, "lines": ["Comme vous pouvez le voir, cette technique a plusieurs avantages:\n", "* on a ce qu'on cherchait, c'est-\u00e0-dire une fa\u00e7on d'ajouter une couche de logique lors des acc\u00e8s en lecture et en \u00e9criture \u00e0 l'int\u00e9rieur de l'objet,\n", "* mais **sans toutefois** demander \u00e0 l'utilisateur de passer son temps \u00e0 envoyer des m\u00e9thodes `get_` et `set()` sur l'objet, ce qui a tendance \u00e0 alourdir consid\u00e9rablement le code.\n", "\n", "C'est pour cette raison que vous ne rencontrerez presque jamais en python une librairie qui offre une interface \u00e0 base de m\u00e9thodes `get_something` et `set_something`, mais au contraire les API vous exposeront directement des attributs que vous devez utiliser directement."]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 92, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["\u00c0 titre d'exemple d'utlisation, voici une derni\u00e8re impl\u00e9mentation de `Temperature` qui donne l'illusion d'avoir 3 attributs (`kelvin`, `celsius` et `fahrenheit`), alors qu'en r\u00e9alit\u00e9 le seul attribut de donn\u00e9e est `_kelvin`."]}, {"block": 27, "type": "code", "linesLength": 66, "startIndex": 94, "lines": ["class Temperature:\n", "\n", "    ## les constantes de conversion\n", "    # kelvin / celsius\n", "    K = 273.16\n", "    # fahrenheit / celsius\n", "    RF = 5 / 9\n", "    KF = (K / RF) - 32\n", "\n", "    def __init__(self, kelvin=None, celsius=None, fahrenheit=None):\n", "        \"\"\"\n", "        Cr\u00e9ation \u00e0 partir de n'importe quelle unit\u00e9\n", "        Il faut pr\u00e9ciser exactement une des trois unit\u00e9s\n", "        \"\"\"\n", "        # on passe par les properties pour initialiser\n", "        if kelvin is not None:\n", "            self.kelvin = kelvin\n", "        elif celsius is not None:\n", "            self.celsius = celsius\n", "        elif fahrenheit is not None:\n", "            self.fahrenheit = fahrenheit\n", "        else:\n", "            self.kelvin = 0\n", "            raise ValueError(\"need to specify at least one unit\")\n", "\n", "    # pour le confort\n", "    def __repr__(self):\n", "        return \"<{:g}\u00b0K == {:g}\u2103 == {:g}\u2109>\".format(\n", "            self.kelvin, self.celsius, self.fahrenheit)\n", "\n", "    def __str__(self):\n", "        return \"{:g}\u00b0K\".format(self.kelvin)\n", "\n", "\n", "    # l'attribut 'kelvin' n'a pas de conversion \u00e0 faire,\n", "    # mais il v\u00e9rifie que la valeur est positive\n", "    def get_kelvin(self):\n", "        return self._kelvin\n", "\n", "    def set_kelvin(self, kelvin):\n", "        if kelvin < 0:\n", "            raise ValueError(f\"Kelvin {kelvin} must be positive\")\n", "        self._kelvin = kelvin\n", "\n", "    # la property qui d\u00e9finit l'attribut `kelvin`\n", "    kelvin = property(get_kelvin, set_kelvin)\n", "\n", "\n", "    # les deux autres properties font la conversion, puis \n", "    # sous-traitent \u00e0 la property kelvin pour le contr\u00f4le de borne\n", "    def set_celsius(self, celsius):\n", "        # using .kelvin instead of ._kelvin to enforce\n", "        self.kelvin = celsius + self.K\n", "\n", "    def get_celsius(self):\n", "        return self._kelvin - self.K\n", "    celsius = property(get_celsius, set_celsius)\n", "\n", "\n", "    def set_fahrenheit(self, fahrenheit):\n", "        # using .kelvin instead of ._kelvin to enforce\n", "        self.kelvin = (fahrenheit + self.KF) * self.RF\n", "\n", "    def get_fahrenheit(self):\n", "        return self._kelvin / self.RF - self.KF\n", "    fahrenheit = property(get_fahrenheit, set_fahrenheit)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 160, "lines": ["Et voici ce qu'on peut en faire"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 161, "lines": ["t1 = Temperature(celsius=0)\n", "t1"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 163, "lines": ["t1.fahrenheit"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 164, "lines": ["t1.celsius += 100\n", "print(t1)"]}, {"block": 32, "type": "code", "linesLength": 4, "startIndex": 166, "lines": ["try:\n", "    t2 = Temperature(fahrenheit = -1000)\n", "except Exception as e:\n", "    print(f\"OOPS, {type(e)}, {e}\")"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 170, "lines": ["##### Pour en savoir plus"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 171, "lines": ["Voir aussi [la documentation officielle](https://docs.python.org/3.6/library/functions.html#property)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 172, "lines": ["Vous pouvez notamment aussi, en option, ajouter un *deleter* pour intercepter les instructions du type"]}, {"block": 36, "type": "code", "linesLength": 5, "startIndex": 173, "lines": ["# comme on n'a pas d\u00e9fini de deleter, on ne peut pas faire ceci\n", "try:\n", "    del t3.kelvin\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}]