[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Utiliser python comme une calculette"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Lorsque vous d\u00e9marrez l'interpr\u00e8te python, vous disposez en fait d'une calculette, par exemple, vous pouvez taper"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["20 * 60"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Les r\u00e8gles de **priorit\u00e9** entre les op\u00e9rateurs sont habituelles, les produits et divisions sont \u00e9valu\u00e9s en premier, ensuite les sommes et soustractions"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 9, "lines": [" 2 * 30 + 10 * 5"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 10, "lines": ["De mani\u00e8re g\u00e9n\u00e9rale, il est recommand\u00e9 de bien parenth\u00e9ser ses expressions. De plus, les parenth\u00e8ses facilitent la lecture d'expressions complexes.\n", "\n", "Par exemple, il vaut mieux \u00e9crire ce qui suit, qui est \u00e9quivalent mais plus lisible"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["(2 * 30) + (10 * 5)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Attention, en python la division `/` est une division naturelle"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["48 / 5"]}, {"block": 10, "type": "markdown", "linesLength": 7, "startIndex": 16, "lines": ["Rappelez-vous des op\u00e9rateurs suivants qui sont tr\u00e8s pratiques\n", "\n", "| code | op\u00e9ration |\n", "|------|-----------|\n", "| `//`   | quotient  |\n", "| `%`    | modulo    |\n", "| `**`   | puissance |"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["# calculer un quotient\n", "48 // 5"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# modulo (le reste de la division par)\n", "48 % 5"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["# puissance\n", "2 ** 10"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Vous pouvez facilement faire aussi des calculs sur les complexes. Souvenez-vous seulement que la constante complexe que nous notons en fran\u00e7ais `i` se note en python `j`, ce choix a \u00e9t\u00e9 fait par le BDFL - alias Guido van Rossum - pour des raisons de lisibilit\u00e9"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 30, "lines": ["# multiplication de deux nombres complexes\n", "(2 + 3j) * 2.5j"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Aussi, pour entrer ce nombre complexe `j`, il faut toujours le faire pr\u00e9c\u00e9der d'un nombre, donc ne pas entrer simplement `j` (qui serait compris comme un nom de variable, nous allons voir \u00e7a tout de suite) mais plut\u00f4t `1j` ou encore `1.j`, comme ceci"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["1j * 1.j"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Utiliser des variables"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Il peut \u00eatre utile de stocker un r\u00e9sultat qui sera utilis\u00e9 plus tard, ou de d\u00e9finir une valeur constante. Pour cela on utilise tout simplement une affectation comme ceci"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 36, "lines": ["# pour d\u00e9finir une variable il suffit de lui assigner une valeur\n", "largeur = 5"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["# une fois la variable d\u00e9finie, on peut l'utiliser, ici comme un nombre\n", "largeur * 20"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["# apr\u00e8s quoi bien s\u00fbr la variable reste inchang\u00e9e\n", "largeur * 10"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Pour les symboles math\u00e9matiques, on peut utiliser la m\u00eame technique"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 43, "lines": ["# pour d\u00e9finir un r\u00e9el, on utilise le point au lieu d'une virgule en fran\u00e7ais\n", "pi = 3.14159\n", "2 * pi * 10"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Pour les valeurs sp\u00e9ciales comme $\\pi$, on peut utiliser les valeurs pr\u00e9d\u00e9finies par la librairie math\u00e9matique de python. En anticipant un peu sur la notion d'importation que nous approfondirons plus tard, on peut \u00e9crire"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["from math import e, pi"]}, {"block": 27, "type": "markdown", "linesLength": 3, "startIndex": 48, "lines": ["Et ainsi imprimer les racines troisi\u00e8mes de l'unit\u00e9 par la formule\n", "\n", "$r_n = e^{2i\\pi \\frac{n}{3}},$ pour $n\\in \\{0,1,2\\}$"]}, {"block": 28, "type": "code", "linesLength": 6, "startIndex": 51, "lines": ["n = 0\n", "print(\"n=\", n, \"racine = \", e**((2.j*pi*n)/3))\n", "n = 1\n", "print(\"n=\", n, \"racine = \", e**((2.j*pi*n)/3))\n", "n = 2\n", "print(\"n=\", n, \"racine = \", e**((2.j*pi*n)/3))"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["**Remarque\u00a0:** bien entendu il sera possible de faire ceci plus simplement lorsque nous aurons vu les boucles `for`."]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["### Les types"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Ce qui change par rapport \u00e0 une calculatrice standard est le fait que les valeurs sont typ\u00e9es. Pour illustrer les trois types de nombres que nous avons vus jusqu'ici"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 60, "lines": ["# le type entier s'appelle 'int'\n", "type(3)"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 62, "lines": ["# le type flottant s'appelle 'float'\n", "type(3.5)"]}, {"block": 34, "type": "code", "linesLength": 2, "startIndex": 64, "lines": ["# le type complexe s'appelle 'complex'\n", "type(1j)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["### Cha\u00eenes de caract\u00e8res"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["On a \u00e9galement rapidement besoin de cha\u00eenes de caract\u00e8res, on les \u00e9tudiera bient\u00f4t en d\u00e9tails, mais en guise d'avant-go\u00fbt"]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 68, "lines": ["chaine = \"Bonjour le monde !\"\n", "print(chaine)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["### Conversions"]}, {"block": 39, "type": "markdown", "linesLength": 2, "startIndex": 71, "lines": ["Il est parfois n\u00e9cessaire de convertir une donn\u00e9e d'un type dans un autre.\n", "Par exemple on peut demander \u00e0 l'utilisateur d'entrer une valeur au clavier gr\u00e2ce \u00e0 la fonction `input`, comme ceci"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 73, "lines": ["reponse = input(\"quel est votre \u00e2ge ? \")"]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 74, "lines": ["# vous avez entr\u00e9 la cha\u00eene suivante\n", "print(reponse)"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 76, "lines": ["# ici reponse est une variable, et son contenu est de type chaine de caract\u00e8res\n", "type(reponse)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["Maintenant je veux faire des calculs sur votre \u00e2ge, par exemple le multiplier par 2. Si je m'y prends na\u00efvement, \u00e7a donne ceci"]}, {"block": 44, "type": "code", "linesLength": 3, "startIndex": 79, "lines": ["# multiplier une chaine de caract\u00e8res par deux ne fait pas ce qu'on veut,\n", "# nous verrons plus tard que \u00e7a fait une concat\u00e9nation\n", "2 * reponse"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["C'est pourquoi il me faut ici d'abord **convertir** la (valeur de la) variable `reponse` en un entier, que je peux ensuite doubler (assurez-vous d'avoir bien entr\u00e9 ci-dessus une valeur qui correspond \u00e0 un nombre entier)"]}, {"block": 46, "type": "code", "linesLength": 4, "startIndex": 83, "lines": ["# reponse est une chaine\n", "# je la convertis en entier en appelant la fonction int()\n", "age = int(reponse)\n", "type(age)"]}, {"block": 47, "type": "code", "linesLength": 2, "startIndex": 87, "lines": ["# que je peux maintenant multiplier par 2\n", "2 * age"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["Ou si on pr\u00e9f\u00e8re, en une seule fois"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["print(\"le double de votre age est\", 2*int(reponse))"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 91, "lines": ["### Conversions - suite"]}, {"block": 51, "type": "markdown", "linesLength": 12, "startIndex": 92, "lines": ["De mani\u00e8re plus g\u00e9n\u00e9rale, pour convertir un objet en un entier, un flottant, ou une cha\u00eene de caract\u00e8res, on peut simplement appeler une fonction built-in qui porte le m\u00eame nom que le type cible.\n", "\n", "| Type | Fonction|\n", "|------|---------|\n", "| Entier | `int` |\n", "| Flottant | `float` |\n", "| Complexe | `complex` |\n", "| Cha\u00eene | `str` |\n", "\n", "Ainsi dans l'exemple pr\u00e9c\u00e9dent, `int(reponse)` repr\u00e9sente la conversion de `reponse` en entier.\n", "\n", "On a illustr\u00e9 cette m\u00eame technique dans les exemples suivants."]}, {"block": 52, "type": "code", "linesLength": 2, "startIndex": 104, "lines": ["# dans l'autre sens, si j'ai un entier\n", "a = 2345"]}, {"block": 53, "type": "code", "linesLength": 2, "startIndex": 106, "lines": ["# je peux facilement le traduire en chaine de caract\u00e8res\n", "str(2345)"]}, {"block": 54, "type": "code", "linesLength": 2, "startIndex": 108, "lines": ["# ou en complexe\n", "complex(2345)"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["Nous verrons plus tard que ceci se g\u00e9n\u00e9ralise \u00e0 tous les types de python, pour convertir un object `x` en un type `bidule`, on appelle `bidule(x)`. On y reviendra, bien entendu."]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 111, "lines": ["### Grands nombres"]}, {"block": 57, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["Comme les entiers sont de pr\u00e9cision illimit\u00e9e, on peut am\u00e9liorer leur lisibilit\u00e9 en ins\u00e9rant des caract\u00e8res `_` qui sont simplement ignor\u00e9s \u00e0 l'ex\u00e9cution.\n"]}, {"block": 58, "type": "code", "linesLength": 3, "startIndex": 113, "lines": ["tres_grand_nombre = 23_456_789_012_345\n", "\n", "tres_grand_nombre"]}, {"block": 59, "type": "code", "linesLength": 2, "startIndex": 116, "lines": ["# \u00e7a marche aussi avec les flottants\n", "123_456.789_012"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["### Entiers et bases"]}, {"block": 61, "type": "markdown", "linesLength": 3, "startIndex": 119, "lines": ["Les calculettes scientifiques permettent habituellement d'entrer les entiers dans d'autres bases que la base 10.\n", "\n", "En python, on peut aussi entrer un entier sous forme binaire comme ceci"]}, {"block": 62, "type": "code", "linesLength": 1, "startIndex": 122, "lines": ["deux_cents = 0b11001000 ; print(deux_cents)"]}, {"block": 63, "type": "markdown", "linesLength": 1, "startIndex": 123, "lines": ["Ou encore sous forme octale (en base 8) comme ceci"]}, {"block": 64, "type": "code", "linesLength": 1, "startIndex": 124, "lines": ["deux_cents = 0o310 ; print(deux_cents)"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 125, "lines": ["Ou enfin encore en hexadecimal (base 16) comme ceci"]}, {"block": 66, "type": "code", "linesLength": 1, "startIndex": 126, "lines": ["deux_cents = 0xc8 ; print(deux_cents)"]}, {"block": 67, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["Pour d'autres bases, on peut utiliser la fonction de conversion `int` en lui passant un argument suppl\u00e9mentaire."]}, {"block": 68, "type": "code", "linesLength": 1, "startIndex": 128, "lines": ["deux_cents = int('3020', 4) ; print(deux_cents)"]}, {"block": 69, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["### Fonctions math\u00e9matiques"]}, {"block": 70, "type": "markdown", "linesLength": 1, "startIndex": 130, "lines": ["python fournit naturellement un ensemble tr\u00e8s complet d'op\u00e9rateurs math\u00e9matiques pour les fonctions exponentielles, trigonom\u00e9triques et autres, mais leur utilisation ne nous est pas encore accessible \u00e0 ce stade et nous les verrons ult\u00e9rieurement."]}]