[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span>"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["La boucle `while`"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Boucles sans fin - `break`\n"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Utiliser `while` plut\u00f4t que `for` est une affaire de style et d'habitude. Cela dit avec l'apparition des it\u00e9rateurs, l'usage du `for` est en g\u00e9n\u00e9ral privil\u00e9gi\u00e9 pour les boucles finies et d\u00e9terministes."]}, {"block": 5, "type": "markdown", "linesLength": 6, "startIndex": 5, "lines": ["Le `while` reste malgr\u00e9 tout d'un usage courant avec une condition `True`.\n", "\n", "Par exemple le code de l'interpreteur interactif de python pourrait ressembler, vu de tr\u00e8s loin, \u00e0 quelque chose comme ceci\n", "\n", "    while True:\n", "        print(eval(read()))"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Notez bien par ailleurs que les instructions `break` et `continue` fonctionnent, \u00e0 l'int\u00e9rieur d'une boucle `while`, exactement comme dans un `for`."]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 13, "lines": ["Rappel sur les conditions"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 14, "lines": ["On peut utiliser dans une boucle `while` toutes les formes de conditions que l'on avait vues \u00e0 l'occasion de l'instruction `if`.\n", "\n", "Dans le contexte de la boucle `while` on comprend mieux, toutefois, pourquoi le langage autorise d'\u00e9crire des conditions dont le r\u00e9sultat n'est **pas n\u00e9cessairement un bool\u00e9en**. Voyons cela sur un exemple simple:"]}, {"block": 10, "type": "markdown", "linesLength": 7, "startIndex": 17, "lines": ["Il peut \u00eatre int\u00e9ressant de comparer ce code avec ce qu'on obtiendrait avec une simple boucle `for`.\n", "\n", " * Une premi\u00e8re diff\u00e9rence est qu'avec `while` on pourrait facilement traiter les \u00e9l\u00e9ments de la liste deux par deux si cela faisait du sens dans le contexte.\n", "\n", " * On voit aussi tout de suite que les \u00e9l\u00e9ments sont trait\u00e9s en sens inverse; il faut savoir qu'avec le type `list` l'op\u00e9ration `pop()` est tr\u00e8s efficace, car elle fonctionne en temps constant - ce qui d'ailleurs n'est pas le cas de `pop(0)`. Aussi la boucle `while` peut \u00eatre plus efficace, pour traiter une liste en sens inverse.\n", " \n", " * Mais contrairement \u00e0 une boucle `for` cette forme est intrusive, en ce sens que la liste est modifi\u00e9e; alors que, on le rappelle, \u00e0 l'int\u00e9rieur d'une boucle `for` on ne **doit pas** modifier l'objet de la boucle."]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 24, "lines": ["Une curiosit\u00e9 : la clause `else`"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Signalons enfin que la boucle `while` - au m\u00eame titre d'ailleurs que la boucle `for`, peut \u00eatre assortie [d'une clause `else`](https://docs.python.org/2/reference/compound_stmts.html#the-while-statement), qui est ex\u00e9cut\u00e9e \u00e0 la fin de la boucle, sauf dans le cas d'une sortie avec `break`."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Ce trait est toutefois **tr\u00e8s rarement** utilis\u00e9."]}]