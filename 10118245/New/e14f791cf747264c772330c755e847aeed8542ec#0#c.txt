[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Calculer le PGCD"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# chargement de l'exercice\n", "from corrections.exo_pgcd import exo_pgcd"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["On vous demande d'\u00e9crire une fonction qui calcule le pgcd de deux entiers, en utilisant [l'algorithme d'Euclide](http://fr.wikipedia.org/wiki/Algorithme_d'Euclide)."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Les deux param\u00e8tres sont suppos\u00e9s \u00eatre des entiers positifs ou nuls (pas la peine de le v\u00e9rifier). Dans le cas o\u00f9 un des deux param\u00e8tres est nul, on d\u00e9cide par convention de retourner la valeur 0. "]}, {"block": 6, "type": "markdown", "linesLength": 9, "startIndex": 11, "lines": ["**Remarque** on peut tout \u00e0 fait utiliser une fonction r\u00e9cursive pour impl\u00e9menter l'algorithme d'Euclide. Par exemple cette version de `pgcd` fonctionne tr\u00e8s bien aussi (en supposant a>=b)\n", "\n", "    def pgcd(a, b):\n", "       \"Le pgcd avec une fonction r\u00e9cursive\"\n", "       if not b:\n", "           return a\n", "       return pgcd(b, a % b)\n", "   \n", "Cependant, il vous est demand\u00e9 ici d'utiliser une boucle `while`, qui est le sujet de la s\u00e9quence, pour impl\u00e9menter `pgcd`."]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 20, "lines": ["# \u00e0 vous de jouer\n", "def pgcd(a, b):\n", "    \"<votre code>\""]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["# pour v\u00e9rifier votre code\n", "exo_pgcd.correction(pgcd)"]}]