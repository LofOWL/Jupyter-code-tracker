[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Les attributs"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ments - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["La notation `.` et les attributs"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 3, "lines": ["La notation `module.variable` que nous avons vue dans la vid\u00e9o est un cas particulier de la notion d'atribut, qui permet d'\u00e9tendre un objet, ou si on pr\u00e9f\u00e8re de lui accrocher des annotations.\n", "\n", "Nous avons d\u00e9j\u00e0 rencontr\u00e9 ceci plusieurs fois, c'est exactement le m\u00eame m\u00e9canisme d'attribut qui est utilis\u00e9 \u00e9galement pour les m\u00e9thodes; pour le syst\u00e8me d'attribut il n'y a pas de diff\u00e9rence entre `module.variable`, `module.fonction`, `objet.classe`, etc.. \n", "\n", "Nous verrons tr\u00e8s bient\u00f4t que ce m\u00e9canisme est masivement utilis\u00e9 \u00e9galement dans les instances de classe."]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 8, "lines": ["Les fonctions de gestion des attributs"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Pour acc\u00e9der programmativement aux attributs d'un objet, on dispose des 3 fonctions *builtin* `getattr`, `setattr`, et `hasattr`, que nous allons illustrer tout de suite"]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 10, "lines": ["Lire un attribut"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 11, "lines": ["import math\n", "# la forme la plus simple\n", "math.pi"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 14, "lines": ["# si on part d'une cha\u00eene qui d\u00e9signe le nom de l'attribut\n", "# la formule \u00e9quivalente est alors\n", "getattr(math, 'pi')"]}, {"block": 9, "type": "code", "linesLength": 8, "startIndex": 17, "lines": ["# on peut utiliser les attributs avec la plupart des objets\n", "# ici nous allons le faire sur une fonction\n", "def foo () : \n", "    \"une fonction vide\"\n", "    pass\n", "\n", "# on a d\u00e9j\u00e0 vu certains attributs des fonctions\n", "print 'nom',foo.__name__,'docstring',foo.__doc__"]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["# on peut pr\u00e9ciser une valeur pour d\u00e9faut pour le cas o\u00f9 l'attribut\n", "# n'existe pas\n", "getattr (foo, \"attribut_inexistant\", 'valeur_par_defaut')"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 28, "lines": ["\u00c9crire un attribut"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 29, "lines": ["# on peut ajouter un attribut arbitraire (toujours sur l'objet fonction)\n", "foo.hauteur = 100\n", "\n", "foo.hauteur"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 33, "lines": ["# Comme pour la lecture on peut \u00e9crire un attribut \n", "# programativement\n", "setattr (foo, \"largeur\", 200 )\n", "\n", "getattr (foo, \"largeur\")"]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 38, "lines": ["Liste des attributs"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["# pour savoir si un attribut existe\n", "hasattr (math, 'pi')"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 41, "lines": ["# qui peut \u00eatre retrouv\u00e9 autrement, \u00e0 partir de .. l'attribut `__dict__`\n", "foo.__dict__"]}, {"block": 17, "type": "heading", "linesLength": 1, "startIndex": 43, "lines": ["Sur quels objets"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Pour des questions d'impl\u00e9mentation, ce m\u00e9canisme n'est pas disponible sur les types de base"]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 45, "lines": ["for type in (int, str, float, long, complex, tuple, dict, set, frozenset):\n", "    obj = type()\n", "    try: obj.foo = 'bar'\n", "    except AttributeError as e: print \"type\",type.__name__,\"exception\",e"]}, {"block": 20, "type": "markdown", "linesLength": 6, "startIndex": 49, "lines": ["Il est par contre disponible sur virtuellement tout le reste, et notamment l\u00e0 o\u00f9 il est tr\u00e8s utile, c'est-\u00e0-dire pour ce qui nous concerne:\n", " * modules\n", " * packages\n", " * fonctions\n", " * classes\n", " * instances"]}]