[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# R\u00e9capitulatif sur `import`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous allons r\u00e9capituler les diff\u00e9rentes formes d'importation, et introduire la clause `import *` - et voir pourquoi il est d\u00e9conseill\u00e9 de l'utiliser."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Importer tout un module"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["L'import le plus simple consiste donc \u00e0 uniquement mentionner le nom du module"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Ce module se contente de d\u00e9finir deux fonctions de noms `un` et `deux`. Une fois l'import r\u00e9alis\u00e9 de cette fa\u00e7on on peut acc\u00e9der au contenu du module en utilisant un nom de variable complet:"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Mais bien s\u00fbr on n'a pas de cette fa\u00e7on d\u00e9fini de nouvelle variable `un`; la seule nouvelle variable dans la port\u00e9e courante est donc `un_deux`"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Importer une variable sp\u00e9cifique d'un module"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["On peut \u00e9galement importer un ou plusieurs symboles sp\u00e9cifiques d'un module en faisant maintenant (avec un nouveau module du m\u00eame tonneau)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["\u00c0 pr\u00e9sent nous avons deux nouvelles variables dans la port\u00e9e locale"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Mais le module lui m\u00eame n'est pas accessible"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Il est important de voir que la variable locale ainsi cr\u00e9\u00e9e, un peu comme dans le cas d'un appel de fonction, est une **nouvelle variable** qui est initialis\u00e9e avec l'objet du module. Ainsi si on importe le module **et** une variable du module comme ceci"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Nous avons maintenant **deux variables diff\u00e9rentes** qui d\u00e9signent la fonction `un` dans le module"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["En on peut modifier l'une **sans affecter** l'autre"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["### `import *`"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["La derni\u00e8re forme d'`import` consiste \u00e0 importer toutes les variables d'un module comme ceci"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Cette forme, pratique en apparence, va donc cr\u00e9er dans le scope courant les variables"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["### Quand utiliser telle ou telle forme"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Les deux premi\u00e8res formes - import de tout un module ou de variables sp\u00e9cifiques - peuvent \u00eatre utilis\u00e9es indiff\u00e9remment; souvent lorsqu'une variable est utilis\u00e9e tr\u00e8s souvent dans le code on pourra pr\u00e9f\u00e9rer la deuxi\u00e8me forme pour raccourcir le code. "]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 21, "lines": ["\u00c0 cet \u00e9gard, citons des variantes de ces deux formes qui permettent d'utiliser des noms plus courts. Vous trouverez par exemple tr\u00e8s souvent", "", "    import numpy as np", "    ", "qui permet d'importer le module numpy mais de l'utiliser sous un nom plus court - car avec `numpy` on ne cesse d'utiliser des symboles dans le module."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["**Avertissement:** nous vous recommandons de **ne pas utiliser la derni\u00e8re forme `import *`** - sauf dans l'interpr\u00e9teur interactif - car cela peut gravement nuire \u00e0 la lisibilit\u00e9 de votre code."]}, {"block": 23, "type": "markdown", "linesLength": 12, "startIndex": 27, "lines": ["python est un langage \u00e0 liaison statique; cela signifie que lorsque vous concentrez votre attention sur un (votre) module, et que vous voyez une r\u00e9f\u00e9rence en lecture \u00e0 un variable `spam` disons \u00e0 la ligne 201, vous devez forc\u00e9ment trouver dans les deux cents premi\u00e8res lignes quelque chose comme une d\u00e9claration de `spam`, qui vous indique en gros d'o\u00f9 elle vient.", "", "`import *` est une construction qui casse cette bonne propri\u00e9t\u00e9 (pour \u00eatre tout \u00e0 fait exhaustif, cette bonne propri\u00e9t\u00e9 n'est pas non plus remplie avec les fonctions *built-in* comme `len`, mais il faut vivre avec...) ", "", "Mais le point important est ceci : imaginez que dans un module vous faites plusieurs `import *` comme par exemple", "", "    from django.db import *", "    from django.conf.urls import *", "    ", "Peu importe le contenu exact de ces deux modules, il nous suffit de savoir qu'un des deux modules expose la variable `patterns`. ", "", "Dans ce cas de figure v\u00e9cu, le module utilise cette variable `patterns` sans avoir besoin de la d\u00e9clarer explicitement, si bien qu'\u00e0 la lecture on voit une utilisation de la variable `patterns`, mais on n'a plus aucune id\u00e9e de quel module elle provient, sauf \u00e0 aller lire le code correspondant..."]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["### `import` de mani\u00e8re \"programmative\""]}, {"block": 26, "type": "markdown", "linesLength": 4, "startIndex": 41, "lines": ["\u00c9tant donn\u00e9 la fa\u00e7on dont est con\u00e7ue l'instruction `import`, on rencontre une limitation lorsqu'on veut, par exemple, **calculer le nom d'un module** avant de l'importer.", "", "Si vous \u00eates dans ce genre de situation, reportez-vous au module [`importlib`](https://docs.python.org/2/library/importlib.html)", "et notamment sa fonction `import_module` qui, cette fois, accepte en argument une cha\u00eene."]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Voici une illustration dans un cas simple. Nous allons importer le module `modtools` (qui fait partie de ce MOOC) de deux fa\u00e7ons diff\u00e9rentes et montrer que le r\u00e9sultat est le m\u00eame:"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["### `import` de mani\u00e8re \"programmative\" en python-2.6 et avant"]}, {"block": 29, "type": "markdown", "linesLength": 5, "startIndex": 47, "lines": ["Dans du code un peu ancien, qui daterait de 2.6 ou ant\u00e9rieur, vous pouvez trouver aussi des appels \u00e0 la fonction *built-in* `__import__`, qui a la m\u00eame s\u00e9mantique que `importlib.import_module`, mais dont l'usage est en principe r\u00e9serv\u00e9.", "", "Signalons toutefois que jusqu'\u00e0 python-2.6, pour faire une importation de mani\u00e8re programmative, on n'avait pas beaucoup de choix:", " * soit utiliser, pr\u00e9cis\u00e9ment, `__import__`", " * soit utiliser `exec`, qui quelque part est encore plus vilain, et pas tout \u00e0 fait \u00e9quivalent..."]}]