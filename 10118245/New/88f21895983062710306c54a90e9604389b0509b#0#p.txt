[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# synchronisation avec une queue"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 2, "lines": ["import asyncio\n", "\n", "mainloop = asyncio.new_event_loop()"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 5, "lines": ["queue = asyncio.Queue(loop=mainloop)"]}, {"block": 4, "type": "code", "linesLength": 6, "startIndex": 6, "lines": ["async def producer(queue):\n", "    count = 1\n", "    while True:\n", "        await queue.put(f'tick{count}')\n", "        count += 1\n", "        await asyncio.sleep(1)"]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 12, "lines": ["async def consumer(queue):\n", "    while True:\n", "        received = await queue.get()\n", "        print(f\"got {received}\")\n", "        "]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 17, "lines": ["# on ajoute les coroutines dans la boucle\n", "mainloop.create_task(producer(queue))\n", "mainloop.create_task(consumer(queue))"]}, {"block": 7, "type": "code", "linesLength": 6, "startIndex": 20, "lines": ["# on lance la boucle sans fin\n", "# interrompre aver Kernel -> Interrupt (ou raccourci 'i')\n", "try:\n", "    mainloop.run_forever()\n", "except KeyboardInterrupt as e:\n", "    print(\"bye\")"]}]