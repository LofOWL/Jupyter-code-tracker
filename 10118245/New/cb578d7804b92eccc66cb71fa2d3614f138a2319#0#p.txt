[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["H\u00e9ritage, typage"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Dans ce compl\u00e9ment, nous allons tenter d'attirer votre attention sur une diff\u00e9rence assez essentielle entre python et les langages statiquement typ\u00e9s, quand il s'agit de concevoir une hi\u00e9rarchie d'h\u00e9ritage."]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Rappels sur les types"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 4, "lines": ["Un syst\u00e8me de types est ce qui permet au langage de d\u00e9cider, plus ou moins \u00e0 l'avance, si telle ou telle instruction ou fragment de code a un sens avant d'essayer de l'ex\u00e9cuter.\n", "\n", "On l'a mentionn\u00e9 rapidement au cours des semaines pr\u00e9c\u00e9dentes, mais les langages typ\u00e9s statiquement ont pour l'essentiel un syst\u00e8me de types bas\u00e9s sur les classes. Pour faire simple, un objet est d'un type `Foo` si et seulement si sa classe est une sous-classe de Foo. "]}, {"block": 5, "type": "markdown", "linesLength": 14, "startIndex": 7, "lines": ["En python, ce n'est pas du tout comme cela qu'on a pris le probl\u00e8me. Le syst\u00e8me de type de python est connu sous le nom de [*duck typing*](http://en.wikipedia.org/wiki/Duck_typing), une appellation qui fait r\u00e9f\u00e9rence \u00e0 cette phrase\n", "\n", "    When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.     \n", "    \n", "Dans notre cas, cela signifie si on consid\u00e8re un fragment comme ceci&nbsp;:\n", "\n", "    for graphic in vector:\n", "        graphic.redraw()\n", "\n", "et si on essayait de le typer statiquement, on en arriverait \u00e0 la conclusion qu'il faut&nbsp;:\n", " * que `vector` soit it\u00e9rable, et\n", " * que chacun de ses \u00e9l\u00e9ments poss\u00e8de l'attribut `redraw`, qui soit un `callable`.\n", " \n", "J'esp\u00e8re qu'\u00e0 ce stade vous \u00eates convaincus qu'on ne **peut pas** exprimer ces propri\u00e9t\u00e9s en termes simplement de relation d'h\u00e9ritage \u00e0 la `isinstance` - quoique [cette initiative]() vise pr\u00e9cis\u00e9ment \u00e0 permettre de tester des propri\u00e9t\u00e9s comme *\"l'objet x est-il it\u00e9rable ?\"* au moyen d'un `isinstance` sur st\u00e9roides."]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["\u00c0 quoi l'h\u00e9ritage **ne sert pas** en python"]}, {"block": 7, "type": "markdown", "linesLength": 7, "startIndex": 22, "lines": ["Dans le cas d'un langage typ\u00e9 statiquement comme C++ ou Java, on a tendance par contre, pour satisfaire le compilateur, \u00e0 **d\u00e9finir une classe abstraite**, dans notre cas `Graphic`, qui **sp\u00e9cifie** que les sous-classes doivent impl\u00e9menter la m\u00e9thode `redraw`. Et donc \u00e0 concevoir une hi\u00e9rarchie comme \n", "\n", "    Graphic\n", "    |-- Circle\n", "    |-- Square\n", "    |-- Text\n", "    |-- ..."]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["En python, **rien ne nous oblige** \u00e0 d\u00e9clarer une classe **uniquement** pour mat\u00e9rialiser le fait qu'un objet dispose de la m\u00e9thode `redraw()`. Sans aller jusqu'\u00e0 dire que cette classe est n\u00e9faste, la valeur ajout\u00e9e d'en d\u00e9finir une n'est pas imm\u00e9diatement \u00e9tablie. \n", "\n", "Par contre si on parle **d'impl\u00e9menter** quelque chose comme `GraphicContext` (des couleurs, des fontes, ..) l'int\u00e9r\u00eat est parfaitement \u00e9vident; \u00e0 mon avis toutefois on parle de quelque chose de diff\u00e9rent de `Graphic`. "]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 32, "lines": ["Au-del\u00e0 de cette opinion, les points \u00e0 retenir de ce compl\u00e9ment un peu digressif sont&nbsp;:\n", " * en python, on h\u00e9rite des **impl\u00e9mentations** et pas des **sp\u00e9cifications**; il arrive parfois que pour des raisons documentaires on \u00e9crive des classes qui r\u00e9sument l'interface qui est attendue par tel ou tel syst\u00e8me de plugin, mais le langage n'est pas taill\u00e9 pour cela;\n", " * c'est pourquoi, avant de cr\u00e9er une classe, il peut \u00eatre utile de se demander si il y a une r\u00e9elle valeur ajout\u00e9e en termes d'impl\u00e9mentation \u00e0 partager."]}]