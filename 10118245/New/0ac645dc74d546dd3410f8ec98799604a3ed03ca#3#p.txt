[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Fusionner des donn\u00e9es"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercices"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Cet exercice vient en deux versions, une de niveau basique et une de niveau interm\u00e9diaire.\n", "\n", "La version basique est une application de la technique d'indexation que l'on a vue dans le compl\u00e9ment \"G\u00e9rer des enregistrements\". On peut tr\u00e8s bien faire les deux versions dans l'ordre, une fois qu'on a fait la version basique on est en principe un peu plus avanc\u00e9 pour aborder la version interm\u00e9diaire."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["### Contexte"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Nous allons commencer \u00e0 utiliser des donn\u00e9es un peu plus r\u00e9alistes. Il s'agit de donn\u00e9es obtenues aupr\u00e8s de [MarineTraffic](https://www.marinetraffic.com) - et l\u00e9g\u00e8rement simplifi\u00e9es pour les besoins de l'exercice. Ce site expose les coordonn\u00e9es g\u00e9ographiques de bateaux observ\u00e9es en mer au travers d'un r\u00e9seau de collecte de type *crowdsourcing*."]}, {"block": 6, "type": "markdown", "linesLength": 5, "startIndex": 12, "lines": ["De mani\u00e8re \u00e0 optimiser le volume de donn\u00e9es \u00e0 transf\u00e9rer, l'API de MarineTraffic offre deux modes pour obtenir les donn\u00e9es\u00a0:\n", "* **mode \u00e9tendu**\u00a0: chaque mesure (bateau x position x temps) est accompagn\u00e9e de tous les d\u00e9tails du bateau (`id`, nom, pays de rattachement, etc.)\u00a0;\n", "* **mode abr\u00e9g\u00e9**\u00a0: chaque mesure est uniquement attach\u00e9e \u00e0 l'`id` du bateau.\n", "\n", "En effet, chaque bateau poss\u00e8de un identifiant unique qui est un entier, que l'on note  `id`."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["### Chargement des donn\u00e9es"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Commen\u00e7ons par charger les donn\u00e9es de l'exercice\u00a0:"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["from corrections.exo_marine_dict import extended, abbreviated"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["### Format des donn\u00e9es"]}, {"block": 11, "type": "markdown", "linesLength": 8, "startIndex": 21, "lines": ["Le format de ces donn\u00e9es est relativement simple, il s'agit dans les deux cas d'une liste d'entr\u00e9es - une par bateau.\n", "\n", "Chaque entr\u00e9e \u00e0 son tour est une liste qui contient\u00a0:\n", "\n", "    mode \u00e9tendu: [id, latitude, longitude, date_heure, nom_bateau, code_pays, ...]\n", "    mode abr\u00e9g\u00e9: [id, latitude, longitude, date_heure]\n", "\n", "sachant que les entr\u00e9es apr\u00e8s le code pays dans le format \u00e9tendu ne nous int\u00e9ressent pas pour cet exercice."]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 29, "lines": ["# une entr\u00e9e \u00e9tendue est une liste qui ressemble \u00e0 ceci\n", "sample_extended_entry = extended[3]\n", "print(sample_extended_entry)"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["# une entr\u00e9e abr\u00e9g\u00e9e ressemble \u00e0 ceci\n", "sample_abbreviated_entry = abbreviated[0]\n", "print(sample_abbreviated_entry)"]}, {"block": 14, "type": "markdown", "linesLength": 5, "startIndex": 35, "lines": ["On pr\u00e9cise \u00e9galement que les deux listes `extended` et `abbreviated`\u00a0:\n", "* poss\u00e8dent exactement **le m\u00eame nombre** d'entr\u00e9es\u00a0;\n", "* et correspondent **aux m\u00eames bateaux**\u00a0;\n", "* mais naturellement **\u00e0 des moments diff\u00e9rents**\u00a0;\n", "* et **pas forc\u00e9ment dans le m\u00eame ordre**."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["*******"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["### Exercice - niveau basique"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["# chargement de l'exercice\n", "from corrections.exo_marine_dict import exo_index"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["##### But de l'exercice"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 45, "lines": ["On vous demande d'\u00e9crire une fonction `index` qui calcule, \u00e0 partir de la liste des donn\u00e9es \u00e9tendues, un dictionnaire qui est\u00a0:\n", "* index\u00e9 par l'`id` de chaque bateau\u00a0;\n", "* et qui a pour valeur la liste qui d\u00e9crit le bateau correspondant."]}, {"block": 20, "type": "markdown", "linesLength": 22, "startIndex": 48, "lines": ["De mani\u00e8re plus imag\u00e9e, si\u00a0:\n", "\n", "```Python\n", "extended = [ bateau1, bateau2, ... ]\n", "```\n", "\n", "Et si\u00a0:\n", "\n", "```Python\n", "bateau1 = [ id1, latitude, ... ]\n", "```\n", "\n", "On doit obtenir comme r\u00e9sultat de `index` un dictionnaire\u00a0:\n", "\n", "```Python\n", "{\n", "    id1 -> [ id_bateau1, latitude, ... ],\n", "    id2 ...\n", "}\n", "```\n", "\n", "Bref, on veut pouvoir retrouver les diff\u00e9rents \u00e9l\u00e9ments de la liste `extended` par acc\u00e8s direct, en ne faisant qu'une seule recherche dans l'index."]}, {"block": 21, "type": "code", "linesLength": 13, "startIndex": 70, "lines": ["# le r\u00e9sultat attendu\n", "result_index = exo_index.resultat(extended)\n", "\n", "# on en profite pour illustrer le module pprint\n", "from pprint import pprint\n", "\n", "# \u00e0 quoi ressemble le r\u00e9sultat pour un bateau au hasard\n", "for key, value in result_index.items():\n", "    print(\"==== cl\u00e9\")\n", "    pprint(key)\n", "    print(\"==== valeur\")\n", "    pprint(value)\n", "    break"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["Remarquez ci-dessus l'utilisation d'un utilitaire parfois pratique\u00a0: le [module `pprint` pour pretty-printer](https://docs.python.org/3/library/pprint.html)."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["##### Votre code"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 85, "lines": ["def index(extended):\n", "    \"<votre_code>\""]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["##### Validation"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["exo_index.correction(index, abbreviated)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["Vous remarquerez d'ailleurs que la seule chose que l'on utilise dans cet exercice, c'est que l'id des bateaux arrive en premi\u00e8re position (dans la liste qui mat\u00e9rialise le bateau), aussi votre code doit marcher \u00e0 l'identique avec les bateaux \u00e9tendus\u00a0:"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["exo_index.correction(index, extended)"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 91, "lines": ["### Exercice - niveau interm\u00e9diaire"]}, {"block": 30, "type": "code", "linesLength": 2, "startIndex": 92, "lines": ["# chargement de l'exercice\n", "from corrections.exo_marine_dict import exo_merge"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["##### But de l'exercice"]}, {"block": 32, "type": "markdown", "linesLength": 11, "startIndex": 95, "lines": ["On vous demande d'\u00e9crire une fonction `merge` qui fasse une consolidation des donn\u00e9es, de fa\u00e7on \u00e0 obtenir en sortie un dictionnaire\u00a0:\n", "\n", "```Python\n", "id -> [nom_bateau, code_pays, position_etendu, position_abrege]\n", "```\n", "\n", "dans lequel les deux objets `position` sont tous les deux des tuples de la forme\u00a0:\n", "\n", "```Python\n", "(latitude, longitude, date_heure)\n", "```"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 106, "lines": ["Voici par exemple un couple cl\u00e9-valeur dans le r\u00e9sultat attendu\u00a0:"]}, {"block": 34, "type": "code", "linesLength": 8, "startIndex": 107, "lines": ["# le r\u00e9sultat attendu\n", "result_merge = exo_merge.resultat(extended, abbreviated)\n", "\n", "# a quoi ressemble le r\u00e9sultat pour un bateau au hasard\n", "from pprint import pprint\n", "for key_value in result_merge.items():\n", "    pprint(key_value)\n", "    break"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 115, "lines": ["##### Votre code"]}, {"block": 36, "type": "code", "linesLength": 2, "startIndex": 116, "lines": ["def merge(extended, abbreviated):\n", "    \"votre code\""]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["##### Validation"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 119, "lines": ["exo_merge.correction(merge, extended, abbreviated)"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 120, "lines": ["### Les fichiers de donn\u00e9es complets"]}, {"block": 40, "type": "markdown", "linesLength": 8, "startIndex": 121, "lines": ["Signalons enfin pour ceux qui sont int\u00e9ress\u00e9s que les donn\u00e9es charg\u00e9es dans cet exercice sont disponibles au format JSON - qui est pr\u00e9cis\u00e9ment celui expos\u00e9 par marinetraffic.\n", "\n", "Nous avons beaucoup simplifi\u00e9 les donn\u00e9es d'entr\u00e9e pour vous permettre une mise au point plus facile. Si vous voulez vous amuser \u00e0 charger des donn\u00e9es un peu plus significatives, sachez que\u00a0:\n", "\n", "* vous avez acc\u00e8s aux fichiers de donn\u00e9es plus complets\u00a0:\n", "  * [data/marine-e1-ext.json](data/marine-e1-ext.json)\n", "  * [data/marine-e1-abb.json](data/marine-e1-abb.json)\n", "* pour charger ces fichiers, qui sont donc au [format JSON](http://en.wikipedia.org/wiki/JSON), la connaissance intime de ce format n'est pas n\u00e9cessaire, on peut tout simplement utiliser le [module `json`](https://docs.python.org/3/library/json.html). Voici le code utilis\u00e9 dans l'exercice pour charger ces JSON en m\u00e9moire\u00a0; il utilise des notions que nous verrons dans les semaines \u00e0 venir\u00a0:"]}, {"block": 41, "type": "code", "linesLength": 8, "startIndex": 129, "lines": ["# load data from files\n", "import json\n", "\n", "with open(\"data/marine-e1-ext.json\", encoding=\"utf-8\") as feed:\n", "    extended_full = json.load(feed)\n", "\n", "with open(\"data/marine-e1-abb.json\", encoding=\"utf-8\") as feed:\n", "    abbreviated_full = json.load(feed)"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 137, "lines": ["Une fois que vous avez un code qui fonctionne vous pouvez le lancer sur ces donn\u00e9es plus copieuses en faisant\u00a0:"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 138, "lines": ["exo_merge.correction(merge, extended_full, abbreviated_full)"]}]