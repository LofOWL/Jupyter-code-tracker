[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Conditions & Expressions Bool\u00e9ennes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment : niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous pr\u00e9sentons rapidement dans ce notebook comment construire la condition qui contr\u00f4le l'ex\u00e9cution d'un `if`"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Tests consid\u00e9r\u00e9s comme vrai"]}, {"block": 5, "type": "markdown", "linesLength": 8, "startIndex": 5, "lines": ["Lorsqu'on \u00e9crit une instuction comme", "", "    if <expression>:", "       <do_something>", "    ", "le r\u00e9sultat de l'expression peut **ne pas \u00eatre un bool\u00e9en**. Pour la plupart des types, il existe des valeurs particuli\u00e8res qui **sont** consid\u00e9r\u00e9es comme fausses. ", "", "Par exemple, pour n'importe quel type num\u00e9rique, la valeur 0 est consid\u00e9r\u00e9e comme fausse. Cela signifie que"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["De m\u00eame, une cha\u00eene vide, une liste vide, un tuple vide, sont consid\u00e9r\u00e9s comme faux. Bref, vous voyez l'id\u00e9e g\u00e9n\u00e9rale."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Enfin le singleton `None`, que nous verrons bient\u00f4t, est lui aussi consid\u00e9r\u00e9 comme faux. "]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### \u00c9galit\u00e9"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Les tests les plus simples se font \u00e0 l'aide des op\u00e9rateurs d'\u00e9galit\u00e9, qui fonctionnent sur presque tous les objets (nous verrons un contre-exemple dans la section sur les r\u00e9f\u00e9rences partag\u00e9es). Comme nous l'avons d\u00e9j\u00e0 vu, l'op\u00e9rateur `==` v\u00e9rifie si deux objets ont la m\u00eame valeur"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["En gen\u00e9ral, deux objets de types diff\u00e9rents ne peuvent pas \u00eatre \u00e9gaux."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Par contre, des `float`, des `int` et des `long` peuvent \u00eatre \u00e9gaux entre eux."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Signalons \u00e0 titre un peu anecdotique une syntaxe ancienne: historiquement on pouvait aussi noter `<>` le test de non \u00e9galit\u00e9. On trouve ceci dans du code ancien mais il faut \u00e9viter de l'utiliser"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["### Les op\u00e9rateurs de comparaison "]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Sans grande surprise on peut aussi \u00e9crire"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["On peut l\u00e0 aussi les utiliser sur une palette assez large de types, comme par exemple avec les listes"]}, {"block": 16, "type": "markdown", "linesLength": 8, "startIndex": 23, "lines": ["Il est parfois utile de v\u00e9rifier le sens qui est donn\u00e9 \u00e0 ces op\u00e9rateurs selon le type; ainsi par exemple ils d\u00e9signent l'inclusion sur les ensembles - que nous verrons bient\u00f4t. ", "", "Il faut aussi se m\u00e9fier avec les types num\u00e9riques, si un complexe est impliqu\u00e9, comme par exemple:", "", "    >>> 3 <= 3j", "    Traceback (most recent call last):", "      File \"<stdin>\", line 1, in <module>", "    TypeError: no ordering relation is defined for complex numbers"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["### Connecteurs logiques et / ou / non"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["On peut bien s\u00fbr combiner facilement plusieurs expressions entre elles, gr\u00e2ce aux op\u00e9rateurs `and`, `or` et `not`"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["En termes de priorit\u00e9s: le plus simple si vous avez une expression compliqu\u00e9e reste de mettre les parenth\u00e8ses qui rendent son \u00e9valuation claire et lisible pour tous. Aussi on pr\u00e9f\u00e8rera de beaucoup la formulation \u00e9quivalente"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Pour en savoir plus"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Reportez-vous \u00e0 la section sur les [op\u00e9rateurs bool\u00e9ens](https://docs.python.org/2/library/stdtypes.html#truth-value-testing) dans la documentation python"]}]