[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# O\u00f9 sont cherch\u00e9s les modules\u00a0?"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Pour les d\u00e9butants en informatique, le plus simple est de se souvenir que si vous voulez uniquement charger vos propres modules ou packages, il suffit de les placer dans le r\u00e9pertoire o\u00f9 vous lancez la commande python. Si vous n'\u00eates pas s\u00fbr de cet emplacement vous pouvez le savoir en faisant\u00a0:"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["from pathlib import Path\n", "Path.cwd()"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Dans ce compl\u00e9ment nous allons voir, de mani\u00e8re g\u00e9n\u00e9rale, comment sont localis\u00e9s (sur le disque dur) les modules que vous chargez dans python gr\u00e2ce \u00e0 l'instruction `import`\u00a0; nous verrons aussi o\u00f9 placer vos propres fichiers pour qu'ils soient accessibles \u00e0 python."]}, {"block": 7, "type": "markdown", "linesLength": 6, "startIndex": 12, "lines": ["[Comme expliqu\u00e9 ici](https://docs.python.org/3/tutorial/modules.html#the-module-search-path), lorsque vous importez le module `spam`, python cherche dans cet ordre\u00a0:\n", "* un module *built-in* de nom `spam` - possiblement/probablement \u00e9crit en C,\n", "* ou sinon un fichier `spam.py` (ou `spam/__init.py__` s'il s'agit d'un package)\u00a0; pour le localiser on utilise la variable `sys.path` (c'est-\u00e0-dire l'attribut `path` dans le module `sys`), qui est une liste de r\u00e9pertoires, et qui est initialis\u00e9e avec, dans cet ordre\u00a0:\n", "  * le r\u00e9pertoire o\u00f9 se trouve le point d'entr\u00e9e\u00a0;\n", "  * la variable d'environnement `PYTHONPATH`\u00a0;\n", "  * un certain nombre d'emplacements d\u00e9finis au moment de la compilation de python."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Ainsi sans action particuli\u00e8re de l'utilisateur, python trouve l'int\u00e9gralit\u00e9 de la librairie standard, ainsi que les modules et packages install\u00e9s dans le m\u00eame r\u00e9pertoire que le fichier pass\u00e9 \u00e0 l'interpr\u00e9teur. "]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["La fa\u00e7on dont cela se pr\u00e9sente dans l'interpr\u00e9teur des notebooks\u00a0peut vous induire en erreur. Aussi je vous engage \u00e0 ex\u00e9cuter plut\u00f4t, et sur votre machine, le programme suivant\u00a0: "]}, {"block": 10, "type": "markdown", "linesLength": 13, "startIndex": 20, "lines": ["```\n", "#!/usr/bin/env python3\n", "\n", "import sys\n", "\n", "def show_argv_and_path():\n", "    print(f\"le point d'entr\u00e9e du programme est {sys.argv[0]}\")\n", "    print(f\"la variable sys.path contient\")\n", "    for i, path in enumerate(sys.path, 1):\n", "        print(f\"{i}-\u00e8me chemin dans sys.path {path}\")\n", "\n", "show_argv_and_path()\n", "```"]}, {"block": 11, "type": "markdown", "linesLength": 4, "startIndex": 33, "lines": ["En admettant que vous rangez ce fichier dans le fichier `/le/repertoire/d/installation/run.py`, et que vous le lancez \u00e0 partir de `/le/repertoire/ou/vous/etes`, avec une variable `PYTHONPATH` vide, vous devriez observer\u00a0:\n", "\n", "* que la variable `sys.argv[0]` contient le chemin complet `/le/repertoire/d/installation/run.py`,\n", "* et que le premier terme dans `sys.path` contient `/le/repertoire/d/installation`."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["La [variable d'environnement](http://en.wikipedia.org/wiki/Environment_variable) PYTHONPATH est d\u00e9finie de fa\u00e7on \u00e0 donner la possibilit\u00e9 d'\u00e9tendre ces listes depuis l'ext\u00e9rieur, et sans recompiler l'interpr\u00e9teur, ni modifier les sources. Cette possibilit\u00e9 s'adresse donc \u00e0 l'utilisateur final - ou \u00e0 son administrateur syst\u00e8me - plut\u00f4t qu'au programmeur."]}, {"block": 13, "type": "markdown", "linesLength": 5, "startIndex": 38, "lines": ["En tant que programmeur par contre, vous avez la possibilit\u00e9 d'\u00e9tendre `sys.path` avant de faire vos `import`.\n", "\n", "Imaginons par exemple que vous avez \u00e9crit un petit outil utilitaire qui se compose d'un point d'entr\u00e9e `main.py`, et de plusieurs modules `spam.py` et `eggs.py`. Vous n'avez pas le temps de packager proprement cet outil, vous voudriez pouvoir distribuer un *tar* avec ces trois fichiers python, qui puissent s'installer n'importe o\u00f9 (pourvu qu'ils soient tous les trois au m\u00eame endroit), et que le point d'entr\u00e9e trouve ses deux modules sans que l'utilisateur ait \u00e0 s'en soucier.\n", "\n", "Imaginons donc ces trois fichiers install\u00e9s sur la machine de l'utilisateur dans\u00a0:"]}, {"block": 14, "type": "markdown", "linesLength": 4, "startIndex": 43, "lines": ["    /usr/share/utilitaire/\n", "                          main.py\n", "                          spam.py\n", "                          eggs.py"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["Si vous ne faites rien de particulier, c'est-\u00e0-dire que `main.py` contient juste"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["    import spam, eggs"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Alors le programme ne fonctionnera **que s'il est lanc\u00e9 depuis `/usr/share/utilitaire`**, ce qui n'est pas du tout pratique. "]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Pour contourner cela on peut \u00e9crire dans `main.py` quelque chose comme\u00a0:"]}, {"block": 19, "type": "markdown", "linesLength": 10, "startIndex": 51, "lines": ["    # on r\u00e9cup\u00e8re le r\u00e9pertoire o\u00f9 est install\u00e9 le point d'entr\u00e9e\n", "    import os.path\n", "    directory_installation = os.path.dirname(__file__)\n", "    \n", "    # et on l'ajoute au chemin de recherche des modules\n", "    import sys\n", "    sys.path.append(directory_installation)\n", "    \n", "    # maintenant on peut importer spam et eggs de n'importe o\u00f9\n", "    import spam, eggs"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["### Distribuer sa propre librairie avec `setuptools`"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 62, "lines": ["Notez bien que l'exemple pr\u00e9c\u00e9dent est **uniquement donn\u00e9 \u00e0 titre d'illustration** pour d\u00e9cortiquer la m\u00e9canique d'utilisation de `sys.path`. \n", "\n", "Ce n'est pas une technique recommand\u00e9e dans le cas g\u00e9n\u00e9ral. On pr\u00e9f\u00e8re en effet de beaucoup diffuser une application python, ou une librairie, sous forme de packaging en utilisant le [module setuptools](https://pypi.python.org/pypi/setuptools). Il s'agit d'un outil qui **ne fait pas partie de la librairie standard**, et qui supplante `distutils` qui lui, fait partie de la distribution standard mais qui est tomb\u00e9 en d\u00e9sh\u00e9rence au fil du temps."]}, {"block": 22, "type": "markdown", "linesLength": 5, "startIndex": 65, "lines": ["`setuptools` permet au programmeur d'\u00e9crire - dans un fichier qu'on appelle traditionnellement `setup.py` - le contenu de son application\u00a0; gr\u00e2ce \u00e0 quoi on peut ensuite de mani\u00e8re unifi\u00e9e\u00a0:\n", "* installer l'application sur une machine \u00e0 partir des sources\u00a0;\n", "* pr\u00e9parer un package de l'application\u00a0;\n", "* diffuser le package dans [l'infrastructure PyPI](https://pypi.python.org/pypi)\u00a0;\n", "* installer le package depuis PyPI en utilisant [`pip3`](http://pip.readthedocs.org/en/latest/installing.html)."]}, {"block": 23, "type": "markdown", "linesLength": 3, "startIndex": 70, "lines": ["Pour installer `setuptools`, comme d'habitude vous pouvez faire simplement\u00a0:\n", "\n", "    pip3 install setuptools"]}]