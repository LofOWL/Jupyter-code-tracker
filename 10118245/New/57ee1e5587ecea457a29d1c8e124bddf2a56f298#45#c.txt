[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# L'op\u00e9rateur `is`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Les op\u00e9rateurs `is` et `==`"]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 4, "lines": ["Nous avons d\u00e9j\u00e0 parl\u00e9 de l'op\u00e9rateur `==` qui compare la valeur de deux objets.", "", "Python fournit aussi un op\u00e9rateur `is` qui permet de savoir si deux valeurs correspondent au m\u00eame objet en m\u00e9moire.", "", "Nous allons illustrer la diff\u00e9rence entre ces deux op\u00e9rateurs."]}, {"block": 5, "type": "markdown", "linesLength": 6, "startIndex": 9, "lines": ["Pour bien comprendre cette diff\u00e9rence, il faut se souvenir que", "", " * `==` compare **la valeur** des deux objets, alors que", " * `is` v\u00e9rifie si les deux valeurs correspondent **au m\u00eame objet**", "", "Voyons ceci sur quelques exemples simples"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### Utilisez `is` plut\u00f4t que `==` lorsque c'est possible"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 16, "lines": ["La pratique usuelle est d'utiliser `is` lorsqu'on compare avec un objet qui est un singleton, comme typiquement `None`. ", "", "Par exemple on pr\u00e9f\u00e8rera \u00e9crire&nbsp;:"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["plut\u00f4t que"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["qui se comporte de la m\u00eame mani\u00e8re (\u00e0 nouveau, parce qu'on compare avec `None`), mais est l\u00e9g\u00e8rement moins lisible, et franchement moins pythonique :)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Notez aussi et surtout que `is` est **plus efficace** que `==`. En effet `is` peut \u00eatre \u00e9valu\u00e9 en temps constant, puisqu'il s'agit essentiellement de comparer les deux adresses. Alors que pour `==` il peut s'agir de parcourir toute un structure de donn\u00e9es possiblement tr\u00e8s complexe.  "]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["### La fonction `id`"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Pour bien comprendre le fonctionnement de `is` nous allons voir la fonction `id` qui retourne un identificateur unique pour chaque objet; un mod\u00e8le mental acceptable est celui d'adresse m\u00e9moire. "]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 25, "lines": ["Comme vous vous en doutez, l'op\u00e9rateur `is` peut \u00eatre d\u00e9crit formellement \u00e0 partir de `id` comme ceci", "", "(`a is b`) $\\Longleftrightarrow$ (`id(a) == id(b)`)"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["### Certains types de base sont des singletons"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Un singleton est un objet qui n'existe qu'en un seul exemplaire dans la m\u00e9moire. Un usage classique des singletons en python est de minimiser le nombre d'objets immuables en m\u00e9moire. Voyons ce que cela nous donne avec des entiers "]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Tiens, c'est curieux, nous avons ici deux objets, que l'on pourrait penser diff\u00e9rents, mais en fait ce sont les m\u00eames; `a` et `b` d\u00e9signent le m\u00eame objet python, et on a"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Il se trouve que, dans le cas des petits entiers, python r\u00e9alise une optimisation de l'utilisation de la m\u00e9moire. Quel que soit le nombre de variables dont la valeur est `3`, un seul objet correspondant \u00e0 l'entier `3` est allou\u00e9 et cr\u00e9\u00e9, pour \u00e9viter d'engorger la m\u00e9moire. On dit que l'entier `3` est impl\u00e9ment\u00e9 comme un singleton; nous reverrons ceci en exercice."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["On trouve cette optimisation avec quelques autres objets python, comme par exemple"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Ou encore, plus surprenant:"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 34, "lines": ["**Conclusion** cette optimisation ne touche aucun type mutable (heureusement); pour les types immuables, il n'est pas extr\u00eamement important de savoir en d\u00e9tail quels objets sont impl\u00e9ment\u00e9s de la sorte. ", "", "Ce qui est par contre extr\u00eamement important est de comprendre la diff\u00e9rence entre `is` et `==`, et de les utiliser \u00e0 bon escient au risque d'\u00e9crire du code fragile."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["### Pour en savoir plus"]}, {"block": 23, "type": "markdown", "linesLength": 5, "startIndex": 38, "lines": ["Aux \u00e9tudiants de niveau avanc\u00e9, nous recommandons la lecture de la section \"Objects, values and types\" dans la documentation python", "", "https://docs.python.org/2/reference/datamodel.html#objects-values-and-types", "", "qui aborde \u00e9galement la notion de \"garbage collection\", que nous n'aurons pas le temps de traiter dans ce MOOC."]}]