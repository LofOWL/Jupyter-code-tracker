[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# *Type hints*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Langages compil\u00e9s"]}, {"block": 4, "type": "markdown", "linesLength": 9, "startIndex": 8, "lines": ["Nous avons \u00e9voqu\u00e9 en premi\u00e8re semaine le typage, lorsque nous avons compar\u00e9 python avec les langages compil\u00e9s. Dans un langage compil\u00e9 avec typage statique, on **doit fournir du typage**, ce qui fait qu'on \u00e9crit typiquement une fonction comme ceci:\n", "\n", "```\n", "int factoriel(int n) {\n", "  return (n<=1) ? 1 : n * factoriel(n-1);\n", "}\n", "```\n", "\n", "ce qui signifie que la fonction factoriel prend un premier argument qui est un entier, et qu'elle retourne \u00e9galement un entier."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Nous avons vu \u00e9galement que, par contraste, pour \u00e9crire une fonction en python, on n'a **pas besoin** de pr\u00e9ciser **le type** des arguments ni du retour de la fonction."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["### Vous pouvez aussi typer votre code python"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Cependant depuis la version 3.5, python supporte un m\u00e9canisme **totalement optionnel** qui vous permet d'annoter les arguments des fonctions avec des informations de typage, ce m\u00e9canisme est connu sous le nom de *type hints*, et \u00e7a se pr\u00e9sente comme ceci."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["##### typer une variable"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["# pour typer une variable avec les type hints\n", "nb_items : int = 0"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["nb_items"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["##### typer les param\u00e8tres et le retour d'une fonction"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["# une fonction factorielle avec des type hints\n", "def fact(n : int) -> int:\n", "    return 1 if n <= 1 else n * fact(n-1)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["fact(12)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["### Usages"]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 30, "lines": ["\u00c0 ce stade, on peut entrevoir les usages suivants \u00e0 ce type d'annotation:\n", "\n", "* tout d'abord, et \u00e9videmment, cela peut permettre de mieux documenter le code; \n", "* les environnements de d\u00e9veloppement sont susceptibles de vous aider de mani\u00e8re plus effective; si \u00e0 quelque part vous \u00e9crivez `z = fact(12)`, le fait de savoir que `z` est entier permet de fournir une compl\u00e9tion plus pertinente lorsque vous commencez \u00e0 \u00e9crire `z.[TAB]`;\n", "* on peut esp\u00e9rer trouver des erreurs dans les passages d'arguments \u00e0 un stade plus pr\u00e9coce du d\u00e9veloppement."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Par contre ce qui est tr\u00e8s tr\u00e8s clairement annonc\u00e9 \u00e9galement, c'est que ces informations de typage sont **totalement facultatives**, et que le langage les **ignore totalement**. "]}, {"block": 17, "type": "code", "linesLength": 7, "startIndex": 36, "lines": ["# l'interpr\u00e9teur ignore totalement ces informations\n", "def fake_fact(n : str) -> str:\n", "    return 1 if n <= 1 else n * fake_fact(n-1)\n", "\n", "# on peut appeler fake_fact avec un int alors \n", "# que c'est d\u00e9clar\u00e9 pour des str\n", "fake_fact(12)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["Le mod\u00e8le pr\u00e9conis\u00e9 est d'utiliser des **outils ext\u00e9rieurs**, qui peuvent faire une analyse statique du code pour exploiter ces informations \u00e0 des fins de validation. Dans cette cat\u00e9gorie, le plus c\u00e9l\u00e8bre [est sans doute `mypy`](http://mypy-lang.org/). Notez aussi que les IDE comme PyCharm sont \u00e9galement capables de tirer parti de ces annotations."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["### Est-ce r\u00e9pandu ?"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 45, "lines": ["Parce qu'ils ont \u00e9t\u00e9 introduits pour la premi\u00e8re fois avec python-3.5, en 2015 donc, puis am\u00e9lior\u00e9s dans la 3.6 pour le typage des variables, l'usage des *type hints* n'est pour l'instant pas tr\u00e8s r\u00e9pandu, en proportion de code en tous cas. En outre, il aura fallu un temps de latence avant que tous les outils (IDE's, producteurs de documentation, outils de test, validateurs...) ne soient am\u00e9lior\u00e9s pour en tirer un profit maximal.\n", "\n", "On peut penser que cet usage va se r\u00e9pandre avec le temps, peut-\u00eatre / sans doute pas de mani\u00e8re syst\u00e9matique, mais *a minima* pour lever certaines ambig\u00fcit\u00e9s."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["### Comment annoter son code"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Maintenant que nous en avons bien vu la finalit\u00e9, voyons un tr\u00e8s bref aper\u00e7u des possibilit\u00e9s offertes pour la construction des types dans ce contexte de *type hints*. N'h\u00e9sitez pas \u00e0 vous reporter \u00e0 la documentation officielle [du module `typing`](https://docs.python.org/3/library/typing.html) pour un expos\u00e9 plus exhaustif."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["##### le module `typing`"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["L'ensemble des symboles que nous allons utiliser dans la suite de ce compl\u00e9ment provient du module `typing`"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["##### exemples simples"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["from typing import List"]}, {"block": 27, "type": "code", "linesLength": 5, "startIndex": 54, "lines": ["# une fonction qui \n", "# attend un param\u00e8tre qui soit une liste d'entiers,\n", "# et qui retourne une liste de chaines\n", "def foo(x: List[int]) -> List[str]:\n", "    pass    "]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["##### avertissement : `list` vs `List`"]}, {"block": 29, "type": "markdown", "linesLength": 7, "startIndex": 60, "lines": ["Remarquez bien dans l'exemple ci-dessus que nous avons utilis\u00e9 `typing.List` plut\u00f4t que le type builtin `list`, alors que l'on a pu par contre utiliser `int` et `str`.\n", "\n", "Les raisons pour cela sont de deux ordres:\n", "\n", "* tout d'abord, si je devais utiliser `list` pour construire un type comme *liste d'entiers*, il me faudrait \u00e9crire quelque chose comme `list(int)` ou encore `list[int]`, et cela serait source de confusion car ceci a d\u00e9j\u00e0 une signification dans le langage;\n", "\n", "* de mani\u00e8re plus profonde, il faut distinguer entre `list` qui est un type concret (un objet qui sert \u00e0 construire des instances), de `List` qui dans ce contexte doit plus \u00eatre vu comme un type abstrait. "]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["Pour bien voir cela, consid\u00e9rez l'exemple suivant:"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 68, "lines": ["from typing import Iterable"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 69, "lines": ["def lower_split(sep: str, inputs : Iterable[str]) -> str:\n", "    return sep.join([x.lower() for x in inputs])"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["lower_split('--', ('AB', 'CD', 'EF'))"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["On voit bien dans cet exemple que `Iterable` ne correspond pas \u00e0 un type concret particulier, c'est un type abstrait dans le sens du *duck typing*."]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["##### un exemple plus complet"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["Voici un exemple tir\u00e9 de la documentation du module `typing` qui illustre davantage de types construits \u00e0 partir des types *builtin* du langage:"]}, {"block": 37, "type": "code", "linesLength": 15, "startIndex": 75, "lines": ["from typing import Dict, Tuple, List\n", "\n", "ConnectionOptions = Dict[str, str]\n", "Address = Tuple[str, int]\n", "Server = Tuple[Address, ConnectionOptions]\n", "\n", "def broadcast_message(message: str, servers: List[Server]) -> None:\n", "    ...\n", "\n", "# The static type checker will treat the previous type signature as\n", "# being exactly equivalent to this one.\n", "def broadcast_message(\n", "        message: str,\n", "        servers: List[Tuple[Tuple[str, int], Dict[str, str]]]) -> None:\n", "    ..."]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 90, "lines": ["J'en profite d'ailleurs (\u00e7a n'a rien a voir, mais...) pour vous signaler un objet python assez \u00e9trange:"]}, {"block": 39, "type": "code", "linesLength": 3, "startIndex": 91, "lines": ["# L'objet ... existe bel et bien en python\n", "el = ...\n", "el"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["qui sert principalement pour le slicing multi-dimensionnel de numpy. Mais ne nous \u00e9garons pas..."]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 95, "lines": ["##### typage partiel"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 96, "lines": ["Puisque c'est un m\u00e9canisme optionnel, vous pouvez tout \u00e0 fait ne typer qu'une partie de vos variables et param\u00e8tres:"]}, {"block": 43, "type": "code", "linesLength": 5, "startIndex": 97, "lines": ["# imaginez que vous ne typez pas n2, ni la valeur de retour\n", "\n", "# c'est \u00e9quivalent de dire ceci\n", "def partially_typed(n1: int, n2):\n", "    return None"]}, {"block": 44, "type": "code", "linesLength": 5, "startIndex": 102, "lines": ["# ou cela\n", "from typing import Any\n", "\n", "def partially_typed(n1: int, n2: Any) -> Any:\n", "    return None"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 107, "lines": ["##### aliases"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 108, "lines": ["On peut facilement se d\u00e9finir des alias; lorsque vous avez impl\u00e9ment\u00e9 un syst\u00e8me d'identifiants bas\u00e9 sur le type `int`, il est pr\u00e9f\u00e9rable de faire:"]}, {"block": 47, "type": "code", "linesLength": 5, "startIndex": 109, "lines": ["from typing import NewType\n", "\n", "UserId = NewType('UserId', int)\n", "\n", "user1_id : UserId = 0"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 114, "lines": ["plut\u00f4t que ceci, qui est beaucoup moins parlant:"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 115, "lines": ["user1_id : int = 0"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 116, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 117, "lines": ["##### `Generic`"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["Pour ceux qui connaissent d\u00e9j\u00e0 la notion de classe (les autres peuvent ignorer la fin de ce compl\u00e9ment):"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 119, "lines": ["Gr\u00e2ce aux constructions `TypeVar` et `Generic`, il est possible de manipuler une notion de *variable de type*, que je vous montre sur un exemple tir\u00e9 \u00e0 nouveau de la documentation du module `typing`:"]}, {"block": 54, "type": "code", "linesLength": 21, "startIndex": 120, "lines": ["from typing import TypeVar, Generic\n", "from logging import Logger\n", "\n", "T = TypeVar('T')\n", "\n", "class LoggedVar(Generic[T]):\n", "    def __init__(self, value: T, name: str, logger: Logger) -> None:\n", "        self.name = name\n", "        self.logger = logger\n", "        self.value = value\n", "\n", "    def set(self, new: T) -> None:\n", "        self.log('Set ' + repr(self.value))\n", "        self.value = new\n", "\n", "    def get(self) -> T:\n", "        self.log('Get ' + repr(self.value))\n", "        return self.value\n", "\n", "    def log(self, message: str) -> None:\n", "        self.logger.info('%s: %s', self.name, message)"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 141, "lines": ["qui vous donne je l'esp\u00e8re une id\u00e9e de ce qu'il est possible de faire, et jusqu'o\u00f9 on peut aller avec les *type hints*. Si vous \u00eates int\u00e9ress\u00e9 par cette feature je vous invite [\u00e0 poursuivre la lecture ici](https://docs.python.org/3/library/typing.html#user-defined-generic-types)."]}, {"block": 56, "type": "markdown", "linesLength": 8, "startIndex": 142, "lines": ["### Pour en savoir plus\n", "\n", "* la documentation officielle sur [le module typing](https://docs.python.org/3/library/typing.html);\n", "* la page d'accueil [de l'outil mypy](http://mypy-lang.org/).\n", "\n", "\n", "* le [PEP-525](https://www.python.org/dev/peps/pep-0484/) sur le typage des param\u00e8tres et retours de fonctions, impl\u00e9ment\u00e9 dans python-3.5;\n", "* le [PEP-526](https://www.python.org/dev/peps/pep-0526/) sur le typage des variables, impl\u00e9ment\u00e9 dans 3.6.\n"]}]