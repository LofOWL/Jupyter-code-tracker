[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Forme d'un tableau `numpy`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Nous allons voir dans ce compl\u00e9ment comment cr\u00e9er des tableaux en plusieurs dimensions et manipuler la forme (`shape`) des tableaux."]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["import numpy as np"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Un exemple"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Nous avons vu pr\u00e9c\u00e9demment comment cr\u00e9er un tableau `numpy` de dimension 1 \u00e0 partir d'un simple it\u00e9rable, nous allons \u00e0 pr\u00e9sent cr\u00e9er un tableau \u00e0 2 dimensions, et pour cela nous allons utiliser une liste imbriqu\u00e9e\u00a0:"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["d2 = np.array([[11, 12, 13], [21, 22, 23]])\n", "d2"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Ce premier exemple va nous permettre de voir les diff\u00e9rents attributs de tous les tableaux `numpy`."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### L'attribut `shape`"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Tous les tableaux `numpy` poss\u00e8dent un attribut `shape` qui retourne, sous la forme d'un tuple, les dimensions du tableau\u00a0:"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["# la forme (les dimensions) du tableau\n", "d2.shape"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Dans le cas d'un tableau en 2 dimensions, cela correspond donc \u00e0 **lignes** x **colonnes**."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["### On peut facilement changer de forme"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Comme on l'a vu dans la vid\u00e9o, un tableau est en fait une vue vers un bloc de donn\u00e9es. Aussi il est facile de changer la dimension d'un tableau - ou plut\u00f4t, de cr\u00e9er une autre vue vers les m\u00eames donn\u00e9es\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 4, "startIndex": 20, "lines": ["# l'argument qu'on passe \u00e0 reshape est le tuple\n", "# qui d\u00e9crit la nouvelle *shape*\n", "v2 = d2.reshape((3, 2))\n", "v2"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Et donc, ces deux tableaux sont deux vues vers la m\u00eame zone de donn\u00e9es\u00a0; ce qui fait qu'une modification sur l'un se r\u00e9percute dans l'autre\u00a0:"]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["# je change un tableau\n", "d2[0][0] = 100\n", "d2"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["# \u00e7a se r\u00e9percute dans l'autre\n", "v2"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["### Les attributs li\u00e9s \u00e0 la forme"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Signalons par commodit\u00e9 les attributs suivants, qui se d\u00e9rivent de `shape`\u00a0:"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 32, "lines": ["# le nombre de dimensions\n", "d2.ndim"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["# vrai pour tous les tableaux\n", "len(d2.shape) == d2.ndim"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 36, "lines": ["# le nombre de cellules\n", "d2.size"]}, {"block": 23, "type": "code", "linesLength": 8, "startIndex": 38, "lines": ["# vrai pour tous les tableaux\n", "# une fa\u00e7on compliqu\u00e9e de dire\n", "# une chose toute simple\u00a0:\n", "# la taille est le produit\n", "# des dimensions\n", "from operator import mul\n", "from functools import reduce\n", "d2.size == reduce(mul, d2.shape, 1)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Lorsqu'on utilise `reshape`, il faut bien s\u00fbr que la nouvelle forme soit compatible\u00a0:"]}, {"block": 25, "type": "code", "linesLength": 4, "startIndex": 47, "lines": ["try:\n", "    d2.reshape((3, 4))\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["### Dimensions sup\u00e9rieures"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["Vous pouvez donc deviner comment on construit des tableaux en dimensions sup\u00e9rieures \u00e0 2, il suffit d'utiliser un attribut `shape` plus \u00e9labor\u00e9\u00a0:"]}, {"block": 28, "type": "code", "linesLength": 5, "startIndex": 53, "lines": ["shape = (2, 3, 4)\n", "size = reduce(mul, shape)\n", "\n", "# vous vous souvenez de arange\n", "data = np.arange(size)"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["d3 = data.reshape(shape)\n", "d3"]}, {"block": 30, "type": "markdown", "linesLength": 3, "startIndex": 60, "lines": ["Cet exemple vous permet de voir qu'en dimensions sup\u00e9rieures la forme est toujours\u00a0:\n", "\n", "  n1 x n2 x ... x **lignes** x **colonnes**"]}, {"block": 31, "type": "markdown", "linesLength": 9, "startIndex": 63, "lines": ["Enfin, ce que je viens de dire est arbitraire, dans le sens o\u00f9, bien entendu, vous pouvez d\u00e9cider d'interpr\u00e9ter les tableaux comme vous voulez.\n", "\n", "Mais en termes au moins de l'impression par `print`, il est logique de voir que l'algorithme d'impression balaye le tableau de mani\u00e8re m\u00e9canique comme ceci\u00a0:\n", "```Python\n", "for i in range(2):\n", "    for j in range(3):\n", "        for k in range(4):\n", "            array[i][j][k]\n", "```"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["Et c'est pourquoi vous obtenez la pr\u00e9sentation suivante avec des tableaux de dimensions plus grandes\u00a0:"]}, {"block": 33, "type": "code", "linesLength": 4, "startIndex": 73, "lines": ["# la m\u00eame chose avec plus de dimensions\n", "shape = (2, 3, 4, 5)\n", "size = reduce(mul, shape) # le produit des 4 nombres dans shape\n", "size"]}, {"block": 34, "type": "code", "linesLength": 7, "startIndex": 77, "lines": ["data = np.arange(size)\n", "\n", "# ce tableau est visualis\u00e9\n", "# \u00e0 base de briques de base\n", "# de 4 lignes et 5 colonnes\n", "d4 = data.reshape(shape)\n", "d4"]}, {"block": 35, "type": "markdown", "linesLength": 8, "startIndex": 84, "lines": ["Vous voyez donc qu'avec la forme\u00a0:\n", "\n", "    2, 3, 4, 5\n", "\n", "cela vous donne l'impression que vous avez comme brique de base des tableaux qui ont\u00a0:\n", "\n", "    4 lignes\n", "    5 colonnes"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 92, "lines": ["Et souvenez-vous que vous pouvez toujours ins\u00e9rer un `1` n'importe o\u00f9 dans la forme, puisque \u00e7a ne modifie pas la taille qui est le produit des dimensions\u00a0:"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 93, "lines": ["d2.shape"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["d2"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 95, "lines": ["d2.reshape(2, 1, 3)"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["d2.reshape(2, 3, 1)"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["Ou m\u00eame\u00a0:"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["d2.reshape((1, 2, 3))"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 99, "lines": ["d2.reshape((1, 1, 1, 1, 2, 3))"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 100, "lines": ["### R\u00e9sum\u00e9 des attributs"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 101, "lines": ["Voici un r\u00e9sum\u00e9 des attributs des tableaux `numpy`\u00a0:"]}, {"block": 46, "type": "markdown", "linesLength": 7, "startIndex": 102, "lines": ["| *attribut* | *signification*               | *exemple*    |\n", "|:-----------|:------------------------------|:-------------|\n", "| `shape`    | tuple des dimensions          | `(3, 5, 7)`  |\n", "| `ndim`     | nombre dimensions             | `3`          |\n", "| `size`     | nombre d'\u00e9l\u00e9ments             | `3 * 5 * 7`  |\n", "| `dtype`    | type de chaque \u00e9l\u00e9ment        | `np.float64` |\n", "| `itemsize` | taille en octets d'un \u00e9l\u00e9ment | `8`          |"]}, {"block": 47, "type": "markdown", "linesLength": 1, "startIndex": 109, "lines": ["### Divers"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["Je vous signale enfin, \u00e0 titre totalement anecdotique cette fois, l'existence de la m\u00e9thode `ravel` qui vous permet d'aplatir n'importe quel tableau\u00a0:"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["d2"]}, {"block": 50, "type": "code", "linesLength": 1, "startIndex": 112, "lines": ["d2.ravel()"]}, {"block": 51, "type": "code", "linesLength": 3, "startIndex": 113, "lines": ["# il y a d'ailleurs aussi flatten qui fait\n", "# quelque chose de semblable\n", "d2.flatten()"]}]