[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# t\u00e2ches, valeurs de retour, exceptions"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["# `ensure_future()`"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": [" retourne un objet `Task`\n", "* qui conna\u00eet l'\u00e9tat (termin\u00e9 ?)\n", "* et le r\u00e9sultat de l'ex\u00e9cution"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["[animation](loop-stacks/index.html)"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["# bonnes pratiques"]}, {"block": 6, "type": "markdown", "linesLength": 2, "startIndex": 8, "lines": ["* attraper les exceptions\n", "  * dans le code asynchrone"]}, {"block": 7, "type": "markdown", "linesLength": 2, "startIndex": 10, "lines": ["* autrement\n", "  * lire les exceptions (appeler `Task.exception()`)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["# lire les t\u00e2ches"]}, {"block": 9, "type": "markdown", "linesLength": 2, "startIndex": 13, "lines": ["* m\u00e9thode de classe `Task.all_tasks(`*loop=None*`)` \n", "* m\u00e9thode de classe `Task.current_task(`*loop=None*`)` "]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["from asyncio import (\n", "    get_event_loop, ensure_future, Task )"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["async def foo():\n", "    pass\n"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["task = ensure_future(foo())\n", "task"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 21, "lines": ["# attention : retourne un set\n", "tasks = Task.all_tasks()\n", "tasks"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["task in tasks"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# et comme on n'est pas dans la  boucle\n", "print(task.current_task())"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["# `task.cancel()`"]}, {"block": 17, "type": "markdown", "linesLength": 4, "startIndex": 28, "lines": ["pour annuler la t\u00e2che:\n", "\n", "* continue de donner la main \u00e0 la t\u00e2che\n", "* mais envoie une exception `CancelledError` au prochain tour"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["# r\u00e9sum\u00e9"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["* une boucle = ensemble de t\u00e2ches (de *futures*)"]}, {"block": 20, "type": "markdown", "linesLength": 4, "startIndex": 34, "lines": ["* une t\u00e2che\n", "  * une pile\n", "  * un \u00e9tat (termin\u00e9 ?)\n", "  * un r\u00e9sultat ou une exception"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 38, "lines": ["* responsabilit\u00e9 de l'appelant\n", "  * de lire les r\u00e9sultats et exceptions\n", "  * sinon : avertissement \u00e9mis par le gc"]}]