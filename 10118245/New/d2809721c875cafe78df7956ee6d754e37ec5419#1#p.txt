[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat&nbsp;<img src=\"../media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# A sample regular expression exercise"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 2, "lines": ["    from exercises.regexp import exo_at_least_two"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Same workflow, but this time the student is asked to write a REGEXP. In this case we want them to write a regexp that will find at least 2 successive occurences of `TA`."]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 4, "lines": ["exo_at_least_two.example()"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["At that point you will like always offer a cell for the students to give their own solution\n"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["# do not call re functions, just define the pattern\n", "at_least_two = \"<your pattern>\""]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["And a cell for checking it against the correct implementation&nbsp;:"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["exo_at_least_two.correction(at_least_two)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["# Under the hood"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Here's the python code for this exercise"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["%cat ../exercises/regexp.py"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["# Other variants"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["## `ExerciseRegexp` class, with other policies"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["This exercise uses the `finditer` matching policy. As you can see, with this policy, what gets displayed is a list of tuples `(begin, end)` with the indices of where the pattern is found. "]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 16, "lines": ["The following policies are supported as well, depending on which function in the `re` module actually gets called - feedback is appreciated as this currently is far from perfect&nbsp;:\n", "\n", "* `match` : the regular expression is searched at the beginning of the string only, with `re.match`\n", "* `find` : likewise with `re.find`\n", "* `findall` : uses `re.findall`"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["## `ExerciseRegexpGroups` class"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["This class will work better with patterns that define named groups, and attemps to leverage that for improving rendering of the results."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["## Known issues"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Not all 8 combinations (2 classes, 4 policies) have been very thoroughly tested so far."]}, {"block": 20, "type": "markdown", "linesLength": 4, "startIndex": 25, "lines": ["*****\n", "*****\n", "*****\n", "*****"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["# Tip for troubleshooting"]}, {"block": 22, "type": "markdown", "linesLength": 5, "startIndex": 30, "lines": ["It can be tedious to close and re-open a notebook each time that a change is made. A few options in these situations&nbsp;:\n", "\n", "* In my environment I have a keyboard shortcut to restart the kernel - no questions asked.\n", "\n", "* You can also do it in python itself (here for python3), but you need to recall that this must be cleaned up "]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 35, "lines": ["import exercises\n", "import importlib\n", "importlib.reload(exercises.regexp)"]}]