[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["import asyncio\n", "\n", "from asynchelpers import start_timer, show_timer"]}, {"block": 2, "type": "code", "linesLength": 12, "startIndex": 4, "lines": ["async def countdown(ticks, quotient, period=1):\n", "    \"\"\"\n", "    affiche un compte \u00e0 rebours de ticks periodes\n", "    puis retourne 1/quotient\n", "    \"\"\"\n", "    n = ticks\n", "    while n > 0:\n", "        show_timer(f\"tick{n}({quotient})\")\n", "        n -= 1\n", "        await asyncio.sleep(period)\n", "    show_timer(f\"countdown ({ticks} x {period}) done\")\n", "    return 1 / quotient"]}, {"block": 3, "type": "code", "linesLength": 19, "startIndex": 16, "lines": ["async def monitor_tasks(tasks, period):\n", "    \"\"\"\n", "    Affiche toutes les <period> un \u00e9tat de toutes\n", "    les taches dans tasks, \n", "    et retourne lorsqu'elles sont toutes termin\u00e9es\n", "    \"\"\"\n", "    while True:\n", "        message = \"monitor:\"\n", "        alive = 0\n", "        for i, task in enumerate(tasks):\n", "            message += f\" {i} -> {task.done()}\"\n", "            if not task.done():\n", "                alive += 1\n", "        # s'il n'en reste qu'une c'est le monitor\n", "        show_timer(message)\n", "        if alive == 0:\n", "            show_timer(\"exiting\")\n", "            return\n", "        await asyncio.sleep(period)"]}, {"block": 4, "type": "code", "linesLength": 6, "startIndex": 35, "lines": ["tasks = [\n", "    # va terminer normalement\n", "    asyncio.ensure_future(countdown(2, quotient=1)),\n", "    # l\u00e8ve une exception\n", "    asyncio.ensure_future(countdown(3, quotient=0)),\n", "]"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 41, "lines": ["start_timer()\n", "asyncio.get_event_loop().run_until_complete(\n", "    monitor_tasks(tasks, .8)\n", ")"]}, {"block": 6, "type": "code", "linesLength": 9, "startIndex": 45, "lines": ["show_timer(\"cleaning up\")\n", "for i, task in enumerate(tasks):\n", "    if not task.done():\n", "        # monitor_task should exit only when all tasks are done\n", "        show_timer(\"OOPS, this is unexpected\")\n", "    elif task.exception():\n", "        show_timer(f\"task: {i} has raised exception {task.exception()}\")\n", "    else:\n", "        show_timer(f\"task: {i} has returned {task.result()}\")"]}]