[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Introduction aux classes"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["On d\u00e9finit une classe lorsqu'on a besoin de se cr\u00e9er un type sp\u00e9cifique au contexte de l'application. Il faut donc voir une classe au m\u00eame niveau qu'un type *builtin* comme `list` ou `dict`. "]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Un exemple simpliste"]}, {"block": 4, "type": "markdown", "linesLength": 8, "startIndex": 4, "lines": ["Par exemple imaginons qu'on a besoin de manipuler des matrices $2\\times 2$\n", "\n", "$ A = \\left( \\begin{array}{cc} a_{11} & a_{12} \\\\\n", "a_{21} & a_{22}\\end{array} \\right) $\n", "\n", "Et en guise d'illustration nous allons utiliser le d\u00e9terminant; c'est juste un pr\u00e9texte pour impl\u00e9menter une m\u00e9thode sur cette classe, ne vous inqui\u00e9tez pas si le terme ne vous dit rien, ou vous rappelle de mauvais souvenirs. Tout ce qu'on a besoin de savoir c'est que, sur une matrice de ce type le d\u00e9terminant vaut\n", "\n", "$ det (A) = a_{11}.a_{22} - a_{12}.a_{21}$"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Dans la pratique on utiliserait la classe `matrix` de `numpy`. Mais comme premier exemple de classe, nous allons \u00e9crire **notre propre classe `Matrix2`** pour voir les m\u00e9canismes de base des classes de python en action sur ce petit exemple concret. Naturellement, il s'agit d'une  impl\u00e9mentation jouet."]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 13, "lines": ["La premi\u00e8re version de `Matrix2`"]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["Une classe peut avoir un *docstring*"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Pour commencer vous remarquez qu'on peut attacher \u00e0 cette classe un *docstring* comme pour les fonctions"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["La classe d\u00e9finit donc deux m\u00e9thodes, nomm\u00e9es `__init__` et `determinant`. "]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 17, "lines": ["La m\u00e9thode `__init__`"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["La m\u00e9thode **`__init__`**, comme toutes celles qui ont un nom en `__`*nom*`__`, est une **m\u00e9thode sp\u00e9ciale**. En l'occurrence, il s'agit de ce qu'on appelle le **constructeur** de la classe, c'est-\u00e0-dire le code qui va \u00eatre appel\u00e9 lorsqu'on cr\u00e9e une instance. Voyons cela tout de suite sur un exemple."]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 19, "lines": ["Vous remarquez tout d'abord que `__init__` s'attend \u00e0 recevoir *5 arguments*, mais que nous appelons `Matrix2` avec seulement *4 arguments*. \n", "\n", "L'argument surnum\u00e9raire, le **premier** de ceux qui sont d\u00e9clar\u00e9s dans la m\u00e9thode, correspond \u00e0 l'**instance en cours de cr\u00e9ation**. La **convention** est de le nommer **`self`**, nous y reviendrons un peu plus loin."]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 22, "lines": ["On voit \u00e9galement que le constructeur se contente de m\u00e9moriser, \u00e0 l'int\u00e9rieur de l'instance, les arguments qu'on lui passe, sous la forme d'**attributs** de l'**instance** `self`. \n", "\n", "C'est un cas extr\u00eamement fr\u00e9quent; de mani\u00e8re g\u00e9n\u00e9rale il est recommand\u00e9 d'\u00e9crire des constructeurs passifs de ce genre; dit autrement, on \u00e9vite de faire trop de traitements dans le constructeur. "]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 25, "lines": ["La m\u00e9thode `determinant`"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["La classe d\u00e9finit aussi la m\u00e9thode `determinant`, qu'on utiliserait comme ceci"]}, {"block": 16, "type": "markdown", "linesLength": 2, "startIndex": 27, "lines": ["Vous voyez que la **syntaxe** pour envoyer une m\u00e9thode sur un objet est exactement **identique** \u00e0 celle que nous avons utilis\u00e9e jusqu'ici avec **les types de base**.\n", "Nous verrons dans quelques s\u00e9quences comment on peut pousser beaucoup plus loin la similitude, pour pouvoir par exemple calculer la **somme** de deux objets de la classe `Matrix2` avec l'op\u00e9rateur `+`, mais n'anticipons pas."]}, {"block": 17, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["Vous voyez aussi que, ici encore, la m\u00e9thode d\u00e9finie dans la classe attend  ***1 argument* `self`**, alors qu'apparemment nous ne lui en passons **aucun**. Comme tout \u00e0 l'heure avec le constructeur, le premier argument pass\u00e9 \u00e0 `determinant` est l'objet `matrice` lui-m\u00eame.\n", "\n", "En fait on aurait pu aussi bien \u00e9crire, de mani\u00e8re parfaitement \u00e9quivalente"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["qui n'est presque jamais utilis\u00e9 en pratique, mais illustre bien ce qui se passe lorsqu'on invoque une m\u00e9thode sur un objet."]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 33, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 20, "type": "heading", "linesLength": 1, "startIndex": 34, "lines": ["\u00c0 quoi \u00e7a sert ?"]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 35, "lines": ["Ce cours n'est pas consacr\u00e9 \u00e0 la Programmation Orient\u00e9e Objet (OOP) en tant que telle. Voici toutefois quelques-uns des avantages qui sont g\u00e9n\u00e9ralement mis en avant.\n", "\n", " * Encapsulation\n", " * R\u00e9solution dynamique de m\u00e9thode\n", " * H\u00e9ritage "]}, {"block": 22, "type": "heading", "linesLength": 1, "startIndex": 40, "lines": ["Encapsulation"]}, {"block": 23, "type": "markdown", "linesLength": 3, "startIndex": 41, "lines": ["L'id\u00e9e de la notion d'encapsulation consiste \u00e0 ce que\n", " * une classe d\u00e9finit son **interface**, c'est-\u00e0-dire les m\u00e9thodes par lesquelles on peut utiliser ce code,\n", " * mais reste tout \u00e0 fait libre de modifier son **impl\u00e9mentation**, et tant que cela n'impacte pas l'interface, **aucun changement** n'est requis dans les **codes utilisateurs**."]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Nous verrons plus bas une deuxi\u00e8me impl\u00e9mentation de `Matrix2` qui est plus g\u00e9n\u00e9rale que notre premi\u00e8re version, mais qui fonctionne exactement de la m\u00eame mani\u00e8re pour le code utilisateur."]}, {"block": 25, "type": "markdown", "linesLength": 12, "startIndex": 45, "lines": ["La notion d'encapsulation peut para\u00eetre \u00e0 premi\u00e8re vue banale; il ne faut pas s'y fier, c'est de cette mani\u00e8re qu'on peut efficacement d\u00e9couper un gros logiciel en petits morceaux ind\u00e9pendants, et r\u00e9ellement d\u00e9coupl\u00e9s les uns des autres, et ainsi g\u00e9rer la complexit\u00e9.\n", "\n", "La programmation objet est une des techniques permettant d'atteindre cette bonne propri\u00e9t\u00e9. Il faut reconna\u00eetre que certains langages comme Java et C++ ont des m\u00e9canismes plus sophistiqu\u00e9s, mais aussi plus complexes, pour garantir une bonne \u00e9tanch\u00e9it\u00e9 entre l'interface publique et les d\u00e9tails d'impl\u00e9mentation. Les choix faits en la mati\u00e8re en python reviennent, une fois encore, \u00e0 provil\u00e9gier la simplicit\u00e9.\n", "\n", "Aussi, il n'existe pas en python l'\u00e9quivalent des notions d'interface `public`, `private` et `protected` qu'on trouve en C++ et en Java. Il existe tout au plus une convention, selon laquelle les attributs commen\u00e7ant par un underscore (le tiret bas `_`), sont priv\u00e9s, et ne *devraient* pas \u00eatre utilis\u00e9s par un code tiers, mais le langage ne fait rien pour garantir le bon usage de cette convention. \n", "\n", "Si vous d\u00e9sirez creuser le point  nous vous conseillons de lire\n", " * [*Reserved classes of identifiers*](https://docs.python.org/2/reference/lexical_analysis.html#reserved-classes-of-identifiers) o\u00f9 l'on d\u00e9crit \u00e9galement les noms priv\u00e9s \u00e0 une classe (les noms de variables en `__`*nom*), \n", " * [*Private Variables and Class-local References*](https://docs.python.org/2/tutorial/classes.html#tut-private), qui en donne une illustration.\n", "\n", "\n", "Malgr\u00e9 cette simplicit\u00e9 revendiqu\u00e9e, les classes de python permettent d'impl\u00e9menter en pratique une encapsulation tout \u00e0 fait acceptable, on peut en juger rien que par le nombre de librairies tierces existants dans l'\u00e9cosyst\u00e8me python."]}, {"block": 26, "type": "heading", "linesLength": 1, "startIndex": 57, "lines": ["R\u00e9solution dynamique de m\u00e9thode"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["Le deuxi\u00e8me atout de OOP, c'est le fait que l'envoi de m\u00e9thode est r\u00e9solu \u00e0 \"run-time\" et non pas \u00e0 \"compile-time\". Ce qui signifie qu'on peut \u00e9crire du code g\u00e9n\u00e9rique, qui pourra fonctionner avec des objets non connus *a priori*. Nous allons en voir un exemple tout de suite, en red\u00e9finissant le comportement de `print` sur nos objets de type `Matrix2`, dans la deuxi\u00e8me impl\u00e9mentation de `Matrix2`."]}, {"block": 28, "type": "heading", "linesLength": 1, "startIndex": 59, "lines": ["H\u00e9ritage"]}, {"block": 29, "type": "markdown", "linesLength": 3, "startIndex": 60, "lines": ["L'h\u00e9ritage est le concept qui permet de :\n", " * dupliquer une classe presque \u00e0 l'identique, mais en red\u00e9finissant une ou quelques m\u00e9thodes seulement (h\u00e9ritage simple)\n", " * composer plusieurs classes en une seule, pour r\u00e9aliser en quelque sorte l union des propri\u00e9t\u00e9s de ces classe (h\u00e9ritage multiple)"]}, {"block": 30, "type": "heading", "linesLength": 1, "startIndex": 63, "lines": ["Illustration"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["Nous revenons sur l'h\u00e9ritage dans la prochaine vid\u00e9o. Dans l'imm\u00e9diat, nous allons voir une seconde impl\u00e9mentation de la classe `Matrix2`, qui illustre l'encapsulation et l'envoi dynamique de m\u00e9thodes."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["Pour une raison ou pour une autre, disons que l'on d\u00e9cide de remplacer les 4 attributs nomm\u00e9s `a11`..., qui n'\u00e9taient pas tr\u00e8s extensibles, par un seul attribut `a` qui regroupe tous les coefficients de la matrice dans un seul tuple."]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["Gr\u00e2ce \u00e0 l'**encapsulation**, on peut continuer \u00e0 utiliser la classe exactement de la m\u00eame mani\u00e8re"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["Et en prime, gr\u00e2ce \u00e0 la **r\u00e9solution dynamique de m\u00e9thode**, et parce que dans cette seconde impl\u00e9mentation on a d\u00e9fini une autre m\u00e9thode sp\u00e9ciale `__repr__`, nous avons maintenant une impression beaucoup plus lisible de l'objet `matrice`"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["Ce format d'impression reste d'ailleurs valable dans l'impression d'objets plus compliqu\u00e9s, comme par exemple"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["Cela est possible parce que le code de `print` envoie la m\u00e9thode `__repr__` sur les objets qu'elle parcourt. Le langage fournit une fa\u00e7on de faire par d\u00e9faut, comme on l'a vu plus haut pour l'impression d'une `Matrix2` avec la premi\u00e8re impl\u00e9mentation; et en d\u00e9finissant notre propre m\u00e9thode `__repr__` nous pouvons surcharger ce comportement, et d\u00e9finir notre format d'impression."]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["Dans la prochaine s\u00e9quence vid\u00e9o, nous aurons l'occasion d'illustrer \u00e9galement la notion d'h\u00e9ritage."]}, {"block": 38, "type": "heading", "linesLength": 1, "startIndex": 71, "lines": ["La convention d'utiliser `self`"]}, {"block": 39, "type": "markdown", "linesLength": 3, "startIndex": 72, "lines": ["Avant de conclure, revenons rapidement sur le nom `self` qui est utilis\u00e9 comme nom pour le premier argument des m\u00e9thodes habituelles (nous verrons en semaine 7 d'autres sortes de m\u00e9thodes qui ne re\u00e7oivent pas un objet comme premier argument).\n", "\n", "Comme nous l'avons dit plus haut, le premier argument d'une m\u00e9thode s'appelle **`self`** par *convention*. Cette pratique est particuli\u00e8rement bien suivie, mais ce n'est qu'une convention, en ce sens qu'on aurait pu utiliser n'importe quel identificateur; pour le langage `self` n'a aucun sens particulier, ce n'est pas un mot cl\u00e9."]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["Ceci est \u00e0 mettre en contraste avec le choix fait dans d'autres langages, comme par exemple en C++ o\u00f9 l'instance peut dans certains cas \u00eatre r\u00e9f\u00e9renc\u00e9e par le mot-cl\u00e9 `this`, qui n'est pas mentionn\u00e9 dans la signature de la m\u00e9thode. En python, selon le manifeste, *explicit is better than implicit* et c'est pourquoi on mentionne l'objet dans la signature, sous le nom `self`."]}]