[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Utiliser python comme une calculette"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Lorsque vous d\u00e9marrez l'interpr\u00e8te python, vous disposez en fait d'une calculette; par exemple vous pouvez taper"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 3, "lines": ["20 * 60"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Les r\u00e8gles de \"priorit\u00e9\" entre les op\u00e9rateurs sont habituelles, les produits et divisions sont \u00e9valu\u00e9s en premier, ensuite les sommes et soustractions:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 5, "lines": [" 2 * 30 + 10 * 5"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["De mani\u00e8re g\u00e9n\u00e9rale, il est recommand\u00e9 de bien parenth\u00e9ser ses expressions. De plus, les parenth\u00e8ses facilitent la lecture d'expressions complexes. Par exemple, il vaut mieux \u00e9crire"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["(2 * 30) + (10 * 5)"]}, {"block": 8, "type": "markdown", "linesLength": 10, "startIndex": 8, "lines": ["Rappelez vous des op\u00e9rateurs suivants qui sont tr\u00e8s pratiques\n", "\n", "<table>\n", "<thead><tr><th>signe</th><th>op\u00e9ration</th></tr></thead>\n", "<tbody>\n", "<tr><td>`/`</td><td>quotient</td></tr>\n", "<tr><td>`%`</td><td>modulo</td></tr>\n", "<tr><td>`**`</td><td>puissance</td></tr>\n", "</tbody>\n", "</table>"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["48 / 5"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["48 % 5"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["2 ** 10"]}, {"block": 12, "type": "markdown", "linesLength": 2, "startIndex": 21, "lines": ["\n", "Vous pouvez facilement faire aussi des calculs sur les complexes; souvenez vous seulement que la constante complexe que nous notons en fran\u00e7ais `i` se note en python `j`, ce choix a \u00e9t\u00e9 fait par le BDFL - alias Guido van Rossum - pour des raisons de lisibilit\u00e9&nbsp;:"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["(2 + 3j) * 2.5j"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Aussi pour entrer ce nombre complexe `j` il faut toujours le faire pr\u00e9c\u00e9der d'un nombre, donc ne pas entrer simplement `j` (qui serait compris comme un nom de variable, nous allons voir \u00e7a tout de suite) mais plut\u00f4t `1j` ou encore `1.j`, comme ceci"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["1j * 1.j"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### Utiliser des variables"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Il peut \u00eatre utile de stocker un r\u00e9sultat qui sera utilis\u00e9 plus tard, ou de d\u00e9finir une valeur constante; pour cela on utilise tout simplement une affectation comme ceci:"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["largeur = 5"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Puis"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["largeur * 20"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["largeur * 10"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Pour les symboles math\u00e9matiques, on peut utiliser la m\u00eame technique"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 33, "lines": ["pi = 3.14159\n", "2 * pi * 10"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Ou encore plus simplement, utiliser les valeurs pr\u00e9d\u00e9finies par la librairie math\u00e9matique de python. En anticipant un peu sur la notion d'importation que nous approfondirons plus tard, on peut \u00e9crire:"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["from math import e, pi"]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 37, "lines": ["Et ainsi imprimer les racines troisi\u00e8mes de l'unit\u00e9 par la formule\n", "\n", "$r_n = e^{2i\\pi \\frac{n}{3}},$ pour $n\\in \\{0,1,2\\}$"]}, {"block": 27, "type": "code", "linesLength": 6, "startIndex": 40, "lines": ["n = 0\n", "print \"n=\", n, \"racine = \", e**((2*pi*1j*n)/3)\n", "n = 1\n", "print \"n=\", n, \"racine = \", e**((2*pi*1j*n)/3)\n", "n = 2\n", "print \"n=\", n, \"racine = \", e**((2*pi*1j*n)/3)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["**Remarque:** bien entendu il sera possible de faire ceci plus simplement lorsque nous aurons vu les boucles `for`."]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Attention aux types"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Ce qui change par rapport \u00e0 une calculatrice standard est le fait que les valeurs sont typ\u00e9es (essentiellement, entier ou flottant). Il est important de bien suivre mentalement le type de l'op\u00e9ration."]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["100 / 6"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Ici nous avions affaire \u00e0 deux entiers, la division `/` est alors une division *enti\u00e8re* (c'est-\u00e0-dire un quotient), alors que si l'une des valeurs est flottante comme ici"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["100. / 6"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["alors python va faire une \"vraie\" division et retourner un r\u00e9sultat flottant."]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["### Conversions"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["Comme on le voit, il peut \u00eatre n\u00e9cessaire de faire volontairement une conversion de type"]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 55, "lines": ["a = 100\n", "a / 6"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["Comme dans ce cas on ne peut pas ajouter '.' \u00e0 l'expression `a` pour la transformer en flottant, on peut faire dans ce cas"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["float(a) / 6"]}, {"block": 40, "type": "markdown", "linesLength": 15, "startIndex": 59, "lines": ["De mani\u00e8re plus g\u00e9n\u00e9rale, pour convertir un objet en un entier, un flottant, ou un string, on peut simplement appeler une fonction built-in qui porte le m\u00eame nom que le type cible:\n", "\n", "<table>\n", "<thead><tr><th>Type</th><th>Fonction</th></tr></thead>\n", "<tbody>\n", "<tr><td>Entier</td><td>`int`</td></tr>\n", "<tr><td>Flottant</td><td>`float`</td></tr>\n", "<tr><td>Complexe</td><td>`complex`</td></tr>\n", "<tr><td>Cha\u00eene</td><td>`str`</td></tr>\n", "</tbody>\n", "</table>\n", "\n", "Ainsi dans l'exemple pr\u00e9c\u00e9dent, `float(a)` repr\u00e9sente la conversion de `a` en flottant, soit `100.`\n", "\n", "On a illustr\u00e9 cette m\u00eame technique dans les exemples suivants:"]}, {"block": 41, "type": "code", "linesLength": 5, "startIndex": 74, "lines": ["# imaginons que l'utilisateur a entr\u00e9 un entier en tapant '100'\n", "chaine = '100'\n", "\n", "# on voudrait le mettre au carr\u00e9, mais ceci ne fonctionne pas:\n", "chaine**2"]}, {"block": 42, "type": "code", "linesLength": 9, "startIndex": 79, "lines": ["# pour pouvoir faire des calculs, \n", "# il nous faut d'abord en faire un entier\n", "entier = int(chaine)\n", "print 'entier=', entier, 'de type', type(entier)\n", "print \"au carr\u00e9\", entier**2\n", "\n", "# ou pour convertir la m\u00eame chaine en un nombre complexe\n", "complexe = complex(chaine)\n", "print \"converti en complexe\", complexe, \"de type\", type(complexe)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["### Entiers et bases"]}, {"block": 44, "type": "markdown", "linesLength": 3, "startIndex": 89, "lines": ["Les calculettes scientifiques permettent habituellement d'entrer les entiers dans d'autres bases que la base 10. \n", "\n", "En python, on peut aussi entrer un entier sous forme binaire comme ceci"]}, {"block": 45, "type": "code", "linesLength": 1, "startIndex": 92, "lines": ["deux_cents = 0b11001000 ; print deux_cents"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["Ou encore sous forme octale (en base 8) comme ceci"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["deux_cents = 0o310 ; print deux_cents"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 95, "lines": ["Ou enfin encore en hexadecimal (base 16) comme ceci"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["deux_cents = 0xc8 ; print deux_cents"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["Pour d'autres bases, on peut utiliser la fonction de conversion 'int' en lui passant un argument suppl\u00e9mentaire:"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["deux_cents = int('3020', 4) ; print deux_cents"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["### Fonctions math\u00e9matiques"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 100, "lines": ["python fournit naturellement un ensemble tr\u00e8s complet d'op\u00e9rateurs math\u00e9matiques pour les fonctions exponentielles, trigonom\u00e9triques et autres, mais leur utilisation ne nous est pas encore accessible \u00e0 ce stade et nous les verrons ult\u00e9rieurement."]}]