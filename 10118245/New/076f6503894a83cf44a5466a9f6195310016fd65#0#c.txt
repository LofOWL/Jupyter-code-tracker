[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Un peu de calcul sur les types"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### La fonction `type`"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Nous avons vu dans la vid\u00e9o que chaque objet poss\u00e8de un type. On peut tr\u00e8s simplement acc\u00e9der au type d'un objet en appelant une fonction *built-in*, c'est-\u00e0-dire pr\u00e9d\u00e9finie dans python, qui s'appelle, eh bien oui, `type`."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["On l'utilise tout simplement comme ceci"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["type(1)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["type('spam')"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Cette fonction est assez peu utilis\u00e9e par les programmeurs exp\u00e9riment\u00e9s, mais va nous \u00eatre utile \u00e0 bien comprendre le langage, notamment pour manipuler les valeurs num\u00e9riques."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### Types, variables et objects"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["On a vu \u00e9galement que le type est attach\u00e9 **\u00e0 l'objet** et non \u00e0 la variable."]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["x = 1\n", "type(x)"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 17, "lines": ["# la variable x peut r\u00e9f\u00e9rencer un objet de n'importe quel type\n", "\n", "x = [1, 2, 3]\n", "type(x)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["### La fonction `isinstance`"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Une autre fonction pr\u00e9d\u00e9finie, voisine de `type` mais plus utile dans la pratique, est la fonction `isinstance` qui permet de savoir si un objet est d'un type donn\u00e9. Par exemple"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["isinstance(23, int)"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["\u00c0 la vue de ce seul exemple, on pourrait penser que `isinstance` est presque identique \u00e0 `type`&nbsp;; en r\u00e9alit\u00e9 elle est un peu plus \u00e9labor\u00e9e, notamment pour la programmation objet et l'h\u00e9ritage, nous aurons l'occasion d'y revenir."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["On remarque ici en passant que la variable `int` est connue de python alors que nous ne l'avons pas d\u00e9finie. Il s'agit d'une variable pr\u00e9d\u00e9finie, qui d\u00e9signe le type des entiers, que nous \u00e9tudierons tr\u00e8s bient\u00f4t."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Pour conclure sur `isinstance`, cette fonction est utile en pratique pr\u00e9cis\u00e9ment parce que python est \u00e0 typage dynamique. Aussi il est souvent utile de s'assurer qu'une variable pass\u00e9e \u00e0 une fonction est du (ou des) type(s) attendu(s), puisque contrairement \u00e0 un langage typ\u00e9 statiquement comme C++, on n'a aucune garantie de ce genre \u00e0 l'ex\u00e9cution. \u00c0 nouveau, nous aurons l'occasion de revenir sur ce point."]}]