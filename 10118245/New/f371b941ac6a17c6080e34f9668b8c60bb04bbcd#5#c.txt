[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# S\u00e9quences"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Slicing"]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 8, "lines": ["Commen\u00e7ons par cr\u00e9er une cha\u00eene de caract\u00e8res. Ne vous inqui\u00e9tez pas si vous ne comprenez pas encore le code d'initialisation utilis\u00e9 ci-dessous.\n", "\n", "Pour les plus curieux, l'instruction `import`  permet de charger dans votre programme une bo\u00eete \u00e0 outils que l'on appelle un module. Python vient avec de nombreux modules qui forment la biblioth\u00e8que standard. Le plus difficile avec les modules de la biblioth\u00e8que standard est de savoir qu'ils existent. En effet, il y en a un grand nombre et bien souvent il existe un module pour faire ce que vous souhaitez.\n", "\n", "Ici en particulier nous utilisons le module `string`."]}, {"block": 5, "type": "code", "linesLength": 7, "startIndex": 13, "lines": ["# nous allons tirer profit ici d'une \n", "# constante d\u00e9finie dans le module string\n", "import string\n", "chaine = string.ascii_lowercase\n", "\n", "# et voici sa valeur\n", "print(chaine)"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Pour chacune des sous-cha\u00eenes ci-dessous, \u00e9crire une expression de slicing sur `chaine` qui renvoie la sous-cha\u00eene. La cellule de code doit retourner `True`."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Par exemple, pour obtenir \"def\"\u00a0:"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["chaine[3:6] == \"def\""]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["1) \u00c9crivez une slice pour obtenir \"vwx\" (n'h\u00e9sitez pas \u00e0 utiliser les indices n\u00e9gatifs)\u00a0:"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["chaine[ <votre_code> ] == \"vwx\""]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["2) Une slice pour obtenir \"wxyz\" (avec une seule constante)\u00a0:"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["chaine[ <votre_code> ] == \"wxyz\""]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["3) Une slice pour obtenir \"dfhjlnprtvxz\" (avec deux constantes)\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["chaine[ <votre_code> ] == \"dfhjlnprtvxz\""]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["4) Une slice pour obtenir \"xurolifc\" (avec deux constantes)\u00a0:"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["chaine[ <votre_code> ] == \"xurolifc\""]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["## Exercice - niveau interm\u00e9diaire"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["### Longueur"]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 33, "lines": ["# il vous faut \u00e9valuer cette cellule magique\n", "# pour charger l'exercice qui suit\n", "# et auto\u00e9valuer votre r\u00e9ponse\n", "from corrections.exo_inconnue import exo_inconnue"]}, {"block": 20, "type": "markdown", "linesLength": 4, "startIndex": 37, "lines": ["On vous donne une cha\u00eene `composite` dont on sait qu'elle a \u00e9t\u00e9 calcul\u00e9e \u00e0 partir de deux cha\u00eenes `inconnue` et `connue` comme ceci\u00a0:\n", "```python\n", "composite = connue + inconnue + connue\n", "```"]}, {"block": 21, "type": "markdown", "linesLength": 9, "startIndex": 41, "lines": ["On vous donne \u00e9galement la cha\u00eene `connue`. Imaginez par exemple que vous avez (ce ne sont pas les vraies valeurs)\u00a0:\n", "```python\n", "connue = '0bf1'\n", "composite = '0bf1a9730e150bf1'\n", "```\n", "alors, dans ce cas\u00a0:\n", "```python\n", "inconnue = 'a9730e15'\n", "```"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["L'exercice consiste \u00e0 \u00e9crire une fonction qui retourne la valeur de `inconnue` \u00e0 partir de celles de `composite` et `connue`. Vous pouvez admettre que `connue` n'est pas vide, c'est-\u00e0-dire qu'elle contient au moins un caract\u00e8re."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Vous pouvez utiliser du *slicing*, et la fonction `len()`, qui retourne la longueur d'une cha\u00eene\u00a0:"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["len('abcd')"]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 53, "lines": ["# \u00e0 vous de jouer\n", "def inconnue(composite, connue):\n", "    \"votre code\""]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["Une fois votre code \u00e9valu\u00e9, vous pouvez \u00e9valuer la cellule suivante pour v\u00e9rifier votre r\u00e9sultat."]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["# correction\n", "exo_inconnue.correction(inconnue)"]}, {"block": 28, "type": "markdown", "linesLength": 7, "startIndex": 59, "lines": ["Lorsque vous \u00e9valuez cette cellule, la correction vous montre\u00a0:\n", "\n", "* dans la premi\u00e8re colonne l'appel qui est fait \u00e0 votre fonction\u00a0;\n", "* dans la seconde colonne la valeur attendue pour `inconnue`\u00a0;\n", "* dans la troisi\u00e8me colonne ce que votre code a r\u00e9ellement calcul\u00e9.\n", "\n", "Si toutes les lignes sont **en vert** c'est que vous avez r\u00e9ussi cet exercice."]}, {"block": 29, "type": "markdown", "linesLength": 4, "startIndex": 66, "lines": ["Vous pouvez essayer autant de fois que vous voulez, mais il vous faut alors \u00e0 chaque it\u00e9ration\u00a0:\n", "\n", "* \u00e9valuer votre cellule-r\u00e9ponse (l\u00e0 o\u00f9 vous d\u00e9finissez la fonction `inconnue`)\u00a0;\n", "* et ensuite \u00e9valuer la cellule correction pour la mettre \u00e0 jour."]}]