[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les cha\u00eenes de caract\u00e8res"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Analyse et mise en forme"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["# Pour charger l'exercice\n", "from corrections.w2s8_strings import exo_libelle"]}, {"block": 5, "type": "markdown", "linesLength": 9, "startIndex": 6, "lines": ["Un fichier contient, dans chaque ligne, des informations (champs) s\u00e9par\u00e9es par des virgules. Les espaces et tabulations pr\u00e9sents dans la ligne ne sont pas significatifs et doivent \u00eatre ignor\u00e9s. \n", "\n", "Dans cet exercice de niveau basique, on suppose que chaque ligne a exactement 3 champs, qui repr\u00e9sentent respectivement le nom, le pr\u00e9nom, et le rang d'une personne dans un classement. Une fois les espaces et tabulations ignor\u00e9s, on ne fait pas de v\u00e9rification sur le contenu des 3 champs. \n", "\n", "On vous demande d'\u00e9crire la fonction `libelle`, qui sera appel\u00e9e pour chaque ligne du fichier. Cette fonction&nbsp;:\n", " * prend en argument une ligne (cha\u00eene de caract\u00e8res)\n", " * retourne une cha\u00eene de caract\u00e8res mise en forme (voir plus bas)\n", " * ou bien retourne None si la ligne n'a pas pu \u00eatre analys\u00e9e, parce qu'elle ne v\u00e9rifie pas les hypoth\u00e8ses ci-dessus (c'est notamment le cas si on ne trouve pas exactement les 3 champs)\n", " \n"]}, {"block": 6, "type": "markdown", "linesLength": 5, "startIndex": 15, "lines": [" La mise en forme consiste \u00e0 retourner \n", " \n", "    Nom.Prenom (message)\n", "     \n", " le *message* \u00e9tant lui-m\u00eame le *rang* mis en forme pour afficher '1er', '2nd' ou '*n*-`\u00e8me' selon le cas. Voici quelques exemples"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["# voici quelques exemples de ce qui est attendu\n", "exo_libelle.example()"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 22, "lines": ["# \u00e9crivez votre code ici\n", "def libelle(ligne):\n", "    \"<votre_code>\""]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# pour le v\u00e9rifier\n", "exo_libelle.correction(libelle)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["## Exercice - niveau interm\u00e9diaire"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["### Mise au carr\u00e9"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["# chargement de l'exercice\n", "from corrections.w2s8_strings import exo_carre"]}, {"block": 13, "type": "markdown", "linesLength": 4, "startIndex": 31, "lines": ["On vous demande \u00e0 pr\u00e9sent d'\u00e9crire une fonction dans le m\u00eame esprit que ci-dessus.\n", "Cette fois, chaque ligne contient, s\u00e9par\u00e9s par des point-virgules, une liste d'entiers, et on veut obtenir une nouvelle cha\u00eene avec les carr\u00e9s de ces entiers, s\u00e9par\u00e9s par des deux-points.\n", "\n", "\u00c0 nouveau les lignes peuvent \u00eatre remplies de mani\u00e8re approximative, avec des espaces, des tabulations, ou m\u00eame des points-virgules en trop, que ce soit au d\u00e9but, \u00e0 la fin, ou au milieu d'une ligne."]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 35, "lines": ["# exemples\n", "exo_carre.example()"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 37, "lines": ["# \u00e9crivez votre code ici\n", "def carre(ligne):\n", "    \"<votre_code>\""]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["# pour corriger\n", "exo_carre.correction(carre)"]}]