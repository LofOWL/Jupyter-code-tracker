[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Enregistrements et instances"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Un record impl\u00e9ment\u00e9 comme une instance de classe"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous allons reprendre ici la discussion commenc\u00e9e en semaine 3, o\u00f9 nous avions vu comment impl\u00e9menter un enregistrement (\u00e0 nouveau, un enregistrement est l'\u00e9quivalent, selon les langages, de *struct* ou *record*) comme un dictionnaire."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Notre exemple \u00e9tait celui des personnes, et nous avions alors \u00e9crit quelque chose comme"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Cette fois-ci nous allons impl\u00e9menter la m\u00eame abstraction, mais sous avec une classe `Personne` comme ceci"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Avant de d\u00e9tailler le code de cette classe, voyons comment on l'utiliserait :"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Le code de cette classe devrait \u00eatre limpide \u00e0 pr\u00e9sent, sauf peut-\u00eatre la derni\u00e8re ligne de `__repr__`. On utilise ici [la fonction *builtin* `vars`](https://docs.python.org/2/library/functions.html#vars) :"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Ce qui, combin\u00e9 avec un passage d'arguments avec la forme `**`, nous permet d'\u00e9viter la r\u00e9p\u00e9tition des arguments \u00e0 utiliser dans l'appel \u00e0 `format`."]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 9, "lines": ["Un dictionnaire pour indexer les enregistrements"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Nous pouvons appliquer exactement la m\u00eame technique d'indexation qu'avec les dictionnaires"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["De fa\u00e7on \u00e0 pouvoir facilement localiser une personne"]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Poursuivons l'analogie"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Pour marquer l'anniversaire d'une personne, nous pourrions faire"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Cela dit, pour rester en ligne avec l'id\u00e9e d'encapsulation telle que nous l'avons vue dans un compl\u00e9ment r\u00e9cemment, il serait de beaucoup pr\u00e9f\u00e9rable de fournir une m\u00e9thode `anniversaire` pour cela, de fa\u00e7on \u00e0 pouvoir faire quelque chose comme "]}, {"block": 15, "type": "raw", "linesLength": 2, "startIndex": 15, "lines": ["# attention cette cellule n'est pas \u00e9valuable\n", "pierre.anniversaire()"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Dans la pratique on d\u00e9finit presque toujours toutes les m\u00e9thodes en m\u00eame temps que la classe. Ce qui veut dire que l'on ajouterait tout simplement la m\u00e9thode `anniversaire` dans le code qui d\u00e9finit la classe ci-dessus."]}, {"block": 17, "type": "raw", "linesLength": 12, "startIndex": 18, "lines": ["# Cette cellule *n'est pas* \u00e9valuable\n", "# elle donne seulement un aper\u00e7u de comment\n", "# on aurait pu \u00e9crire la classe Personne\n", "# pour lui ajouter une m\u00e9thode 'anniversaire'\n", "class Personne:\n", "    \"\"\"Une personne poss\u00e8de un nom, un \u00e2ge et une adresse e-mail\"\"\"\n", "    \n", "    def __init__(self, nom, age, email):\n", "        ...\n", "\n", "    def anniversaire(self):\n", "        self.age += 1"]}, {"block": 18, "type": "heading", "linesLength": 1, "startIndex": 30, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Nous allons toutefois profiter de cet exemple pour montrer comment il est \u00e9galement possible d'ajouter cette m\u00e9thode *\u00e0 la vol\u00e9e*, en tirant profit du fait que **les m\u00e9thodes sont impl\u00e9ment\u00e9es comme des attributs de l'objet classe**."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Aussi on peut \u00e9tendre l'objet `classe` lui-m\u00eame dynamiquement comme ceci"]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 33, "lines": ["Ce code commence par d\u00e9finir une fonction un utilisant `def` et la signature de la m\u00e9thode. Comme cette m\u00e9thode ne prend pas d'argument, la fonction accepte un argument `self`; exactement comme si on avait d\u00e9fini la m\u00e9thode dans l'instruction `class`. \n", "\n", "Ensuite il suffit d'affecter \u00e0 **l'attribut `aniversaire`** de l'objet classe la fonction ainsi d\u00e9finie.\n", "\n", "Vous voyez que c'est tr\u00e8s simple, et \u00e0 pr\u00e9sent la classe a connaissance de cette m\u00e9thode exactement comme si on l'avait d\u00e9finie dans la clause `class`, comme le montre l'aide"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Et on peut \u00e0 pr\u00e9sent utiliser cette m\u00e9thode"]}]