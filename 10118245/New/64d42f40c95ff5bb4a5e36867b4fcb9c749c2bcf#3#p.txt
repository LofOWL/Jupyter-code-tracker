[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Un exemple de classes de la librairie standard"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Notez que ce compl\u00e9ment bienqu'un peu digressif par rapport au sujet principal qui est les classes et instances, a pour objectif de vous montrer l'int\u00e9r\u00eat de la programmation objet avec un module de la librairie standard."]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Le module `time`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Pour les acc\u00e8s \u00e0 l'horloge, python fournit un module `time` - tr\u00e8s ancien; il s'agit d'une interface de tr\u00e8s bas niveau avec l'OS, qui s'utilise comme ceci"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 10, "lines": ["import time\n", "\n", "# on obtient l'heure courante sous la forme d'un flottant\n", "# qui repr\u00e9sente le nombre de secondes depuis le 1er Janvier 1970\n", "t_now = time.time()\n", "t_now"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["# et pour calculer l'heure qu'il sera dans trois heures on fait\n", "t_later = t_now + 3 * 3600"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Nous sommes donc ici clairement dans une approche non orient\u00e9e objet; on manipule des types de base, ici le type flottant :"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["type(t_later)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Et comme on le voit, les calculs se font sous une forme pas tr\u00e8s lisible. Pour rendre ce nombre de secondes plus lisible, on utilise des conversions, pas vraiment explicites non plus; voici par exemple un appel \u00e0 `gmtime` qui convertit le flottant obtenu par la m\u00e9thode `time()` en heure UTC (`gm` est pour Greenwich Meridian) :"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["struct_later = time.gmtime(t_later)\n", "print(struct_later)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Et on met en forme ce r\u00e9sultat en utilisant des m\u00e9thodes comme, par exemple, `strftime()` pour afficher l'heure UTC dans 3 heures :"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["print(f'heure UTC dans trois heures {time.strftime(\"%Y-%m-%d at %H:%M\", struct_later)}')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["---"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### Le module datetime"]}, {"block": 16, "type": "markdown", "linesLength": 5, "startIndex": 27, "lines": ["Voyons \u00e0 pr\u00e9sent, par comparaison, comment ce genre de calculs se pr\u00e9sente lorsqu'on utilise la programmation par objets.\n", "\n", "Le [module `datetime`](https://docs.python.org/3/library/datetime.html) expose un certain nombre de classes, que nous illustrons bri\u00e8vement avec les classes `datetime` (qui mod\u00e9lise la date et l'heure d'un instant) et `timedelta` (qui mod\u00e9lise une dur\u00e9e).\n", "\n", "La premi\u00e8re remarque qu'on peut faire, c'est qu'avec le module `time` on manipulait un flottant pour repr\u00e9senter ces deux sortes d'objets (instant et dur\u00e9e); avec deux classes diff\u00e9rentes notre code va \u00eatre plus clair quant \u00e0 ce qui est r\u00e9ellement repr\u00e9sent\u00e9."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Le code ci-dessus s'\u00e9crirait alors, en utilisant le module `datetime`:"]}, {"block": 18, "type": "code", "linesLength": 4, "startIndex": 33, "lines": ["from datetime import datetime, timedelta\n", "\n", "dt_now = datetime.now()\n", "dt_later = dt_now + timedelta(hours=3)"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 37, "lines": ["Vous remarquez que c'est d\u00e9j\u00e0 un peu plus expressif.\n", "\n", "Voyez aussi qu'on a d\u00e9j\u00e0 moins besoin de s'escrimer pour en avoir un aper\u00e7u lisible"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["# on peut imprimer simplement un objet date_time\n", "print(f'maintenant {dt_now}')"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["# et si on veut un autre format, on peut toujours appeler strftime\n", "print(f'dans trois heures {dt_later.strftime(\"%Y-%m-%d at %H:%M\")}')"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 44, "lines": ["# mais ce n'est m\u00eame pas n\u00e9cessaire, on peut passer le format directement\n", "print(f'dans trois heures {dt_later:%Y-%m-%d at %H:%M\"}')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Je vous renvoie \u00e0 la documentation du module, et [notamment  ici](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior), pour le d\u00e9tail des options de formatage disponibles."]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Conclusion"]}, {"block": 25, "type": "markdown", "linesLength": 5, "startIndex": 48, "lines": ["Une partie des inconv\u00e9nients du module `time` vient certainement du parti-pris de l'efficacit\u00e9. De plus, c'est un module tr\u00e8s ancien, mais auquel on ne peut gu\u00e8re toucher pour des raisons de compatibilit\u00e9 ascendante.\n", "\n", "Par contre, le module `datetime`, tout en vous procurant un premier exemple de classes expos\u00e9es par la librairie standard, vous montre certains des avantages de la programmation orient\u00e9e objet en g\u00e9n\u00e9ral, et des classes de python en particulier.\n", "\n", "Si vous devez manipuler des dates ou des heures, le module `datetime` constitue tr\u00e8s certainement un bon candidat; voyez la [documentation compl\u00e8te du module](https://docs.python.org/3/library/datetime.html) pour plus de pr\u00e9cisions sur ses possibilit\u00e9s."]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["### Fuseaux horaires et temps local"]}, {"block": 28, "type": "markdown", "linesLength": 5, "startIndex": 55, "lines": ["Le temps nous manque pour traiter ce sujet dans toute sa profondeur.\n", "\n", "En substance, c'est un sujet assez voisin de celui des accents, en ce sens que lors d'\u00e9changes d'informations de type *timestamp* entre deux ordinateurs, il faut \u00e9changer d'une part une valeur (l'heure et la date), et d'autre part le r\u00e9f\u00e9rentiel (s'agit-il de temps UTC, ou bien de l'heure dans un fuseau horaire, et si oui lequel).\n", "\n", "La complexit\u00e9 est tout de m\u00eame moindre que dans le cas des accents; on s'en sort en g\u00e9n\u00e9ral en convenant d'\u00e9changer syst\u00e9matiquement des heures UTC. Par contre, il existe une r\u00e9elle diversit\u00e9 quant au format utilis\u00e9 pour \u00e9changer ce type d'information, et cela reste une source d'erreurs assez fr\u00e9quente."]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["### Classes et *marshalling*"]}, {"block": 31, "type": "markdown", "linesLength": 9, "startIndex": 62, "lines": ["Ceci nous procure une transition pour un sujet beaucoup plus g\u00e9n\u00e9ral.\n", "\n", "Nous avons \u00e9voqu\u00e9 en semaine 4 les formats comme JSON pour \u00e9changer les donn\u00e9es entre applications, au travers de fichiers ou d'un r\u00e9seau.\n", "\n", "On a vu, par exemple, que JSON est un format \"proche des langages\" en ce sens qu'il est capable d'\u00e9changer des objets de base comme des listes ou des dictionnaires entre plusieurs langages comme, par exemple, JavaScript, python ou ruby. En XML, on a davantage de flexibilit\u00e9 puisqu'on peut d\u00e9finir une syntaxe sur les donn\u00e9es \u00e9chang\u00e9es.\n", "\n", "Mais il faut \u00eatre bien lucide sur le fait que, aussi bien pour JSON que pour XML, il n'est **pas  possible** d'\u00e9changer entre applications des **objets** en tant que tel. Ce que nous voulons dire, c'est que ces technologies de *marshalling* prennent bien en charge le *contenu* en termes de donn\u00e9es, mais pas les informations de type, et *a fortiori* pas non plus le code qui appartient \u00e0 la classe.\n", "\n", "Il est important d'\u00eatre conscient de cette limitation lorsqu'on fait des choix de conception, notamment lorsqu'on est amen\u00e9 \u00e0 choisir entre classe et dictionnaire pour l'impl\u00e9mentation de telle ou telle abstraction."]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 71, "lines": ["Voyons cela sur un exemple inspir\u00e9 de notre fichier de donn\u00e9es li\u00e9es au trafic maritime. En version simplifi\u00e9e, un bateau est d\u00e9crit par trois valeurs, son identit\u00e9 (`id`), son nom et son pays d'attachement. \n", "\n", "Nous allons voir comment on peut \u00e9changer ces informations entre, disons, deux programmes dont l'un est en python, via un support r\u00e9seau ou disque."]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["Si on choisit de simplement manipuler un dictionnaire standard:"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["bateau1 = {'name' : \"Toccata\", 'id' : 1000, 'country' : \"France\"}"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["alors on peut utiliser tels quels les m\u00e9canismes d'encodage et d\u00e9codage de, disons, JSON. En effet c'est exactement ce genre d'informations que sait g\u00e9rer la couche JSON."]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 77, "lines": ["Si au contraire on choisit de manipuler les donn\u00e9es sous forme d'une classe on pourrait avoir envie d'\u00e9crire quelque chose comme ceci:"]}, {"block": 37, "type": "code", "linesLength": 7, "startIndex": 78, "lines": ["class Bateau:\n", "    def __init__(self, id, name, country):\n", "        self.id = id\n", "        self.name = name\n", "        self.country = country\n", "        \n", "bateau2 = Bateau(1000, \"Toccata\", \"FRA\")"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["Maintenant, si vous avez besoin d'\u00e9changer cet objet avec le reste du monde, en utilisant par exemple JSON, tout ce que vous allez pouvoir faire passer par ce m\u00e9dium, c'est la valeur des trois champs, dans un dictionnaire. Vous pouvez facilement obtenir le dictionnaire en question pour le passer \u00e0 la couche d'encodage:"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 86, "lines": ["vars(bateau2)"]}, {"block": 40, "type": "markdown", "linesLength": 3, "startIndex": 87, "lines": ["Mais \u00e0 l'autre bout de la communication il va vous falloir:\n", " * d\u00e9terminer d'une mani\u00e8re ou d'une autre que les donn\u00e9es \u00e9chang\u00e9es sont en rapport avec la classe `Bateau`,\n", " * et construire vous m\u00eame un objet de cette classe, par exemple avec un code comme:"]}, {"block": 41, "type": "code", "linesLength": 13, "startIndex": 90, "lines": ["# du cot\u00e9 du r\u00e9cepteur de la donn\u00e9e\n", "class Bateau:\n", "    def __init__(self, *args):\n", "        if len(args) == 1 and isinstance(args[0], dict):\n", "            self.__dict__ = args[0]\n", "        elif len(args) == 3:\n", "            id, name, country = args\n", "            self.id = id\n", "            self.name = name\n", "            self.country = country\n", "\n", "bateau3 = Bateau({'id': 1000, 'name': 'Leon', 'country': 'France'})\n", "bateau4 = Bateau(1001, 'Maluba', 'SUI' )"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 103, "lines": ["### Conclusion"]}, {"block": 43, "type": "markdown", "linesLength": 3, "startIndex": 104, "lines": ["Pour reformuler ce dernier point, il n'y a pas en python l'\u00e9quivalent de [jmi (Java Metadata Interface)](https://en.wikipedia.org/wiki/Java_Metadata_Interface) int\u00e9gr\u00e9 \u00e0 la distribution standard. \n", "\n", "De plus on peut \u00e9crire du code en dehors des classes, et on n'est pas forc\u00e9ment oblig\u00e9 d'\u00e9crire une classe pour tout - \u00e0 l'inverse ici encore de Java. Chaque situation doit \u00eatre jug\u00e9e dans son contexte naturellement, mais, de mani\u00e8re g\u00e9n\u00e9rale, la classe n'est pas la solution universelle; il peut y avoir des m\u00e9rites dans le fait de manipuler certaines donn\u00e9es sous une forme all\u00e9g\u00e9e comme un type natif."]}]