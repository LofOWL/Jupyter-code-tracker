[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["Je simule un exercice d\u00e9bile, on demande aux \u00e9tudiants d'\u00e9crire une fonction\n", "\n", "$ curve (a,b) \\Longrightarrow a^2 + 3ab + 12 $"]}, {"block": 1, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["L'\u00e9tudiant est invit\u00e9 \u00e0 \u00e9crire son code dans la fonction `curve`;\n", "\n", "On lui propose en arrivant une cellule vide comme ceci"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Il la modifie, imaginons que \u00e7a donne cela"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Et voici la cellule pour corriger "]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["On peut aussi montrer d'abord un exemple"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["******"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["On peut affiner pas mal de trucs, par exemple la pr\u00e9sentation de la premi\u00e8re colonne avec `render_name=True`\n"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["*********"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Voir le fichier `ww_function.py` voir voir comment la correction est \u00e9crite"]}, {"block": 9, "type": "markdown", "linesLength": 4, "startIndex": 13, "lines": ["Remarquez \n", "Les lignes depuis `# @BEG@ 0 0 curve` \u00e0 `# @END@` servent \u00e0 l'outil qui extrait les corrig\u00e9s. \n", "\n", "Voir `tools/corriges.py`\n"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["******"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 18, "lines": ["rawnbconvert"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Voici \u00e0 pr\u00e9sent une section sur le rendu des cellules de type rawnbconvert. Au d\u00e9but j'ai beaucoup utilis\u00e9 \u00e7a pour les indications de texte sur une ou plusieurs lignes s\u00e9par\u00e9es, car le rendu sous le notebook \u00e9tait sympa. Mais \u00e0 l'usage ce type de cellules est tr\u00e8s p\u00e9nible. Notamment le jour o\u00f9 on a voulu publier les notebooks au format PDF \u00e0 l'intention des \u00e9tudiants qui ne pouvaient pas utiliser les notebooks en ligne. "]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["Aussi dans un deuxi\u00e8me temps j'ai compl\u00e8tement enlev\u00e9 toute utilisation de `rawnbconvert` et je les ai remplac\u00e9es par du markdown en mode *code*, ce qui donne avec des backquotes `par exemple ceci`, ou encore \n", "\n", "    dans un bloc \u00e0 part indent\u00e9 avec 4 espaces"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Pour retrouver le m\u00eame rendu html qu'avec rawnbconvert j'ai simplement eu besoin d'\u00e9crire un tout petit css `custom.css` qui es trouve sous git dans le r\u00e9pertoire `html/custom.css`"]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 24, "lines": ["Si on adopte cette convention, on peut alors facilement g\u00e9n\u00e9rer pour chaque notebook un html qui peut \u00eatre lu localement (sans possibilit\u00e9 d'\u00e9valuation naturellement) comme ceci\n", "\n", "    ipython nbconvert --to html foo.ipynb\n", "\n", "Il faut juste penser \u00e0 publier aussi `custom.css`. "]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["******"]}]