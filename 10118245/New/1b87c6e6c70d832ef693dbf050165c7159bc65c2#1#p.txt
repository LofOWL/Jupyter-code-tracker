[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Dictionnaires"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Cr\u00e9ation en extension"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["On l'a vu, la m\u00e9thode la plus directe pour cr\u00e9er un dictionnaire est en extension comme ceci"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["annuaire = { 'marc': 35, 'alice': 30, 'eric': 38 }\n", "print annuaire"]}, {"block": 5, "type": "heading", "linesLength": 1, "startIndex": 6, "lines": ["Cr\u00e9ation -- la fonction dict"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Comme pour les fonctions `int` ou `list`, la fonction `dict` est une fonction de construction de dictionnaire - on dit un constructeur - dont on a aussi vu dans la vid\u00e9o l'usage habituel \u00e0 base d'une liste de tuples (`cl\u00e9`, `valeur`)"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["annuaire = dict ( [ ('marc', 35), ('alice', 30), ('eric', 38) ] )\n", "print annuaire"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Remarquons qu'on peut aussi utiliser cette autre forme d'appel \u00e0 `dict` pour un r\u00e9sultat \u00e9quivalent"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["annuaire = dict ( marc=35, alice=30, eric=38)\n", "print annuaire"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Remarquez ci-dessus l'absence de quotes autour des cl\u00e9s comme `marc`. Il s'agit d'un cas particulier de passage d'arguments que nous expliciterons plus longuement en fin de semaine 4."]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["Acc\u00e8s atomique"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Pour acc\u00e9der \u00e0 la valeur associ\u00e9e \u00e0 une cl\u00e9, on utilise la notation \u00e0 base de crochets `[]`"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["print 'la valeur pour marc est', annuaire['marc']"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Cette forme d'acc\u00e8s ne fonctionne que si la cl\u00e9 est effectivement pr\u00e9sente dans le dictionnaire. Dans le cas contraire une exception 'KeyError' est lev\u00e9e. Si vous n'\u00eates pas s\u00fbr si la cl\u00e9 est pr\u00e9sente vous pouvez utiliser `get` qui accepte une valeur par d\u00e9faut"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["print 'valeur pour marc',annuaire.get('marc',0)\n", "print 'valeur pour inconnu',annuaire.get('inconnu',0)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Le dictionnaire est un type **mutable**, aussi on peut **modifier la valeur** d'une cl\u00e9"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["annuaire ['eric'] = 39\n", "print 'annuaire'"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Ou encore, exactement de la m\u00eame fa\u00e7on, **ajouter une entr\u00e9e**"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["annuaire ['bob'] = 42\n", "print annuaire"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Enfin pour **d\u00e9truire une entr\u00e9e**, on peut utiliser l'instruction `del` comme ceci"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["del annuaire['marc']\n", "print annuaire"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Pour savoir si une cl\u00e9 est pr\u00e9sente ou non, il est conseill\u00e9 d'utiliser l'op\u00e9rateur d'appartenance `in` comme ceci"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["print 'john' in annuaire"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Notez qu'avec des versions plus anciennes de python, vous pourrez trouver aussi du code qui utiliser la m\u00e9thode `has_key` qui n'est plus recommand\u00e9e"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 32, "lines": ["# forme obsolete\n", "annuaire.has_key('john')"]}, {"block": 26, "type": "heading", "linesLength": 1, "startIndex": 34, "lines": ["Acc\u00e8s \u00e0 toutes les entr\u00e9es"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["La m\u00e9thode la plus fr\u00e9quente pour \"balayer\" tout un dictionnaire est \u00e0 base de la m\u00e9thode `iteritems`; voici par exemple comment on pourrait afficher le contenu "]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 36, "lines": ["for nom,age in annuaire.iteritems():\n", "    print \"{}, age {}\".format(nom,age)"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["On remarque d'abord que les entr\u00e9es sont list\u00e9es dans le d\u00e9sordre; ceci est d\u00fb \u00e0 l'action de la fonction de hachage, que nous avons vue dans la vid\u00e9o pr\u00e9c\u00e9dente."]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["On remarque aussi que le nom de la m\u00e9thode est un peu \u00e9trange. En fait, il existe aussi une m\u00e9thode `items` qui remplit le m\u00eame r\u00f4le, et dont le nom est plus simple \u00e0 retenir. Cependant, nous vous conseillons d'utiliser syst\u00e9matiquement la m\u00e9thode `iteritems` qui, \u00e9tant impl\u00e9ment\u00e9e comme un it\u00e9rateur et non comme une liste, est pr\u00e9f\u00e9rable d\u00e8s que la taille du dictionnaire devient importante."]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Nous reviendrons sur la notion d'it\u00e9rateurs en semaine 3, mais voici un premier aper\u00e7u de la diff\u00e9rence entre ces deux m\u00e9thodes"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["print annuaire.items()"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["print annuaire.iteritems()"]}, {"block": 34, "type": "markdown", "linesLength": 3, "startIndex": 43, "lines": ["Comme vous l'avez peut-\u00eatre devin\u00e9, la diff\u00e9rence principale entre ces deux approches est que `items` construit **vraiment** un objet liste (qui peut \u00eatre tr\u00e8s grosse, et donc prendre de la place, et du temps \u00e0 calculer), alors que l'it\u00e9rateur rendu par `iteritems` est de taille constante, et se trouve construit tr\u00e8s rapidement.\n", "\n", "\u00c0 nouveau ce concept sera approfondi en semaine 3, mais si vous ne devez retenir qu'une seule m\u00e9thode pour \"balayer\" un dictionnaire, retenez **`iteritems`**"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["On peut obtenir la liste des cl\u00e9s et des valeurs avec"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 47, "lines": ["# utiliser de pr\u00e9f\u00e9rence ceci dans un \"for\"\n", "print 'cl\u00e9s', annuaire.iterkeys()\n", "print 'valeurs',annuaire.itervalues()"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["qui sont comme iteritems la version \"it\u00e9rateur\" de `keys` et `values`"]}, {"block": 38, "type": "code", "linesLength": 3, "startIndex": 51, "lines": ["# utiliser ceci pour inspecter un dictionnaire dans un terminal\n", "print 'cl\u00e9s', annuaire.keys()\n", "print 'valeurs',annuaire.values()"]}, {"block": 39, "type": "heading", "linesLength": 1, "startIndex": 54, "lines": ["Autres m\u00e9thodes"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["On peut comme d'habitude obtenir la taille d'un dictionnaire avec la fonction `len`"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["print '{} entr\u00e9es dans annuaire'.format(len(annuaire))"]}, {"block": 42, "type": "markdown", "linesLength": 3, "startIndex": 57, "lines": ["Pour une liste exhaustive reportez-vous \u00e0 la page de la documentation python ici\n", "\n", "https://docs.python.org/2/library/stdtypes.html#mapping-types-dict"]}]