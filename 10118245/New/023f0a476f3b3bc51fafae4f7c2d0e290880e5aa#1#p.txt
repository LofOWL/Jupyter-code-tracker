[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["La suite de Fibonacci"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Voici un premier exemple de code que vous pouvez utiliser dans ce notebook, mais aussi t\u00e9l\u00e9charger sur votre ordinateur en utilisant le menu *\"File -> Download as -> python\"*, pour l'ex\u00e9cuter gr\u00e2ce \u00e0 IDLE ou `python`."]}, {"block": 3, "type": "markdown", "linesLength": 19, "startIndex": 3, "lines": ["Le but de ce programme est de calculer la fonction de Fibonacci, qui comme vous vous en souvenez s\u00fbrement est  d\u00e9finie comme\n", "\n", "$ u_0 = 1 $\n", "\n", "$ u_1 = 1 $\n", "\n", "$ u_{n+2} = u_{n+1} + u_{n} $\n", "\n", "Ce qui donne pour les premi\u00e8res valeurs\n", "\n", "<table>\n", "<thead><tr><th>n</th><td>fibonacci(n)</td></tr></thead>\n", "<tr><td>0</td><td>1</td></tr>\n", "<tr><td>1</td><td>1</td></tr>\n", "<tr><td>2</td><td>2</td></tr>\n", "<tr><td>3</td><td>3</td></tr>\n", "<tr><td>4</td><td>5</td></tr>\n", "<tr><td>5</td><td>8</td></tr>\n", "</table>\n"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["On commence par d\u00e9finir la fonction `fibonacci` comme suit. Naturellement vous n'avez pas encore tout le bagage pour lire ce code, ne vous inqui\u00e9tez pas nous allons vous expliquer tout \u00e7a dans les prochaines semaines."]}, {"block": 5, "type": "code", "linesLength": 13, "startIndex": 23, "lines": ["def fibonacci (n):\n", "    \"retourne le nombre de fibonacci pour l'entier n\"\n", "    # pour les petites valeurs de n il n'y a rien a calculer\n", "    if n <= 1 : \n", "        return 1\n", "    # sinon on initialise f1 n-1 et f2 pour n-2\n", "    f2, f1 = 1, 1\n", "    # et on iterere n-1 fois pour additionner\n", "    for i in range (2,n+1):\n", "        f2, f1 = f1, f1+f2\n", "#        print i, f2, f1\n", "    # le r\u00e9sultat est dans f1\n", "    return f1"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Pour en faire un programme utilisable on va demander \u00e0 l'utilisateur de rentrer un nombre; il faut le convertir en entier car `raw_input`renvoie une cha\u00eene de caract\u00e8res"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["entier = int ( raw_input (\"Entrer un entier \"))"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["On imprime le r\u00e9sultat"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["print \"fibonacci({}) = {}\".format(entier, fibonacci (entier))"]}, {"block": 10, "type": "heading", "linesLength": 1, "startIndex": 40, "lines": ["Exercice"]}, {"block": 11, "type": "markdown", "linesLength": 9, "startIndex": 41, "lines": ["Vous pouvez donc \u00e0 pr\u00e9sent\n", " * ex\u00e9cuter le code dans ce notebook\n", " * t\u00e9l\u00e9charger ce code sur votre disque comme un fichier `fibonacci_prompt.py`\n", " * l'ex\u00e9cuter sous idle\n", " * le modifier, par exemple pour afficher les r\u00e9sultats interm\u00e9diaires\n", " * l'ex\u00e9cuter avec simplement python comme ceci\n", " \n", "     `$ python fibonacci_prompt.py`\n", "     "]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Pour ne pas alourdir le code vous verrez que ce programme se comporte mal si vous n'entrez pas un entier positif"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Nous allons voir tout de suite une version l\u00e9g\u00e8rement diff\u00e9rente qui vous permet de sp\u00e9cifier la valeur d'entr\u00e9e sur la ligne de commande"]}]