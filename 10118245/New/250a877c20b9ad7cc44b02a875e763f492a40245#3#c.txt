[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Exercices sur les boucles for"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Tri de plusieurs listes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["\u00c9crivez une fontion qui accepte en argument une liste de listes, et qui retourne la m\u00eame liste mais avec toutes les sous-listes tri\u00e9es."]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Vous pouvez la tester en v\u00e9rifiant que ceci renvoie True"]}, {"block": 4, "type": "heading", "linesLength": 1, "startIndex": 4, "lines": ["Tri de plusieurs listes, dans des directions diff\u00e9rentes"]}, {"block": 5, "type": "markdown", "linesLength": 5, "startIndex": 5, "lines": ["Modifiez votre code pour qu'il accepte cette fois deux arguments, tous les deux des listes, que l'on suppose de tailles \u00e9gales. \n", "\n", "Comme tout \u00e0 l'heure le premier argument est une liste de listes \u00e0 trier.\n", "\n", "\u00c0 pr\u00e9sent le second argument est une liste de bool\u00e9ens, qui indiquent l'ordre dans lequel on veut trier la liste d'entr\u00e8e de m\u00eame rang. True signifie un tri descendant, False un tri ascendant"]}, {"block": 6, "type": "raw", "linesLength": 4, "startIndex": 10, "lines": ["Pour \u00eatre un peu plus clair, on s'attend \u00e0 ce que\n", "multi_tri_reverse ( [ [1,2], [3,4] ], [ True, False] )\n", "renvoie\n", "[[2, 1], [3, 4]]"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["\u00c0 nouveau vous pouvez la tester ici (doit afficher True)"]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 15, "lines": ["Produit scalaire"]}, {"block": 9, "type": "markdown", "linesLength": 7, "startIndex": 16, "lines": ["On veut \u00e9crire une fonction qui retourne le produit scalaire de deux vecteurs. Pour ceci on va mat\u00e9rialiser les deux vecteurs en entr\u00e9e par deux listes que l'on suppose de m\u00eame taille. Cela est tout \u00e0 fait possible avec le bagage que nous avons appris jusqu'ici - bien que nous verrons plus tard d'autres techniques pour faire ceci de mani\u00e8re plus \u00e9l\u00e9gante.\n", "\n", "On rappelle que le produit de X et Y vaut\n", "\n", "$\\sum_{i} X_i * Y_i$\n", "\n", "Vous devez donc \u00e9crire"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Pour v\u00e9rifier (ne doit rien afficher)"]}]