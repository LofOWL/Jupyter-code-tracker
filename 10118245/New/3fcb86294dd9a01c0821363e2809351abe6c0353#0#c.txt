[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["R\u00e9capitulatif sur `import`"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Nous allons r\u00e9capituler les diff\u00e9rentes formes d'importation, et introduire la clause `import *` - et voir pourquoi il est d\u00e9conseill\u00e9 de l'utiliser."]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Importer tout un module"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["L'import le plus simple consiste donc \u00e0 uniquement mentionner le nom du module"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 5, "lines": ["import un_deux"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Ce module se contente de d\u00e9finir deux fonctions de noms `un` et `deux`. Une fois l'import r\u00e9alis\u00e9 de cette fa\u00e7on on peut acc\u00e9der au contenu du module en utilisant un nom de variable complet:"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 7, "lines": ["print un_deux.un\n", "\n", "un_deux.un()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Mais bien s\u00fbr on n'a pas de cette fa\u00e7on d\u00e9fini de nouvelle variable `un`; la seule nouvelle variable dans la port\u00e9e courante est donc `un_deux`"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["# dans le scope courant on peut acc\u00e9der au module lui-m\u00eame\n", "print un_deux"]}, {"block": 10, "type": "code", "linesLength": 5, "startIndex": 13, "lines": ["# mais pas \u00e0 la variable `un`\n", "try:\n", "    print un\n", "except NameError: \n", "    print \"La variable 'un' n'est pas d\u00e9finie\"\n"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 18, "lines": ["Importer une variable sp\u00e9cifique d'un module"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["On peut \u00e9galement importer un ou plusieurs symboles sp\u00e9cifiques d'un module en faisant maintenant (avec un nouveau module du m\u00eame tonneau)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["from un_deux_trois import un, deux"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["\u00c0 pr\u00e9sent nous avons deux nouvelles variables dans la port\u00e9e locale"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["un()\n", "deux()"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Mais le module lui m\u00eame n'est pas accessible"]}, {"block": 17, "type": "code", "linesLength": 4, "startIndex": 25, "lines": ["try:\n", "    print un_deux_trois\n", "except NameError:\n", "    print \"La variable 'un_deux_trois' n'est pas d\u00e9finie\""]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Il est important de voir que la variable locale ainsi cr\u00e9\u00e9e, un peu comme dans le cas d'un appel de fonction, est une **nouvelle variable** qui est initialis\u00e9e avec l'objet du module. Ainsi si on importe le module **et** une variable du module comme ceci"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["import un_deux_trois"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["Nous avons maintenant **deux variables diff\u00e9rentes** qui d\u00e9signent la fonction `un` dans le module"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 32, "lines": ["print un_deux_trois.un\n", "print un"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["En on peut modifier l'une **sans affecter** l'autre"]}, {"block": 23, "type": "code", "linesLength": 4, "startIndex": 35, "lines": ["# les deux variables sont diff\u00e9rentes, un n'est pas un 'alias' vers un_deux_trois.un\n", "un = 1\n", "print un_deux_trois.un\n", "print un"]}, {"block": 24, "type": "heading", "linesLength": 1, "startIndex": 39, "lines": ["`import *`"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["La derni\u00e8re forme d'`import` consiste \u00e0 importer toutes les variables d'un module comme ceci"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["from un_deux_trois_quatre import *"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Cette forme, pratique en apparence, va donc cr\u00e9er dans le scope courant les variables"]}, {"block": 28, "type": "code", "linesLength": 4, "startIndex": 43, "lines": ["un()\n", "deux()\n", "trois()\n", "quatre()"]}, {"block": 29, "type": "heading", "linesLength": 1, "startIndex": 47, "lines": ["Quand utiliser telle ou telle forme"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Les deux premi\u00e8res formes - import de tout un module ou de variables sp\u00e9cifiques - peuvent \u00eatre utilis\u00e9es indiff\u00e9remment; souvent lorsqu'une variable est utilis\u00e9e tr\u00e8s souvent dans le code on pourra pr\u00e9f\u00e9rer la deuxi\u00e8me forme pour raccourcir le code. "]}, {"block": 31, "type": "markdown", "linesLength": 5, "startIndex": 49, "lines": ["\u00c0 cet \u00e9gard, citons des variantes de ces deux formes qui permettent d'utiliser des noms plus courts. Vous trouverez par exemple tr\u00e8s souvent\n", "\n", "    import numpy as np\n", "    \n", "qui permet d'importer le module numpy mais de l'utiliser sous un nom plus court - car avec numpy on ne cesse d'utiliser des symboles dans le module."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["**Avertissement:** par contre nous vous recommandons de **ne pas utiliser la derni\u00e8re forme `import *`** - sauf cas tr\u00e8s particuliers, car cela peut gravement nuire \u00e0 la lisibilit\u00e9 de votre code."]}, {"block": 33, "type": "markdown", "linesLength": 10, "startIndex": 55, "lines": ["python est un langage \u00e0 liaison statique; cela signifie que lorsque vous concentrez votre attention sur un (votre) module, et que vous voyez une r\u00e9f\u00e9rence en lecture \u00e0 un variable `spam` disons \u00e0 la ligne 201, vous devez forc\u00e9ment trouver dans les deux cents premi\u00e8res lignes quelque chose comme une d\u00e9claration de `spam`, qui vous indique en gros d'o\u00f9 elle vient.\n", "\n", "`import *` est une construction qui casse cette bonne propri\u00e9t\u00e9 (pour \u00eatre tout \u00e0 fait exhaustif, cette bonne propri\u00e9t\u00e9 n'est pas non plus remplie avec les fonctions *built-in* comme `len`, mais il faut vivre avec...) \n", "\n", "Mais le point important ici est que si dans un module vous faites plusieurs `import *` \n", "\n", "    from django.db import *\n", "    from django.conf.urls import *\n", "    \n", "alors lorsque vous voyez une variable `patterns` vous n'avez plus aucune id\u00e9e de quel module elle provient, sauf \u00e0 aller lire le code correspondant...\n"]}, {"block": 34, "type": "heading", "linesLength": 1, "startIndex": 65, "lines": ["Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 35, "type": "markdown", "linesLength": 4, "startIndex": 66, "lines": ["\u00c9tant donn\u00e9 la fa\u00e7on dont est con\u00e7ue l'instruction `import`, on rencontre une limitation lorsqu'on veut, par exemple, **calculer le nom d'un module** avant de l'importer.\n", "\n", "Si vous \u00eates dans ce genre de situation, reportez-vous au module [`importlib`](https://docs.python.org/2/library/importlib.html)\n", "et notamment sa fonction `import_module` qui, cette fois, accepte en argument une cha\u00eene."]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["Voici une illustration dans un cas simple. Nous allons importer le module `modtools` (qui fait partie de ce MOOC) de deux fa\u00e7ons diff\u00e9rentes et montrer que le r\u00e9sultat est le m\u00eame:"]}, {"block": 37, "type": "code", "linesLength": 9, "startIndex": 71, "lines": ["# on importe la fonction 'import_module'du module 'importlib'\n", "from importlib import import_module\n", "imported_modtools = import_module('mod' + 'tools')\n", "\n", "# on peut aussi importer modtools \"normalement\"\n", "import modtools\n", "\n", "# les deux objets sont identiques\n", "imported_modtools == modtools"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 80, "lines": ["Il est pr\u00e9f\u00e9rable d'utiliser cette fonction plut\u00f4t que la fonction *built-in* `__import__` dont l'usage est r\u00e9serv\u00e9 (mais qui jusqu`\u00e0 2.6 \u00e9tait le seul moyen de faire une importation de mani\u00e8re programmative)."]}]