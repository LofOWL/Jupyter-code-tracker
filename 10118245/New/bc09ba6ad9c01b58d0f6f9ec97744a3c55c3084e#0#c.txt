[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Utiliser python comme une calculette"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["Lorsque vous d\u00e9marrez l'interpr\u00e9te python, vous disposez en fait d'une calculette; par exemple vous pouvez taper"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Les r\u00e8gles de \"priorit\u00e9\" entre les op\u00e9rateurs sont habituelles, les produits et division sont \u00e9valu\u00e9es en premier, ensuite les sommes et soustractions:"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["De mani\u00e8re g\u00e9n\u00e9rale, en cas de doute il est recommand\u00e9 de bien parenth\u00e9ser ses expressions, et donc d'\u00e9crire plut\u00f4t"]}, {"block": 4, "type": "markdown", "linesLength": 6, "startIndex": 4, "lines": ["Rappelez vous des op\u00e9rateurs suivants qui sont tr\u00e8s pratiques\n", "$\\begin{array}{rl}\n", "/ & division (ou quotient) \\\\\n", "% & modulo \\\\\n", "** & puissance \n", "\\end{array}$"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Vous pouvez donc faire aussi des calculs sur les complexes; souvenez vous seulement que la constante complexe que nous notons en fran\u00e7ais $\\texttt{i}$ se note en anglais $\\texttt{j}$"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Aussi pour entrer ce nombre complexe $\\texttt{j}$ il faut toujours le faire pr\u00e9c\u00e9der d'un nombre, donc ne pas entrer simplement $\\texttt{j}$ mais plut\u00f4t"]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Utiliser des variables"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Il peut \u00eatre utile de stocker un r\u00e9sultat qui sera utilis\u00e9 plus tard, ou de d\u00e9finir une valeur constante; pour cela on utilise tout simplement une affectation comme ceci:"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Puis"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Pour les symboles math\u00e9matiques, on peut utiliser la m\u00eame technique"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Ou encore plus simplement, utiliser les valeurs pr\u00e9d\u00e9finies par la librairie math\u00e9matique de python. En anticipant un peu sur la notion d'importation que nous approfondirons plus tard, on peut \u00e9crire:"]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["Et ainsi imprimer les racines troisi\u00e8mes de l'unit\u00e9 par la formule\n", "\n", "$r_n = e^{\\frac{2i\\pi n}{3}$"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["\\textit{Remarque.} Bien entendu il sera possible de faire ceci plus simplement lorsque nous aurons vu les boucles $\\texttt{for}$"]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Attention aux types"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Ce qui change par rapport \u00e0 une calculatrice standard est le fait que les valeurs sont typ\u00e9es (essentiellement, entier ou flottant). Il est important de bien suivre mentalement le type de l'op\u00e9ration:"]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 23, "lines": ["Conversions"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Comme on le voit il peut \u00eatre n\u00e9cessaire de faire volontairement une conversion de type"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Comme dans ce cas on ne peut pas ajouter '.' \u00e0 l'expression a pour la transformer en floattant, on peut faire"]}, {"block": 19, "type": "markdown", "linesLength": 9, "startIndex": 26, "lines": ["De mani\u00e8re plus g\u00e9n\u00e9rale, pour convertir un objet en un entier, un flottant, ou un string, on peut simplement appeler une fonction built-in qui porte le m\u00eame nom que le type cible:\n", "\n", "$\\begin{array}{|r|l|}\n", "\\hline Type & Fonction \\\\ \\hline\n", "Entier & \\texttt{int} \\\\\n", "Flottant & \\texttt{float} \\\\\n", "Cha\u00eene de caract\u00e8res & \\texttt{str} \\\\\n", "Complexe & \\texttt{complex} \n", "\\hline \\end{array}$\n"]}]