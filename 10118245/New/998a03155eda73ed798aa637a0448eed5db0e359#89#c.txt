[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Manipulation de fonctions"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau interm\u00e9diaire"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# Pour charger l'exercice\n", "from corrections.exo_numbers import exo_numbers"]}, {"block": 4, "type": "markdown", "linesLength": 9, "startIndex": 9, "lines": ["On vous demande d'\u00e9crire une fonction `numbers` \n", "* qui prend en argument une liste d'entiers,\n", "* et qui retourne un tuple contenant\n", " * la somme\n", " * le produit\n", " * le minimum\n", " * le maximum\n", "\n", "  des \u00e9l\u00e9ments de la liste"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["# par exemple\n", "exo_numbers.example()"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["def numbers(l):\n", "    \"<votre_code>\""]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["# pour v\u00e9rifier votre code\n", "exo_numbers.correction(numbers)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["## Exercice - niveau avanc\u00e9"]}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["\n", "# Pour charger l'exercice\n", "from corrections.exo_compare_all import exo_compare_all"]}, {"block": 10, "type": "markdown", "linesLength": 9, "startIndex": 28, "lines": ["\u00c0 pr\u00e9sent nous allons \u00e9crire une version tr\u00e8s simplifi\u00e9e de l'outil qui est utilis\u00e9 dans ce cours pour corriger les exercices. Vous remarquerez que les fonctions de correction, comme par exemple `exo_numbers.correction` ci-dessus, prennent en argument la fonction \u00e0 corriger.\n", "\n", "On vous demande d'\u00e9crire une fonction `compare` qui prend en argument \n", " * deux fonctions `f` et `g`; imaginez que l'une d'entre elles fonctionne et qu'on cherche \u00e0 valider l'autre; dans cette version simplifi\u00e9e toutes les fonctions acceptent exactement un argument;\n", " * une liste d'entr\u00e9es `entrees`; vous pouvez supposer que chacune de ces entr\u00e9es est dans le domaine de `f` et de `g` (dit autrement, on peut appeler `f` et `g` sur chacune des entr\u00e9es sans craindre qu'une exception soit lev\u00e9e);\n", "\n", "Le r\u00e9sultat attendu pour le retour de `compare` est une liste qui contient autant de bool\u00e9ens que d'\u00e9l\u00e9ments dans `entrees`, chacun indiquant si avec l'entr\u00e9e correspondante on a pu v\u00e9rifier que `f(entree) == g(entree)`.\n", "\n", "Dans cette premi\u00e8re version de l'exercice vous pouvez enfin supposer que les entr\u00e9es ne sont pas modifi\u00e9es par `f` ou `g`. "]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 37, "lines": ["Pour information dans cet exercice:\n", " * `factorial` correspond \u00e0 `math.factorial`\n", " * `fact` et `broken_fact` sont des fonctions impl\u00e9ment\u00e9es par nos soins, la premi\u00e8re est correcte alors que la seconde retourne 0 au lieu de 1 pour l'entr\u00e9e 0."]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["# par exemple\n", "exo_compare_all.example()"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Ce qui, dit autrement, veut tout simplement dire que `fact` et `factorial` co\u00efncident sur les entr\u00e9es 0, 1 et 5, alors que `broken_fact` et `factorial` ne renvoient pas la m\u00eame valeur avec l'entr\u00e9e `0`."]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 43, "lines": ["# c'est \u00e0 vous\n", "def compare_all(f, g, entrees):\n", "    \"<votre code>\""]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 46, "lines": ["# pour v\u00e9rifier votre code\n", "exo_compare_all.correction(compare_all)"]}]