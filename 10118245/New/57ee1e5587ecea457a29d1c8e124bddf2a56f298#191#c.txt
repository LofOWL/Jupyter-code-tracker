[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Le scope `builtin`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Ces noms qui viennent de nulle part"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Nous avons vu d\u00e9ja un certain nombre de **fonctions *built-in*** comme par exemple"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 5, "lines": ["open, len, zip"]}, {"block": 6, "type": "markdown", "linesLength": 5, "startIndex": 6, "lines": ["Ces noms font partie du **module `__buitin__`**. Il est cependant particulier puisque tout se passe **comme si** on avait fait avant toute chose:\n", "\n", "    from __builtin__ import *\n", "    \n", "sauf que cet import est implicite."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["### On peut r\u00e9affecter un nom *builtin*"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Quoique ce soit une pratique d\u00e9conseill\u00e9e, il est tout \u00e0 fait possible de red\u00e9finir ces noms; on peut faire par exemple"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["def open():\n", "    pass"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Ceci est d\u00e9conseill\u00e9 car le code en aval de cette d\u00e9finition risque de ne pas faire ce qui est attendu; immaginez par exemple qu'on essaie maintenant de faire"]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 16, "lines": ["# on a modifi\u00e9 le nom 'open', attention aux surprises\n", "with open(\"builtin.txt\", \"w\") as f:\n", "    f.write(\"quelque chose\")"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["### On ne peut pas r\u00e9affecter un mot cl\u00e9"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["\u00c0 titre de digression, rappelons que les noms pr\u00e9d\u00e9finis sont, \u00e0 cet \u00e9gard aussi, tr\u00e8s diff\u00e9rents des mots-cl\u00e9s comme `if`, `def`, `with` et autres `for` qui eux, ne peuvent pas \u00eatre modifi\u00e9s en aucune mani\u00e8re."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["### Que faire alors ?"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 22, "lines": ["M\u00eame quand on sait qu'il faut \u00e9viter cette pratique, on n'a pas toujours en t\u00eate la liste exhaustive des noms pr\u00e9d\u00e9finis, aussi il arrive qu'on le fasse involontairement. Rappelons, cependant, qu'un bon \u00e9diteur de texte vous signalera les fonctions built-in avec une coloration syntaxique sp\u00e9cifique. \n", "\n", "Sachez que vous pouvez toujours \"retrouver\" alors la fonction pr\u00e9d\u00e9finie en l'important explicitement du module `__builtin__`. Par exemple pour \u00e9crire notre ouverture de fichier nous pouvons toujours faire"]}, {"block": 16, "type": "code", "linesLength": 6, "startIndex": 25, "lines": ["# pour \u00eatre s\u00fbr d'utiliser la bonne fonction open\n", "\n", "import __builtin__ \n", "\n", "with __builtin__.open(\"builtin.txt\", \"w\") as f:\n", "    f.write(\"quelque chose\")"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["### Liste des fonctions pr\u00e9d\u00e9finies"]}, {"block": 18, "type": "markdown", "linesLength": 2, "startIndex": 32, "lines": ["Vous pouvez trouver la liste des fonctions pr\u00e9d\u00e9finies avec la fonction `dir` sur le module `__builtin__` comme ci-dessous (qui vous montre aussi les exceptions pr\u00e9d\u00e9finies, qui commencent par une majuscule), ou dans la documentation sur [les fonctions pr\u00e9d\u00e9finies](https://docs.python.org/2/library/functions.html#built-in-funcs\n", ")"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["dir(__builtin__)"]}]