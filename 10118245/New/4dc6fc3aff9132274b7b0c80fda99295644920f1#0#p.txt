[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["D\u00e9corateurs"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau (tr\u00e8s) avanc\u00e9"]}, {"block": 2, "type": "markdown", "linesLength": 5, "startIndex": 2, "lines": ["Le m\u00e9canisme des d\u00e9corateurs - qui rappelle un peu, pour ceux qui connaissent, les macros Lisp - est un m\u00e9canisme tr\u00e8s puissant. Sa port\u00e9e va bien au del\u00e0 de simplement rajouter du code avant et apr\u00e8s une fonction, comme dans le cas de `NbAppels` que nous avons vu dans la vid\u00e9o.  \n", "\n", "Par exemple les notions de m\u00e9thodes de classe (`@classmethod`) et de m\u00e9thodes statiques (`@staticmethod`) sont impl\u00e9ment\u00e9es comme des d\u00e9corateurs. Pour une liste plus repr\u00e9sentative de ce qu'il est possible de faire avec les d\u00e9corateurs, je vous invite \u00e0 parcourir m\u00eame rapidement ce [recueil de d\u00e9corateurs](https://wiki.python.org/moin/PythonDecoratorLibrary) qui propose du code (\u00e0 titre indicatif car rien de ceci ne fait partie de la librairie standard) pour des th\u00e8mes qui sont propices \u00e0 la d\u00e9coration de code.\n", "\n", "Nous allons voir en d\u00e9tails quelques-uns de ces exemples (nos d\u00e9corateurs `caching` et `singleton` ont la m\u00eame fonctionnalit\u00e9 que les `memoize` et `singleton` du recueil de d\u00e9corateurs, mais impl\u00e9ment\u00e9s diff\u00e9remment)."]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 7, "lines": ["Un d\u00e9corateur impl\u00e9ment\u00e9 comme une fonction"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Dans la vid\u00e9o on a vu `NbAppels` pour compter le nombre de fois qu'on appelle une fonction. Pour m\u00e9moire on avait \u00e9crit&nbsp;:"]}, {"block": 5, "type": "markdown", "linesLength": 4, "startIndex": 9, "lines": ["\n", "Ici nous allons impl\u00e9menter `caching`, un d\u00e9corateur qui permet de m\u00e9moriser les r\u00e9sultats d'une fonction, et de les cacher pour ne pas avoir \u00e0 les recalculer la fois suivante. \n", "\n", "Alors que `NbAppels` \u00e9tait **impl\u00e9ment\u00e9 comme une classe**, pour varier un peu nous allons impl\u00e9menter cette fois **`caching` comme une vraie fonction**, pour vous montrer les deux alternatives que l'on a, quand on veut impl\u00e9menter un d\u00e9corateur&nbsp;: une vraie fonction, ou une classe de callables."]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 13, "lines": ["Le code du d\u00e9corateur"]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["Comment l'utiliser"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Avant de rentrer dans le d\u00e9tail du code, voyons comment cela s'utiliserait; il n'y a pas de changement de ce point de vue par rapport \u00e0 l'option d\u00e9velopp\u00e9e dans la vid\u00e9o&nbsp;:"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Bien que l'impl\u00e9mentation utilise un algorithme \u00e9pouvantablement lent, le fait de lui rajouter du caching redonne \u00e0 l'ensemble un caract\u00e8re lin\u00e9aire et on peut calculer par exemple "]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["qu'il serait hors de question de calculer dans l'\u00e9tat.\n", "\n", "On peut naturellement inspecter le cache, qui est rang\u00e9 dans l'attribut `cache` de l'objet fonction lui-m\u00eame&nbsp;:"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["et voir que, comme on aurait pu le pr\u00e9dire, on a calcul\u00e9 et m\u00e9moris\u00e9 les 301 premiers r\u00e9sultats, pour n allant de 0 \u00e0 300."]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Comment \u00e7a marche ?"]}, {"block": 13, "type": "markdown", "linesLength": 6, "startIndex": 22, "lines": ["On l'a vu dans la vid\u00e9o avec `NbAppels`, tout se passe exactement comme si on avait \u00e9crit&nbsp;:\n", "\n", "    def fibo_cache(n):\n", "        <le code>\n", "        \n", "    fibo_cache = caching(fibo_cache)"]}, {"block": 14, "type": "markdown", "linesLength": 13, "startIndex": 28, "lines": ["Donc `caching` est une fonction qui prend en argument une fonction `a_decorer` qui ici vaut `fibo_cache`, et retourne une autre fonction, `decoree`; on s'arrange naturellement pour que `decoree` retourne le m\u00eame r\u00e9sultat que `a_decorer`, avec seulement des choses suppl\u00e9mentaires.\n", "\n", "Les points cl\u00e9s de l'impl\u00e9mentation sont ici&nbsp;:\n", " * on attache \u00e0 l'objet fonction `decoree` un dictionnaire `cache` qui va nous permettre de retrouver les valeurs d\u00e9j\u00e0 calcul\u00e9es, \u00e0 partir d'un hash des arguments,\n", " * on ne peut pas cacher le r\u00e9sultat d'un objet qui ne serait pas globalement immuable; or si on essaie on re\u00e7oit l'exception `TypeError`, et dans ce cas on recalcule toujours le r\u00e9sultat. C'est de toute fa\u00e7ons plus s\u00fbr.\n", " * et si on ne trouve pas les arguments dans le cache, on re\u00e7oit l'exception `KeyError`, dans ce cas on calcule le r\u00e9sultat, et on le retourne apr\u00e8s l'avoir rang\u00e9 dans le cache.\n", " \n", " * Vous remarquerez aussi qu'on initialise l'attribut `cache` dans l'objet `decoree` \u00e0 l'appel du d\u00e9corateur (une seule fois, juste apr\u00e8s avoir d\u00e9fini la fonction), et non pas dans le code de `decoree` qui lui est \u00e9valu\u00e9 \u00e0 chaque appel.\n", "\n", "Cette impl\u00e9mentation, sans \u00eatre parfaite, est tout \u00e0 fait utilisable dans un environnement r\u00e9el, modulo les remarques de bon sens suivantes&nbsp;:\n", " * \u00e9videmment l'approche ne fonctionne que pour des fonctions d\u00e9terministes; s'il y a de l'al\u00e9atoire dans la logique de la fonction, il ne faut pas utiliser ce d\u00e9corateur;\n", " * tout aussi \u00e9videmment, la consommation m\u00e9moire peut \u00eatre importante si on applique le caching sans discrimination;\n", " * enfin en l'\u00e9tat la fonction decoree ne peut pas \u00eatre appel\u00e9e avec des arguments nomm\u00e9s."]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 41, "lines": ["D\u00e9corateurs, *docstring* et `help`"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["En fait avec cette impl\u00e9mentation il reste aussi un petit souci&nbsp;:"]}, {"block": 17, "type": "markdown", "linesLength": 4, "startIndex": 43, "lines": ["Ce n'est pas exactement ce qu'on veut; ce qui se passe ici c'est que `help` utilise les attributs `__doc__` et `__name__` de l'objet qu'on lui passe. Et dans notre cas `fibo_cache` est une fonction qui a \u00e9t\u00e9 cr\u00e9\u00e9e par l'instruction\n", "\n", "    def decoree(*args):\n", "        # etc."]}, {"block": 18, "type": "markdown", "linesLength": 2, "startIndex": 47, "lines": ["Pour arranger \u00e7a et faire en sorte que `help` nous affiche ce qu'on veut, il faut s'occuper de ces deux attributs. Et plut\u00f4t que de faire \u00e7a \u00e0 la main, il existe un utilitaire dans le module `functools`, qui fait tout le travail n\u00e9cessaire. Ce qui nous donne une deuxi\u00e8me version de ce d\u00e9corateur, avec deux lignes suppl\u00e9mentaires signal\u00e9es par des `+++`\n", ";:"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Et on obtient \u00e0 pr\u00e9sent une aide en ligne coh\u00e9rente&nbsp;:"]}, {"block": 20, "type": "heading", "linesLength": 1, "startIndex": 50, "lines": ["On peut d\u00e9corer les classes aussi"]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 51, "lines": ["De la m\u00eame fa\u00e7on qu'on peut d\u00e9corer une fonction, on peut d\u00e9corer une classe. \n", "\n", "Voyons comment tirer profit des d\u00e9corateurs pour impl\u00e9menter le pattern de `singleton`; une classe impl\u00e9ment\u00e9e comme [un singleton](http://en.wikipedia.org/wiki/Singleton_pattern) est une classe qui n'existe qu'en un seul exemplaire; tous les appels au constructeur retournent une r\u00e9f\u00e9rence vers le m\u00eame objet.\n", "\n", "Le d\u00e9corateur `singleton` va nous permettre de transformer une classe en un singleton."]}, {"block": 22, "type": "heading", "linesLength": 1, "startIndex": 56, "lines": ["Le d\u00e9corateur en action"]}, {"block": 23, "type": "heading", "linesLength": 1, "startIndex": 57, "lines": ["Comment \u00e7a marche"]}, {"block": 24, "type": "markdown", "linesLength": 25, "startIndex": 58, "lines": ["La subtilit\u00e9 ici r\u00e9side dans le fait que \n", "\n", "La m\u00e9thode sp\u00e9ciale `__new__`, dont on n'avait pas parl\u00e9 dans la Semaine 5, S\u00e9quence 'surcharge des op\u00e9rateurs', fait partie de la m\u00eame famille que `__init__` et autres `__repr__`.\n", "C'est une m\u00e9thode sp\u00e9ciale \u00e9galement, et comme `__init__` elle est mise en jeu au moment de la cr\u00e9ation d'un objet. \n", "\n", "Par contre, elle est vraiment particuli\u00e8re dans la m\u00e9nagerie des m\u00e9thodes sp\u00e9ciales, car c'est la seule qui soit une **m\u00e9thode statique**, et \u00e7a se comprend quand on sait qu'elle est appel\u00e9e **pour** cr\u00e9er l'objet; on ne peut donc pas lui passer en param\u00e8tre l'objet en cours de cr\u00e9ation, puisqu'il n'est pas encore l\u00e0.\n", "\n", "Rappelez-vous que lorsqu'on d\u00e9finit `Spam` d\u00e9cor\u00e9e avec singleton on fait essentiellement\n", "\n", "    Spam = singleton(Spam)\n", "    \n", "C'est donc que l'instance de la classe singleton est consid\u00e9r\u00e9 comme une classe; cette instance doit \u00eatre un callable, qui est utilis\u00e9 lorsqu'on cr\u00e9e une instance de `Spam` en faisant\n", "\n", "    obj1 = Spam()\n", "\n", "Notre d\u00e9corateur, pour l'essentiel, fait ceci&nbsp;:\n", " * dans le constructeur `singleton`, l'objet d\u00e9cor\u00e9 m\u00e9morise la classe \u00e0 d\u00e9corer (ici `Spam`) dans son attribut `classe`;\n", " * on cr\u00e9e l'attribut `instance` qui contiendra une r\u00e9f\u00e9rence vers l'unique objet cr\u00e9\u00e9 pour cette classe;\n", " * on m\u00e9morise \u00e9galement la m\u00e9thode `__new__` de la classe \u00e0 d\u00e9corer; dont on aura besoin \u00e0 l'int\u00e9rieur de notre propre version de `__new__`; \n", " * on d\u00e9finit une m\u00e9thode statique (parce que `__new__`doit \u00eatre statique) `singleton_new` qui est destin\u00e9e \u00e0 remplacer la m\u00e9thode `__new__` dans la classe d\u00e9cor\u00e9e;\n", " * cette nouvelle m\u00e9thode `__new__`\n", "   * renvoie l'attribut `instance` sur la classe d\u00e9cor\u00e9e lorsqu'il existe (c'est qu'on d\u00e9j\u00e0 cr\u00e9\u00e9  l'unique objet de la classe \u00e0 d\u00e9corer); \n", "   * et sinon utilise les m\u00e9thode `__new__` et `__init__` originales pour instancier un objet, le m\u00e9moriser, et le renvoyer\n", " * `ingleton_new` est *install\u00e9e* dans la classe d\u00e9cor\u00e9e, dans l'attribut de nom `__new__`;\n", " * et pour \u00eatre complet on met \u00e0 jour `__name__` et `__doc__` dans la classe d\u00e9cor\u00e9e \u00e0 partir de la classe originale."]}, {"block": 25, "type": "heading", "linesLength": 1, "startIndex": 83, "lines": ["Toutes les combinaisons (fonction, classe) x (fonction, classe)"]}, {"block": 26, "type": "markdown", "linesLength": 9, "startIndex": 84, "lines": ["Nous avons choisi d'impl\u00e9menter `singleton` comme une classe; vous [trouverez ici une version impl\u00e9ment\u00e9e comme un fonction](https://wiki.python.org/moin/PythonDecoratorLibrary#Singleton).\n", "\n", "Si bien qu'avec ces 4 exemples\n", " * `NbAppels` de la vid\u00e9o, \n", " * notre version de  `caching`, \n", " * notre version de `singleton`,\n", " * et le `singleton` de [la r\u00e9f\u00e9rence ci-dessus](https://wiki.python.org/moin/PythonDecoratorLibrary#Singleton)\n", " \n", "Vous avez toutes les combinaisons de d\u00e9corateurs: de classe ou de fonction, impl\u00e9ment\u00e9 comme une classe ou comme une fonction."]}, {"block": 27, "type": "heading", "linesLength": 1, "startIndex": 93, "lines": ["Un d\u00e9corateur peut lui-m\u00eame avoir des arguments"]}, {"block": 28, "type": "markdown", "linesLength": 11, "startIndex": 94, "lines": ["Reprenons l'exemple de `caching`, mais imaginons qu'on veuille ajouter un trait de \"dur\u00e9e de validit\u00e9 du cache\". Le code du d\u00e9corateur a besoin de conna\u00eetre la dur\u00e9e pendant laquelle on doit garder les r\u00e9sultats dans le cache. \n", "\n", "Ce param\u00e8tre, appelons_le `cache_timeout`, on veut pouvoir le pr\u00e9ciser pour chaque fonction; par exemple on voudrait \u00e9crire quelque chose comme\n", "\n", "    @caching_expire(600)\n", "    def resolve_host(hostname):\n", "        ...\n", "       \n", "    @caching_expire(3600*24)\n", "    def network_neighbours(hostname):\n", "        ..."]}, {"block": 29, "type": "markdown", "linesLength": 13, "startIndex": 105, "lines": ["Ceci est possible \u00e9galement avec les d\u00e9corateurs, avec cette syntaxe pr\u00e9cis\u00e9ment. Le mod\u00e8le qu'il faut avoir \u00e0 l'esprit pour bien comprendre le code qui suit, est le suivant&nbsp;:\n", " * `caching_expire` est ce qu'on appelle une *factory* \u00e0 d\u00e9corateurs,\n", " * c'est-\u00e0-dire que le langage va d'abord appeler `caching_expire(600)` et que ceci doit retourner un d\u00e9corateur,\n", " * qui lui m\u00eame doit se comporter commes les d\u00e9corateurs sans argument que l'on a vus jusqu'ici.\n", " \n", "Pour faire court, cela signifie que l'on fera\n", "\n", "    resolve_host = (caching_expire(600))(resolve_host)\n", "    \n", "Ou encore si vous pr\u00e9f\u00e9rez\n", "\n", "    caching = caching_expire(600)\n", "    resolve_host = caching(resolve_host)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["Ce qui nous m\u00e8ne au code suivant&nbsp;:"]}, {"block": 31, "type": "heading", "linesLength": 1, "startIndex": 119, "lines": ["On peut cha\u00eener les d\u00e9corateurs"]}, {"block": 32, "type": "markdown", "linesLength": 9, "startIndex": 120, "lines": ["Signalons enfin que l'on peut aussi \"cha\u00eener les d\u00e9corateurs\"; imaginons par exemple qu'on dispose d'un d\u00e9corateur `add_field` qui ajoute dans un classe un *getter* et un *setter* bas\u00e9s sur un nom d'attribut.\n", "\n", "C'est-\u00e0-dire que\n", "\n", "    @add_field('name')\n", "    class Foo:\n", "        pass\n", "\n", "donnerait pour `Foo` une classe qui dispose des m\u00e9thodes `get_name` et `set_name` (exercice pour les courageux: \u00e9crire `add_field`)."]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["Alors la syntaxe des d\u00e9corateurs vous permet de faire quelque chose comme&nbsp;:"]}, {"block": 34, "type": "markdown", "linesLength": 4, "startIndex": 130, "lines": ["    @add_field('name')\n", "    @add_field('address')\n", "    class Foo:\n", "        pass"]}, {"block": 35, "type": "markdown", "linesLength": 5, "startIndex": 134, "lines": ["Ce qui revient \u00e0 faire&nbsp;:\n", "\n", "    class Foo: pass\n", "    Foo = (add_field('address')) (Foo)\n", "    Foo = (add_field('name')) (Foo)"]}, {"block": 36, "type": "heading", "linesLength": 1, "startIndex": 139, "lines": ["Discussion"]}, {"block": 37, "type": "markdown", "linesLength": 11, "startIndex": 140, "lines": ["Dans la pratique, \u00e9crire un d\u00e9corateur est un exercice assez d\u00e9licat. Le vrai probl\u00e8me est bien souvent la cr\u00e9ation d'objets suppl\u00e9mentaires: on n'appelle plus la fonction de d\u00e9part mais un wrapper autour de la fonction de d\u00e9part. \n", "\n", "Ceci a tout un tas de cons\u00e9quences, et le lecteur attentif aura par exemple remarqu\u00e9&nbsp;:\n", " * que dans l'\u00e9tat du code de `singleton`, bien que l'on ait correctement mis \u00e0 jour `__doc__` et `__name__` sur la classe d\u00e9cor\u00e9e, `help(Spam)` ne renvoie pas le texte attendu, il semble que `help` sur une instance de classe ne se comporte pas exactement comme attendu;\n", " * que si on essaie de combiner les d\u00e9corateurs `NbAppels` et `caching` sur une - encore nouvelle - version de fibonacci, le code obtenu ne converge pas; en fait les technique que nous avons utilis\u00e9es dans les deux cas ne sont pas compatibles entre elles.\n", "\n", "De mani\u00e8re plus g\u00e9n\u00e9rale, il se trouve des gens pour trouver des d\u00e9fauts \u00e0 ce syst\u00e8me de d\u00e9corateurs; je vous renvoie notamment \u00e0 [ce blog](http://blog.dscpl.com.au/2014/01/how-you-implemented-your-python.html) qui, pour r\u00e9sumer, insiste sur le fait que les objets d\u00e9cor\u00e9s n'ont **pas exactement** les m\u00eames propri\u00e9t\u00e9s que les objets originaux. L\"auteur y explique que lorsqu'on fait de l'introspection profonde - c'est-\u00e0-dire lorsqu'on \u00e9crit du code qui \"fouille\" dans les objets qui repr\u00e9sentent le code lui-m\u00eame - les objets d\u00e9cor\u00e9s ont parfois du mal \u00e0 se *faire passer* pour les objets qu'ils remplacent.\n", "\n", "\u00c0 chacun de voir les avantages et les inconv\u00e9nients de cette technique. C'est l\u00e0 encore beaucoup une question de go\u00fbt. Dans certains cas simples, comme par exemple pour `NbAppels`, la d\u00e9coration revient \u00e0 simplement ajouter du code avant et apr\u00e8s l'appel \u00e0 la fonction \u00e0 d\u00e9corer. Et dans ce cas vous remarquerez qu'on peut aussi faire le m\u00eame genre de choses avec un *context manager* (je laisse \u00e7a en exercice aux \u00e9tudiants int\u00e9ress\u00e9s).\n", "\n", "Ce qui est clair toutefois est que la technique des d\u00e9corateurs est quelque chose qui peut \u00eatre tr\u00e8s tr\u00e8s utile, mais dont il ne faut pas abuser. En particulier de notre point de vue, la possibilit\u00e9 de combiner les d\u00e9corateurs, si elle existe bien dans le langage d'un point de vue syntaxique, est dans la pratique \u00e0 utiliser avec la plus extr\u00eame prudence. "]}, {"block": 38, "type": "heading", "linesLength": 1, "startIndex": 151, "lines": ["Pour en savoir plus"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 152, "lines": ["Maintenant que vous savez presque tout sur les d\u00e9corateurs, vous pouvez retourner lire ce [recueil de d\u00e9corateurs](https://wiki.python.org/moin/PythonDecoratorLibrary) mais plus en d\u00e9tails."]}]