[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Les boucles `for`"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercices - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Liste des valeurs d'une fonction"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 3, "lines": ["from corrections.w2s7_for import exo_liste_P"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 4, "lines": ["On se donne une fonction polynomiale\n", "\n", "$P(x) = 2x^2 -3x -2$"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["On vous demande d'\u00e9crire une fonction `liste_P` qui prend en argument une liste de nombres r\u00e9els $x$ et qui retourne la liste des valeurs $P(x)$."]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["# voici un exemple de ce qui est attendu\n", "exo_liste_P.exemple()"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["\u00c9crivez votre code dans la cellule suivante (*On vous sugg\u00e8re d'\u00e9crire une fonction P qui impl\u00e9mente le poyn\u00f4me mais \u00e7a n'est pas strictement indispensable, seul le r\u00e9sultat de `liste_P` compte*):"]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 11, "lines": ["def P(x):\n", "    \"<votre code>\"\n", "\n", "def liste_P(liste_x): \n", "    \"<votre_code>\""]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Et vous pouvez le v\u00e9rifier en \u00e9valuant cette cellule:"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["# pour v\u00e9rifier votre code\n", "exo_liste_P.correction(liste_P)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["******"]}, {"block": 12, "type": "heading", "linesLength": 1, "startIndex": 20, "lines": ["Tri de plusieurs listes"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["\u00c9crivez une fonction qui accepte en argument une liste de listes, et qui retourne la m\u00eame liste mais avec toutes les sous-listes tri\u00e9es."]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["# pour la correction, et un exemple\n", "from corrections.w2s7_for import exo_multi_tri"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["# voici un exemple de ce qui est attendu\n", "exo_multi_tri.exemple()"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["\u00c9crivez votre code ici"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["def multi_tri(listes): \n", "    \"<votre_code>\""]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["# pour v\u00e9rifier votre code\n", "exo_multi_tri.correction(multi_tri)"]}, {"block": 19, "type": "heading", "linesLength": 1, "startIndex": 31, "lines": ["Exercices - niveau interm\u00e9diaire"]}, {"block": 20, "type": "heading", "linesLength": 1, "startIndex": 32, "lines": ["Tri de plusieurs listes, dans des directions diff\u00e9rentes"]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 33, "lines": ["Modifiez votre code pour qu'il accepte cette fois deux arguments listes que l'on suppose de tailles \u00e9gales. \n", "\n", "Comme tout \u00e0 l'heure le premier argument est une liste de listes \u00e0 trier.\n", "\n", "\u00c0 pr\u00e9sent le second argument est une liste (ou un tuple) de bool\u00e9ens, de m\u00eame cardinal que le premier argument, et qui indiquent l'ordre dans lequel on veut trier la liste d'entr\u00e8e de m\u00eame rang. True signifie un tri descendant, False un tri ascendant"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["# pour la correction, et un exemple\n", "from corrections.w2s7_for import exo_multi_tri_reverse"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["# Pour \u00eatre un peu plus clair, voici \u00e0 quoi on s'attend\n", "exo_multi_tri_reverse.exemple()"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["\u00c0 vous de jouer"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 43, "lines": ["def multi_tri_reverse(listes, reverses):\n", "    \"<votre_code>\" "]}, {"block": 26, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["# et pour v\u00e9rifier votre code\n", "exo_multi_tri_reverse.correction(multi_tri_reverse)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["******"]}, {"block": 28, "type": "heading", "linesLength": 1, "startIndex": 48, "lines": ["Produit scalaire"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["from corrections.w2s7_for import exo_produit_scalaire"]}, {"block": 30, "type": "markdown", "linesLength": 7, "startIndex": 50, "lines": ["On veut \u00e9crire une fonction qui retourne le produit scalaire de deux vecteurs. Pour ceci on va mat\u00e9rialiser les deux vecteurs en entr\u00e9e par deux listes que l'on suppose de m\u00eame taille. Cela est tout \u00e0 fait possible avec le bagage que nous avons appris jusqu'ici - bien que nous verrons plus tard d'autres techniques pour faire ceci de mani\u00e8re plus \u00e9l\u00e9gante.\n", "\n", "On rappelle que le produit de X et Y vaut\n", "\n", "$\\sum_{i} X_i * Y_i$\n", "\n", "On posera que le produit scalaire de deux listes vides vaut `0`."]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["# un petit exemple\n", "exo_produit_scalaire.exemple()"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Vous devez donc \u00e9crire"]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 60, "lines": ["def produit_scalaire(X,Y): \n", "    \"\"\"retourne le produit scalaire de deux listes de m\u00eame taille\"\"\"\n", "    \"<votre_code>\""]}, {"block": 34, "type": "code", "linesLength": 2, "startIndex": 63, "lines": ["# pour v\u00e9rifier votre code\n", "exo_produit_scalaire.correction(produit_scalaire)"]}]