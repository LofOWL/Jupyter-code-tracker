[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat&nbsp;<img src=\"../media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["# just so that it runs smoothly under binder\n", "import sys\n", "sys.path.append(\"..\")"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["# Functions with more arguments"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["## The `Args` object"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 6, "lines": ["The framework of course supports function calls with a higher number of arguments, including the `*args` and `**keywords` argument passing mechanisms.\n", "\n", "It is the purpose of the `Args` class to describe these details. Bear in mind that each instance of `Args` will eventually result in one function call."]}, {"block": 5, "type": "markdown", "linesLength": 15, "startIndex": 9, "lines": ["You simply build one `Args` instance with the arguments you want to see passed to the function. This supports named arguments as well, and so\n", "\n", "    Args(1, 2)\n", "\n", "will result in the functions (either student- or teacher-provided) being called like this\n", " \n", "    foo(1, 2)\n", "    \n", "and of course similarly \n", "\n", "    Args(1, 2, 3, z=4)\n", "    \n", "will trigger\n", "\n", "    foo(1, 2, 3, z=4)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["## Variable number of args"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["from nbautoeval.exercise_function import ExerciseFunction\n", "from nbautoeval.args import Args "]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["If your function accepts a variable number of arguments, it does not matter that much&nbsp;:"]}, {"block": 9, "type": "code", "linesLength": 11, "startIndex": 28, "lines": ["def foo3(a, b, c=10):\n", "    return \"a={} b={} c={}\".format(a, b, c)\n", "\n", "foo3_inputs = [\n", "    Args(1, 2, 3),\n", "    Args(4, 5),\n", "]\n", "\n", "exo_foo3 = ExerciseFunction(foo3, foo3_inputs, nb_examples=0)\n", "\n", "exo_foo3.example()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["### Named args"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Nothing changes if now the function to be written can handle named arguments. Let's see this on an example&nbsp;:"]}, {"block": 12, "type": "code", "linesLength": 9, "startIndex": 41, "lines": ["def anyfun(a, b, *args, **keywords):\n", "    # always show 2 mandatory args first\n", "    result = \"a={}, b={}\".format(a, b)\n", "    # if more un-named args are passed\n", "    for i, arg in enumerate(args):\n", "        result += \" + u{}->{}\".format(i+3, arg)\n", "    for k, v in keywords.items():\n", "        result += \" & {} -> {}\".format(k, v)\n", "    return result"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 50, "lines": ["# let's first grasp what this function does\n", "anyfun(1, 2, 3, 4, foo='foo')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["Now we can define an exercise that calls this function 3 times with a variety of argument sets"]}, {"block": 15, "type": "code", "linesLength": 7, "startIndex": 53, "lines": ["anyfun_inputs = [\n", "    Args(1, 2, tutu='tutu'),\n", "]\n", "\n", "exo_anyfun = ExerciseFunction(anyfun, anyfun_inputs, nb_examples=0)\n", "\n", "exo_anyfun.example()"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["## Example"]}, {"block": 17, "type": "markdown", "linesLength": 5, "startIndex": 61, "lines": ["Students are requested to write a function \n", "\n", "$ curve (a, b, c) \\Longrightarrow a^2 + 3ab + c $\n", "\n", "with $c$ defaulting to 12."]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 66, "lines": ["from exercises.curve import exo_curve"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 67, "lines": ["exo_curve.example(2)"]}, {"block": 20, "type": "code", "linesLength": 3, "startIndex": 68, "lines": ["# write your solution here\n", "def curve (a, b, c=12):\n", "    return \"<...>\""]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["Imagine she comes up with this - broken on purpose - solution&nbsp;:"]}, {"block": 22, "type": "code", "linesLength": 3, "startIndex": 72, "lines": ["# the student's - broken - proposal\n", "def curve (a, b, c=12):\n", "    return a ** 2 + 3 * a * b + 12 if (a+b)%4 != 0 else False"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["exo_curve.correction(curve)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["## Corresponding python code"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 77, "lines": ["%cat ../exercises/curve.py"]}]