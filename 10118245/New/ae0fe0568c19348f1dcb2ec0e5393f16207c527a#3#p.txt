[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Le module `collections`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Maintenant que nous avons termin\u00e9 le tour des types de base fournis par le langage, vous pourrez trouver dans [le module `collections`](https://docs.python.org/3/library/collections.html) quelques types \u00e9tendus, qui fournissent des extensions souvent commodes des types de base. Nous allons en voir quelques exemples."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict) : un dictionnaire avec m\u00e9moire"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Nous avons vu que le dictionnaire n'est pas une structure ordonn\u00e9e:"]}, {"block": 6, "type": "code", "linesLength": 7, "startIndex": 10, "lines": ["cluedo = {}\n", "cluedo['olive'] = 'green'\n", "cluedo['moutarde'] = 'mustard'\n", "cluedo['rose'] = 'scarlett'\n", "cluedo['pervenche'] = 'peacock'\n", "for cle, valeur in list(cluedo.items()):\n", "    print(cle, valeur)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Avec le type `OrderedDict`, on peut conserver l'ordre dans lequel les cl\u00e9s sont entr\u00e9es, au prix naturellement d'un surco\u00fbt en termes d'occupation m\u00e9moire :"]}, {"block": 8, "type": "code", "linesLength": 9, "startIndex": 18, "lines": ["from collections import OrderedDict\n", "\n", "cluedo = OrderedDict()\n", "cluedo['olive'] = 'green'\n", "cluedo['moutarde'] = 'mustard'\n", "cluedo['rose'] = 'scarlett'\n", "cluedo['pervenche'] = 'peacock'\n", "for cle, valeur in list(cluedo.items()):\n", "    print(cle, valeur)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["### [`defaultdict`](https://docs.python.org/3/library/collections.html#defaultdict-objects) : un dictionnaire avec initialisation automatique"]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 28, "lines": ["`defaultdict` est une sp\u00e9cialisation du type dictionnaire. Par opposition avec le type `dict` standard, lorsqu'on fait r\u00e9f\u00e9rence \u00e0 une cl\u00e9 manquante, un [m\u00e9canisme de `factory`](http://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29) entre en jeu pour initialiser la valeur associ\u00e9e \u00e0 la cl\u00e9.\n", "\n", "Par exemple, supposons qu'on ait besoin de g\u00e9rer un dictionnaire dont les valeurs sont des ensembles. "]}, {"block": 11, "type": "code", "linesLength": 6, "startIndex": 31, "lines": ["# on dispose d'enregistrements comme par exemple\n", "enregistrements = [('a', 10), ('b', 20), ('a', 30), ('b', 40)]\n", "\n", "# on veut construire un dictionnaire qui \n", "# avec ces entr\u00e9es ressemblerait \u00e0\n", "# {'a' : {10, 30}, 'b' : {20, 40}}"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Avec le type `dict` standard, il faut se livrer \u00e0 une petite gymnastique du genre de :"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 38, "lines": ["cumul = {}\n", "for cle, valeur in enregistrements:\n", "    if cle not in cumul:\n", "        cumul[cle] = set()\n", "    cumul[cle].add(valeur)\n", "print(cumul)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Ou encore, un peu mieux, toujours avec `dict` mais en utilisant `setdefault` :"]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 45, "lines": ["cumul = {}\n", "for cle, valeur in enregistrements:\n", "    cumul.setdefault(cle, set()).add(valeur)\n", "print(cumul)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["*****"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Avec `defaultdict` on peut pr\u00e9ciser comment les valeurs doivent \u00eatre initialis\u00e9es, le code est plus lisible :"]}, {"block": 18, "type": "code", "linesLength": 7, "startIndex": 51, "lines": ["from collections import defaultdict\n", "\n", "# la valeur par d\u00e9faut est une liste vide\n", "cumul = defaultdict(set)\n", "for cle, valeur in enregistrements:\n", "    cumul[cle].add(valeur)\n", "print(cumul)"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["### Autres types"]}, {"block": 21, "type": "markdown", "linesLength": 5, "startIndex": 60, "lines": ["R\u00e9f\u00e9rez-vous \u00e0 la section sur le [module `collections`](https://docs.python.org/3/library/collections.html) dans la documentation standard pour davantage de d\u00e9tails sur les autres types offerts par ce module, comme\n", " * [`Counter`](https://docs.python.org/3/library/collections.html#collections.Counter)\n", "une autre sp\u00e9cialisation du type `dict`, dont les valeurs sont des entiers, sp\u00e9cialis\u00e9e pour compter des occurrences;\n", " * [deque](https://docs.python.org/3/library/collections.html#collections.deque) une sp\u00e9cialisation du type `list` optimis\u00e9e pour ajouter/enlever des \u00e9l\u00e9ments aux deux extr\u00e9mit\u00e9s de la liste;\n", " * [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple) ici il ne s'agit pas d'un type \u00e0 proprement parler, mais d'une fonction qui permet de cr\u00e9er des types; nous y reviendrons en semaine 6 lorsque nous aborderons l'h\u00e9ritage."]}]