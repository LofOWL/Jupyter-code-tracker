[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# les concepts de base"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 2, "lines": ["import asyncio"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## coroutine"]}, {"block": 4, "type": "code", "linesLength": 12, "startIndex": 4, "lines": ["async def morceaux(message):\n", "\n", "    # on appelle le code synchrone normalement\n", "    print(message, \"d\u00e9but\")\n", "    # avec await on rend la main\n", "    await asyncio.sleep(0.5)\n", "\n", "    print(message, \"milieu\")\n", "    await asyncio.sleep(1)\n", "    \n", "    print(message, \"fin\")\n", "    return f'{message} par morceaux'"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["# objet coroutine"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["morceaux"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["morceaux(\"run\")"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["# boucle d'\u00e9v\u00e9nements"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["loop = asyncio.get_event_loop()"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["loop.run_until_complete(morceaux(\"run\"))"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["# plusieurs traitements"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 23, "lines": ["loop.run_until_complete(\n", "    asyncio.gather(morceaux(\"run1\"),\n", "                   morceaux(\"run2\")))"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["![run1-run2](w9-s2-av-fig1.png)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["# ce qu'il ne faut pas faire"]}, {"block": 15, "type": "code", "linesLength": 13, "startIndex": 28, "lines": ["import time \n", "\n", "async def famine(message):\n", "\n", "    print(message, \"d\u00e9but\")\n", "    # avec await on rend la main\n", "    await asyncio.sleep(0.5)\n", "\n", "    print(message, \"milieu\")\n", "    # on garde la main au lieu de la rendre\n", "    time.sleep(1)\n", "    print(message, \"fin\")\n", "    return f'{message} par famine'"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["## famine en action"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 42, "lines": ["loop.run_until_complete(\n", "    asyncio.gather(famine(\"run1\"),\n", "                   famine(\"run2\")))"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["# chronologie"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["![famine](w9-s2-av-fig2.png)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["# synchronisation avec une queue"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 48, "lines": ["import asyncio\n", "\n", "mainloop = asyncio.new_event_loop()"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 51, "lines": ["from asyncio import Queue\n", "queue = Queue(loop=mainloop)"]}, {"block": 23, "type": "code", "linesLength": 6, "startIndex": 53, "lines": ["async def producer(queue):\n", "    count = 1\n", "    while True:\n", "        await queue.put(f'tick{count}')\n", "        count += 1\n", "        await asyncio.sleep(1)"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 59, "lines": ["async def consumer(queue):\n", "    while True:\n", "        received = await queue.get()\n", "        print(f\"received {received}\")\n", "        "]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 64, "lines": ["# on ajoute les coroutines dans la boucle\n", "asyncio.ensure_future(producer(queue), loop=mainloop)\n", "asyncio.ensure_future(consumer(queue), loop=mainloop)"]}, {"block": 26, "type": "code", "linesLength": 5, "startIndex": 67, "lines": ["# on lance la boucle sans fin\n", "try:\n", "    mainloop.run_forever()\n", "except KeyboardInterrupt as e:\n", "    print(\"bye\")"]}]