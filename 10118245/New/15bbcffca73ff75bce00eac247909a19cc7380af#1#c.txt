[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Expressions g\u00e9n\u00e9ratrices"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Comment transformer une compr\u00e9hension de liste en it\u00e9rateur?"]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 8, "lines": ["Nous venons de voir les fonctions g\u00e9n\u00e9ratrices qui sont un puissant outil pour cr\u00e9er facilement des it\u00e9rateurs. Nous verrons prochainement comment utiliser ces fonctions g\u00e9n\u00e9ratrices pour tranformer en quelques lignes de code vos propres objets en it\u00e9rateurs. \n", "\n", "Vous savez maintenant qu'en python on favorise la notion d'it\u00e9rateurs puisqu'ils se manipulent comme des objets it\u00e9rables et qu'ils sont en g\u00e9n\u00e9ral beaucoup plus compacts en m\u00e9moire que l'it\u00e9rable correspondant. \n", "\n", "Comme les compr\u00e9hensions de listes sont fr\u00e9quemment utilis\u00e9es en python, mais qu'elles sont des it\u00e9rables potentiellement gourmands en ressources m\u00e9moire, on souhaiterait pouvoir cr\u00e9er un it\u00e9rateur directement \u00e0 partir d'une compr\u00e9hension de liste. C'est possible et tr\u00e8s facile en python. Il suffit de remplacer les crochets par des parenth\u00e8ses, regardons cela."]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["# c'est une compr\u00e9hension de liste\n", "comprehension = [x**2 for x in range(100) if x%17 == 0] \n", "print(comprehension)"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 16, "lines": ["# c'est une expression g\u00e9n\u00e9ratrice\n", "generator = (x**2 for x in range(100) if x%17 == 0) \n", "print(generator)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Ensuite pour utiliser une expression g\u00e9n\u00e9ratrice, c'est tr\u00e8s simple, on l'utilise comme n'importe quel it\u00e9rateur."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["generator is iter(generator) # generator est bien un it\u00e9rateur"]}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 21, "lines": ["# affiche les premiers carr\u00e9s des multiples de 17\n", "for count, carre in enumerate(generator, 1):\n", "    print(f'Contenu de generator apr\u00e8s {count} it\u00e9rations : {carre}')"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Avec une expression g\u00e9n\u00e9ratrice on n'est plus limit\u00e9 comme avec les compr\u00e9hensions par le nombre d'\u00e9l\u00e9ments:"]}, {"block": 11, "type": "code", "linesLength": 19, "startIndex": 25, "lines": ["# trop grand pour une compr\u00e9hension,\n", "# mais on peut cr\u00e9er le g\u00e9n\u00e9rateur sans souci\n", "generator = (x**2 for x in range(10**18) if x%17==0) \n", "\n", "# on va calculer tous les carr\u00e9s de multiples de 17 \n", "# plus petits que 10**10 et dont les 4 derniers chiffres sont 1316\n", "recherche = set()\n", "\n", "# le point important, c'est qu'on n'a pas besoin de \n", "# cr\u00e9er une liste de 10**18 \u00e9l\u00e9ments \n", "# qui serait beaucoup trop grosse pour la mettre dans la m\u00e9moire vive\n", "\n", "# avec un g\u00e9n\u00e9rateur, on ne paie que ce qu'on utilise..\n", "for x in generator:\n", "    if x > 10**10:\n", "        break\n", "    elif str(x)[-4:] == '1316':\n", "        recherche.add(x)\n", "print(recherche)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["### Pour aller plus loin"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Vous pouvez regarder [cette int\u00e9ressante discussion de Guido van Rossum](http://python-history.blogspot.fr/2010/06/from-list-comprehensions-to-generator.html ) sur les compr\u00e9hensions et les expressions g\u00e9n\u00e9ratrices."]}]