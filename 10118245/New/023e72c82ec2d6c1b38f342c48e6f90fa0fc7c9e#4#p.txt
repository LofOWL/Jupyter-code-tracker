[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Formatage de cha\u00eenes de caract\u00e8res"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["On d\u00e9signe par formatage les outils qui permettent d'obtenir une pr\u00e9sentation fine des r\u00e9sultats, que ce soit pour am\u00e9liorer la lisibilit\u00e9 lorsqu'on s'adresse \u00e0 des humains, ou pour respecter la syntaxe d'un outil auquel on veut passer les donn\u00e9es pour un traitement ult\u00e9rieur."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### L'instruction `print`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Nous avons jusqu'\u00e0 maintenant presque toujours utilis\u00e9 l'instruction `print` pour afficher nos r\u00e9sultats. Comme on l'a vu, celle-ci r\u00e9alise un formatage sommaire: elle ins\u00e8re un espace entre les valeurs qui lui sont pass\u00e9es."]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["print(1, 'a', 12 + 4j)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["La seule subtilit\u00e9 notable concernant `print` est que par d\u00e9faut, elle ajoute un saut de ligne \u00e0 la fin; pour \u00e9viter ce comportement, on peut passer \u00e0 la fonction un argument `end`, qui sera ins\u00e9r\u00e9 *au lieu* du saut de ligne. Ainsi par exemple:"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["# une premi\u00e8re ligne\n", "print(\"une\", \"seule\", \"ligne\")"]}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 10, "lines": ["# une deuxi\u00e8me ligne en deux appels \u00e0 print\n", "print(\"une\", \"autre\", end=' ')\n", "print(\"ligne\")"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Il faut remarquer aussi que `print` est capable d'imprimer **n'importe quel objet**; nous l'avons d\u00e9j\u00e0 fait avec les listes et les tuples, voici par exemple un module:"]}, {"block": 11, "type": "code", "linesLength": 4, "startIndex": 14, "lines": ["# on peut imprimer par exemple un objet 'module' \n", "import math\n", "\n", "print('le module math est', math)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["En antipant un peu, voici comment `print` pr\u00e9sente les instances de classe (ne vous inqui\u00e9tez pas, nous apprendrons dans une semaine ult\u00e9rieure ce que sont les classes et les instances):"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 19, "lines": ["# pour d\u00e9finir la classe Personne\n", "class Personne: \n", "    pass\n", "\n", "# et pour cr\u00e9er une instance de cette classe\n", "personne = Personne()"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["# voila comment s'affiche une instance de classe\n", "print(personne)"]}, {"block": 15, "type": "markdown", "linesLength": 6, "startIndex": 27, "lines": ["On rencontre assez vite les limites de `print`:\n", "\n", "* D'une part, il peut \u00eatre n\u00e9cessaire de formater une cha\u00eene de caract\u00e8res sans n\u00e9cessairement vouloir l'imprimer, ou en tous cas pas imm\u00e9diatement.\n", "* D'autre part les espaces ajout\u00e9s peuvent \u00eatre plus n\u00e9fastes qu'utiles. Enfin on peut avoir besoin de pr\u00e9ciser un nombre de chiffres significatifs, ou de choisir comment pr\u00e9senter un date..\n", "\n", "C'est pourquoi il est plus courant de **formatter** les chaines - c'est \u00e0 dire de calculer des chaines en m\u00e9moire, sans n\u00e9cessairement les imprimer de suite, et c'est ce que nous allons \u00e9tudier dans ce compl\u00e9ment."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["### Les *f-strings*"]}, {"block": 17, "type": "markdown", "linesLength": 3, "startIndex": 34, "lines": ["Depuis la version 3.6 de python, on peut utiliser les f-strings, le premier m\u00e9canisme de formatage que nous \u00e9tudierons. C'est le m\u00e9canisme de formatage le plus simple et le plus agr\u00e9able \u00e0 utiliser.\n", "\n", "Je vous recommande tout de m\u00eame de lire les sections \u00e0 propos de `format` et de `%`, qui sont encore massivement utilis\u00e9es dans le code existant (surtout `%` d'ailleurs, bien que essentiellement obsol\u00e8te)."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Mais d\u00e9finissons d'abord quelques donn\u00e9es \u00e0 afficher."]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["# donnons-nous quelques variables\n", "prenom, nom, age = 'Jean', 'Dupont', 35"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["# mon premier f-string\n", "f\"{prenom} {nom} a {age} ans\""]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 42, "lines": ["Vous remarquez d'abord que le string commence par `f\"`, c'est bien s\u00fbr pour cela qu'on l'apelle un *f-string*.\n", "\n", "On peut bien entendu ajouter le `f` devant toutes les formes de strings, qu'ils commencent par `'` ou `\"` ou `'''` ou `\"\"\"`."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Ensuite vous remarquez que les zones d\u00e9limit\u00e9es entre `{}` sont remplac\u00e9es. La logique d'un *f-string*, c'est tout simplement de consid\u00e9rer l'int\u00e9rieur d'un `{}` comme du code python (une expression pour \u00eatre pr\u00e9cis), de l'\u00e9valuer, et d'utiliser le r\u00e9sultat pour remplir le `{}`."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Ce que \u00e7a veut dire en clair, c'est que je peux faire des calculs \u00e0 l'int\u00e9rieur des `{}`:"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 47, "lines": ["# toutes les expressions sont autoris\u00e9es \u00e0 l'int\u00e9rieur d'un {}\n", "f\"dans 10 ans {prenom} aura {age + 10} ans\""]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 49, "lines": ["# on peut donc aussi mettre des appels de fonction\n", "notes = [12, 15, 19]\n", "f\"nous avons pour l'instant {len(notes)} notes\""]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 52, "lines": ["Nous allons en rester l\u00e0 pour la partie en niveau basique. Il nous reste \u00e0 \u00e9tudier comment chaque `{}` est formatt\u00e9 (par exemple comment choisir le nombre de chiffres significatifs sur un flottant), voyez plus bas pour plus de d\u00e9tails sur ce point.\n", "\n", "Comme vous le voyez, les *f-strings* fournissent une m\u00e9thode tr\u00e8s simple pour formatter des donn\u00e9es dans des chaines de caract\u00e8re. Redisons-le pour \u00eatre bien clair: un *f-string* **ne r\u00e9alise pas d'impression**, il faut donc le passer \u00e0 `print` si l'impression est souhait\u00e9e."]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["### La m\u00e9thode `format`"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["Avant l'introduction des *f-strings*, la technique recommand\u00e9e pour faire du formattage \u00e9tait d'utiliser la m\u00e9thode `format`, qui est d\u00e9finie sur les objets `str`, et qui s'utilise comme ceci: "]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["\"{} {} a {} ans\".format(prenom, nom, age)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["Dans cet exemple le plus simple, les donn\u00e9es sont affich\u00e9es en lieu et place des `{}`, dans l'ordre o\u00f9 elles sont fournies. "]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Cela convient bien lorsqu'on a peu de donn\u00e9es; si par la suite on veut changer l'ordre par exemple des nom et pr\u00e9nom, on peut bien s\u00fbr \u00e9changer l'ordre des arguments pass\u00e9s \u00e0 format, ou encore utiliser la **liaison par position**, comme ceci:"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["\"{1} {0} a {2} ans\".format(nom, prenom, age)"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Dans la pratique toutefois, cette forme est assez peu utile, on lui pr\u00e9f\u00e8re souvent la **liaison par nom** qui se pr\u00e9sente comme ceci:"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["\"{le_prenom} {le_nom} a {l_age} ans\".format(le_nom=nom, le_prenom=prenom, l_age=age)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 63, "lines": ["Dans ce premier exemple de liaison par nom, nous avons d\u00e9lib\u00e9r\u00e9ment utilis\u00e9 des noms diff\u00e9rents pour les donn\u00e9es externes et pour les noms apparaissant dans le format, pour bien illustrer comment la liaison est r\u00e9solue; mais on peut aussi bien faire tout simplement:"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["\"{prenom} {nom} a {age} ans\".format(nom=nom, prenom=prenom, age=age)"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["Voici qui conclut notre courte introduction \u00e0 la m\u00e9thode `format`."]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["### La toute premi\u00e8re version du formatage : l'op\u00e9rateur `%`"]}, {"block": 40, "type": "markdown", "linesLength": 3, "startIndex": 68, "lines": ["`format` a \u00e9t\u00e9 en fait introduite assez tard dans python, pour remplacer la technique que nous allons pr\u00e9senter maintenant. \n", "\n", "\u00c9tant donn\u00e9 le volume de code qui a \u00e9t\u00e9 \u00e9crit avec l'op\u00e9rateur `%`, il nous a sembl\u00e9 important d'introduire bri\u00e8vement cette construction ici."]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["Le principe de l'op\u00e9rateur `%` est le suivant. On \u00e9labore comme ci-dessus un \"format\" c'est-\u00e0-dire le patron de ce qui doit \u00eatre rendu, auquel on passe des arguments pour \"remplir\" les trous. Voyons les exemples de tout \u00e0 l'heure rendus avec l'op\u00e9rateur `%`"]}, {"block": 42, "type": "code", "linesLength": 3, "startIndex": 72, "lines": ["# l'ancienne fa\u00e7on de formatter les cha\u00eenes avec %\n", "# est souvent moins lisible\n", "\"%s %s a %s ans\" % (prenom, nom, age)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["On pouvait \u00e9galement avec cet op\u00e9rateur recourir \u00e0 un m\u00e9canisme de liaison par nommage, en passant par un dictionnaire. Pour anticiper un tout petit peu sur cette notion que nous verrons tr\u00e8s bient\u00f4t, voici comment:"]}, {"block": 44, "type": "code", "linesLength": 2, "startIndex": 76, "lines": ["variables =  {'le_nom' : nom, 'le_prenom' : prenom, 'l_age' : age}\n", "\"%(le_nom)s, %(le_prenom)s, %(l_age)s ans\" % variables"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["De retour aux *f-strings* et \u00e0 la fonction `format`, il arrive qu'on ait besoin de sp\u00e9cifier plus finement la fa\u00e7on dont une valeur doit \u00eatre affich\u00e9e."]}, {"block": 47, "type": "markdown", "linesLength": 1, "startIndex": 80, "lines": ["### Pr\u00e9cision des arrondis"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 81, "lines": ["C'est typiquement le cas avec les valeurs flottantes, pour lesquelles la pr\u00e9cision de l'affichage vient au d\u00e9triment de la lisibilit\u00e9. Voici deux formes \u00e9quivalentes pour obtenir une valeur de pi arrondie:"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["from math import pi"]}, {"block": 50, "type": "code", "linesLength": 2, "startIndex": 83, "lines": ["# un f-string\n", "f\"pi avec seulement 2 chiffres apres la virgule {pi:.2f}\""]}, {"block": 51, "type": "code", "linesLength": 2, "startIndex": 85, "lines": ["# avec format avec liaison par nom\n", "\"pi avec seulement 3 chiffres apres la virgule {flottant:.2f}\".format(flottant=pi)"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["Dans ces deux exemples, la partie \u00e0 l'int\u00e9rieur des `{}` et \u00e0 droite du `:` s'appelle le format, ici `:.2f`; vous remarquez que c'est le m\u00eame pour les *f-strings* et pour `format`, et c'est toujours le cas. C'est pourquoi on ne verra plus \u00e0 partir d'ici que des exemples avec les *f-strings*."]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["### `0` en d\u00e9but de nombre"]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["Pour forcer un petit entier \u00e0 s'afficher sur 5 caract\u00e8res, avec des `0` ajout\u00e9s au d\u00e9but si n\u00e9cessaire:"]}, {"block": 55, "type": "code", "linesLength": 3, "startIndex": 90, "lines": ["x = 15\n", "\n", "f\"{x:04d}\""]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["Ici on utilise le format `d` (toutes ces lettres `d`, `f`, `g` viennent des formats ancestraux de la libc comme `printf`); ici avec `:04d` on pr\u00e9cise qu'on veut une sortie sur 4 caract\u00e8res et qu'il faut remplir avec des `0`."]}, {"block": 57, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["### Largeur fixe"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 95, "lines": ["Dans certains cas on a besoin d'afficher des donn\u00e9es en colonnes de largeurs fixes, on utilise pour cela les formats `<` `^` et `>` pour afficher \u00e0 gauche, au centre, ou \u00e0 droite d'une zone de largeur fixe:"]}, {"block": 59, "type": "code", "linesLength": 9, "startIndex": 96, "lines": ["# les donn\u00e9es \u00e0 afficher\n", "comptes = [\n", " ('Apollin', 'Dupont', 127),\n", " ('Myrtille', 'Lamartine', 25432),\n", " ('Prune', 'Soc', 827465),\n", "]\n", "\n", "for prenom, nom, solde in comptes:\n", "    print(f\"{prenom:<10} -- {nom:^12} -- {solde:>8} \u20ac\")"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 105, "lines": ["### Voir aussi"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 106, "lines": ["Nous vous invitons \u00e0 vous reporter \u00e0 la documentation de `format` pour plus de d\u00e9tails [sur les formats disponibles](https://docs.python.org/3/library/string.html#formatstrings), et notamment aux [nombreux exemples](https://docs.python.org/3/library/string.html#format-examples) qui y figurent."]}]