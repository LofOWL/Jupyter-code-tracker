[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Conditions & Expressions Bool\u00e9ennes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Nous pr\u00e9sentons rapidement dans ce notebook comment construire la condition qui contr\u00f4le l'ex\u00e9cution d'un `if`."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Tests consid\u00e9r\u00e9s comme vrai"]}, {"block": 5, "type": "markdown", "linesLength": 8, "startIndex": 9, "lines": ["Lorsqu'on \u00e9crit une instruction comme\n", "\n", "    if <expression>:\n", "       <do_something>\n", "    \n", "le r\u00e9sultat de l'expression peut **ne pas \u00eatre un bool\u00e9en**. \n", "\n", "Par exemple, pour n'importe quel type num\u00e9rique, la valeur 0 est consid\u00e9r\u00e9e comme fausse. Cela signifie que"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 17, "lines": ["# ici la condition s'\u00e9value \u00e0 0, donc on ne fait rien\n", "if 3 - 3:\n", "    print(\"ne passera pas par l\u00e0\")"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 20, "lines": ["# par contre si vous vous souvenez de notre cours sur les flottants\n", "# ici la condition donne un tout petit r\u00e9el mais pas 0.\n", "if 0.1 + 0.2 - 0.3:\n", "    print(\"par contre on passe ici\")"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["De m\u00eame, une cha\u00eene vide, une liste vide, un tuple vide, sont consid\u00e9r\u00e9s comme faux. Bref, vous voyez l'id\u00e9e g\u00e9n\u00e9rale."]}, {"block": 9, "type": "code", "linesLength": 6, "startIndex": 25, "lines": ["if \"\": \n", "    print(\"ne passera pas par l\u00e0\")\n", "if []: \n", "    print(\"ne passera pas par l\u00e0\")\n", "if ():\n", "    print(\"ne passera pas par l\u00e0\")"]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 31, "lines": ["# assez logiquement, None aussi\n", "# est consid\u00e9r\u00e9 comme faux\n", "if None:\n", "    print(\"ne passe toujours pas par ici\")"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["### \u00c9galit\u00e9"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Les tests les plus simples se font \u00e0 l'aide des op\u00e9rateurs d'\u00e9galit\u00e9, qui fonctionnent sur presque tous les objets. L'op\u00e9rateur `==` v\u00e9rifie si deux objets ont la m\u00eame valeur\u00a0:"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 37, "lines": ["bas = 12\n", "haut = 25.82\n", "\n", "# \u00e9galit\u00e9 ?\n", "if bas == haut:\n", "    print('==')"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 43, "lines": ["# non \u00e9galit\u00e9 ?\n", "if bas != haut:\n", "    print('!=')"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["En gen\u00e9ral, deux objets de types diff\u00e9rents ne peuvent pas \u00eatre \u00e9gaux."]}, {"block": 16, "type": "code", "linesLength": 4, "startIndex": 47, "lines": ["# ces deux objets se ressemblent \n", "# mais ils ne sont pas du m\u00eame type !\n", "if [1, 2] != (1, 2):\n", "    print('!=')"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Par contre, des `float`, des `int` et des `complex` peuvent \u00eatre \u00e9gaux entre eux\u00a0:"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["bas_reel = 12."]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["print(bas, bas_reel)"]}, {"block": 20, "type": "code", "linesLength": 4, "startIndex": 54, "lines": ["# le r\u00e9el 12 et \n", "# l'entier 12 sont \u00e9gaux\n", "if bas == bas_reel:\n", "    print('int == float')"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 58, "lines": ["# ditto pour int et complex\n", "if (12 + 0j) == 12:\n", "    print('int == complex')"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Signalons \u00e0 titre un peu anecdotique une syntaxe ancienne\u00a0: historiquement et **seulement en python2** on pouvait aussi noter `<>` le test de non \u00e9galit\u00e9. On trouve ceci dans du code ancien mais il faut \u00e9viter de l'utiliser\u00a0:"]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 62, "lines": ["%%python2\n", "\n", "# l'ancienne forme de !=\n", "if 12 <> 25:\n", "    print(\"<> est obsolete et ne fonctionne qu'en python2\")"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["### Les op\u00e9rateurs de comparaison "]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["Sans grande surprise on peut aussi \u00e9crire"]}, {"block": 26, "type": "code", "linesLength": 4, "startIndex": 69, "lines": ["if bas <= haut:\n", "    print('<=')\n", "if bas < haut:\n", "    print('<')"]}, {"block": 27, "type": "code", "linesLength": 4, "startIndex": 73, "lines": ["if haut >= bas:\n", "    print('>=')\n", "if haut > bas:\n", "    print('>')"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 77, "lines": ["\u00c0 titre de curiosit\u00e9, on peut m\u00eame \u00e9crire en un seul test une appartenance \u00e0 un intervalle, ce qui donne un code plus lisible"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 78, "lines": ["x = (bas + haut) / 2\n", "print(x)"]}, {"block": 30, "type": "code", "linesLength": 3, "startIndex": 80, "lines": ["# deux tests en une expression\n", "if bas <= x <= haut:\n", "    print(\"dans l'intervalle\")"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["On peut utiliser les comparaisons sur une palette assez large de types, comme par exemple avec les listes"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 84, "lines": ["# on peut comparer deux listes, mais ATTENTION\n", "[1, 2] <= [2, 3]"]}, {"block": 33, "type": "markdown", "linesLength": 3, "startIndex": 86, "lines": ["Il est parfois utile de v\u00e9rifier le sens qui est donn\u00e9 \u00e0 ces op\u00e9rateurs selon le type\u00a0; ainsi par exemple sur les ensembles ils se r\u00e9f\u00e8rent \u00e0 l'**inclusion**.\n", "\n", "Il faut aussi se m\u00e9fier avec les types num\u00e9riques, si un complexe est impliqu\u00e9, comme dans l'exemple suivant\u00a0:"]}, {"block": 34, "type": "code", "linesLength": 5, "startIndex": 89, "lines": ["# on ne peut pas par contre comparer deux nombres complexes\n", "try:\n", "    2j <= 3j\n", "except Exception as e:\n", "    print(\"OOPS\", type(e), e)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["### Connecteurs logiques et / ou / non"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 95, "lines": ["On peut bien s\u00fbr combiner facilement plusieurs expressions entre elles, gr\u00e2ce aux op\u00e9rateurs `and`, `or` et `not`"]}, {"block": 37, "type": "code", "linesLength": 3, "startIndex": 96, "lines": ["# il ne faut pas faire ceci, mettez des parenth\u00e8ses\n", "if 12 <= 25. or [1, 2] <= [2, 3] and not 12 <= 32:\n", "    print(\"OK mais pourrait \u00eatre mieux\")"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["En termes de priorit\u00e9s\u00a0: le plus simple si vous avez une expression compliqu\u00e9e reste de mettre les parenth\u00e8ses qui rendent son \u00e9valuation claire et lisible pour tous. Aussi on pr\u00e9f\u00e8rera de beaucoup la formulation \u00e9quivalente\u00a0:"]}, {"block": 39, "type": "code", "linesLength": 3, "startIndex": 100, "lines": ["# c'est mieux avec un parenth\u00e9sage\n", "if 12 <= 25. or ([1, 2] <= [2, 3] and not 12 <= 32):\n", "    print(\"OK, c'est \u00e9quivalent et plus clair\")"]}, {"block": 40, "type": "code", "linesLength": 3, "startIndex": 103, "lines": ["# attention, si on fait un autre parenth\u00e9sage, on change le sens\n", "if (12 <= 25. or [1, 2] <= [2, 3]) and not 12 <= 32 :\n", "    print(\"ce n'est pas \u00e9quivalent, ne passera pas par l\u00e0\")"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 106, "lines": ["### Pour en savoir plus"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 107, "lines": ["Reportez-vous \u00e0 la section sur les [op\u00e9rateurs bool\u00e9ens](https://docs.python.org/3/library/stdtypes.html#truth-value-testing) dans la documentation python."]}]