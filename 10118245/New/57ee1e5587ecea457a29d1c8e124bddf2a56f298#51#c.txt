[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# La notion de package"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Dans ce compl\u00e9ment, nous approfondissons la notion de module, qui a \u00e9t\u00e9 introduite dans la vid\u00e9o, et nous d\u00e9crivons la notion de *package* qui permet de cr\u00e9er des librairies plus structur\u00e9es qu'avec un simple module."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Pour ce notebook nous aurons besoin de deux utilitaires pour voir le code correspondant aux modules et packages que nous manipulons"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["### Rappel sur les modules"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Nous avons vu dans la vid\u00e9o qu'on peut charger une librairie, lorsqu'elle se pr\u00e9sente sous la forme d'un seul fichier source, au travers d'un objet python de type **module**. "]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Chargeons un module \"jouet\""]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Voyons \u00e0 quoi ressemble ce module :"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Il est important de bien voir que le module joue le r\u00f4le d'**espace de nom**, dans le sens o\u00f9 :"]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 10, "lines": ["Pour r\u00e9sumer, un module est donc un objet python qui correspond \u00e0 la fois \u00e0", " * un (seul) **fichier** sur le disque", " * un **espace de nom** pour les variables du programme"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### La notion de package"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Lorsqu'il s'agit d'impl\u00e9menter une tr\u00e8s grosse librairie, il n'est pas concevable de tout concentrer en un seul fichier. C'est l\u00e0 qu'intervient la notion de **package**, qui est un peu aux **r\u00e9pertoires** ce que que le **module** est aux **fichiers**."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["On importe un package exactement comme un module"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Le package porte **le m\u00eame nom** que le r\u00e9pertoire, c'est-\u00e0-dire que, de m\u00eame que le module `module_jouet` correspond au fichier `module_jouet.py`, le package python `package_jouet` corrrespond au r\u00e9pertoire `package_jouet`."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Pour d\u00e9finir un package, il faut **obligatoirement** cr\u00e9er dans le r\u00e9pertoire (celui, donc, que l'on veut exposer \u00e0 python), un fichier nomm\u00e9 **`__init__.py`**. Voil\u00e0 comment a \u00e9t\u00e9 impl\u00e9ment\u00e9 le package que nous venons d'importer :"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Comme on le voit, importer un package revient essentiellement \u00e0 charger le fichier `__init__.py` correspondant. Le package se pr\u00e9sente aussi comme un espace de nom, \u00e0 pr\u00e9sent on a une troisi\u00e8me variable `spam` qui est encore diff\u00e9rente des deux autres :"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["L'avantage principal du package par rapport au module est qu'il peut contenir d'autres packages ou modules. Dans notre cas, package \"jouet\" vient avec un module (variable sp\u00e9ciale `__all__`) qu'on peut importer en utilisant un attribut du package, c'est-\u00e0-dire comme ceci :"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["\u00c0 nouveau regardons comment cela est impl\u00e9ment\u00e9; le fichier correspondant au module se trouve naturellement \u00e0 l'int\u00e9rieur du r\u00e9pertoire correspondant au package, c'\u00e9tait le but du jeu au d\u00e9part :"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Qui, incidemment, d\u00e9finit - encore - une autre variable `spam`&nbsp;:"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["### \u00c0 quoi sert `__init__.py` ?"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Le code plac\u00e9 dans `__init__.py` est charg\u00e9 d'initialiser la librairie. Le fichier **peut \u00eatre vide** mais **doit absolument exister**. Nous vous mettons en garde car c'est une erreur fr\u00e9quente de l'oublier. Sans lui vous ne pourrez importer ni le package, ni les modules ou sous-packages qu'il contient."]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["### Variables sp\u00e9ciales"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Comme on le voit dans les exemples, certaines variables *sp\u00e9ciales* peuvent \u00eatre lues ou \u00e9crites dans les modules ou packages. Voici les plus utilis\u00e9es."]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["##### `__name__`"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Remarquons \u00e0 cet \u00e9gard que le **point d'entr\u00e9e** du programme (c'est-\u00e0-dire, on le rappelle, le fichier qui est pass\u00e9 directement \u00e0 l'interpr\u00e9teur python) est consid\u00e9r\u00e9 comme un module dont l'attribut `__name__` vaut la cha\u00eene `\"__main__\"`"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["C'est pourquoi [(et c'est \u00e9galement expliqu\u00e9 ici)](https://docs.python.org/2/tutorial/modules.html#executing-modules-as-scripts) les scripts python se terminent g\u00e9n\u00e9ralement par une phrase du genre de"]}, {"block": 28, "type": "markdown", "linesLength": 2, "startIndex": 30, "lines": ["    if __name__ == \"__main__\":", "        <faire vraiment quelque chose>"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["##### `__file__`"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["##### `__all__`"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Il est possible de red\u00e9finir dans un package la variable `__all__`, de fa\u00e7on \u00e0 ne pas exposer certaines parties du package qui ont vocation \u00e0 rester priv\u00e9es, [comme c'est d\u00e9crit ici](https://docs.python.org/2/tutorial/modules.html#importing-from-a-package)."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["### Pour en savoir plus"]}, {"block": 33, "type": "markdown", "linesLength": 2, "startIndex": 36, "lines": ["Voir la [section sur les modules](https://docs.python.org/2/tutorial/modules.html) dans la documentation python, et notamment la [section sur les packages](https://docs.python.org/2/tutorial/modules.html#packages).", ""]}]