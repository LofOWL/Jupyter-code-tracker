[{"block": 0, "type": "code", "linesLength": 5, "startIndex": 0, "lines": ["import thinkdsp\n", "import thinkplot\n", "import thinkstats2\n", "import numpy\n", "from __future__ import print_function, division"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Start with UG noise."]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 6, "lines": ["signal = thinkdsp.UncorrelatedGaussianNoise()\n", "wave = signal.make_wave(duration=4, framerate=32768)\n", "wave.plot()"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["The spectrum of UG noise is pretty flat."]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Let's look at the distribution of the real and imaginary parts:"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["xs = numpy.real(spectrum.hs)\n", "ys = numpy.imag(spectrum.hs)\n", "xs.mean(), xs.std()"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["The CDFs sure look Gaussian."]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 17, "lines": ["cdf_x = thinkstats2.Cdf(xs)\n", "cdf_y = thinkstats2.Cdf(ys)\n", "thinkplot.Cdfs([cdf_x, cdf_y])"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Which implies that the distribution of amplitude is chi and the distribution of power is chi-squared."]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["cdf_power = thinkstats2.Cdf(spectrum.amps**2)\n", "thinkplot.Cdf(cdf_power)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["To estimate PSD, we can start with a spectrogram:"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["gram = wave.make_spectrogram(seg_length=512)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["And loop through the spectrums that make up the spectrogram."]}, {"block": 14, "type": "code", "linesLength": 12, "startIndex": 26, "lines": ["times = gram.times()\n", "\n", "for i, time in enumerate(times):\n", "    spectrum = gram.spec_map[time]\n", "    if i == 0:\n", "        total = spectrum.power\n", "    else:\n", "        total += spectrum.power\n", "\n", "total /= len(times)\n", "thinkplot.plot(gram.frequencies(), total)\n", "thinkplot.config(xlabel='frequency Hz', ylabel='PSD')"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["So UG noise has equal power at all frequencies."]}, {"block": 16, "type": "code", "linesLength": 0, "startIndex": 39, "lines": []}]