[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## CIFAR 10"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["%matplotlib inline\n", "%reload_ext autoreload\n", "%autoreload 2"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 4, "lines": ["from pathlib import Path"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 5, "lines": ["from fastai.conv_learner import *\n", "PATH = Path(\"data/cifar10/\")"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["bs=64\n", "sz=32"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["tfms = tfms_from_model(resnet18, sz, aug_tfms=[RandomFlip()], pad=sz//8)\n", "data = ImageClassifierData.from_csv(PATH, 'train', PATH/'train.csv', tfms=tfms, bs=bs)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["learn = ConvLearner.pretrained(resnet18, data)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["lr=1e-2; wd=1e-5"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["learn.fit(lr, 1, cycle_len=1)"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["lrs = np.array([lr/9,lr/3,lr])"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["learn.unfreeze()"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["learn.lr_find(lrs/1000)\n", "learn.sched.plot()"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["learn.fit(lrs, 1, cycle_len=1, wds=wd)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["## Simplenet"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["stats = (np.array([ 0.4914 ,  0.48216,  0.44653]), np.array([ 0.24703,  0.24349,  0.26159]))"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["tfms = tfms_from_stats(stats, sz, aug_tfms=[RandomFlip()], pad=sz//8)\n", "data = ImageClassifierData.from_csv(PATH, 'train', PATH/'train.csv', tfms=tfms, bs=bs)"]}, {"block": 17, "type": "code", "linesLength": 12, "startIndex": 25, "lines": ["class SimpleConv(nn.Module):\n", "    def __init__(self, ic, oc, ks=3, drop=0.2, bn=True):\n", "        super().__init__()\n", "        self.conv = nn.Conv2d(ic, oc, ks, padding=(ks-1)//2)\n", "        self.bn = nn.BatchNorm2d(oc, momentum=0.05) if bn else None\n", "        self.drop = nn.Dropout(drop, inplace=True)\n", "        self.act = nn.ReLU(True)\n", "        \n", "    def forward(self, x):\n", "        x = self.conv(x)\n", "        if self.bn: x = self.bn(x)\n", "        return self.drop(self.act(x))"]}, {"block": 18, "type": "code", "linesLength": 22, "startIndex": 37, "lines": ["net = nn.Sequential(\n", "    SimpleConv(3, 64),\n", "    SimpleConv(64, 128),\n", "    SimpleConv(128, 128),\n", "    SimpleConv(128, 128),\n", "    nn.MaxPool2d(2),\n", "    SimpleConv(128, 128),\n", "    SimpleConv(128, 128),\n", "    SimpleConv(128, 256),\n", "    nn.MaxPool2d(2),\n", "    SimpleConv(256, 256),\n", "    SimpleConv(256, 256),\n", "    nn.MaxPool2d(2),\n", "    SimpleConv(256, 512),\n", "    SimpleConv(512, 2048, ks=1, bn=False),\n", "    SimpleConv(2048, 256, ks=1, bn=False),\n", "    nn.MaxPool2d(2),\n", "    SimpleConv(256, 256, bn=False, drop=0),\n", "    nn.MaxPool2d(2),\n", "    Flatten(),\n", "    nn.Linear(256, 10)\n", ")"]}, {"block": 19, "type": "code", "linesLength": 8, "startIndex": 59, "lines": ["bm = BasicModel(net.cuda(), name='simplenet')\n", "learn = ConvLearner(data, bm)\n", "learn.crit = nn.CrossEntropyLoss()\n", "learn.opt_fn = optim.Adam\n", "learn.unfreeze()\n", "learn.metrics=[accuracy]\n", "lr = 1e-3\n", "wd = 5e-3"]}, {"block": 20, "type": "code", "linesLength": 3, "startIndex": 67, "lines": ["#sgd mom\n", "learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 70, "lines": ["#adam\n", "learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 73, "lines": ["learn.fit(lr, 1, wds=wd, cycle_len=20, use_clr=(32,10))"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["learn.fit(lr, 1, wds=wd, cycle_len=5, use_clr=(32,10))"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["learn.save('0')"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 76, "lines": ["learn.fit(lr, 3, cycle_len=1, cycle_mult=2, wds=wd)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 77, "lines": ["learn.save('1')"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 78, "lines": ["learn.fit(lr, 1, wds=wd, cycle_len=10, use_clr=(32,10))"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 79, "lines": ["learn.save('2')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 80, "lines": ["## Fin"]}, {"block": 30, "type": "code", "linesLength": 0, "startIndex": 81, "lines": []}]