[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Basic core"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["This module contains all the basic functions we need in other modules of the fastai library (split with [`torch_core`](/torch_core.html#torch_core) that contains the ones requiring pytorch). Its documentation can easily be skipped at a first read, unless you want to know what a given function does."]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 2, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.core import * "]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["## Global constants"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["`default_cpus = min(16, num_cpus())` <div style=\"text-align: right\"><a href=\"https://github.com/fastai/fastai/blob/master/fastai/core.py#L45\">[source]</a></div>"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Check functions"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["show_doc(has_arg)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Examples for two [`fastai.core`](/core.html#core) functions.  Docstring shown before calling [`has_arg`](/core.html#has_arg) for reference\n"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["has_arg(download_url,'url')"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["has_arg(index_row,'x')"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["has_arg(index_row,'a')"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["show_doc(ifnone)"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["param,alt_param = None,5\n", "ifnone(param,alt_param)"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["param,alt_param = None,[1,2,3]\n", "ifnone(param,alt_param)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["show_doc(is1d)"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 18, "lines": ["two_d_array = np.arange(12).reshape(6,2)\n", "print( two_d_array )\n", "print( is1d(two_d_array) )"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["is1d(two_d_array.flatten())"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["show_doc(is_listy)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Check if `x` is a `Collection`. `Tuple` or `List` qualify"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["some_data = [1,2,3]\n", "is_listy(some_data)"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 26, "lines": ["some_data = (1,2,3)\n", "is_listy(some_data)"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["some_data = 1024\n", "print( is_listy(some_data) )"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["print( is_listy( [some_data] ) )"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["some_data = dict([('a',1),('b',2),('c',3)])\n", "print( some_data )\n", "print( some_data.keys() )"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["print( is_listy(some_data) )\n", "print( is_listy(some_data.keys()) )"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["print( is_listy(list(some_data.keys())) )"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["show_doc(is_tuple)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Check if `x` is a `tuple`."]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["print( is_tuple( [1,2,3] ) )"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["print( is_tuple( (1,2,3) ) )"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["## Collection related functions"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["show_doc(arange_of)"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["arange_of([5,6,7])"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["type(arange_of([5,6,7]))"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["show_doc(array)"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["array([1,2,3])"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["Note that after we call the generator, we do not reset.  So the [`array`](/core.html#array) call has 5 less entries than it would if we ran from the start of the generator."]}, {"block": 37, "type": "code", "linesLength": 9, "startIndex": 48, "lines": ["def data_gen():\n", "    i = 100.01\n", "    while i<200:\n", "        yield i\n", "        i += 1.\n", "\n", "ex_data_gen = data_gen()\n", "for _ in range(5):\n", "    print(next(ex_data_gen))"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["array(ex_data_gen)"]}, {"block": 39, "type": "code", "linesLength": 3, "startIndex": 58, "lines": ["ex_data_gen_int = data_gen()\n", "\n", "array(ex_data_gen_int,dtype=int)  #Cast output to int array"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["show_doc(arrays_split)"]}, {"block": 41, "type": "code", "linesLength": 7, "startIndex": 62, "lines": ["data_a = np.arange(15)\n", "data_b = np.arange(15)[::-1]\n", "\n", "mask_a = (data_a > 10)\n", "print(data_a)\n", "print(data_b)\n", "print(mask_a)"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 69, "lines": ["arrays_split(mask_a,data_a)"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["np.vstack([data_a,data_b]).transpose().shape"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["arrays_split(mask_a,np.vstack([data_a,data_b]).transpose()) #must match on dimension 0"]}, {"block": 45, "type": "code", "linesLength": 1, "startIndex": 72, "lines": ["show_doc(chunks)"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["You can transform a `Collection` into an `Iterable` of 'n' sized chunks by calling [`chunks`](/core.html#chunks):"]}, {"block": 47, "type": "code", "linesLength": 3, "startIndex": 74, "lines": ["data = [0,1,2,3,4,5,6,7,8,9]\n", "for chunk in chunks(data, 2):\n", "    print(chunk)"]}, {"block": 48, "type": "code", "linesLength": 2, "startIndex": 77, "lines": ["for chunk in chunks(data, 3):\n", "    print(chunk)"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 79, "lines": ["show_doc(df_names_to_idx)"]}, {"block": 50, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["ex_df = pd.DataFrame.from_dict({\"a\":[1,1,1],\"b\":[2,2,2]})\n", "print(ex_df)"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["df_names_to_idx('b',ex_df)"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["show_doc(extract_kwargs)"]}, {"block": 53, "type": "code", "linesLength": 2, "startIndex": 84, "lines": ["key_word_args = {\"a\":2,\"some_list\":[1,2,3],\"param\":'mean'}\n", "key_word_args"]}, {"block": 54, "type": "code", "linesLength": 2, "startIndex": 86, "lines": ["(extracted_val,remainder) = extract_kwargs(['param'],key_word_args)\n", "print( extracted_val,remainder )"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["show_doc(idx_dict)"]}, {"block": 56, "type": "code", "linesLength": 1, "startIndex": 89, "lines": ["idx_dict(['a','b','c'])"]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["show_doc(index_row)"]}, {"block": 58, "type": "code", "linesLength": 2, "startIndex": 91, "lines": ["data = [0,1,2,3,4,5,6,7,8,9]\n", "index_row(data,4)"]}, {"block": 59, "type": "code", "linesLength": 1, "startIndex": 93, "lines": ["index_row(pd.Series(data),7)"]}, {"block": 60, "type": "code", "linesLength": 2, "startIndex": 94, "lines": ["data_df = pd.DataFrame([data[::-1],data]).transpose()\n", "data_df"]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["index_row(data_df,7)"]}, {"block": 62, "type": "code", "linesLength": 1, "startIndex": 97, "lines": ["show_doc(listify)"]}, {"block": 63, "type": "code", "linesLength": 2, "startIndex": 98, "lines": ["to_match = np.arange(12)\n", "listify('a',to_match)"]}, {"block": 64, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["listify('a',5)"]}, {"block": 65, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["listify(77.1,3)"]}, {"block": 66, "type": "code", "linesLength": 1, "startIndex": 102, "lines": ["listify( (1,2,3) )"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 103, "lines": ["listify((1,2,3),('a','b','c'))"]}, {"block": 68, "type": "code", "linesLength": 1, "startIndex": 104, "lines": ["show_doc(random_split)"]}, {"block": 69, "type": "markdown", "linesLength": 1, "startIndex": 105, "lines": ["Splitting is done here with `random.uniform()` so you may not get the exact split percentage for small data sets"]}, {"block": 70, "type": "code", "linesLength": 2, "startIndex": 106, "lines": ["data = np.arange(20).reshape(10,2)\n", "data.tolist()"]}, {"block": 71, "type": "code", "linesLength": 1, "startIndex": 108, "lines": ["random_split(0.20,data.tolist())"]}, {"block": 72, "type": "code", "linesLength": 1, "startIndex": 109, "lines": ["random_split(0.20,pd.DataFrame(data))"]}, {"block": 73, "type": "code", "linesLength": 1, "startIndex": 110, "lines": ["show_doc(range_of)"]}, {"block": 74, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["range_of([5,4,3])"]}, {"block": 75, "type": "code", "linesLength": 1, "startIndex": 112, "lines": ["range_of(np.arange(10)[::-1])"]}, {"block": 76, "type": "code", "linesLength": 1, "startIndex": 113, "lines": ["show_doc(series2cat)"]}, {"block": 77, "type": "code", "linesLength": 2, "startIndex": 114, "lines": ["data_df = pd.DataFrame.from_dict({\"a\":[1,1,1,2,2,2],\"b\":['f','e','f','g','g','g']})\n", "data_df"]}, {"block": 78, "type": "code", "linesLength": 1, "startIndex": 116, "lines": ["data_df['b']"]}, {"block": 79, "type": "code", "linesLength": 2, "startIndex": 117, "lines": ["series2cat(data_df,'b')\n", "data_df['b']"]}, {"block": 80, "type": "code", "linesLength": 2, "startIndex": 119, "lines": ["series2cat(data_df,'a')\n", "data_df['a']"]}, {"block": 81, "type": "code", "linesLength": 1, "startIndex": 121, "lines": ["show_doc(split_kwargs_by_func)"]}, {"block": 82, "type": "code", "linesLength": 2, "startIndex": 122, "lines": ["key_word_args = {'url':'http://fast.ai','dest':'./','new_var':[1,2,3],'testvalue':42}\n", "split_kwargs_by_func(key_word_args,download_url)"]}, {"block": 83, "type": "code", "linesLength": 1, "startIndex": 124, "lines": ["show_doc(to_int)"]}, {"block": 84, "type": "code", "linesLength": 1, "startIndex": 125, "lines": ["to_int(3.1415)"]}, {"block": 85, "type": "code", "linesLength": 2, "startIndex": 126, "lines": ["data = [1.2,3.4,7.25]\n", "to_int(data)"]}, {"block": 86, "type": "code", "linesLength": 1, "startIndex": 128, "lines": ["show_doc(uniqueify)"]}, {"block": 87, "type": "code", "linesLength": 1, "startIndex": 129, "lines": ["uniqueify( pd.Series(data=['a','a','b','b','f','g']) )"]}, {"block": 88, "type": "markdown", "linesLength": 1, "startIndex": 130, "lines": ["## Files management and downloads"]}, {"block": 89, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["show_doc(download_url)"]}, {"block": 90, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["show_doc(find_classes)"]}, {"block": 91, "type": "code", "linesLength": 1, "startIndex": 133, "lines": ["show_doc(join_path)"]}, {"block": 92, "type": "code", "linesLength": 1, "startIndex": 134, "lines": ["show_doc(join_paths)"]}, {"block": 93, "type": "code", "linesLength": 1, "startIndex": 135, "lines": ["show_doc(loadtxt_str)"]}, {"block": 94, "type": "code", "linesLength": 1, "startIndex": 136, "lines": ["show_doc(save_texts)"]}, {"block": 95, "type": "markdown", "linesLength": 1, "startIndex": 137, "lines": ["## Multiprocessing"]}, {"block": 96, "type": "code", "linesLength": 1, "startIndex": 138, "lines": ["show_doc(num_cpus)"]}, {"block": 97, "type": "code", "linesLength": 1, "startIndex": 139, "lines": ["show_doc(parallel)"]}, {"block": 98, "type": "markdown", "linesLength": 1, "startIndex": 140, "lines": ["`func` must accept both the value and index of each `arr` element."]}, {"block": 99, "type": "code", "linesLength": 5, "startIndex": 141, "lines": ["def my_func(value, index):\n", "    print(\"Index: {}, Value: {}\".format(index, value))\n", " \n", "my_array = [i*2 for i in range(5)]\n", "parallel(my_func, my_array, max_workers=3)"]}, {"block": 100, "type": "code", "linesLength": 1, "startIndex": 146, "lines": ["show_doc(partition)"]}, {"block": 101, "type": "code", "linesLength": 1, "startIndex": 147, "lines": ["show_doc(partition_by_cores)"]}, {"block": 102, "type": "markdown", "linesLength": 1, "startIndex": 148, "lines": ["## Data block API"]}, {"block": 103, "type": "code", "linesLength": 1, "startIndex": 149, "lines": ["show_doc(ItemBase, title_level=3)"]}, {"block": 104, "type": "markdown", "linesLength": 1, "startIndex": 150, "lines": ["All items used in fastai should subclass this. Must have a [`data`](/tabular.data.html#tabular.data) field that will be used when collating in mini-batches."]}, {"block": 105, "type": "code", "linesLength": 1, "startIndex": 151, "lines": ["show_doc(ItemBase.apply_tfms)"]}, {"block": 106, "type": "code", "linesLength": 1, "startIndex": 152, "lines": ["show_doc(ItemBase.show)"]}, {"block": 107, "type": "markdown", "linesLength": 1, "startIndex": 153, "lines": ["The default behavior is to set the string representation of this object as title of `ax`."]}, {"block": 108, "type": "code", "linesLength": 1, "startIndex": 154, "lines": ["show_doc(Category, title_level=3)"]}, {"block": 109, "type": "markdown", "linesLength": 1, "startIndex": 155, "lines": ["Create a [`Category`](/core.html#Category) with an `obj` of index [`data`](/tabular.data.html#tabular.data) in a certain classes list. "]}, {"block": 110, "type": "code", "linesLength": 1, "startIndex": 156, "lines": ["show_doc(EmptyLabel, title_level=3)"]}, {"block": 111, "type": "code", "linesLength": 1, "startIndex": 157, "lines": ["show_doc(MultiCategory, title_level=3)"]}, {"block": 112, "type": "markdown", "linesLength": 1, "startIndex": 158, "lines": ["Create a [`MultiCategory`](/core.html#MultiCategory) with an `obj` that is a collection of labels. [`data`](/tabular.data.html#tabular.data) corresponds to the one-hot encoded labels and `raw` is a list of associated string."]}, {"block": 113, "type": "code", "linesLength": 1, "startIndex": 159, "lines": ["show_doc(FloatItem)"]}, {"block": 114, "type": "markdown", "linesLength": 1, "startIndex": 160, "lines": ["## Others"]}, {"block": 115, "type": "code", "linesLength": 1, "startIndex": 161, "lines": ["show_doc(camel2snake)"]}, {"block": 116, "type": "code", "linesLength": 1, "startIndex": 162, "lines": ["camel2snake('DeviceDataLoader')"]}, {"block": 117, "type": "code", "linesLength": 1, "startIndex": 163, "lines": ["show_doc(even_mults)"]}, {"block": 118, "type": "markdown", "linesLength": 1, "startIndex": 164, "lines": ["In linear scales each element is equidistant from its neighbors:"]}, {"block": 119, "type": "code", "linesLength": 3, "startIndex": 165, "lines": ["# from 1 to 10 in 5 steps\n", "t = np.linspace(1, 10, 5)\n", "t"]}, {"block": 120, "type": "code", "linesLength": 2, "startIndex": 168, "lines": ["for i in range(len(t) - 1):\n", "    print(t[i+1] - t[i])"]}, {"block": 121, "type": "markdown", "linesLength": 1, "startIndex": 170, "lines": ["In logarithmic scales, each element is a multiple of the previous entry:"]}, {"block": 122, "type": "code", "linesLength": 2, "startIndex": 171, "lines": ["t = even_mults(1, 10, 5)\n", "t"]}, {"block": 123, "type": "code", "linesLength": 3, "startIndex": 173, "lines": ["# notice how each number is a multiple of its predecessor\n", "for i in range(len(t) - 1):\n", "    print(t[i+1] / t[i])"]}, {"block": 124, "type": "code", "linesLength": 1, "startIndex": 176, "lines": ["show_doc(func_args)"]}, {"block": 125, "type": "code", "linesLength": 1, "startIndex": 177, "lines": ["func_args(download_url)"]}, {"block": 126, "type": "markdown", "linesLength": 1, "startIndex": 178, "lines": ["Additionally, [`func_args`](/core.html#func_args) can be used with functions that do not belong to the fastai library"]}, {"block": 127, "type": "code", "linesLength": 1, "startIndex": 179, "lines": ["func_args(np.linspace)"]}, {"block": 128, "type": "code", "linesLength": 1, "startIndex": 180, "lines": ["show_doc(noop)"]}, {"block": 129, "type": "markdown", "linesLength": 1, "startIndex": 181, "lines": ["Return `x`."]}, {"block": 130, "type": "code", "linesLength": 2, "startIndex": 182, "lines": ["# object is returned as-is\n", "noop([1,2,3])"]}, {"block": 131, "type": "code", "linesLength": 1, "startIndex": 184, "lines": ["show_doc(one_hot)"]}, {"block": 132, "type": "markdown", "linesLength": 1, "startIndex": 185, "lines": ["One-hot encoding is a standard machine learning technique. Assume we are dealing with a 10-class classification problem and we are supplied a list of labels:"]}, {"block": 133, "type": "code", "linesLength": 1, "startIndex": 186, "lines": ["y = [1, 4, 4, 5, 7, 9, 2, 4, 0]"]}, {"block": 134, "type": "code", "linesLength": 1, "startIndex": 187, "lines": ["jekyll_note(\"\"\"y is zero-indexed, therefore its first element (1) belongs to class 2, its second element (4) to class 5 and so on.\"\"\")"]}, {"block": 135, "type": "code", "linesLength": 1, "startIndex": 188, "lines": ["len(y)"]}, {"block": 136, "type": "markdown", "linesLength": 1, "startIndex": 189, "lines": ["y can equivalently be expressed as a matrix of 9 rows and 10 columns, where each row represents one element of the original y. "]}, {"block": 137, "type": "code", "linesLength": 2, "startIndex": 190, "lines": ["for label in y:\n", "    print(one_hot(label, 10))"]}, {"block": 138, "type": "code", "linesLength": 1, "startIndex": 192, "lines": ["show_doc(show_some)"]}, {"block": 139, "type": "code", "linesLength": 3, "startIndex": 193, "lines": ["# select 3 elements from a list\n", "some_data = show_some([10, 20, 30, 40, 50], 3) \n", "some_data"]}, {"block": 140, "type": "code", "linesLength": 1, "startIndex": 196, "lines": ["type(some_data) "]}, {"block": 141, "type": "code", "linesLength": 3, "startIndex": 197, "lines": ["# the separator can be changed\n", "some_data = show_some([10, 20, 30, 40, 50], 3, sep = '---') \n", "some_data"]}, {"block": 142, "type": "code", "linesLength": 1, "startIndex": 200, "lines": ["some_data[:-3]"]}, {"block": 143, "type": "markdown", "linesLength": 1, "startIndex": 201, "lines": ["[`show_some`](/core.html#show_some) can take as input any class with \\_\\_len\\_\\_ and \\_\\_getitem\\_\\_ "]}, {"block": 144, "type": "code", "linesLength": 10, "startIndex": 202, "lines": ["class Any(object):\n", "    def __init__(self, data):\n", "        self.data = data\n", "    def __len__(self):\n", "        return len(self.data)\n", "    def __getitem__(self,i):\n", "        return self.data[i]\n", " \n", "some_other_data = Any('nice')\n", "show_some(some_other_data, 2)"]}, {"block": 145, "type": "code", "linesLength": 1, "startIndex": 212, "lines": ["show_doc(subplots)"]}, {"block": 146, "type": "code", "linesLength": 1, "startIndex": 213, "lines": ["show_doc(text2html_table)"]}, {"block": 147, "type": "markdown", "linesLength": 1, "startIndex": 214, "lines": ["## Undocumented Methods - Methods moved below this line will intentionally be hidden"]}, {"block": 148, "type": "markdown", "linesLength": 1, "startIndex": 215, "lines": ["## New Methods - Please document or move to the undocumented section"]}, {"block": 149, "type": "code", "linesLength": 1, "startIndex": 216, "lines": ["show_doc(is_dict)"]}, {"block": 150, "type": "markdown", "linesLength": 0, "startIndex": 217, "lines": []}]