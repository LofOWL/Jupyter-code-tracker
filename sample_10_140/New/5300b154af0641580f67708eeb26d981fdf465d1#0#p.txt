[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Testing transforms.py"]}, {"block": 1, "type": "code", "linesLength": 9, "startIndex": 1, "lines": ["%reload_ext autoreload\n", "%autoreload 2\n", "%matplotlib inline\n", "\n", "# This file contains all the main external libs we'll use\n", "from fastai.imports import *\n", "from fastai.transforms import *\n", "from fastai.plots import *\n", "from fastai.dataset import *"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 10, "lines": ["bb =['195.927', '320.607', '954.697', '699.399']\n", "f = 'img_02642.jpg'\n", "PIL.Image.open(\"fastai/images/\" + f).size"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["PATH = \"data/fish/\""]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["fnames,corner_labels,_,_ = parse_csv_labels(f'{PATH}trn_bb_corners_labels', skip_header=False)"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["corner_labels[\"img_02642.jpg\"]"]}, {"block": 6, "type": "code", "linesLength": 9, "startIndex": 16, "lines": ["def create_corner_rect(bb, color='red'):\n", "    bb = np.array(bb, dtype=np.float32)\n", "    return plt.Rectangle((bb[1], bb[0]), bb[3]-bb[1], bb[2]-bb[0], color=color, fill=False, lw=3)\n", "\n", "def show_corner_bb(f='img_04908.jpg'):\n", "    file_path = f'{PATH}images/{f}'\n", "    bb = corner_labels[f]\n", "    plots_from_files([file_path])\n", "    plt.gca().add_patch(create_corner_rect(bb))"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["show_corner_bb(f = 'img_02642.jpg')"]}, {"block": 8, "type": "code", "linesLength": 4, "startIndex": 26, "lines": ["def get_x(f):\n", "        file_path = f'{PATH}/images/{f}'\n", "        im = PIL.Image.open(file_path).convert('RGB')\n", "        return np.array(im, dtype=np.float32)/255."]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 30, "lines": ["f = 'img_02642.jpg'\n", "x = get_x(f)\n", "y = np.array(corner_labels[f], dtype=np.float32)\n", "y"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["x.shape"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["corner_labels[f]"]}, {"block": 12, "type": "code", "linesLength": 6, "startIndex": 36, "lines": ["def create_rect(bb, color='red'):\n", "    return plt.Rectangle((bb[1], bb[0]), bb[3]-bb[1], bb[2]-bb[0], color=color, fill=False, lw=3)\n", "\n", "def plotXY(x,y):\n", "    plots([x])\n", "    plt.gca().add_patch(create_rect(y))"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["plotXY(x,y)"]}, {"block": 14, "type": "code", "linesLength": 23, "startIndex": 43, "lines": ["import enum\n", "\n", "class TfmType(enum.Enum):\n", "    NO = 1\n", "    PIXEL = 2\n", "    COORD = 3\n", "\n", "class Transform():\n", "    def __init__(self, tfm_y=TfmType.NO): self.tfm_y=tfm_y\n", "    def __call__(self, x, y):\n", "        self.set_state()\n", "        x,y = ((self.transform(x),y) if self.tfm_y==TfmType.NO\n", "                else self.transform(x,y) if self.tfm_y==TfmType.PIXEL\n", "                else self.transform_coord(x,y))\n", "        return x,y\n", "\n", "    def transform_coord(self, x, y): return self.transform(x),y\n", "    \n", "    def transform(self, x, y=None):\n", "        x = self.do_transform(x)\n", "        return (x, self.do_transform(y)) if y is not None else x\n", "\n", "    def do_transform(self, x): raise NotImplementedError"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## Random Dihedral"]}, {"block": 16, "type": "code", "linesLength": 14, "startIndex": 67, "lines": ["def to_bb(YY):\n", "    ((r1,r2),(c1,c2)) = np.nonzero(YY)\n", "    top_row = min(r1,r2)\n", "    left_col = min(c1,c2)\n", "    h = np.abs(r1-r2)\n", "    w = np.abs(c1-c2)\n", "    return np.array([top_row, left_col, top_row + h, left_col + w])\n", "\n", "def coords2px(y):\n", "    rows = np.rint([y[0], y[2]]).astype(int)\n", "    cols = np.rint([y[1], y[3]]).astype(int)\n", "    Y = np.zeros((x.shape[0], x.shape[1]))\n", "    Y[rows, cols] = 1\n", "    return Y"]}, {"block": 17, "type": "code", "linesLength": 6, "startIndex": 81, "lines": ["class CoordTransform(Transform):\n", "    def transform_coord(self, x, y):\n", "        y = coords2px(y)\n", "        x,y = self.transform(x,y)\n", "        y = to_bb(y)\n", "        return x, y"]}, {"block": 18, "type": "code", "linesLength": 8, "startIndex": 87, "lines": ["class RandomDihedralXY(CoordTransform):\n", "    def set_state(self):\n", "        self.rot_times = random.randint(0,3)\n", "        self.do_flip = random.random()<0.5\n", "\n", "    def do_transform(self, x):\n", "        x = np.rot90(x, self.rot_times)\n", "        return np.fliplr(x).copy() if self.do_flip else x"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 95, "lines": ["xx, y = RandomDihedralXY(TfmType.NO)(x, y)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["plotXY(xx,y)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 97, "lines": ["xx, yy = RandomDihedralXY(TfmType.COORD)(x, y)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["plotXY(xx,yy)"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 99, "lines": ["xx, yy = RandomDihedralXY(TfmType.PIXEL)(x, x)"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["plots([xx,yy])"]}, {"block": 25, "type": "code", "linesLength": 0, "startIndex": 101, "lines": []}]