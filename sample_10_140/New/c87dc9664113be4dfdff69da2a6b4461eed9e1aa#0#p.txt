[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["#Using icsound\n", "\n", "By: Andres Cabrera mantaraya36@gmail.com"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Starting the Csound engine"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["To use *icsound* create an icsound instance:"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 5, "lines": ["import icsound\n", "cs = icsound.icsound()"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Then start the engine:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 8, "lines": ["cs.start_engine()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["You can set the properties of the Csound engine with parameters to the start_engine() function."]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["help(cs.start_engine)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["The engine runs in a separate thread, so it doesn't block execution of python."]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["cs.start_engine()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Use the *%%csound* magic command to directly type csound language code in the cell and send it to the current engine."]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 14, "lines": ["%%csound\n", "gkinstr init 1"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["%%csound\n", "print i(gkinstr)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["So where did it print?"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["cs.print_log()"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["By default, messages from Csound are not shown, but they are stored in an internal buffer. You can view them with the print_log() function. If the log is getting too long and cinfusing, use the clear_log() function."]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Function tables"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["You can create csound f-tables directly from python lists or numpy arrays:"]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["cs.fill_table(1, [4,5,7,0,8,7,9])\n", "cs.fill_table(2, array([8,7,9, 1, 1, 1]))"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Tables can be plotted in the usual matplotlib way, but icsound provides a plot_table function which styles the graphs."]}, {"block": 20, "type": "code", "linesLength": 3, "startIndex": 26, "lines": ["cs.plot_table(1)\n", "cs.plot_table(2, reuse=True)\n", "grid()"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["You can get the function table values from the csound instance:"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["cs.get_table_data(1)"]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 31, "lines": ["cs.make_table(2, 1024, 10, 1)\n", "cs.make_table(3, 1024, -10, 0.5, 1)\n", "cs.plot_table(2)\n", "cs.plot_table(3, reuse=True)\n", "#ylim((-1.1,1.1))"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["cs.get_table_data(2)[100: 105]"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["If ctypes is available in your system, icsound will use it to significantly speed up data transfer to and from Csound f-tables. The following will create 320 tables with 720 points each:"]}, {"block": 26, "type": "code", "linesLength": 5, "startIndex": 38, "lines": ["randsig = random.random((320, 720))\n", "i = 0\n", "for i,row in enumerate(randsig):\n", "    cs.fill_table(50 + i, row)\n", "    print i, '..', "]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["cs.plot_table(104)"]}, {"block": 28, "type": "heading", "linesLength": 1, "startIndex": 44, "lines": ["Sending instruments"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["You can send instruments to the running csound engine with the *%%csound* magic. Any syntax errors will be displayed inline."]}, {"block": 30, "type": "code", "linesLength": 3, "startIndex": 46, "lines": ["%%csound\n", "instr 1\n", "asig asds"]}, {"block": 31, "type": "code", "linesLength": 4, "startIndex": 49, "lines": ["%%csound\n", "instr 1\n", "asig oscil 0.5, 440\n", "outs asig, asig\n"]}, {"block": 32, "type": "code", "linesLength": 5, "startIndex": 53, "lines": ["%%csound\n", "instr 1\n", "asig oscil 0.5, 440\n", "outs asig, asig\n", "endin"]}, {"block": 33, "type": "heading", "linesLength": 1, "startIndex": 58, "lines": ["Channels"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Csound channels can be used to send values to Csound. They can affect running instances of instruments by using the invalue/chnget opcodes:"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["cs.set_channel(\"val\", 10)"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["You can also read the channels from Csound. These channels can be set from icsound or within instruments with the outvalue/chnset opcodes:"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["cs.get_channel(\"val\")"]}, {"block": 38, "type": "heading", "linesLength": 1, "startIndex": 63, "lines": ["Recording the output"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["You can record the realtime output from csound: (This requires Csound 6.04 - unrealeased as of this writing...)"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 65, "lines": ["cs.start_record(\"out.wav\")"]}, {"block": 41, "type": "code", "linesLength": 3, "startIndex": 66, "lines": ["cs.send_score(\"i 1 0 1\")\n", "import time\n", "time.sleep(1)"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 69, "lines": ["cs.stop_record()"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["!aplay out.wav"]}, {"block": 44, "type": "heading", "linesLength": 1, "startIndex": 71, "lines": ["Remote engines"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["You can also interact with engines through UDP. Note that not all operations are available, notably reading f-tables, but you can send instruments and note events to the remote engine."]}, {"block": 46, "type": "code", "linesLength": 2, "startIndex": 73, "lines": ["cs_client = icsound.icsound()\n", "cs_client.start_client()"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["cs.clear_log()"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["Now send notes and instruments from the client:"]}, {"block": 49, "type": "code", "linesLength": 2, "startIndex": 77, "lines": ["cs_client.send_score(\"i 1 0 1\")\n", "cs_client.send_code(\"print i(gkinstr)\")"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["And show the log in the server:"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 80, "lines": ["cs.print_log()"]}, {"block": 52, "type": "heading", "linesLength": 1, "startIndex": 81, "lines": ["Stopping the engine"]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["cs.stop_engine()"]}, {"block": 54, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["cs"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 84, "lines": ["cs.stop_engine()"]}, {"block": 56, "type": "code", "linesLength": 0, "startIndex": 85, "lines": []}, {"block": 57, "type": "heading", "linesLength": 1, "startIndex": 85, "lines": ["Other tests"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["Another engine:"]}, {"block": 59, "type": "code", "linesLength": 1, "startIndex": 87, "lines": ["ics = icsound.icsound()"]}, {"block": 60, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["ics.start_engine(buffersize=64)"]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 89, "lines": ["ics.list_interfaces()"]}, {"block": 62, "type": "code", "linesLength": 6, "startIndex": 90, "lines": ["%%csound\n", "\n", "instr 1\n", "asig oscil 0.5, 440\n", "outs asig, asig\n", "endin"]}, {"block": 63, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["ics.send_score(\"i 1 0 0.5\")"]}, {"block": 64, "type": "code", "linesLength": 1, "startIndex": 97, "lines": ["ics.stop_engine()"]}, {"block": 65, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["del ics"]}, {"block": 66, "type": "code", "linesLength": 0, "startIndex": 99, "lines": []}]