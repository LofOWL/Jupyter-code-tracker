[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["## ThinkDSP\n", "\n", "This notebook contains solutions to exercises in Chapter 2: Harmonics\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 17, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "%matplotlib inline\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import numpy as np\n", "import math\n", "\n", "import warnings\n", "warnings.filterwarnings('ignore')\n", "\n", "from IPython.html.widgets import interact, interact_manual, fixed\n", "from IPython.html import widgets\n", "from IPython.display import display\n", "\n", "PI2 = 2 * math.pi"]}, {"block": 2, "type": "markdown", "linesLength": 7, "startIndex": 24, "lines": ["### Exercise\n", "\n", "A sawtooth signal has a waveform that ramps up linearly from -1 to 1, then drops to -1 and repeats. See http://en.wikipedia.org/wiki/Sawtooth_wave\n", "\n", "Write a class called `SawtoothSignal` that extends `Signal` and provides `evaluate` to evaluate a sawtooth signal.\n", "\n", "Compute the spectrum of a sawtooth wave. How does the harmonic structure compare to triangle and square waves? "]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 31, "lines": ["### Solution\n", "\n", "My solution is basically a simplified version of TriangleSignal."]}, {"block": 4, "type": "code", "linesLength": 14, "startIndex": 34, "lines": ["class SawtoothSignal(thinkdsp.Sinusoid):\n", "    \"\"\"Represents a sawtooth signal.\"\"\"\n", "    \n", "    def evaluate(self, ts):\n", "        \"\"\"Evaluates the signal at the given times.\n", "\n", "        ts: float array of times\n", "        \n", "        returns: float wave array\n", "        \"\"\"\n", "        cycles = self.freq * ts + self.offset / PI2\n", "        frac, _ = np.modf(cycles)\n", "        ys = thinkdsp.normalize(thinkdsp.unbias(frac), self.amp)\n", "        return ys"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Here's what it sounds like:"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 49, "lines": ["sawtooth = SawtoothSignal().make_wave(duration=0.5, framerate=40000)\n", "sawtooth.make_audio()"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["And here's what the spectrum looks like:"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["sawtooth.make_spectrum().plot()"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["Compared to a square wave, the sawtooth drops off similarly, but it includes both even and odd harmonics.  Notice that I had to cut the amplitude of the square wave to make them comparable."]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 54, "lines": ["sawtooth.make_spectrum().plot(color='gray')\n", "square = thinkdsp.SquareSignal(amp=0.5).make_wave(duration=0.5, framerate=40000)\n", "square.make_spectrum().plot()"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["Compared to a triangle wave, the sawtooth doesn't drop off as fast."]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 58, "lines": ["sawtooth.make_spectrum().plot(color='gray')\n", "triangle = thinkdsp.TriangleSignal(amp=0.79).make_wave(duration=0.5, framerate=40000)\n", "triangle.make_spectrum().plot()"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Specifically, the harmonics of the triangle wave drop off in proportion to $1/f^2$, while the sawtooth drops off like $1/f$."]}, {"block": 14, "type": "markdown", "linesLength": 6, "startIndex": 62, "lines": ["### Exercise \n", "\n", "Make a square signal at 1100 Hz and make a wave that samples it\n", "at 10000 frames per second.  If you plot the spectrum, you can\n", "see that most of the harmonics are aliased.\n", "When you listen to the wave, can you hear the aliased harmonics? "]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 68, "lines": ["### Solution\n", "\n", "Here's the square wave:"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["square = thinkdsp.SquareSignal(1100).make_wave(duration=0.5, framerate=10000)"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["Here's what the spectrum looks like:"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 73, "lines": ["square.make_spectrum().plot()"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 74, "lines": ["The fundamental and the first harmonic are in the right place, but the second harmonic, which should be 5500 Hz, is aliased to 4500 Hz.  The third, which should be 7700 Hz, is aliased to 2300 Hz, and so on.\n", "\n", "When you listen to the wave, you can hear these aliased harmonics as a low tone."]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 77, "lines": ["square.make_audio()"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["The tone I hear most prominently is at 300 Hz.  If you listen to this 300 Hz sine wave, you might hear what I mean."]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 79, "lines": ["thinkdsp.SinSignal(300).make_wave(duration=0.5, framerate=10000).make_audio()"]}, {"block": 23, "type": "markdown", "linesLength": 9, "startIndex": 80, "lines": ["### Exercise\n", "\n", "If you have a spectrum object, `spectrum`, and print the first few values of `spectrum.fs`, you\u2019ll see that they start at zero. So `spectrum.hs[0]` is the magnitude of the component with frequency 0. But what does that mean?\n", "\n", "Try this experiment:\n", "\n", "1.    Make a triangle signal with frequency 440 and make a Wave with duration 0.01 seconds. Plot the waveform.\n", "2.    Make a Spectrum object and print `spectrum.hs[0]`. What is the amplitude and phase of this component?\n", "3.    Set `spectrum.hs[0] = 100`. Make a Wave from the modified Spectrum and plot it. What effect does this operation have on the waveform?"]}, {"block": 24, "type": "markdown", "linesLength": 3, "startIndex": 89, "lines": ["### Solution\n", "\n", "Here's the triangle wave:"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 92, "lines": ["triangle = thinkdsp.TriangleSignal().make_wave(duration=0.01)\n", "triangle.plot()"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["The first element of the spectrum is a complex number close to zero."]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 95, "lines": ["spectrum = triangle.make_spectrum()\n", "spectrum.hs[0]"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["If we add to the zero-frequency component, it has the effect of adding a vertical offset to the wave."]}, {"block": 29, "type": "code", "linesLength": 3, "startIndex": 98, "lines": ["spectrum.hs[0] = 100\n", "triangle.plot(color='gray')\n", "spectrum.make_wave().plot()"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 101, "lines": ["The zero-frequency component is the total of all the values in the signal, as we'll see when we get into the details of the DFT.  If the signal is unbiased, the zero-frequency component is 0.  In the context of electrical signals, the zero-frequency term is called the DC offset; that is, a direct current offset added to an AC signal."]}, {"block": 31, "type": "markdown", "linesLength": 7, "startIndex": 102, "lines": ["### Exercise\n", "\n", "Write a function that takes a Spectrum as a parameter and modifies it by dividing each element of hs by the corresponding frequency from fs. Test your function using one of the WAV files in the repository or any Wave object.\n", "\n", "1. Compute the Spectrum and plot it.\n", "2. Modify the Spectrum using your function and plot it again.\n", "3. Make a Wave from the modified Spectrum and listen to it. What effect does this operation have on the signal?"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 109, "lines": ["### Solution\n", "\n", "Here's my version of the function:"]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 112, "lines": ["def filter_spectrum(spectrum):\n", "    spectrum.hs /= spectrum.fs\n", "    spectrum.hs[0] = 0"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 115, "lines": ["Here's a triangle wave:"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 116, "lines": ["wave = thinkdsp.TriangleSignal(freq=440).make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["Here's what the before and after look like.  I scaled the after picture to make it visible on the same scale."]}, {"block": 37, "type": "code", "linesLength": 6, "startIndex": 119, "lines": ["high = 10000\n", "spectrum = wave.make_spectrum()\n", "spectrum.plot(high=high, color='gray')\n", "filter_spectrum(spectrum)\n", "spectrum.scale(440)\n", "spectrum.plot(high=high)"]}, {"block": 38, "type": "markdown", "linesLength": 3, "startIndex": 125, "lines": ["The filter clobbers the harmonics, so it acts like a low pass filter.\n", "\n", "Here's what it sounds like:"]}, {"block": 39, "type": "code", "linesLength": 2, "startIndex": 128, "lines": ["filtered = spectrum.make_wave()\n", "filtered.make_audio()"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 130, "lines": ["The triangle wave now sounds almost like a sine wave."]}, {"block": 41, "type": "markdown", "linesLength": 8, "startIndex": 131, "lines": ["### Exercise\n", "\n", "The triangle and square waves have odd harmonics only; the sawtooth wave has both even and odd harmonics. The harmonics of the square and sawtooth waves drop off in proportion to $1/f$; the harmonics of the triangle wave drop off like $1/f^2$. Can you find a waveform that has even and odd harmonics that drop off like $1/f^2$?\n", "\n", "Hint: There are two ways you could approach this: you could\n", "construct the signal you want by adding up sinusoids, or you\n", "could start with a signal that is similar to what you want and\n", "modify it."]}, {"block": 42, "type": "markdown", "linesLength": 3, "startIndex": 139, "lines": ["### Solution\n", "\n", "One option is to start with a sawtooth wave, which has all of the harmonics we need:"]}, {"block": 43, "type": "code", "linesLength": 4, "startIndex": 142, "lines": ["freq = 500\n", "signal = thinkdsp.SawtoothSignal(freq=freq)\n", "wave = signal.make_wave(duration=0.5, framerate=20000)\n", "wave.make_audio()"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 146, "lines": ["Here's what the spectrum looks like.  The harmonics drop off like $1/f$."]}, {"block": 45, "type": "code", "linesLength": 2, "startIndex": 147, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 149, "lines": ["If we apply the filter we wrote in the previous exercise, we can make the harmonics drop off like $1/f^2$."]}, {"block": 47, "type": "code", "linesLength": 4, "startIndex": 150, "lines": ["spectrum.plot(color='gray')\n", "filter_spectrum(spectrum)\n", "spectrum.scale(freq)\n", "spectrum.plot()"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 154, "lines": ["Here's what it sounds like:"]}, {"block": 49, "type": "code", "linesLength": 2, "startIndex": 155, "lines": ["wave = spectrum.make_wave()\n", "wave.make_audio()"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 157, "lines": ["And here's what the waveform looks like."]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 158, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 52, "type": "markdown", "linesLength": 3, "startIndex": 159, "lines": ["It's an interesting shape, but not easy to see what its functional form is.\n", "\n", "Another approach is to add up a series of cosine signals with the right frequencies and amplitudes."]}, {"block": 53, "type": "code", "linesLength": 4, "startIndex": 162, "lines": ["freqs = np.arange(500, 9500, 500)\n", "amps = 1 / freqs**2\n", "signal = sum(thinkdsp.CosSignal(freq, amp) for freq, amp in zip(freqs, amps))\n", "signal"]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 166, "lines": ["Here's what the spectrum looks like:"]}, {"block": 55, "type": "code", "linesLength": 2, "startIndex": 167, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 169, "lines": ["Here's what it sounds like:"]}, {"block": 57, "type": "code", "linesLength": 2, "startIndex": 170, "lines": ["wave = signal.make_wave(duration=0.5, framerate=20000)\n", "wave.make_audio()"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 172, "lines": ["And here's what the waveform looks like."]}, {"block": 59, "type": "code", "linesLength": 1, "startIndex": 173, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 174, "lines": ["If those look to you like parabolas, you might be right.  `thinkdsp` provides `ParabolicSignal`, which computes parabolic waveforms."]}, {"block": 61, "type": "code", "linesLength": 2, "startIndex": 175, "lines": ["wave = thinkdsp.ParabolicSignal(freq=500).make_wave(duration=0.5, framerate=20000)\n", "wave.make_audio()"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 177, "lines": ["Here's what the waveform looks like:"]}, {"block": 63, "type": "code", "linesLength": 1, "startIndex": 178, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 179, "lines": ["A parabolic signal has even and odd harmonics which drop off like $1/f^2$:"]}, {"block": 65, "type": "code", "linesLength": 2, "startIndex": 180, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}]