[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# All the Linear Algebra You Need for AI"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["The purpose of this notebook is to serve as an explanation of two crucial linear algebra operations used when coding neural networks: matrix multiplication and broadcasting."]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Introduction"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["**Matrix multiplication** is a way of combining two matrices (involving multiplying and summing their entries in a particular way).  **Broadcasting** refers to how libraries such as Numpy and PyTorch can perform operations on matrices/vectors with mismatched dimensions (in particular cases, with set rules).  We will use broadcasting to show an alternative way of thinking about matrix multiplication from, different from the way it is standardly taught."]}, {"block": 4, "type": "markdown", "linesLength": 12, "startIndex": 4, "lines": ["In keeping with the [fast.ai teaching philosophy](http://www.fast.ai/2016/10/08/teaching-philosophy/) of [\"the whole game\"](https://www.amazon.com/Making-Learning-Whole-Principles-Transform/dp/0470633719/ref=sr_1_1?ie=UTF8&qid=1505094653), we will:\n", "\n", "- first use a pre-defined class for our neural network\n", "- then define the net ourselves to see where it uses matrix multiplication & broadcasting\n", "- and finally dig into the details of how those operations work\n", "\n", "This is different from how most math courses are taught, where you have to learn all the individual elements before you can combine them (Harvard professor David Perkins call this *elementitis*), but it is similar to how topics like *driving* and *baseball* are taught.  That is, you can start driving without [knowing how an internal combustion engine works](https://medium.com/towards-data-science/thoughts-after-taking-the-deeplearning-ai-courses-8568f132153), and children begin playing baseball before they learn all the formal rules.\n", "\n", "<img src=\"images/demba_combustion_engine.png\" alt=\"\" style=\"width: 50%\"/>\n", "<center>\n", "(source: [Demba Ba](https://github.com/zalandoresearch/fashion-mnist) and [Arvind Nagaraj](https://medium.com/towards-data-science/thoughts-after-taking-the-deeplearning-ai-courses-8568f132153))\n", "</center>"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["### More linear algebra resources"]}, {"block": 6, "type": "markdown", "linesLength": 7, "startIndex": 17, "lines": ["This notebook was originally created for a 40 minute talk I gave at the [O'Reilly AI conference in San Francisco](https://conferences.oreilly.com/artificial-intelligence/ai-ca).  If you want further resources for linear algebra, here are a few recommendations:\n", "\n", "- [3Blue1Brown Essence of Linear Algebra](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab) videos about *geometric intuition*, which are gorgeous and great for visual learners\n", "- [Khan Academy Linear Algebra](https://www.khanacademy.org/math/linear-algebra) videos covering traditional linear algebra material\n", "- [Immersive linear algebra](http://immersivemath.com/ila/) free online textbook with interactive graphics\n", "- [Chapter 2](http://www.deeplearningbook.org/contents/linear_algebra.html) of Ian Goodfellow's Deep Learning Book for a fairly academic take\n", "- [Computational Linear Algebra](http://www.fast.ai/2017/07/17/num-lin-alg/): a free, online fast.ai course, originally taught in the University of San Francisco's Masters in Analytics program. It includes a free [online textbook](https://github.com/fastai/numerical-linear-algebra/blob/master/README.md) and [series of videos](https://www.youtube.com/playlist?list=PLtmWHNX-gukIc92m1K0P6bIOnZb-mg0hY). This course is very different from standard linear algebra (which often focuses on how **humans** do matrix calculations), because it is about how to get **computers** to do matrix computations with speed and accuracy, and incorporates modern tools and algorithms.  All the material is taught in Python and centered around solving practical problems such as removing the background from a surveillance video or implementing Google's PageRank search algorithm on Wikipedia pages."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["## Our Tools"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["We will be using the open source [deep learning library, fastai](https://github.com/fastai/fastai), which provides high level abstractions and best practices on top of PyTorch.  This is the highest level, simplest way to get started with deep learning.  It is currently in pre-alpha, so items may move around and more documentation will be added in the future."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### Imports"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["import sys\n", "sys.path.insert(0, '../')"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["%load_ext autoreload\n", "%autoreload 2"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["from fastai.imports import *\n", "from fastai.torch_imports import *\n", "from fastai.io import *"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### PyTorch"]}, {"block": 14, "type": "markdown", "linesLength": 11, "startIndex": 35, "lines": ["The fastai deep learning library uses [PyTorch](http://pytorch.org/), a Python framework for dynamic neural networks with GPU acceleration, which was released by Facebook's AI team.\n", "\n", "PyTorch has two overlapping, yet distinct, purposes.  As described in the [PyTorch documentation](http://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html):\n", "\n", "<img src=\"images/what_is_pytorch.png\" alt=\"pytorch\" style=\"width: 80%\"/>\n", "\n", "The neural network functionality of PyTorch is built on top of the Numpy-like functionality for fast matrix computations on a GPU. Although the neural network purpose receives way more attention, both are very useful.  We'll implement a neural net from scratch today using PyTorch.\n", "\n", "**Further learning**: If you are curious to learn what *dynamic* neural networks are, you may want to watch [this talk](https://www.youtube.com/watch?v=Z15cBAuY7Sc) by Soumith Chintala, Facebook AI researcher and core PyTorch contributor.\n", "\n", "If you want to learn more PyTorch, you can try this [introductory tutorial](http://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html) or this [tutorial to learn by examples](http://pytorch.org/tutorials/beginner/pytorch_with_examples.html)."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["### About GPUs"]}, {"block": 16, "type": "markdown", "linesLength": 7, "startIndex": 47, "lines": ["Graphical processing units (GPUs) allow for matrix computations to be done with much greater speed, as long as you have a library such as PyTorch that takes advantage of them.  Advances in GPU technology in the last 10-20 years have been a key part of why neural networks are proving so much more powerful now than they did a few decades ago. \n", "\n", "You may own a computer that has a GPU which can be used.  For the many people that either don't have a GPU (or have a GPU which can't be easily accessed by Python), there are a few differnt options:\n", "\n", "- **Don't use a GPU**: For the sake of this tutorial, you don't have to use a GPU, although some computations will be slower.  The only change needed to the code is to remove `.cuda()` wherever it appears.\n", "- **Use crestle, through your browser**: [Crestle](https://www.crestle.com/) is a service that gives you an already set up cloud service with all the popular scientific and deep learning frameworks already pre-installed and configured to run on a GPU in the cloud. It is easily accessed through your browser. New users get 10 hours and 1 GB of storage for free. After this, GPU usage is 34 cents per hour. I recommend this option to those who are new to AWS or new to using the console.\n", "- **Set up an AWS instance through your console**: You can create an AWS instance with a GPU by following the steps in this  [fast.ai setup lesson](http://course.fast.ai/lessons/aws.html).]  AWS charges 90 cents per hour for this."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["## Data"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["Today we will be working with MNIST, a classic data set of hand-written digits.  Solutions to this problem are used by banks to automatically recognize the amounts on checks, and by the postal service to automatically recognize zip codes on mail."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["<img src=\"images/mnist.png\" alt=\"\" style=\"width: 60%\"/>"]}, {"block": 20, "type": "markdown", "linesLength": 5, "startIndex": 57, "lines": ["A matrix can represent an image, by creating a grid where each entry corresponds to a different pixel.\n", "\n", "<img src=\"images/digit.gif\" alt=\"digit\" style=\"width: 55%\"/>\n", "  (Source: [Adam Geitgey\n", "](https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721))\n"]}, {"block": 21, "type": "markdown", "linesLength": 6, "startIndex": 62, "lines": ["Next, we will look at **CIFAR 10**, a dataset that consists of 32x32 *color* images in 10 different categories.  Color images have an extra dimension, containing RGB values, compared to black & white images.\n", "\n", "<img src=\"images/cifar10.png\" alt=\"\" style=\"width: 70%\"/>\n", "<center>\n", "(source: [Cifar 10](https://www.cs.toronto.edu/~kriz/cifar.html))\n", "</center>"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["### Download"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["Let's download, unzip, and format the data."]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["path = '../data/'"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 71, "lines": ["import os\n", "os.makedirs(path, exist_ok=True)"]}, {"block": 26, "type": "code", "linesLength": 5, "startIndex": 73, "lines": ["URL='http://deeplearning.net/data/mnist/'\n", "FILENAME='mnist.pkl.gz'\n", "\n", "def load_mnist(filename):\n", "    return pickle.load(gzip.open(filename, 'rb'), encoding='latin-1')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["## The Most Important Machine Learning Concepts"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["### Functions, parameters, and training"]}, {"block": 29, "type": "markdown", "linesLength": 5, "startIndex": 80, "lines": ["A **function** takes inputs and returns outputs. For instance, $f(x) = 3x + 5$ is an example of a function.  If we input $2$, the output is $3\\times 2 + 5 = 11$, or if we input $-1$, the output is $3\\times -1 + 5 = 2$\n", "\n", "Functions have **parameters**. The above function $f$ is $ax + b$, with parameters a and b set to $a=3$ and $b=5$.\n", "\n", "Machine learning is often about learning the best values for those parameters.  For instance, suppose we have the data points on the chart below.  What values should we choose for $a$ and $b$?"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["<img src=\"images/sgd2.gif\" alt=\"\" style=\"width: 70%\"/>"]}, {"block": 31, "type": "markdown", "linesLength": 5, "startIndex": 86, "lines": ["In the above gif fast.ai Practical Deep Learning for Coders course, [intro to SGD notebook](https://github.com/fastai/courses/blob/master/deeplearning1/nbs/sgd-intro.ipynb)), an algorithm called stochastic gradient descent is being used to learn the best parameters to fit the line to the data (note: in the gif, the algorithm is stopping before the absolute best parameters are found).  This process is called **training** or **fitting**.\n", "\n", "Most datasets will not be well-represented by a line.  We could use a more complicated function, such as $g(x) = ax^2 + bx + c + \\sin d$.  Now we have 4 parameters to learn: $a$, $b$, $c$, and $d$.  This function is more flexible than $f(x) = ax + b$ and will be able to accurately model more datasets.\n", "\n", "Neural networks take this to an extreme, and are infinitely flexible.  They often have thousands, or even hundreds of thousands of parameters.  However the core idea is the same as above.  The neural network is a function, and we will learn the best parameters for modeling our data."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 91, "lines": ["### Training, Validation, and Test data sets"]}, {"block": 33, "type": "markdown", "linesLength": 3, "startIndex": 92, "lines": ["Possibly **the most important idea** in machine learning is that of having separate training, validation, and test sets.\n", "\n", "As motivation, suppose you don't divide up your data, but instead use all of it.  And suppose you have lots of parameters:"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 95, "lines": ["This is called over-fitting.  A validation set helps prevent this problem."]}, {"block": 35, "type": "markdown", "linesLength": 4, "startIndex": 96, "lines": ["<img src=\"images/overfitting.png\" alt=\"\" style=\"width: 100%\"/>\n", "<center>\n", "[Underfitting and Overfitting](https://www.quora.com/Whats-the-difference-between-overfitting-and-underfitting)\n", "</center>"]}, {"block": 36, "type": "code", "linesLength": 2, "startIndex": 100, "lines": ["get_data(URL+FILENAME, path+FILENAME)\n", "((x, y), (x_valid, y_valid), (x_test, y_test)) = load_mnist(path+FILENAME)"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 102, "lines": ["### Normalize"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 103, "lines": ["Many machine learning algorithms behave better when the data is *normalized*, that is when the mean is 0 and the standard deviation is 1. We will subtract off the mean and standard deviation from our training set in order to normalize the data:"]}, {"block": 39, "type": "code", "linesLength": 2, "startIndex": 104, "lines": ["mean = x.mean()\n", "std = x.std()"]}, {"block": 40, "type": "code", "linesLength": 2, "startIndex": 106, "lines": ["x=(x-mean)/std\n", "x.mean(), x.std()"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 108, "lines": ["Note that for consistency (with the parameters we learn when training), we subtract the mean and standard deviation of our training set from our validation set. "]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 109, "lines": ["x_valid = (x_valid-mean)/std\n", "x_valid.mean(), x_valid.std()"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 111, "lines": ["### Look at the data"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["In any sort of data science work, it's important to look at your data, to make sure you understand the format, how it's stored, what type of values it holds, etc. To make it easier to work with, let's reshape it into 2d images from the flattened 1d format."]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 113, "lines": ["#### Helper methods"]}, {"block": 46, "type": "code", "linesLength": 7, "startIndex": 114, "lines": ["%matplotlib inline\n", "import numpy as np\n", "import matplotlib.pyplot as plt\n", "\n", "def show(img, title=None):\n", "    plt.imshow(img, interpolation='none', cmap=\"gray\")\n", "    if title is not None: plt.title(title)"]}, {"block": 47, "type": "code", "linesLength": 8, "startIndex": 121, "lines": ["def plots(ims, figsize=(12,6), rows=2, titles=None):\n", "    f = plt.figure(figsize=figsize)\n", "    cols = len(ims)//rows\n", "    for i in range(len(ims)):\n", "        sp = f.add_subplot(rows, cols, i+1)\n", "        sp.axis('Off')\n", "        if titles is not None: sp.set_title(titles[i], fontsize=16)\n", "        plt.imshow(ims[i], interpolation='none', cmap='gray')"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["#### Plots "]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 130, "lines": ["x_valid.shape"]}, {"block": 50, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["x_imgs = np.reshape(x_valid, (-1,28,28)); x_imgs.shape"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["show(x_imgs[0], y_valid[0])"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 133, "lines": ["It's the digit 3!  And that's stored in the y value:"]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 134, "lines": ["y_valid[0]"]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 135, "lines": ["We can look at part of an image:"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 136, "lines": ["x_imgs[0,10:15,10:15]"]}, {"block": 56, "type": "code", "linesLength": 1, "startIndex": 137, "lines": ["show(x_imgs[0,10:15,10:15])"]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 138, "lines": ["plots(x_imgs[:8], titles=y_valid[:8])"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 139, "lines": ["## Neural Net (with nn.torch)"]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 140, "lines": ["### Imports "]}, {"block": 60, "type": "code", "linesLength": 6, "startIndex": 141, "lines": ["from fastai.metrics import *\n", "from fastai.model import *\n", "from fastai.dataset import *\n", "from fastai.core import *\n", "\n", "import torch.nn as nn"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 147, "lines": ["###  Neural networks "]}, {"block": 62, "type": "markdown", "linesLength": 3, "startIndex": 148, "lines": ["We will use fastai's ImageClassifierData, which holds our training and validation sets and will provide batches of that data in a form ready for use by a PyTorch model.\n", "\n", "TODO: explain training & validation sets **Most important thing to know about ML**"]}, {"block": 63, "type": "code", "linesLength": 1, "startIndex": 151, "lines": ["md = ImageClassifierData.from_arrays(path, (x,y), (x_valid, y_valid))"]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 152, "lines": ["We will begin with the highest level abstraction: using a neural net defined by PyTorch's Sequential class.  "]}, {"block": 65, "type": "code", "linesLength": 5, "startIndex": 153, "lines": ["net = nn.Sequential(\n", "    nn.Linear(28*28, 256),\n", "    nn.ReLU(),\n", "    nn.Linear(256, 10)\n", ").cuda()"]}, {"block": 66, "type": "markdown", "linesLength": 1, "startIndex": 158, "lines": ["Each input is a vector of size $28\\times 28$ pixels and our output is of size $10$ (since there are 10 digits: 0, 1, ..., 9).  TODO: how we get prediction."]}, {"block": 67, "type": "markdown", "linesLength": 1, "startIndex": 159, "lines": ["### Layers"]}, {"block": 68, "type": "markdown", "linesLength": 1, "startIndex": 160, "lines": ["TODO: Sequential defines layers of our network, so let's talk about layers. Neural networks consist of **linear layers alternating with non-linear layers**.  This creates functions which are incredibly flexible."]}, {"block": 69, "type": "markdown", "linesLength": 5, "startIndex": 161, "lines": ["Layer 1 of a convolutional neural network:\n", "<img src=\"images/zeiler1.png\" alt=\"pytorch\" style=\"width: 40%\"/>\n", "<center>\n", "[Matthew Zeiler and Rob Fergus](http://www.matthewzeiler.com/wp-content/uploads/2017/07/arxive2013.pdf)\n", "</center>"]}, {"block": 70, "type": "markdown", "linesLength": 5, "startIndex": 166, "lines": ["Layer 2:\n", "<img src=\"images/zeiler2.png\" alt=\"pytorch\" style=\"width: 90%\"/>\n", "<center>\n", "[Matthew Zeiler and Rob Fergus](http://www.matthewzeiler.com/wp-content/uploads/2017/07/arxive2013.pdf)\n", "</center>"]}, {"block": 71, "type": "markdown", "linesLength": 5, "startIndex": 171, "lines": ["Deeper layers can learn about more complicated shapes (although we are only using 2 layers in our network):\n", "<img src=\"images/zeiler4.png\" alt=\"pytorch\" style=\"width: 90%\"/>\n", "<center>\n", "[Matthew Zeiler and Rob Fergus](http://www.matthewzeiler.com/wp-content/uploads/2017/07/arxive2013.pdf)\n", "</center>"]}, {"block": 72, "type": "markdown", "linesLength": 1, "startIndex": 176, "lines": ["TODO: output layer --> predictions"]}, {"block": 73, "type": "markdown", "linesLength": 1, "startIndex": 177, "lines": ["### Training the network "]}, {"block": 74, "type": "markdown", "linesLength": 4, "startIndex": 178, "lines": ["Next we will set a few inputs for our *fit* method:\n", "- **Optimizer**: algorithm for finding the minimum. typically these are variations on *stochastic gradient descent*, involve taking a step that appears to be the right direction based on the change in the function.\n", "- **Loss**: what function is the optimizer trying to minimize?  We need to say how we're defining the error.\n", "- **Metrics**: other calculations you want printed out as you train"]}, {"block": 75, "type": "code", "linesLength": 3, "startIndex": 182, "lines": ["loss=F.cross_entropy\n", "metrics=[accuracy]\n", "opt=optim.Adam(net.parameters())"]}, {"block": 76, "type": "markdown", "linesLength": 1, "startIndex": 185, "lines": ["*Fitting* is the process by which the neural net learns the best parameters for the dataset."]}, {"block": 77, "type": "code", "linesLength": 1, "startIndex": 186, "lines": ["fit(net, md, epochs=1, crit=loss, opt=opt, metrics=metrics)"]}, {"block": 78, "type": "markdown", "linesLength": 1, "startIndex": 187, "lines": ["TODO: GPUs are great at handling lots of data at once (otherwise don't get performance benefit) epochs and batches"]}, {"block": 79, "type": "markdown", "linesLength": 1, "startIndex": 188, "lines": ["Now that we have the parameters for our model, we can make predictions on our validation set."]}, {"block": 80, "type": "code", "linesLength": 1, "startIndex": 189, "lines": ["preds = predict(net, md.val_dl)"]}, {"block": 81, "type": "code", "linesLength": 1, "startIndex": 190, "lines": ["preds = preds.max(1)[1]"]}, {"block": 82, "type": "markdown", "linesLength": 1, "startIndex": 191, "lines": ["Let's see how some of our preditions look!"]}, {"block": 83, "type": "code", "linesLength": 1, "startIndex": 192, "lines": ["plots(x_imgs[:8], titles=preds[:8])"]}, {"block": 84, "type": "markdown", "linesLength": 1, "startIndex": 193, "lines": ["These predictions are pretty good! Note that the image in the 2nd column of the 2nd row appears to be a 4, yet is labeled 9.  Although incorrect, the way the 4 is drawn does look quite similar to a 9."]}, {"block": 85, "type": "markdown", "linesLength": 1, "startIndex": 194, "lines": ["## Coding the Neural Net ourselves"]}, {"block": 86, "type": "markdown", "linesLength": 1, "startIndex": 195, "lines": ["TODO: linear layer is doing matmul and plus.  Will explain matmul in a moment"]}, {"block": 87, "type": "markdown", "linesLength": 5, "startIndex": 196, "lines": ["Now, instead of using PyTorch's `Sequential`, we will define the neural network ourselves.  This will allow us to see exactly where matrix multiplication is used.  Just as Numpy has `np.matmul` for matrix multiplication (in Python 3, this is equivalent to the `@` operator), PyTorch has `torch.matmul`.  \n", "\n", "PyTorch class has two things: constructor (says parameters) and a forward method (how to calculate prediction using those parameters)\n", "\n", "The method `forward` describes how the neural net converts inputs to outputs."]}, {"block": 88, "type": "markdown", "linesLength": 1, "startIndex": 201, "lines": ["TODO: say what Parameter is (don't have to say outloud)"]}, {"block": 89, "type": "code", "linesLength": 1, "startIndex": 202, "lines": ["def get_weights(*dims): return nn.Parameter(torch.randn(*dims)/dims[0])"]}, {"block": 90, "type": "code", "linesLength": 14, "startIndex": 203, "lines": ["class SimpleMnist(nn.Module):\n", "    def __init__(self):\n", "        super().__init__()\n", "        self.l1_w = get_weights(28*28, 256)  # Layer 1 weights\n", "        self.l1_b = get_weights(256)         # Layer 1 bias\n", "        self.l2_w = get_weights(256, 10)     # Layer 2 weights\n", "        self.l2_b = get_weights(10)          # Layer 2 bias\n", "\n", "    def forward(self, x):\n", "        x = x.view(x.size(0), -1)\n", "        x = torch.matmul(x, self.l1_w) + self.l1_b  # Linear Layer\n", "        x = x * (x > 0).float()                     # Non-linear Layer\n", "        x = torch.matmul(x, self.l2_w) + self.l2_b  # Linear Layer\n", "        return x"]}, {"block": 91, "type": "markdown", "linesLength": 1, "startIndex": 217, "lines": ["We create our neural net and the optimizer.  (We will use the same loss and metrics from above)."]}, {"block": 92, "type": "code", "linesLength": 2, "startIndex": 218, "lines": ["net2 = SimpleMnist().cuda()\n", "opt=optim.Adam(net2.parameters())"]}, {"block": 93, "type": "code", "linesLength": 1, "startIndex": 220, "lines": ["fit(net2, md, epochs=1, crit=loss, opt=opt, metrics=metrics)"]}, {"block": 94, "type": "markdown", "linesLength": 1, "startIndex": 221, "lines": ["Now we can check our predictions:"]}, {"block": 95, "type": "code", "linesLength": 2, "startIndex": 222, "lines": ["preds = predict(net2, md.val_dl).max(1)[1]\n", "plots(x_imgs[:8], titles=preds[:8])"]}, {"block": 96, "type": "markdown", "linesLength": 1, "startIndex": 224, "lines": ["## what torch.matmul (matrix multiplication) is doing"]}, {"block": 97, "type": "markdown", "linesLength": 1, "startIndex": 225, "lines": ["Now let's dig in to what we were doing with `torch.matmul`: matrix multiplication.  First, let's start with a simpler building block: **broadcasting**."]}, {"block": 98, "type": "markdown", "linesLength": 1, "startIndex": 226, "lines": ["### Element-wise operations "]}, {"block": 99, "type": "markdown", "linesLength": 5, "startIndex": 227, "lines": ["Broadcasting and element-wise operations are supported in the same way by both numpy and pytorch.\n", "\n", "Operators (+,-,\\*,/,>,<,==) are usually element-wise.\n", "\n", "Examples of element-wise operations:"]}, {"block": 100, "type": "code", "linesLength": 2, "startIndex": 232, "lines": ["a = np.array([10, 6, -4])\n", "b = np.array([2, 8, 7])"]}, {"block": 101, "type": "code", "linesLength": 1, "startIndex": 234, "lines": ["a + b"]}, {"block": 102, "type": "code", "linesLength": 1, "startIndex": 235, "lines": ["a < b"]}, {"block": 103, "type": "markdown", "linesLength": 1, "startIndex": 236, "lines": ["### Broadcasting"]}, {"block": 104, "type": "markdown", "linesLength": 13, "startIndex": 237, "lines": ["The term **broadcasting** describes how arrays with different shapes are treated during arithmetic operations.  The term broadcasting was first used by Numpy, although is now used in other libraries such as [Tensorflow](https://www.tensorflow.org/performance/xla/broadcasting) and Matlab; the rules can vary by library.\n", "\n", "From the [Numpy Documentation](https://docs.scipy.org/doc/numpy-1.10.0/user/basics.broadcasting.html):\n", "\n", "    The term broadcasting describes how numpy treats arrays with \n", "    different shapes during arithmetic operations. Subject to certain \n", "    constraints, the smaller array is \u201cbroadcast\u201d across the larger \n", "    array so that they have compatible shapes.Broadcasting provides a \n", "    means of vectorizing array operations so that looping occurs in C\n", "    instead of Python. It does this without making needless copies of \n", "    data and usually leads to efficient algorithm implementations.\n", "    \n", "In addition to the efficiency of broadcasting, it allows developers to write less code, which typically leads to fewer errors."]}, {"block": 105, "type": "markdown", "linesLength": 1, "startIndex": 250, "lines": ["*This section was adapted from [Chapter 4](http://nbviewer.jupyter.org/github/fastai/numerical-linear-algebra/blob/master/nbs/4.%20Compressed%20Sensing%20of%20CT%20Scans%20with%20Robust%20Regression.ipynb#4.-Compressed-Sensing-of-CT-Scans-with-Robust-Regression) of the fast.ai [Computational Linear Algebra](https://github.com/fastai/numerical-linear-algebra) course.*"]}, {"block": 106, "type": "markdown", "linesLength": 1, "startIndex": 251, "lines": ["#### Broadcasting with a scalar"]}, {"block": 107, "type": "code", "linesLength": 1, "startIndex": 252, "lines": ["a"]}, {"block": 108, "type": "code", "linesLength": 1, "startIndex": 253, "lines": ["a > 0"]}, {"block": 109, "type": "markdown", "linesLength": 5, "startIndex": 254, "lines": ["How are we able to do a > 0?  0 is being **broadcast** to have the same dimensions as a.\n", "\n", "Remember above when we normalized our dataset by subtracting the mean (a scalar) from the entire data set (a matrix) and dividing by the standard deviation (another scalar)?  We were using broadcasting!\n", "\n", "Other examples of broadcasting with a scalar:"]}, {"block": 110, "type": "code", "linesLength": 1, "startIndex": 259, "lines": ["a + 1"]}, {"block": 111, "type": "code", "linesLength": 1, "startIndex": 260, "lines": ["m = np.array([[1, 2, 3], [4,5,6], [7,8,9]]); m"]}, {"block": 112, "type": "code", "linesLength": 1, "startIndex": 261, "lines": ["m * 2"]}, {"block": 113, "type": "markdown", "linesLength": 1, "startIndex": 262, "lines": ["#### Broadcasting a vector to a matrix"]}, {"block": 114, "type": "markdown", "linesLength": 1, "startIndex": 263, "lines": ["We can also broadcast a vector to a matrix:"]}, {"block": 115, "type": "code", "linesLength": 1, "startIndex": 264, "lines": ["c = np.array([10,20,30]); c"]}, {"block": 116, "type": "code", "linesLength": 1, "startIndex": 265, "lines": ["m + c"]}, {"block": 117, "type": "markdown", "linesLength": 1, "startIndex": 266, "lines": ["Although numpy does this automatically, you can also use the `broadcast_to` method:"]}, {"block": 118, "type": "code", "linesLength": 1, "startIndex": 267, "lines": ["np.broadcast_to(c, (3,3))"]}, {"block": 119, "type": "code", "linesLength": 1, "startIndex": 268, "lines": ["c.shape"]}, {"block": 120, "type": "markdown", "linesLength": 1, "startIndex": 269, "lines": ["The numpy `expand_dims` method lets us convert the 1-dimensional array `c` into a 2-dimensional array (although one of those dimensions has value 1)."]}, {"block": 121, "type": "code", "linesLength": 1, "startIndex": 270, "lines": ["np.expand_dims(c,0).shape"]}, {"block": 122, "type": "code", "linesLength": 1, "startIndex": 271, "lines": ["m + np.expand_dims(c,0)"]}, {"block": 123, "type": "code", "linesLength": 1, "startIndex": 272, "lines": ["np.expand_dims(c,1).shape"]}, {"block": 124, "type": "code", "linesLength": 1, "startIndex": 273, "lines": ["m + np.expand_dims(c,1)"]}, {"block": 125, "type": "code", "linesLength": 1, "startIndex": 274, "lines": ["np.broadcast_to(np.expand_dims(c,1), (3,3))"]}, {"block": 126, "type": "markdown", "linesLength": 1, "startIndex": 275, "lines": ["#### Broadcasting Rules"]}, {"block": 127, "type": "markdown", "linesLength": 4, "startIndex": 276, "lines": ["When operating on two arrays, Numpy/PyTorch compares their shapes element-wise. It starts with the **trailing dimensions**, and works its way forward. Two dimensions are **compatible** when\n", "\n", "- they are equal, or\n", "- one of them is 1"]}, {"block": 128, "type": "markdown", "linesLength": 5, "startIndex": 280, "lines": ["Arrays do not need to have the same number of dimensions. For example, if you have a $256 \\times 256 \\times 3$ array of RGB values, and you want to scale each color in the image by a different value, you can multiply the image by a one-dimensional array with 3 values. Lining up the sizes of the trailing axes of these arrays according to the broadcast rules, shows that they are compatible:\n", "\n", "    Image  (3d array): 256 x 256 x 3\n", "    Scale  (1d array):             3\n", "    Result (3d array): 256 x 256 x 3"]}, {"block": 129, "type": "markdown", "linesLength": 1, "startIndex": 285, "lines": ["The [numpy documentation](https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html#general-broadcasting-rules) includes several examples of what dimensions can and can not be broadcast together."]}, {"block": 130, "type": "markdown", "linesLength": 1, "startIndex": 286, "lines": ["### Matrix Multiplication"]}, {"block": 131, "type": "markdown", "linesLength": 1, "startIndex": 287, "lines": ["We are going to use broadcasting to define matrix multiplication."]}, {"block": 132, "type": "markdown", "linesLength": 1, "startIndex": 288, "lines": ["#### Matrix-Vector Multiplication"]}, {"block": 133, "type": "code", "linesLength": 1, "startIndex": 289, "lines": ["m, c"]}, {"block": 134, "type": "code", "linesLength": 1, "startIndex": 290, "lines": ["m @ c  # np.matmul(m, c)"]}, {"block": 135, "type": "markdown", "linesLength": 1, "startIndex": 291, "lines": ["We get the same answer using `torch.matmul`:"]}, {"block": 136, "type": "code", "linesLength": 1, "startIndex": 292, "lines": ["torch.matmul(torch.from_numpy(m), torch.from_numpy(c))"]}, {"block": 137, "type": "markdown", "linesLength": 1, "startIndex": 293, "lines": ["The following is **NOT** matrix multiplication.  What is it?"]}, {"block": 138, "type": "code", "linesLength": 1, "startIndex": 294, "lines": ["m * c"]}, {"block": 139, "type": "code", "linesLength": 1, "startIndex": 295, "lines": ["(m * c).sum(axis=1)"]}, {"block": 140, "type": "code", "linesLength": 1, "startIndex": 296, "lines": ["c"]}, {"block": 141, "type": "code", "linesLength": 1, "startIndex": 297, "lines": ["np.broadcast_to(c, (3,3))"]}, {"block": 142, "type": "markdown", "linesLength": 1, "startIndex": 298, "lines": ["From a machine learning perspective, matrix multiplication is a way of creating features by saying how much we want to weight each input column.  **Different features are different weighted averages of the input columns**. "]}, {"block": 143, "type": "markdown", "linesLength": 1, "startIndex": 299, "lines": ["The website [matrixmultiplication.xyz](http://matrixmultiplication.xyz/) provides a nice visualization of matrix multiplcation"]}, {"block": 144, "type": "markdown", "linesLength": 1, "startIndex": 300, "lines": ["Draw a picture"]}, {"block": 145, "type": "code", "linesLength": 1, "startIndex": 301, "lines": ["n = np.array([[10,40],[20,0],[30,-5]]); n"]}, {"block": 146, "type": "code", "linesLength": 1, "startIndex": 302, "lines": ["m @ n"]}, {"block": 147, "type": "code", "linesLength": 1, "startIndex": 303, "lines": ["(m * c).sum(axis=1)"]}, {"block": 148, "type": "code", "linesLength": 1, "startIndex": 304, "lines": ["(m * d).sum(axis=1)"]}, {"block": 149, "type": "markdown", "linesLength": 1, "startIndex": 305, "lines": ["## Other applications of Matrix and Tensor Products"]}, {"block": 150, "type": "markdown", "linesLength": 1, "startIndex": 306, "lines": ["Here are some other examples of where matrix multiplication arises.  This material is taken from [Chapter 1](http://nbviewer.jupyter.org/github/fastai/numerical-linear-algebra/blob/master/nbs/1.%20Why%20are%20we%20here.ipynb) of my [Computational Linear Algebra](https://github.com/fastai/numerical-linear-algebra) course. "]}, {"block": 151, "type": "markdown", "linesLength": 1, "startIndex": 307, "lines": ["#### Matrix-Vector Products:"]}, {"block": 152, "type": "markdown", "linesLength": 7, "startIndex": 308, "lines": ["The matrix below gives the probabilities of moving from 1 health state to another in 1 year.  If the current health states for a group are:\n", "- 85% asymptomatic\n", "- 10% symptomatic\n", "- 5% AIDS\n", "- 0% death\n", "\n", "what will be the % in each health state in 1 year?"]}, {"block": 153, "type": "markdown", "linesLength": 1, "startIndex": 315, "lines": ["<img src=\"images/markov_health.jpg\" alt=\"floating point\" style=\"width: 80%\"/>(Source: [Concepts of Markov Chains](https://www.youtube.com/watch?v=0Il-y_WLTo4))"]}, {"block": 154, "type": "markdown", "linesLength": 1, "startIndex": 316, "lines": ["#### Answer"]}, {"block": 155, "type": "code", "linesLength": 1, "startIndex": 317, "lines": ["import numpy as np"]}, {"block": 156, "type": "code", "linesLength": 1, "startIndex": 318, "lines": ["#Exercise: Use Numpy to compute the answer to the above\n"]}, {"block": 157, "type": "markdown", "linesLength": 1, "startIndex": 319, "lines": ["#### Matrix-Matrix Products"]}, {"block": 158, "type": "markdown", "linesLength": 1, "startIndex": 320, "lines": ["<img src=\"images/shop.png\" alt=\"floating point\" style=\"width: 100%\"/>(Source: [Several Simple Real-world Applications of Linear Algebra Tools](https://www.mff.cuni.cz/veda/konference/wds/proc/pdf06/WDS06_106_m8_Ulrychova.pdf))"]}, {"block": 159, "type": "markdown", "linesLength": 1, "startIndex": 321, "lines": ["#### Answer"]}, {"block": 160, "type": "code", "linesLength": 1, "startIndex": 322, "lines": ["#Exercise: Use Numpy to compute the answer to the above\n"]}, {"block": 161, "type": "markdown", "linesLength": 1, "startIndex": 323, "lines": ["## End"]}, {"block": 162, "type": "code", "linesLength": 0, "startIndex": 324, "lines": []}, {"block": 163, "type": "markdown", "linesLength": 1, "startIndex": 324, "lines": ["A Tensor is a *multi-dimensional matrix containing elements of a single data type*: a group of data, all with the same type (e.g. A Tensor could store a 4 x 4 x 6 matrix of 32-bit signed integers)."]}]