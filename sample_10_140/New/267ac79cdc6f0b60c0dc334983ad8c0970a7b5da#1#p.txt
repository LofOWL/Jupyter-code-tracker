[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Analysis of Medium Stats\n", "\n", "In this notebook, we will analyze my Medium article stats. The functions for scraping and formatting the data were developed in the `Development` notebook, and here we will focus on looking at the data quantitatively and visually."]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 3, "lines": ["# Might need to run this on MAC \n", "# see https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr\n", "!export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES"]}, {"block": 2, "type": "code", "linesLength": 18, "startIndex": 6, "lines": ["# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "cufflinks.go_offline()"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 24, "lines": ["## Retrieve Statistics\n", "\n", "Thanks to a few functions already developed, we can get all of my articles statistics in under 10 seconds."]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 27, "lines": ["from retrieval import process_in_parallel, get_table_rows, process_table_entry\n", "\n", "table_rows = get_table_rows(fname='stats.html')"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Each of these entries is a separate article. To get the information about each article, we use the next function. This scrapes both the article metadata and the article itself (using `requests` and `BeautifulSoup`)."]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["colorscales = ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu',\n", "            'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet',\n", "            'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis']"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["df = process_in_parallel(table_rows=table_rows, processes=25, tz='America/Chicago')\n", "df.head()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["df.iplot(x='read_time', y='ratio', mode='markers')"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["df.iplot(x='read_time', y='claps', mode='markers')"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["df.iplot(x='reads', y='claps', mode='markers')"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["df.iplot(x='read_time', y='reads', mode='markers')"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 40, "lines": ["df['ratio_binned'] = pd.cut(df['ratio'], bins=list(range(0, 100, 10))).astype(str)\n", "df.iplot(x='read_time', y='claps', text='title',\n", "         categories='ratio_binned',\n", "         mode='markers')"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 44, "lines": ["df['cum_views'] = np.cumsum(df['views'])\n", "df.iplot(x='published_date', y='cum_views')"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 46, "lines": ["df['cum_responses'] = np.cumsum(df['num_responses'])\n", "df.iplot(x='published_date', y='cum_responses')"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 48, "lines": ["df['cum_reads'] = np.cumsum(df['reads'])\n", "df.iplot(x='published_date', y='cum_reads')"]}, {"block": 16, "type": "code", "linesLength": 0, "startIndex": 50, "lines": []}]