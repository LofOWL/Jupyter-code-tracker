[{"block": 0, "type": "markdown", "linesLength": 4, "startIndex": 0, "lines": ["# Surprise Singular Value Decomposition (SVD)\n", "\n", "\n", "This notebook serves both as an introduction to the [Surprise](http://surpriselib.com/) library, and also introduces the 'SVD' algorithm which is very similar to ALS presented in the ALS deep dive notebook. This algorithm was heavily used during the Netflix Prize competition by the winning BellKor team."]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["## 0 Global Settings and Imports"]}, {"block": 2, "type": "code", "linesLength": 14, "startIndex": 5, "lines": ["import sys\n", "sys.path.append(\"../../\")\n", "import time\n", "import os\n", "import surprise\n", "import papermill as pm\n", "import pandas as pd\n", "from reco_utils.dataset import movielens\n", "from reco_utils.dataset.python_splitters import python_random_split\n", "from reco_utils.evaluation.python_evaluation import (rmse, mae, rsquared, exp_var, map_at_k, ndcg_at_k, precision_at_k, \n", "                                                     recall_at_k, get_top_k_items)\n", "\n", "print(\"System version: {}\".format(sys.version))\n", "print(\"Surprise version: {}\".format(surprise.__version__))"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["# Select Movielens data size: 100k, 1m, 10m, or 20m\n", "MOVIELENS_DATA_SIZE = '100k'"]}, {"block": 4, "type": "markdown", "linesLength": 35, "startIndex": 21, "lines": ["## 1 Matrix factorization algorithm\n", "\n", "The SVD model algorithm is very similar to the ALS algorithm presented in the ALS deep dive notebook. The two differences between the two approaches are:\n", "\n", "- SVD additionally models the user and item biases (also called baselines in the litterature) from users and items.\n", "- The optimization technique in ALS is Alternating Least Squares (hence the name), while SVD uses stochastic gradient descent.\n", "\n", "### 1.1 The SVD model\n", "\n", "In ALS, the ratings are modeled as follows:\n", "\n", "$$\\hat r_{u,i} = q_{i}^{T}p_{u}$$\n", "\n", "SVD introduces two new scalar variables: the user biases $b_u$ and the item biases $b_i$. The user biases are supposed to capture the tendency of some users to rate items higher (or lower) than the average. The same goes for items: some items are usually rated higher than some others. The model is SVD is then as follows:\n", "\n", "$$\\hat r_{u,i} = \\mu + b_u + b_i + q_{i}^{T}p_{u}$$\n", "\n", "Where $\\mu$ is the global average of all the ratings in the dataset. The regularised optimization problem naturally becomes:\n", "\n", "$$ \\sum(r_{u,i} - (\\mu + b_u + b_i + q_{i}^{T}p_{u}))^2 +     \\lambda(b_i^2 + b_u^2 + ||q_i||^2 + ||p_u||^2)$$\n", "\n", "where $\\lambda$ is a the regularization parameter.\n", "\n", "\n", "### 1.2 Stochastic Gradient Descent\n", "\n", "Stochastic Gradient Descent (SGD) is a very common algorithm for optimization where the parameters (here the biases and the factor vectors) are iteratively incremented with the negative gradients w.r.t the optimization function. The algorithm essentially performs the following steps for a given number of iterations:\n", "\n", "\n", "$$b_u \\leftarrow b_u + \\gamma (e_{ui} - \\lambda b_u)$$\n", "$$b_i \\leftarrow b_i + \\gamma (e_{ui} - \\lambda b_i)$$  \n", "$$p_u \\leftarrow p_u + \\gamma (e_{ui} \\cdot q_i - \\lambda p_u)$$\n", "$$q_i \\leftarrow q_i + \\gamma (e_{ui} \\cdot p_u - \\lambda q_i)$$\n", "\n", "where $\\gamma$ is the learning rate and $e_{ui} =  r_{ui} - \\hat r_{u,i} = r_{u,i} - (\\mu + b_u + b_i + q_{i}^{T}p_{u})$ is the error made by the model for the pair $(u, i)$."]}, {"block": 5, "type": "markdown", "linesLength": 5, "startIndex": 56, "lines": ["## 2 Surprise implementation of SVD\n", "\n", "SVD is implemented in the [Surprise](https://surprise.readthedocs.io/en/stable/) library as a recommender module. \n", "* Detailed documentations of the SVD module in Surprise can be found [here](https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD).\n", "* Source codes of the SVD implementation is available on the Surprise Github repository, which can be found [here](https://github.com/NicolasHug/Surprise/blob/master/surprise/prediction_algorithms/matrix_factorization.pyx)."]}, {"block": 6, "type": "markdown", "linesLength": 5, "startIndex": 61, "lines": ["## 3 Surprise SVD movie recommender\n", "\n", "We will use the Movielens dataset, which is composed of integer ratings from 1 to 5. \n", "\n", "Surprise supports dataframes as long as they have three colums reprensenting the user ids, item ids, and the ratings (in this order)."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["### 3.1 Load data"]}, {"block": 8, "type": "code", "linesLength": 6, "startIndex": 67, "lines": ["data = movielens.load_pandas_df(\n", "    size=MOVIELENS_DATA_SIZE,\n", "    header=[\"userID\", \"itemID\", \"rating\"]\n", ")\n", "\n", "data.head()"]}, {"block": 9, "type": "markdown", "linesLength": 5, "startIndex": 73, "lines": ["### 3.2 Train the SVD Model\n", "\n", "Note that Surprise has a lot of built-in support for [cross-validation](https://surprise.readthedocs.io/en/stable/getting_started.html#use-cross-validation-iterators) or also [grid search](https://surprise.readthedocs.io/en/stable/getting_started.html#tune-algorithm-parameters-with-gridsearchcv) inspired scikit-learn, but we will here use the provided tools instead.\n", "\n", "We start by splitting our data into trainset and testset with the `python_random_split` function."]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 78, "lines": ["train, test = python_random_split(data, 0.75)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["Surprise needs to build an internal model of the data. We here use the `load_from_df` method to build a `Dataset` object, and then indicate that we want to train on all the samples of this dataset by using the `build_full_trainset` method."]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 80, "lines": ["# 'reader' is being used to get rating scale (for MovieLens, the scale is [1, 5]).\n", "# 'rating_scale' parameter can be used instead for the later version of surprise lib:\n", "# https://github.com/NicolasHug/Surprise/blob/master/surprise/dataset.py\n", "train_set = surprise.Dataset.load_from_df(train, reader=surprise.Reader('ml-100k')).build_full_trainset()\n", "train_set"]}, {"block": 13, "type": "markdown", "linesLength": 8, "startIndex": 85, "lines": ["The [SVD](https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD) has a lot of parameters. The most important ones are:\n", "- `n_factors`, which controls the dimension of the latent space (i.e. the size of the vectors $p_u$ and $q_i$). Usually, the quality of the training set predictions grows with as `n_factors` gets higher.\n", "- `n_epochs`, which defines the number of iteration of the SGD procedure.\n", "\n", "Note that both parameter also affect the training time.\n", "\n", "\n", "We will here set `n_factors` to `200` and `n_epochs` to `30`. To train the model, we simply need to call the `fit()` method."]}, {"block": 14, "type": "code", "linesLength": 8, "startIndex": 93, "lines": ["svd = surprise.SVD(random_state=0, n_factors=200, n_epochs=30, verbose=True)\n", "\n", "start_time = time.time()\n", "\n", "svd.fit(train_set)\n", "\n", "train_time = time.time() - start_time\n", "print(\"Took {} seconds for training.\".format(train_time))"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 101, "lines": ["### 3.3 Prediction\n", "\n", "Now that our model is fitted, we can call `predict` to get some predictions. `predict` returns an internal object `Prediction` which can be easily converted back to a dataframe:"]}, {"block": 16, "type": "code", "linesLength": 10, "startIndex": 104, "lines": ["predictions = [svd.predict(row.userID, row.itemID, row.rating)\n", "               for (_, row) in test.iterrows()]\n", "\n", "test_time = time.time() - start_time\n", "\n", "predictions = pd.DataFrame(predictions)\n", "predictions = predictions.rename(index=str, columns={'uid': 'userID', 'iid': 'itemID',\n", "                                                     'est': 'prediction'})\n", "predictions = predictions.drop(['details', 'r_ui'], axis='columns')\n", "predictions.head()"]}, {"block": 17, "type": "markdown", "linesLength": 3, "startIndex": 114, "lines": ["### 3.4 Remove rated movies in the top k recommendations\n", "\n", "To compute ranking metrics, we need predictions on all user, item pairs. We remove though the items already watched by the user, since we choose not to recommend them again. "]}, {"block": 18, "type": "code", "linesLength": 14, "startIndex": 117, "lines": ["start_time = time.time()\n", "\n", "preds_lst = []\n", "for user in train.userID.unique():\n", "    for item in train.itemID.unique():\n", "        preds_lst.append([user, item, svd.predict(user, item).est])\n", "\n", "all_predictions = pd.DataFrame(data=preds_lst, columns=[\"userID\", \"itemID\", \"prediction\"])\n", "\n", "merged = pd.merge(train, all_predictions, on=[\"userID\", \"itemID\"], how=\"outer\")\n", "all_predictions = merged[merged.rating.isnull()].drop('rating', axis=1)\n", "\n", "test_time = time.time() - start_time\n", "print(\"Took {} seconds for prediction.\".format(test_time))"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["all_predictions.head()"]}, {"block": 20, "type": "markdown", "linesLength": 9, "startIndex": 132, "lines": ["### 3.5 Evaluate how well SVD performs \n", "\n", "The SVD algorithm was specifically designed to predict ratings as close as possible to their actual values. In particular, it is designed to have a very low RMSE (Root Mean Squared Error), computed as:\n", "\n", "$$\\sqrt{\\frac{1}{N} \\sum(\\hat{r_{ui}} - r_{ui})^2}$$\n", "\n", "As we can see, the RMSE and MAE (Mean Absolute Error) are pretty low (i.e. good), indicating that on average the error in the predicted ratings is less than 1. The RMSE is of course a bit higher, because high errors are penalized much more.\n", "\n", "For comparison with other models, we also display Top-k and ranking metrics (MAP, NDCG, etc.). Note however that the SVD algorithm was designed for achieving high accuracy, not for top-rank predictions."]}, {"block": 21, "type": "code", "linesLength": 23, "startIndex": 141, "lines": ["eval_rmse = rmse(test, predictions)\n", "eval_mae = mae(test, predictions)\n", "eval_rsquared = rsquared(test, predictions)\n", "eval_exp_var = exp_var(test, predictions)\n", "\n", "k = 10\n", "eval_map = map_at_k(test, all_predictions, col_prediction='prediction', k=k)\n", "eval_ndcg = ndcg_at_k(test, all_predictions, col_prediction='prediction', k=k)\n", "eval_precision = precision_at_k(test, all_predictions, col_prediction='prediction', k=k)\n", "eval_recall = recall_at_k(test, all_predictions, col_prediction='prediction', k=k)\n", "\n", "\n", "print(\"RMSE:\\t\\t%f\" % eval_rmse,\n", "      \"MAE:\\t\\t%f\" % eval_mae,\n", "      \"rsquared:\\t%f\" % eval_rsquared,\n", "      \"exp var:\\t%f\" % eval_exp_var, sep='\\n')\n", "\n", "print('----')\n", "\n", "print(\"MAP:\\t%f\" % eval_map,\n", "      \"NDCG:\\t%f\" % eval_ndcg,\n", "      \"Precision@K:\\t%f\" % eval_precision,\n", "      \"Recall@K:\\t%f\" % eval_recall, sep='\\n')"]}, {"block": 22, "type": "code", "linesLength": 11, "startIndex": 164, "lines": ["# Record results with papermill for tests\n", "pm.record(\"rmse\", eval_rmse)\n", "pm.record(\"mae\", eval_mae)\n", "pm.record(\"rsquared\", eval_rsquared)\n", "pm.record(\"exp_var\", eval_exp_var)\n", "pm.record(\"MAP\", eval_map)\n", "pm.record(\"NDCG\", eval_ndcg)\n", "pm.record(\"precision\", eval_precision)\n", "pm.record(\"recall\", eval_recall)\n", "pm.record(\"train_time\", train_time)\n", "pm.record(\"test_time\", test_time)"]}, {"block": 23, "type": "markdown", "linesLength": 5, "startIndex": 175, "lines": ["## References\n", "\n", "1. Ruslan Salakhutdinov and Andriy Mnih. Probabilistic matrix factorization. 2008. URL: http://papers.nips.cc/paper/3208-probabilistic-matrix-factorization.pdf\n", "2. Yehuda Koren, Robert Bell, and Chris Volinsky. Matrix factorization techniques for recommender systems. 2009.\n", "3. Francesco Ricci, Lior Rokach, Bracha Shapira, and Paul B. Kantor. Recommender Systems Handbook. 1st edition, 2010."]}]