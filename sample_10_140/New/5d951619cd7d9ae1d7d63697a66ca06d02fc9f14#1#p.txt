[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["# ThinkDSP\n", "\n", "This notebook contains solutions to exercises in Chapter 9: Differentiation and Integration\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 16, "startIndex": 7, "lines": ["%matplotlib inline\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import thinkstats2\n", "\n", "import numpy as np\n", "import pandas as pd\n", "import scipy.signal\n", "\n", "# suppress division by zero warning\n", "from warnings import simplefilter\n", "simplefilter('ignore', RuntimeWarning)\n", "\n", "PI2 = 2 * np.pi\n", "GRAY = '0.7'"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["**Exercise:** The goal of this exercise is to explore the effect of `diff` and `differentiate` on a signal.  Create a triangle wave and plot it.  Apply the `diff` operator and plot the result.  Compute the spectrum of the triangle wave, apply `differentiate`, and plot the result.  Convert the spectrum back to a wave and plot it.  Are there differences between the effect of `diff` and `differentiate` for this wave?"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["*Solution:* Here's the triangle wave."]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["in_wave = thinkdsp.TriangleSignal(freq=50).make_wave(duration=0.1, framerate=44100)\n", "in_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["The diff of a triangle wave is a square wave, which explains why the harmonics in a square wave drop off like $1/f$, compared to the triangle wave, which drops off like $1/f^2$."]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 29, "lines": ["out_wave = in_wave.diff()\n", "out_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 32, "lines": ["When we take the spectral derivative, we get \"ringing\" around the discontinuities: https://en.wikipedia.org/wiki/Ringing_(signal)\n", "\n", "Mathematically speaking, the problem is that the derivative of the triangle wave is undefined at the points of the triangle."]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 35, "lines": ["out_wave2 = in_wave.make_spectrum().differentiate().make_wave()\n", "out_wave2.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["**Exercise:** The goal of this exercise is to explore the effect of `cumsum` and `integrate` on a signal.  Create a square wave and plot it.  Apply the `cumsum` operator and plot the result.  Compute the spectrum of the square wave, apply `integrate`, and plot the result.  Convert the spectrum back to a wave and plot it.  Are there differences between the effect of `cumsum` and `integrate` for this wave?"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["*Solution:* Here's the square wave."]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 40, "lines": ["in_wave = thinkdsp.SquareSignal(freq=50).make_wave(duration=0.1, framerate=44100)\n", "in_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["The cumulative sum of a square wave is a triangle wave.  After the previous exercise, that should come as no surprise."]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 44, "lines": ["out_wave = in_wave.cumsum()\n", "out_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["The spectral integral is also a triangle wave, although the amplitude is very different."]}, {"block": 15, "type": "code", "linesLength": 5, "startIndex": 48, "lines": ["spectrum = in_wave.make_spectrum().integrate()\n", "spectrum.hs[0] = 0\n", "out_wave2 = spectrum.make_wave()\n", "out_wave2.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["If we unbias and normalize the two waves, they are visually similar."]}, {"block": 17, "type": "code", "linesLength": 5, "startIndex": 54, "lines": ["out_wave.unbias()\n", "out_wave.normalize()\n", "out_wave2.normalize()\n", "out_wave.plot()\n", "out_wave2.plot()"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["And they are numerically similar, but with only about 3 digits of precision."]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["max(abs(out_wave.ys - out_wave2.ys))"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["**Exercise:** The goal of this exercise is the explore the effect of integrating twice.  Create a sawtooth wave, compute its spectrum, then apply `integrate` twice.  Plot the resulting wave and its spectrum.  What is the mathematical form of the wave?  Why does it resemble a sinusoid? "]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["Here's the sawtooth."]}, {"block": 22, "type": "code", "linesLength": 3, "startIndex": 63, "lines": ["in_wave = thinkdsp.SawtoothSignal(freq=50).make_wave(duration=0.1, framerate=44100)\n", "in_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["The first cumulative sum of a sawtooth is a parabola:"]}, {"block": 24, "type": "code", "linesLength": 4, "startIndex": 67, "lines": ["out_wave = in_wave.cumsum()\n", "out_wave.unbias()\n", "out_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["The second cumulative sum is a cubic curve:"]}, {"block": 26, "type": "code", "linesLength": 3, "startIndex": 72, "lines": ["out_wave = out_wave.cumsum()\n", "out_wave.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["Integrating twice also yields a cubic curve."]}, {"block": 28, "type": "code", "linesLength": 5, "startIndex": 76, "lines": ["spectrum = in_wave.make_spectrum().integrate().integrate()\n", "spectrum.hs[0] = 0\n", "out_wave2 = spectrum.make_wave()\n", "out_wave2.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 81, "lines": ["At this point, the result looks more and more like a sinusoid.  The reason is that integration acts like a low pass filter.  At this point we have filtered out almost everything except the fundamental, as shown in the spectrum below:"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["out_wave2.make_spectrum().plot(high=500)"]}, {"block": 31, "type": "markdown", "linesLength": 3, "startIndex": 83, "lines": ["**Exercise:** The goal of this exercise is to explore the effect of the 2nd difference and 2nd derivative.  Create a `CubicSignal`, which is defined in `thinkdsp`.  Compute the second difference by applying `diff` twice.  What does the result look like.  Compute the second derivative by applying `differentiate` twice.  Does the result look the same?\n", "\n", "Plot the filters that corresponds to the 2nd difference and the 2nd derivative and compare them.  Hint: In order to get the filters on the same scale, use a wave with framerate 1."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["*Solution:* Here's the cubic signal"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 87, "lines": ["in_wave = thinkdsp.CubicSignal(freq=0.0005).make_wave(duration=10000, framerate=1)\n", "in_wave.plot()"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["The first difference is a parabola and the second difference is a sawtooth wave (no surprises so far):"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 90, "lines": ["out_wave = in_wave.diff()\n", "out_wave.plot()"]}, {"block": 36, "type": "code", "linesLength": 2, "startIndex": 92, "lines": ["out_wave = out_wave.diff()\n", "out_wave.plot()"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["When we differentiate twice, we get a sawtooth with some ringing.  Again, the problem is that the deriviative of the parabolic signal is undefined at the points."]}, {"block": 38, "type": "code", "linesLength": 4, "startIndex": 95, "lines": ["spectrum = in_wave.make_spectrum().differentiate().differentiate()\n", "out_wave2 = spectrum.make_wave()\n", "out_wave2.plot()\n", "thinkplot.config(xlabel='Time (s)')"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["The window of the second difference is -1, 2, -1.  By computing the DFT of the window, we can find the corresponding filter."]}, {"block": 40, "type": "code", "linesLength": 9, "startIndex": 100, "lines": ["diff_window = np.array([-1.0, 2.0, -1.0])\n", "padded = thinkdsp.zero_pad(diff_window, len(in_wave))\n", "diff_wave = thinkdsp.Wave(padded, framerate=in_wave.framerate)\n", "diff_filter = diff_wave.make_spectrum()\n", "diff_filter.plot(label='2nd diff')\n", "\n", "thinkplot.config(xlabel='Frequency (Hz)',\n", "                 ylabel='Amplitude ratio',\n", "                 loc='lower right')"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 109, "lines": ["And for the second derivative, we can find the corresponding filter by computing the filter of the first derivative and squaring it."]}, {"block": 42, "type": "code", "linesLength": 7, "startIndex": 110, "lines": ["deriv_filter = in_wave.make_spectrum()\n", "deriv_filter.hs = (PI2 * 1j * deriv_filter.fs)**2\n", "deriv_filter.plot(label='2nd deriv')\n", "\n", "thinkplot.config(xlabel='Frequency (Hz)',\n", "                 ylabel='Amplitude ratio',\n", "                 loc='lower right')"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 117, "lines": ["Here's what the two filters look like on the same scale:"]}, {"block": 44, "type": "code", "linesLength": 6, "startIndex": 118, "lines": ["diff_filter.plot(label='2nd diff')\n", "deriv_filter.plot(label='2nd deriv')\n", "\n", "thinkplot.config(xlabel='Frequency (Hz)',\n", "                 ylabel='Amplitude ratio',\n", "                 loc='lower right')"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 124, "lines": ["Both are high pass filters that amplify the highest frequency components.  The 2nd derivative is parabolic, so it amplifies the highest frequencies the most.  The 2nd difference is a good approximation of the 2nd derivative only at the lowest frequencies, then it deviates substantially."]}, {"block": 46, "type": "code", "linesLength": 0, "startIndex": 125, "lines": []}]