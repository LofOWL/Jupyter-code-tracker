[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Image classification with Convolutional Neural Networks"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["Welcome to the first week of the second deep learning certificate! We're going to use convolutional neural networks (CNNs) to allow our computer to see - something that is only possible thanks to deep learning."]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Single label classification"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["** todo describe single label classification **"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Introduction to our first task: 'Dogs vs Cats'"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 5, "lines": ["We're going to try to create a model to enter the Dogs vs Cats competition at Kaggle. There are 25,000 labelled dog and cat photos available for training, and 12,500 in the test set that we have to try to label for this competition. According to the Kaggle web-site, when this competition was launched (end of 2013): \"State of the art: The current literature suggests machine classifiers can score above 80% accuracy on this task\". So if we can beat 80%, then we will be at the cutting edge as of 2013!\n", "\n", "Here is the dataset http://files.fast.ai/data/dogscats.zip. You can download it directly on your server by running the following line in your terminal. \"wget http://files.fast.ai/data/dogscats.zip\""]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 8, "lines": ["# Put these at the top of every notebook, to get automatic reloading and inline plotting\n", "%reload_ext autoreload\n", "%autoreload 2\n", "%matplotlib inline"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["# This file contains all the main external libs we'll use\n", "from fastai.imports import *"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["PATH = \"data/dogscats/\""]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["### First look at cat pictures"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Our library will assume that you have *train* and *valid* directories. It also assumes that each dir will have subdirs for each class you wish to recognize (in this case, 'cats' and 'dogs')."]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["!ls {PATH}"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["!ls {PATH}valid"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["files = !ls {PATH}valid/cats | head\n", "files"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["img = plt.imread(f'{PATH}valid/cats/{files[0]}')\n", "plt.imshow(img);"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Here is how the raw data looks like"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["img.shape"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["img[:4,:4]"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### Our first model"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["#### Quick start"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Here we import the libraries we need. We'll learn about what each does during the course."]}, {"block": 21, "type": "code", "linesLength": 5, "startIndex": 29, "lines": ["from fastai.transforms import *\n", "from fastai.conv_learner import *\n", "from fastai.model import *\n", "from fastai.dataset import *\n", "from fastai.sgdr import *"]}, {"block": 22, "type": "markdown", "linesLength": 5, "startIndex": 34, "lines": ["We're going to use a <b>pre-trained</b> model, that is, a model created by some one else to solve a different problem. Instead of building a model from scratch to solve a similar problem, we'll use a model trained onImageNet (1.2 million images and 1000 classes) as a starting point. The model is a Convolutional Neural Network (CNN), a type of Neural Network that builds state-of-the-art models for computer vision. We'll be learning all about CNNs during this course.\n", "\n", "We will be using the <b>resnet34</b> model. resnet34 is a version of the model that won the 2015 ImageNet competition. Here is more info on [resnet models](https://github.com/KaimingHe/deep-residual-networks). We'll be studying them in depth later, but for now we'll focus on using them effectively.\n", "\n", "Here's how to train and evalulate a *dogs vs cats* model in 3 lines of code, and under 20 seconds of compute time:"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 39, "lines": ["data = ImageClassifierData.from_paths(PATH, tfms=tfms_from_model(resnet34, 299))\n", "learn = ConvLearner.pretrained(resnet34, data, precompute=True)\n", "learn.fit(0.01, 2)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["How good is this model? Well, as we mentioned, prior to this competition, the state of the art was 80% accuracy. But the competition resulted in a huge jump to 98.9% accuracy, with the author of a popular deep learning library winning the competition. Extraordinarily, less than 4 years later, we can now beat that result in seconds! Even last year in this same course, our initial model had 98.3% accuracy, which is nearly double the error we're getting just a year later."]}, {"block": 25, "type": "markdown", "linesLength": 4, "startIndex": 43, "lines": ["**Things to explain:**\n", "- Epoch\n", "- Accuracy\n", "- Loss"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["#### Understanding the code for our first model"]}, {"block": 27, "type": "markdown", "linesLength": 3, "startIndex": 48, "lines": ["Let's look at this code line by line.\n", "\n", "**tfms** stands for *transformations*. `tfms_from_model` takes care of resizing (we are going to use size 299x299 images), image cropping, initial normalization (creating data with (mean,stdev) of (0,1)), and more."]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["tfms = tfms_from_model(resnet34, 299)"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["We need a <b>path</b> that points to the dataset. In this path we will also store temporary data and final results. `ImageClassifierData.from_paths` reads data from a provided path and creates a dataset ready for training."]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["data = ImageClassifierData.from_paths(PATH, tfms=tfms)"]}, {"block": 31, "type": "markdown", "linesLength": 6, "startIndex": 54, "lines": ["**There's a huge number of new concepts here. E.g.: weights, initialization, new layers, outputs, frozen layers, layer training. Remove those that aren't necessary yet, and explain carefully those that are.**\n", "\n", "`ConvLearner.pretrained` builds *learner* that contains a pretrained model. The last layer of the model needs to be replaced with the layer of the right dimensions. The pretained model was trained for 1000 classes but we need a model with two classes (cats and dogs). These weights of that layer are iniliatized randomly. The diagram below shows in an example how this was done in one of the earliest successful CNNs. The layer \"FC8\" here would get replaced with a new layer with 2 outputs. The top layers are fronzen while the new layer gets trained.\n", "\n", "<img src=\"images/pretrained.png\" width=\"500\">\n", "[original image](https://image.slidesharecdn.com/practicaldeeplearning-160329181459/95/practical-deep-learning-16-638.jpg)"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["learn = ConvLearner.pretrained(resnet34, data)"]}, {"block": 33, "type": "markdown", "linesLength": 9, "startIndex": 61, "lines": ["**I think there's too much un-necessary detail here. We don't need to know about the distinction b/w conv and fc layers yet. But we do need to know about removing the last layer of a deep model**\n", "\n", "In the figure above the layers represented by cubes are called the *convolutional layers* while the fatter-looking layers are called *fully connected*. We could *cut* the convolutional layers from the fully connected layers. Let's call the model with convolutional layers the *top_model* and the fully connected model the *fc_model*. If we wanted to train just the weights in the fc_model a good strategy is to do the following:\n", "\n", "1. For each image in your training data store the output of the top_model\n", "2. Use the output from top_model as input to the fc_model to train the fully connected layers\n", "3. Put together the top_model with the fc_model to get a full model. This strategy is equivalent to training the whole model but much faster.\n", "\n", "The next line of code it telling our library to do exactly that."]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["learn.precompute=True"]}, {"block": 35, "type": "markdown", "linesLength": 3, "startIndex": 71, "lines": ["**The word 'parameter' is being used in two different ways here. We need to explain clearly what a parameter (weight) is**\n", "\n", "We can now *fit* the model&mdash;that is, use *gradient descent* (which we will be studying later) to find the best parameters for the fully connected layer we added, that can separate cat pictures from dog pictures. We need to pass two parameters: the *learning rate* (generally 1e-2 or 1e-3 is a good starting point, we'll look more at this next) and the *number of epochs* (you can pass in a higher number and just stop training when you see it's no longer improving, then re-run it with the number of epochs you found works well.)"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["<b>Stochastic Gradient descent (SGD)</b> is an optimization procedure that is used to find optimal parameters (weights) in machine learning models. More details [here](http://ruder.io/optimizing-gradient-descent/)."]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["learn.fit(1e-2, 2)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["#### Choosing a learning rate"]}, {"block": 39, "type": "markdown", "linesLength": 5, "startIndex": 77, "lines": ["** Needs much more about learning rates here **\n", "\n", "The **learning rate** determines how quickly or how slowly you want to update the weight parameters in gradient descent. Usually, you want to start with a large learning rate, and gradually decrease the learning rate as the training progresses. \n", "\n", "`learn.lr_find()` helps you find an optimal learning rate. It uses the technique developed in the 2015 paper [Cyclical Learning Rates for Training Neural Networks](http://arxiv.org/abs/1506.01186), where we simply keep increasing the learning rate from a very small value, until the loss starts decreasing. We can plot the learning rate across batches to see what this looks like. Our `learn` object contains an attribute `sched` that contains our learning rate scheduler, and has some convenient plotting functionality including this one:"]}, {"block": 40, "type": "code", "linesLength": 2, "startIndex": 82, "lines": ["lrf=learn.lr_find()\n", "learn.sched.plot_lr()"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["** We need to explain the concept of a 'batch' for this chart to make sense **"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["We can see the plot of loss versus learning rate to see where our loss stops decreasing:"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 86, "lines": ["learn.sched.plot()"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["The loss is still clearly improving at lr=1e-2 (0.01), so that's what we use (ignore the first few batches, since there wasn't enough history to have a meaningful average). Note that the optimal learning rate can change as we training the model, so you may want to re-run this function from time to time."]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["### Improving our model"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["#### Data augmentation"]}, {"block": 47, "type": "markdown", "linesLength": 3, "startIndex": 90, "lines": ["If you try training for more epochs, you'll notice that we start to *overfit*, which means that our model is learning to recognize the specific images in the training set, rather than generalizaing such that we also get good results on the validation set. One way to fix this is to effectively create more data, through *data augmentation*. This refers to randomly changing the images in ways that shouldn't impact their interpretation, such as horizontal flipping, zooming, and rotating.\n", "\n", "We can do this by passing `aug_tfms` (*augmentation transforms*) to `tfms_from_model`, with a list of functions to apply that randomly change the image however we wish. For photos that are largely taken from the side (e.g. most photos of dogs and cats, as opposed to photos taken from the top down, such as satellite imagery) we can use the pre-defined list of functions `transforms_side_on`. We can also specify random zooming of images up to specified scale by adding the `max_zoom` parameter."]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 93, "lines": ["from fastai.plots import *"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["tfms = tfms_from_model(resnet34, 299, aug_tfms=transforms_side_on, max_zoom=1.1)"]}, {"block": 50, "type": "code", "linesLength": 7, "startIndex": 95, "lines": ["def get_augs():\n", "    data = ImageClassifierData.from_paths(PATH, bs=2, tfms=tfms)\n", "    x,_ = next(iter(data.aug_dl))\n", "    return data.trn_ds.denorm(x)[1]\n", "\n", "ims = np.stack([get_augs() for i in range(6)])\n", "plots(ims, rows=2)"]}, {"block": 51, "type": "code", "linesLength": 2, "startIndex": 102, "lines": ["data = ImageClassifierData.from_paths(PATH, tfms=tfms)\n", "learn = ConvLearner.pretrained(resnet34, data, precompute=True)"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 104, "lines": ["We fit the final layer from the pre-computed activations as before, but just for one epoch this time to get it started quickly."]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 105, "lines": ["learn.fit(1e-2, 1)"]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 106, "lines": ["To use our augmented data, we can no longer pre-compute the penultimate layer's activations - we never see the exact same picture twice since we have random augmentations, so we don't have the same activations. Therefore we disable `precompute`, the attribute that toggles the use of pre-computed activations."]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 107, "lines": ["learn.precompute = False"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 108, "lines": ["By default when we create a learner, it sets all but the last layer to *frozen*. That means that even although we're not using the precomputed activations any more, it's still only updating the weights in the last layer when we call `fit`."]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 109, "lines": ["learn.fit(1e-2, 3)"]}, {"block": 58, "type": "markdown", "linesLength": 3, "startIndex": 110, "lines": ["Our validation loss isn't improving much, so there's probably no point further training the last layer on its own. But there is something else we can do with data augmentation: use it at *inference* time (also known as *test* time). Not surprisingly, this is known as *test time augmentation*, or just *TTA*.\n", "\n", "TTA simply makes predictions not just on the images in your validation set, but also makes predictions on a number of randomly augmented versions of them too (by default, it uses the original image along with 4 randomly augmented versions). It then takes the average prediction from these images, and uses that. To use TTA on the validation set, we can use the learner's `TTA()` method."]}, {"block": 59, "type": "code", "linesLength": 1, "startIndex": 113, "lines": ["accuracy(*learn.TTA())"]}, {"block": 60, "type": "markdown", "linesLength": 3, "startIndex": 114, "lines": ["I generally see about a 30% reduction in error on this dataset when using TTA at this point, which is an amazing result for such a quick and easy technique!\n", "\n", "Since we've got a pretty good model at this point, we might want to save it so we can load it again later without training it from scratch."]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 117, "lines": ["learn.save('299_fc')"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["#### Fine-tuning and differential learning rate annealing"]}, {"block": 63, "type": "markdown", "linesLength": 1, "startIndex": 119, "lines": ["Now that we have a good final layer trained, we can try fine-tuning the other layers. To tell the learner that we want to unfreeze the remaining layers, just call (surprise surprise!) `unfreeze()`."]}, {"block": 64, "type": "code", "linesLength": 1, "startIndex": 120, "lines": ["learn.unfreeze()"]}, {"block": 65, "type": "markdown", "linesLength": 3, "startIndex": 121, "lines": ["Note that the other layers have *already* been trained to recognize imagenet photos (whereas our final layers where randomly initialized), so we want to be careful of not destroying the carefully tuned weights that are already there.\n", "\n", "Generally speaking, the earlier layers (as we've seen) have more general-purpose features. Therefore we would expect them to need less fine-tuning for new datasets. For this reason we will use different learning rates for different layers: the first few layers will be at 1e-4, the middle layers at 1e-3, and our FC layers we'll leave at 1e-2 as before. We refer to this as *differential learning rates*, although there's no standard name for this techique in the literature that we're aware of."]}, {"block": 66, "type": "code", "linesLength": 1, "startIndex": 124, "lines": ["lr=np.array([1e-4,1e-3,1e-2])"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 125, "lines": ["learn.fit(lr, 2, cycle_len=2)"]}, {"block": 68, "type": "markdown", "linesLength": 6, "startIndex": 126, "lines": ["Why did this complete 4 epochs when we passed an argument of 2? And what is that `cycle_len` parameter? What we've done here is used a technique called *learning rate annealing*, which gradually decreases the learning rate as training progresses. This is helpful because as we get closer to the optimal weights, we want to take smaller steps.\n", "\n", "However, we may find ourselves in a part of the weight space that isn't very resilient - that is, small changes to the weights may result in big changes to the loss. We want to encourage our model to find parts of the weight space that are both accurate and stable. Therefore, from time to time we increase the learning rate, which will force the model to jump to a different part of the weight space if the current area is \"spikey\". Here's a picture of how that might look if we reset the learning rates 3 times (in this paper they call it a \"cyclic LR schedule\"):\n", "\n", "<img src=\"images/sgdr.png\" width=\"80%\">\n", "(From the paper [Snapshot Ensembles](https://arxiv.org/abs/1704.00109))."]}, {"block": 69, "type": "markdown", "linesLength": 1, "startIndex": 132, "lines": ["The number of epochs between resetting the learning rate is set by `cycle_len`, and the number of times this happens is refered to as the *number of cycles*, and is what we're actually passing as the 2nd parameter to `fit()`. So here's what our actual learning rates looked like:"]}, {"block": 70, "type": "code", "linesLength": 1, "startIndex": 133, "lines": ["learn.sched.plot_lr()"]}, {"block": 71, "type": "markdown", "linesLength": 3, "startIndex": 134, "lines": ["Note that's what being plotted above is the learning rate of the *final layers*. The learning rates of the earlier layers are fixed at the same multiples of the final layer rates as we initially requested (i.e. the first layers have 100x smaller, and middle layers 10x smaller learning rates, since we set `lr=np.array([1e-4,1e-3,1e-2])`.\n", "\n", "You should find our TTA accuracy has improved a little more."]}, {"block": 72, "type": "code", "linesLength": 1, "startIndex": 137, "lines": ["accuracy(*learn.TTA())"]}, {"block": 73, "type": "markdown", "linesLength": 1, "startIndex": 138, "lines": ["## Currently unused"]}, {"block": 74, "type": "markdown", "linesLength": 1, "startIndex": 139, "lines": ["### Class Saliency Visualisation"]}, {"block": 75, "type": "markdown", "linesLength": 1, "startIndex": 140, "lines": ["This method allows an object classifier to be used for object localization, or to better understand misclassifications."]}, {"block": 76, "type": "code", "linesLength": 1, "startIndex": 141, "lines": ["from IPython.display import display, Math, Latex"]}, {"block": 77, "type": "markdown", "linesLength": 2, "startIndex": 142, "lines": ["Our model visualization is a version of this.\n", "[script](https://github.com/leelabcnbc/cnnvis-pytorch/blob/master/test.ipynb). The details of this approach are descriped in this [paper](https://arxiv.org/pdf/1312.6034.pdf)."]}, {"block": 78, "type": "markdown", "linesLength": 1, "startIndex": 144, "lines": ["Given an image $I_0$, a class $c$, and a classification ConvNet with the class score function $Sc(I)$, we would like to rank the pixels of $I_0$ based on their influence on the score $Sc(I_0)$."]}, {"block": 79, "type": "code", "linesLength": 8, "startIndex": 145, "lines": ["bs=1\n", "f_model = resnet34\n", "path = \"/data/yinterian/dogscats/\"\n", "sz=299\n", "tfms = tfms_from_model(f_model, sz, aug_tfms=transforms_side_on, max_zoom=1.1)\n", "data = ImageClassifierData.from_paths(path, bs, tfms, test_name='test1')\n", "learn = ConvLearner.pretrained(f_model, data)\n", "learn.load('299_no')"]}, {"block": 80, "type": "code", "linesLength": 6, "startIndex": 153, "lines": ["# to get the first element of the validation data\n", "x, y = data.val_dl.dataset[5]\n", "model = learn.model\n", "denorm = tfms[0].denorm\n", "x2 = np.rollaxis(x, 0, 3)\n", "x_org = denorm(x2)"]}, {"block": 81, "type": "code", "linesLength": 1, "startIndex": 159, "lines": ["print(x.shape, x2.shape, x_org.shape)"]}, {"block": 82, "type": "code", "linesLength": 1, "startIndex": 160, "lines": ["plt.imshow(x2)"]}, {"block": 83, "type": "code", "linesLength": 1, "startIndex": 161, "lines": ["plt.imshow(x_org)"]}, {"block": 84, "type": "code", "linesLength": 1, "startIndex": 162, "lines": ["_ = model.eval()"]}, {"block": 85, "type": "code", "linesLength": 3, "startIndex": 163, "lines": ["from torch.autograd import Variable\n", "from torch.nn import Parameter\n", "from torch import Tensor"]}, {"block": 86, "type": "code", "linesLength": 1, "startIndex": 166, "lines": ["x.shape"]}, {"block": 87, "type": "code", "linesLength": 3, "startIndex": 167, "lines": ["xx = T(x).unsqueeze(0)\n", "xx.size()\n", "xx = xx.contiguous()"]}, {"block": 88, "type": "code", "linesLength": 1, "startIndex": 170, "lines": ["input_img = Parameter(xx.cuda(async=True), requires_grad=True)"]}, {"block": 89, "type": "code", "linesLength": 2, "startIndex": 171, "lines": ["if input_img.grad is not None:\n", "    input_img.grad.data.zero_()"]}, {"block": 90, "type": "code", "linesLength": 1, "startIndex": 173, "lines": ["model.zero_grad()"]}, {"block": 91, "type": "code", "linesLength": 1, "startIndex": 174, "lines": ["raw_score = model(input_img)"]}, {"block": 92, "type": "code", "linesLength": 2, "startIndex": 175, "lines": ["raw_score_numpy = raw_score.data.cpu().numpy()\n", "print(np.around(np.exp(raw_score_numpy), decimals=4))"]}, {"block": 93, "type": "code", "linesLength": 21, "startIndex": 177, "lines": ["def show_images(img_original, saliency, title):\n", "    # convert from c01 to 01c\n", "    print(saliency.min(), saliency.max(), saliency.mean(), saliency.std())\n", "    saliency = saliency[::-1]  # to BGR\n", "    saliency = saliency.transpose(1, 2, 0)\n", "    # plot the original image and the three saliency map variants\n", "    plt.figure(figsize=(10, 10), facecolor='w')\n", "    plt.subplot(2, 2, 1)\n", "    plt.title('input')\n", "    plt.imshow(np.asarray(img_original))\n", "    plt.subplot(2, 2, 2)\n", "    plt.title('abs. saliency')\n", "    plt.imshow(np.abs(saliency).max(axis=-1), cmap='gray')\n", "    plt.subplot(2, 2, 3)\n", "    plt.title('pos. saliency')\n", "    plt.imshow((np.maximum(0, saliency) / saliency.max()))\n", "    plt.subplot(2, 2, 4)\n", "    plt.title('neg. saliency')\n", "    plt.imshow((np.maximum(0, -saliency) / -saliency.min()))\n", "    plt.suptitle(title)\n", "    plt.show()"]}, {"block": 94, "type": "code", "linesLength": 1, "startIndex": 198, "lines": ["loss = raw_score.sum()"]}, {"block": 95, "type": "code", "linesLength": 1, "startIndex": 199, "lines": ["loss.backward(retain_variables=True)"]}, {"block": 96, "type": "code", "linesLength": 1, "startIndex": 200, "lines": ["show_images(x_org, input_img.grad.data.cpu().numpy()[0], 'naive')\n"]}, {"block": 97, "type": "markdown", "linesLength": 1, "startIndex": 201, "lines": ["### Visualizing kernels"]}, {"block": 98, "type": "code", "linesLength": 2, "startIndex": 202, "lines": ["# to look at the model\n", "#print(model)"]}, {"block": 99, "type": "code", "linesLength": 14, "startIndex": 204, "lines": ["def plot_first_layer_kernels(tensor, num_cols=6):\n", "    num_kernels = tensor.shape[0]\n", "    num_rows = 1+ num_kernels // num_cols\n", "    fig = plt.figure(figsize=(num_cols,num_rows))\n", "    for i in range(tensor.shape[0]):\n", "        kernel = tensor[i]\n", "        kernel = np.rollaxis(kernel, 0, 3)\n", "        ax1 = fig.add_subplot(num_rows,num_cols,i+1)\n", "        ax1.imshow(kernel)\n", "        ax1.axis('off')\n", "        ax1.set_xticklabels([])\n", "        ax1.set_yticklabels([])\n", "    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n", "    plt.show()"]}, {"block": 100, "type": "code", "linesLength": 1, "startIndex": 218, "lines": ["mm = model.double()"]}, {"block": 101, "type": "code", "linesLength": 3, "startIndex": 219, "lines": ["filters = mm.modules\n", "layer1 = [i for i in mm.children()][0]\n", "tensor = layer1.weight.data.cpu().numpy()"]}, {"block": 102, "type": "code", "linesLength": 1, "startIndex": 222, "lines": ["tensor.shape"]}, {"block": 103, "type": "code", "linesLength": 1, "startIndex": 223, "lines": ["layer1"]}, {"block": 104, "type": "code", "linesLength": 2, "startIndex": 224, "lines": ["# 18 children\n", "[i for i in mm.children()][4][0]"]}, {"block": 105, "type": "code", "linesLength": 2, "startIndex": 226, "lines": ["# here are the 64 7x7x3 top kernels\n", "plot_first_layer_kernels(tensor, num_cols=8)"]}, {"block": 106, "type": "code", "linesLength": 2, "startIndex": 228, "lines": ["layer2 = mm[4][0].conv1\n", "tensor2 = layer2.weight.data.cpu().numpy()"]}, {"block": 107, "type": "code", "linesLength": 1, "startIndex": 230, "lines": ["tensor2.shape "]}, {"block": 108, "type": "code", "linesLength": 15, "startIndex": 231, "lines": ["def plot_kernels_v2(tensor):\n", "    num_kernels = tensor.shape[0]*tensor.shape[1]\n", "    num_cols = tensor.shape[0]\n", "    num_rows = tensor.shape[1]\n", "    fig = plt.figure(figsize=(num_cols,num_rows))\n", "    for i in range(tensor.shape[0]):\n", "        for j in range(tensor.shape[1]):\n", "            kernel = tensor[i][j]\n", "            ax1 = fig.add_subplot(num_rows,num_cols,i+1 + j*i)\n", "            ax1.imshow(kernel, cmap='gray')\n", "            ax1.axis('off')\n", "            ax1.set_xticklabels([])\n", "            ax1.set_yticklabels([])\n", "    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n", "    plt.show()"]}, {"block": 109, "type": "code", "linesLength": 2, "startIndex": 246, "lines": ["#This is not the right way of visualizing this\n", "plot_kernels_v2(tensor2)"]}, {"block": 110, "type": "code", "linesLength": 1, "startIndex": 248, "lines": ["tensor2[0][0].shape"]}]