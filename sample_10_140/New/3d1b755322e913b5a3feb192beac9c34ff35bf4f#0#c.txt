[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Introduction to our first task: 'Dogs vs Cats'"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["%reload_ext autoreload\n", "%autoreload 2\n", "%matplotlib inline"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 4, "lines": ["PATH = \"data/dogscats/\"\n", "sz=224\n", "batch_size=64"]}, {"block": 3, "type": "code", "linesLength": 9, "startIndex": 7, "lines": ["import numpy as np\n", "from keras.preprocessing.image import ImageDataGenerator\n", "from keras.preprocessing import image\n", "from keras.layers import Dropout, Flatten, Dense\n", "from keras.applications import ResNet50\n", "from keras.models import Model, Sequential\n", "from keras.layers import Dense, GlobalAveragePooling2D\n", "from keras import backend as K\n", "from keras.applications.resnet50 import preprocess_input"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["train_data_dir = f'{PATH}train'\n", "validation_data_dir = f'{PATH}valid'"]}, {"block": 5, "type": "code", "linesLength": 13, "startIndex": 18, "lines": ["train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input,\n", "    shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n", "\n", "test_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n", "\n", "train_generator = train_datagen.flow_from_directory(train_data_dir,\n", "    target_size=(sz, sz),\n", "    batch_size=batch_size, class_mode='binary')\n", "\n", "validation_generator = test_datagen.flow_from_directory(validation_data_dir,\n", "    shuffle=False,\n", "    target_size=(sz, sz),\n", "    batch_size=batch_size, class_mode='binary')"]}, {"block": 6, "type": "code", "linesLength": 5, "startIndex": 31, "lines": ["base_model = ResNet50(weights='imagenet', include_top=False)\n", "x = base_model.output\n", "x = GlobalAveragePooling2D()(x)\n", "x = Dense(1024, activation='relu')(x)\n", "predictions = Dense(1, activation='sigmoid')(x)"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["model = Model(inputs=base_model.input, outputs=predictions)\n", "for layer in base_model.layers: layer.trainable = False\n", "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 39, "lines": ["%%time\n", "model.fit_generator(train_generator, train_generator.n // batch_size, epochs=3, workers=4,\n", "        validation_data=validation_generator, validation_steps=validation_generator.n // batch_size)"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 42, "lines": ["split_at = 140\n", "for layer in model.layers[:split_at]: layer.trainable = False\n", "for layer in model.layers[split_at:]: layer.trainable = True\n", "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])    "]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 46, "lines": ["%%time\n", "model.fit_generator(train_generator, train_generator.n // batch_size, epochs=1, workers=3,\n", "        validation_data=validation_generator, validation_steps=validation_generator.n // batch_size)"]}, {"block": 11, "type": "code", "linesLength": 0, "startIndex": 49, "lines": []}]