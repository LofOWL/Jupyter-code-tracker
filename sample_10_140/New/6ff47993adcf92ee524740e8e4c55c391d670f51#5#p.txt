[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Basic core"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["This module contains all the basic functions we need in other modules of the fastai library (split with [`torch_core`](/torch_core.html#torch_core) that contains the ones requiring pytorch). Its documentation can easily be skipped at a first read, unless you want to know what a given function does."]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 2, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.core import * "]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["## Global constants"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["`default_cpus = min(16, num_cpus())` <div style=\"text-align: right\"><a href=\"https://github.com/fastai/fastai/blob/master/fastai/core.py#L45\">[source]</a></div>"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Check functions"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["show_doc(has_arg)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Check if `func` accepts `arg` as an argument."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["show_doc(ifnone)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["show_doc(is1d)"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["show_doc(is_listy)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Check if `x` is a `Collection`."]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["show_doc(is_tuple)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Check if `x` is a `tuple`."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["## Collection related functions"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["show_doc(arange_of)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["show_doc(array)"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["show_doc(arrays_split)"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["show_doc(chunks)"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["show_doc(df_names_to_idx)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["show_doc(extract_kwargs)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["show_doc(idx_dict)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["idx_dict(['a','b','c'])"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["show_doc(index_row)"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["show_doc(listify)"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["show_doc(random_split)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["show_doc(range_of)"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["show_doc(series2cat)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["show_doc(split_kwargs_by_func)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["show_doc(to_int)"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["show_doc(uniqueify)"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["## Files management and downloads"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["show_doc(download_url)"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["show_doc(find_classes)"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["show_doc(join_path)"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["show_doc(join_paths)"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["show_doc(loadtxt_str)"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["show_doc(save_texts)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["## Multiprocessing"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["show_doc(num_cpus)"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["show_doc(parallel)"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["show_doc(partition)"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["show_doc(partition_by_cores)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["## Data block API"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["show_doc(ItemBase, title_level=3)"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["All items used in fastai should subclass this. Must have a [`data`](/tabular.data.html#tabular.data) field that will be used when collating in mini-batches."]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["show_doc(ItemBase.apply_tfms)"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["show_doc(ItemBase.show)"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["The default behavior is to set the string representation of this object as title of `ax`."]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["show_doc(Category, title_level=3)"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Create a [`Category`](/core.html#Category) with an `obj` of index [`data`](/tabular.data.html#tabular.data) in a certain classes list. "]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["show_doc(EmptyLabel, title_level=3)"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["show_doc(MultiCategory, title_level=3)"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["Create a [`MultiCategory`](/core.html#MultiCategory) with an `obj` that is a collection of labels. [`data`](/tabular.data.html#tabular.data) corresponds to the one-hot encoded labels and `raw` is a list of associated string."]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["## Others"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["show_doc(camel2snake)"]}, {"block": 56, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["camel2snake('DeviceDataLoader')"]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["show_doc(even_mults)"]}, {"block": 58, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["show_doc(func_args)"]}, {"block": 59, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["show_doc(noop)"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Return `x`."]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["show_doc(one_hot)"]}, {"block": 62, "type": "code", "linesLength": 1, "startIndex": 63, "lines": ["show_doc(subplots)"]}, {"block": 63, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["show_doc(text2html_table)"]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["## Undocumented Methods - Methods moved below this line will intentionally be hidden"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## New Methods - Please document or move to the undocumented section"]}]