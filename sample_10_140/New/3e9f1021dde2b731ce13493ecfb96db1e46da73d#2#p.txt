[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Other types of image model"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["%reload_ext autoreload\n", "%autoreload 2\n", "%matplotlib inline"]}, {"block": 2, "type": "code", "linesLength": 6, "startIndex": 4, "lines": ["from fastai.imports import *\n", "from fastai.transforms import *\n", "from fastai.conv_learner import *\n", "from fastai.model import *\n", "from fastai.dataset import *\n", "from fastai.sgdr import *"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["## Multi-label classification"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["### Multi-label versus single-label classification"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["from fastai.plots import *"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 13, "lines": ["path = \"data/dogscats/valid/\"\n", "list_paths = [f\"{path}cats/cat.2039.jpg\", f\"{path}dogs/dog.5891.jpg\"]\n", "title = \"This is single-label classification\"\n", "plots_from_files(list_paths, titles=[\"cat\", \"dog\"], maintitle=title)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["In single-label classification each sample belongs to one class. In the previous example, each image is either a *dog* or a *cat*."]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 18, "lines": ["path = \"data/planet/train-jpg/\"\n", "list_paths = [f\"{path}train_0.jpg\", f\"{path}train_1.jpg\"]\n", "title = \"This is multi-label classification\"\n", "titles=[\"haze primary\", \"agriculture clear primary water\"]\n", "plots_from_files(list_paths, titles=titles, maintitle=title)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["In multi-label classification each sample can belong to one or more clases. In the previous example, the first images belongs to two clases: *haze* and *primary*. The second image belongs to four clases: *agriculture*, *clear*, *primary* and  *water*."]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["### Planet data"]}, {"block": 11, "type": "code", "linesLength": 0, "startIndex": 25, "lines": []}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["### First model"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 26, "lines": ["from planet import f2\n", "\n", "sz=256\n", "metrics=[f2]\n", "f_model = resnet34\n", "PATH = \"data/planet/\""]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["label_csv = f'{PATH}train_v2.csv'\n", "n = len(list(open(label_csv)))-1\n", "val_idxs = get_cv_idxs(n)"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 35, "lines": ["tfms = tfms_from_model(f_model, sz, aug_tfms=transforms_top_down, max_zoom=1.05)\n", "data = ImageClassifierData.from_csv(PATH, 'train-jpg', label_csv, tfms=tfms,\n", "                            suffix='.jpg', val_idxs=val_idxs, test_name='test-jpg')"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["learn = ConvLearner.pretrained(f_model, data, precompute=True, metrics=metrics)"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["lrf=learn.lr_find()"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["learn.sched.plot()"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["learn.fit(0.2, 2)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["learn.fit(0.2, 15)"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 43, "lines": ["learn.precompute=False\n", "learn.fit(0.2, 3, cycle_len=1, cycle_mult=2)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["learn.sched.plot_lr()"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 46, "lines": ["learn.unfreeze()\n", "lrs = np.array([0.02,0.07,0.2])\n", "learn.precompute=False"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["learn.save('256_fc')"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["learn.fit(lrs, 3, cycle_len=1, cycle_mult=2)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["learn.sched.plot_loss()"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["### Increasing resolution during training"]}, {"block": 28, "type": "code", "linesLength": 4, "startIndex": 53, "lines": ["def get_data(sz):\n", "    tfms = tfms_from_model(f_model, sz, aug_tfms=transforms_top_down, max_zoom=1.05)\n", "    return ImageClassifierData.from_csv(PATH, 'train-jpg', label_csv, tfms=tfms,\n", "                    suffix='.jpg', val_idxs=val_idxs, test_name='test-jpg')"]}, {"block": 29, "type": "code", "linesLength": 4, "startIndex": 57, "lines": ["data = get_data(256)\n", "learn = ConvLearner.pretrained(f_model, data, precompute=True, metrics=metrics)\n", "lrf=learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 30, "type": "code", "linesLength": 3, "startIndex": 61, "lines": ["lr = 0.2\n", "lrs = np.array([lr/10, lr/3, lr])\n", "learn.precompute=False"]}, {"block": 31, "type": "code", "linesLength": 8, "startIndex": 64, "lines": ["def train_sz(sz):\n", "    learn.set_data(get_data(sz))\n", "    learn.freeze()\n", "    learn.fit(lr, 3, cycle_len=1, cycle_mult=2)\n", "    learn.unfreeze()\n", "    learn.save(f'{sz}_fc')\n", "    learn.fit(lrs, 3, cycle_len=1, cycle_mult=2)\n", "    learn.save(f'{sz}')"]}, {"block": 32, "type": "code", "linesLength": 4, "startIndex": 72, "lines": ["for sz in (64,128,256):\n", "    print(sz)\n", "    train_sz(sz)\n", "    print('----')"]}, {"block": 33, "type": "code", "linesLength": 0, "startIndex": 76, "lines": []}]