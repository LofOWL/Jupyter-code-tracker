[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["##ThinkDSP\n", "\n", "This notebook contains code examples from Chapter 3: Non-periodic signals\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 15, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import numpy as np\n", "\n", "import warnings\n", "warnings.filterwarnings('ignore')\n", "\n", "from IPython.html.widgets import interact, interact_manual, fixed\n", "from IPython.html import widgets\n", "from IPython.display import display\n", "\n", "%precision 3\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Make a linear chirp from A3 to A5."]}, {"block": 3, "type": "code", "linesLength": 3, "startIndex": 23, "lines": ["signal = thinkdsp.Chirp(start=220, end=880)\n", "wave1 = signal.make_wave(duration=1)\n", "wave1.make_audio()"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Here's what the waveform looks like near the beginning."]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["wave1.segment(start=0, duration=0.01).plot()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["And near the end."]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["wave1.segment(start=0.9, duration=0.01).plot()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Here's an exponential chirp with the same frequency range and duration."]}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["signal = thinkdsp.ExpoChirp(start=220, end=880)\n", "wave2 = signal.make_wave(duration=2)\n", "wave2.make_audio()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Let's look at the effect of leakage on a sine signal."]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["signal = thinkdsp.SinSignal(freq=440)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["If the duration is an integer multiple of the period, the beginning and end of the segment line up, and we get minimal leakage."]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 37, "lines": ["duration = signal.period * 30\n", "wave = signal.make_wave(duration)\n", "wave.plot()"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 40, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot(high=880)\n", "thinkplot.config(xlabel='frequency (Hz)', ylabel='amplitude', legend=False)"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["If the duration is not a multiple of a period, the leakage is pretty bad."]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 44, "lines": ["duration = signal.period * 30.25\n", "wave = signal.make_wave(duration)\n", "wave.plot()"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 47, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot(high=880)\n", "thinkplot.config(xlabel='Frequency (Hz)')"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Windowing helps (but notice that it reduces the total energy)."]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 51, "lines": ["wave.hamming()\n", "spectrum = wave.make_spectrum()\n", "spectrum.plot(high=880)\n", "thinkplot.config(xlabel='Frequency (Hz)')"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["If you blindly compute the DFT of a non-periodic segment, you get \"motion blur\"."]}, {"block": 21, "type": "code", "linesLength": 5, "startIndex": 56, "lines": ["signal = thinkdsp.Chirp(start=220, end=440)\n", "wave = signal.make_wave(duration=1)\n", "spectrum = wave.make_spectrum()\n", "spectrum.plot(high=700)\n", "thinkplot.config(xlabel='frequency (Hz)')"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["A spectrogram is a visualization of a short-time DFT that lets you see how the spectrum varies over time."]}, {"block": 23, "type": "code", "linesLength": 6, "startIndex": 62, "lines": ["def plot_spectrogram(wave, seg_length):\n", "    spectrogram = wave.make_spectrogram(seg_length)\n", "    print('Time resolution (s)', spectrogram.time_res)\n", "    print('Frequency resolution (Hz)', spectrogram.freq_res)\n", "    spectrogram.plot(high=700)\n", "    thinkplot.config(xlabel='Time(s)', ylabel='Frequency (Hz)')"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 68, "lines": ["signal = thinkdsp.Chirp(start=220, end=440)\n", "wave = signal.make_wave(duration=1, framerate=11025)\n", "plot_spectrogram(wave, 512)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["If you increase the segment length, you get better frequency resolution, worse time resolution."]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 72, "lines": ["plot_spectrogram(wave, 1024)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["If you decrease the segment length, you get better time resolution, worse frequency resolution."]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["plot_spectrogram(wave, 256)"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 75, "lines": ["slider = widgets.IntSlider(min=128, max=4096, value=100, step=128)\n", "interact(plot_spectrogram, wave=fixed(wave), seg_length=slider);"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 77, "lines": ["The following interaction lets you customize the Eye of Sauron as you vary the start and end frequency of the chirp."]}, {"block": 31, "type": "code", "linesLength": 12, "startIndex": 78, "lines": ["def eye_of_sauron(start, end):\n", "    \"\"\"Plots the spectrum of a chirp.\n", "    \n", "    start: initial frequency\n", "    end: final frequency\n", "    \"\"\"\n", "    signal = thinkdsp.Chirp(start=start, end=end)\n", "    wave = signal.make_wave(duration=0.5)\n", "    spectrum = wave.make_spectrum()\n", "    \n", "    spectrum.plot(high=1200)\n", "    thinkplot.config(xlabel='frequency (Hz)', ylabel='amplitude')"]}, {"block": 32, "type": "code", "linesLength": 3, "startIndex": 90, "lines": ["slider1 = widgets.FloatSlider(min=100, max=1000, value=100, step=50)\n", "slider2 = widgets.FloatSlider(min=100, max=1000, value=200, step=50)\n", "interact(eye_of_sauron, start=slider1, end=slider2);"]}, {"block": 33, "type": "code", "linesLength": 0, "startIndex": 93, "lines": []}]