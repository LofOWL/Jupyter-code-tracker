[{"block": 0, "type": "markdown", "linesLength": 4, "startIndex": 0, "lines": ["# Observing shooting stars\n", "\n", "\n", "Average time between shooting stars = 15 minutes. What is the probability of seeing 4 stars in one hour?"]}, {"block": 1, "type": "code", "linesLength": 23, "startIndex": 4, "lines": ["# Standard data science\n", "import pandas as pd\n", "import numpy as np\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "# Visualizations\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot\n", "\n", "# Cufflinks for dataframes\n", "import cufflinks as cf\n", "cf.go_offline()\n", "cf.set_config_file(world_readable=True, theme='white')"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["from scipy.special import factorial\n", "import pymc3 as pm"]}, {"block": 3, "type": "code", "linesLength": 7, "startIndex": 29, "lines": ["rate = 1/15\n", "minutes = 60\n", "lam = rate * minutes\n", "\n", "k = 4\n", "p_k = np.exp(-lam) * np.power(lam, k) / factorial(k)\n", "print(f'The probability of {k} meteors in {minutes} minutes is {p_k:.4f}')"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 36, "lines": ["x = np.random.binomial(60, rate, 10000)\n", "(x == 4).mean()"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["p_n"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["def calc_prob(lam, k):\n", "     return np.exp(-lam) * np.power(lam, k) / factorial(k)"]}, {"block": 7, "type": "code", "linesLength": 5, "startIndex": 41, "lines": ["# Different numbers\n", "ns = np.arange(10)\n", "p_n = calc_prob(lam, ns)\n", "\n", "print(f'The most likely value is {np.argmax(p_n) + 1} with probability {np.max(p_n):.4f}')"]}, {"block": 8, "type": "code", "linesLength": 7, "startIndex": 46, "lines": ["def plot_line(x, p_x, title=''):\n", "    df = pd.DataFrame({'x': x, 'y': p_x})\n", "    print(f'The most likely value is {np.argmax(p_x) + 1} with probability {np.max(p_x):.4f}')\n", "    df.iplot(kind='scatter', mode='markers+lines', \n", "             x='x', y='y', xTitle='Number of Events',\n", "             yTitle='Probability', \n", "            title=title)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["plot_line(ns, p_n, title='Probability of Number of Meteors in One Hour')"]}, {"block": 10, "type": "code", "linesLength": 7, "startIndex": 54, "lines": ["def plot_lambdas(lams, ns, title=''):\n", "    df = pd.DataFrame()\n", "    for lam in lams:\n", "        df[f'Meteors per Hour = {lam}'] = calc_prob(lam, ns)\n", "    df.index = ns\n", "    df.iplot(kind='scatter', xTitle='Events', yTitle='Probability', title=title)\n", "    return df"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 61, "lines": ["df = plot_lambdas(np.array([1/5, 1/10, 1/15, 1/20, 1/30]) * minutes, \n", "                  list(range(15)), title='Probability of Meteors at Different Rates')"]}, {"block": 12, "type": "code", "linesLength": 6, "startIndex": 63, "lines": ["def plot_hist(x, title='',summary=True):\n", "    df = pd.DataFrame(x)\n", "    df.iplot(kind='hist', xTitle='Events', \n", "             yTitle='Count', title=title)\n", "    if summary:\n", "        print(df.describe())"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 69, "lines": ["counts = np.random.poisson(lam, size=10000)\n", "plot_hist(counts, title='Distribution of Number of Meteors in 1 Hour')"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 71, "lines": ["counts = np.random.poisson(rate * 120, size=10000)\n", "plot_hist(counts, title='Distribution of Number of Meteors in 2 Hour')"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 73, "lines": ["p_n = calc_prob(lam, np.arange(100))"]}, {"block": 16, "type": "code", "linesLength": 11, "startIndex": 74, "lines": ["def pr_less_than_or_equal(p_n, n_query):\n", "    return p_n[:n_query+1].sum() / p_n.sum()\n", "\n", "print(f'Probability of 10 or fewer meteors: {pr_less_than_or_equal(p_n, 10):.4f}')\n", "\n", "def pr_greater_than(p_n, n_query):\n", "    return 1 - pr_less_than_or_equal(p_n, n_query)\n", "\n", "print(f'Probability of more than 4 meteors: {pr_greater_than(p_n, 4):.4f}')\n", "\n", "assert pr_less_than_or_equal(p_n, k) + pr_greater_than(p_n, k) == 1"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["# Waiting Time"]}, {"block": 18, "type": "code", "linesLength": 5, "startIndex": 86, "lines": ["def find_waiting_time(rate, t):\n", "    return np.exp(-rate * t)\n", "\n", "t = 15\n", "print(f'Probability of waiting {t} minutes: {find_waiting_time(rate, t):.4f}')"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 91, "lines": ["ts = np.arange(120)\n", "p_t = find_waiting_time(rate, ts)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 93, "lines": ["p_t.sum()"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["plot_line(ts, p_t / p_t.sum())"]}, {"block": 22, "type": "code", "linesLength": 5, "startIndex": 95, "lines": ["def waiting_time_less_than(rate, t):\n", "    return 1 - find_waiting_time(rate, t)\n", "\n", "t = 5\n", "print(f'Probability of waiting less than or equal to {t} minutes: {waiting_time_less_than(rate, t):.4f}')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 100, "lines": ["# Binomial Versus Poisson Distribution"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 101, "lines": ["trials = np.random.binomial(100, rate, size=10000)\n", "trials.mean()"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 103, "lines": ["trials_poisson = np.random.poisson(rate*spins, size=10000)\n", "trials_poisson.mean()"]}, {"block": 26, "type": "code", "linesLength": 5, "startIndex": 105, "lines": ["def plot_hist(x, summary=True):\n", "    df = pd.DataFrame(x)\n", "    df.iplot(kind='hist')\n", "    if summary:\n", "        print(df.describe())"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 110, "lines": ["plot_hist(trials)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["plot_hist(trials_poisson)"]}, {"block": 29, "type": "code", "linesLength": 0, "startIndex": 112, "lines": []}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["# Distribution"]}, {"block": 31, "type": "code", "linesLength": 6, "startIndex": 113, "lines": ["spins = 100\n", "rate = 1/38\n", "\n", "def calc_prob_number(rate, number, trials):\n", "    lam = rate * trials\n", "    return np.exp(-lam) * (np.power(lam, number)) / factorial(number)"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 119, "lines": ["Expected successes per 1000 spins"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 120, "lines": ["lam = rate*spins\n", "lam"]}, {"block": 34, "type": "code", "linesLength": 2, "startIndex": 122, "lines": ["ns = np.arange(100)\n", "p_n = calc_prob_number(rate, ns, spins)"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 124, "lines": ["p_n[ns >= 3].sum()"]}, {"block": 36, "type": "code", "linesLength": 4, "startIndex": 125, "lines": ["figure = go.Figure(data=[go.Scatter(x=ns, y=p_n, mode='markers+lines')], layout=go.Layout(xaxis=dict(title='Successes'),\n", "                                                                                         yaxis=dict(title='Density'),\n", "                                                                                         title='Probability Distribution of Number of Successes per 100 Spins'))\n", "iplot(figure)"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["Try using different rates."]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 130, "lines": ["ra"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 131, "lines": ["Alternative using numpy"]}, {"block": 40, "type": "code", "linesLength": 6, "startIndex": 132, "lines": ["n = np.random.poisson(lam, size=int(1e4))\n", "\n", "df = pd.DataFrame({'n': n})\n", "df['n'].iplot(kind='hist', xTitle='successes / 1000 spins', \n", "              yTitle='Count', \n", "              title='Histogram of Successes in 1000 spins for 10000 Trials')"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 138, "lines": ["# Waiting Time"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 139, "lines": ["ts = np.arange(200)\n", "p_t = np.exp(-rate * ts)"]}, {"block": 43, "type": "code", "linesLength": 4, "startIndex": 141, "lines": ["figure = go.Figure(data=[go.Scatter(x=ts, y=p_t / p_t.sum(), mode='markers+lines')], layout=go.Layout(xaxis=dict(title='Waiting Time (spins)'),\n", "                                                                                         yaxis=dict(title='Density'),\n", "                                                                                         title='Probability Distribution of Waiting Time'))\n", "iplot(figure)"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 145, "lines": ["np.argmax(ts * p_t)"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 146, "lines": ["Probability of waiting more than 100 spins."]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 147, "lines": ["np.exp(-rate * 100)"]}, {"block": 47, "type": "code", "linesLength": 24, "startIndex": 148, "lines": ["from math import pow, exp, factorial\n", "\n", "class Exponential:\n", "\n", "    def __init__(self, rate):\n", "        self.rate = rate\n", "\n", "    def prob_less_than_or_equal(self, t):\n", "        rate = self.rate * t\n", "        return 1 - exp(-rate)\n", "\n", "    def prob_greater_than(self, t):\n", "        return 1 - self.prob_less_than_or_equal(t)\n", "\n", "    def prob_between(self, t1, t2):\n", "        p1 = self.prob_less_than_or_equal(t1)\n", "        p2 = self.prob_less_than_or_equal(t2)\n", "\n", "        return p2 - p1\n", "\n", "expo = Exponential(1/38)\n", "print(expo.prob_greater_than(100))\n", "print(expo.prob_less_than_or_equal(100))\n", "print(expo.prob_between(50, 150))"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 172, "lines": ["# Arrivals"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 173, "lines": ["rand.rand(2)"]}, {"block": 50, "type": "code", "linesLength": 5, "startIndex": 174, "lines": ["spins = 10000\n", "time_between = 36  \n", "\n", "rand = np.random.RandomState(42)\n", "success_times = spins * time_between * np.sort(rand.rand(spins))"]}, {"block": 51, "type": "code", "linesLength": 6, "startIndex": 179, "lines": ["waiting_times = np.diff(success_times)\n", "\n", "df = pd.DataFrame({'waiting_time': waiting_times})\n", "df['waiting_time'].iplot(kind='hist', xTitle='Waiting Time', \n", "              yTitle='Count', bins=(0, 400, 10),\n", "              title='Histogram of Waiting Times')"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 185, "lines": ["np.mean(waiting_times)"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 186, "lines": ["# Visualizing Successes"]}, {"block": 54, "type": "code", "linesLength": 4, "startIndex": 187, "lines": ["spins = np.random.choice([0, 1], size = 100, replace=True, p=[1-rate, rate])\n", "success_times = np.where(spins==1)[0]\n", "waiting_times = np.diff(np.where(spins == 1))\n", "waiting_times[:10]"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 191, "lines": ["annotations = [go.layout.Annotation(x=x, y=1, text=str(x), ax=0, ay=200) for x in success_times]"]}, {"block": 56, "type": "code", "linesLength": 3, "startIndex": 192, "lines": ["figure = go.Figure(data=[go.Scatter(x=success_times, y=np.ones(shape=len(success_times)), mode='markers')], \n", "                   layout=go.Layout(annotations=annotations, yaxis=dict(range=(0, 1))))\n", "iplot(figure)"]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 195, "lines": ["annotations"]}, {"block": 58, "type": "code", "linesLength": 0, "startIndex": 196, "lines": []}, {"block": 59, "type": "code", "linesLength": 0, "startIndex": 196, "lines": []}]