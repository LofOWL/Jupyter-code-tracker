[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["# Running SAR on MovieLens (pySpark)\n", "\n", "SAR is a fast scalable adaptive algorithm for personalized recommendations based on user transaction history and item descriptions. It produces easily explainable / interpretable recommendations and handles \"cold item\" and \"semi-cold user\" scenarios. \n", "\n", "This notebook provides an example of how to utilize and evaluate SAR's pySpark implementation, meant for large-scale distributed datasets. We use a smaller dataset in this example to run SAR efficiently on Data Science Virtual Machine."]}, {"block": 1, "type": "code", "linesLength": 19, "startIndex": 5, "lines": ["# set the environment path to find Recommenders\n", "import sys\n", "sys.path.append(\"../../\")\n", "\n", "from utilities.recommender.sar.sar_pyspark import SARpySparkReference\n", "from utilities.dataset.url_utils import maybe_download\n", "from utilities.dataset.spark_splitters import spark_random_split\n", "from utilities.evaluation.spark_evaluation import SparkRatingEvaluation, SparkRankingEvaluation\n", "\n", "import numpy as np\n", "\n", "import pyspark\n", "import pyspark.sql.functions as F\n", "from pyspark.sql import SparkSession\n", "from pyspark.sql.types import StructType, StructField\n", "from pyspark.sql.types import StringType, FloatType, IntegerType\n", "\n", "print(\"System version: {}\".format(sys.version))\n", "print(\"Spark version: {}\".format(pyspark.__version__))\n"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Set the default parameters."]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 25, "lines": ["# top k items to recommend\n", "TOP_K = 10\n", "# do not recommend items which appear in the training set\n", "RECOMMEND_SEEN = False"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["### 0. Set up Spark context\n", "\n", "The following settings work well for debugging locally on VM - change when running on a cluster. We set up a giant single executor with many threads and specify memory cap. "]}, {"block": 5, "type": "code", "linesLength": 17, "startIndex": 32, "lines": ["# the following settings work well for debugging locally on VM - change when running on a cluster\n", "# set up a giant single executor with many threads and specify memory cap\n", "spark = SparkSession \\\n", "    .builder \\\n", "    .appName(\"SAR pySpark\") \\\n", "    .master(\"local[*]\") \\\n", "    .config(\"spark.driver.memory\", \"2g\")\\\n", "    .config(\"spark.executor.cores\", \"32\")\\\n", "    .config(\"spark.executor.memory\", \"8g\")\\\n", "    .config(\"spark.yarn.executor.memoryOverhead\", \"3g\")\\\n", "    .config(\"spark.memory.fraction\", \"0.9\")\\\n", "    .config(\"spark.memory.stageFraction\", \"0.3\")\\\n", "    .config(\"spark.executor.instances\", 1)\\\n", "    .config(\"spark.executor.heartbeatInterval\", \"36000s\")\\\n", "    .config(\"spark.network.timeout\", \"10000000s\")\\\n", "    .config(\"spark.driver.maxResultSize\", \"50g\")\\\n", "    .getOrCreate()\n"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["### 1. Download the MovieLens dataset"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["filepath = maybe_download(\"http://files.grouplens.org/datasets/movielens/ml-100k/u.data\", \"ml-100k.data\")"]}, {"block": 8, "type": "code", "linesLength": 10, "startIndex": 51, "lines": ["schema = StructType(\n", "    (\n", "        StructField(\"UserId\", StringType()),\n", "        StructField(\"MovieId\", StringType()),\n", "        StructField(\"Rating\", FloatType()),\n", "        StructField(\"Timestamp\", IntegerType()),\n", "    )\n", ")\n", "data = spark.read.csv(filepath, schema=schema, sep=\"\\t\", header=False)\n", "data.show()"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["### 2. Split the data using the Spark random splitter provided in utilities"]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 62, "lines": ["train, test = spark_random_split(data, ratio=0.75, seed=123)\n", "print (\"N train\", train.count())\n", "print (\"N test\", test.count())"]}, {"block": 11, "type": "code", "linesLength": 11, "startIndex": 65, "lines": ["header = {\n", "        \"col_user\": \"UserId\",\n", "        \"col_item\": \"MovieId\",\n", "        \"col_rating\": \"Rating\",\n", "        \"col_timestamp\": \"Timestamp\",\n", "    }\n", "\n", "model = SARpySparkReference(spark=spark,\n", "                remove_seen=True, similarity_type=\"jaccard\", \n", "                time_decay_coefficient=30, time_now=None, timedecay_formula=True, **header\n", "            )"]}, {"block": 12, "type": "markdown", "linesLength": 2, "startIndex": 76, "lines": ["### 3. Cold User filter\n", "In order to use SAR, we need to hash users and items and make sure there are no cold users."]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 78, "lines": ["train_set_users = set([x[0] for x in train.select(header[\"col_user\"]).distinct().collect()])\n", "test_set_users = set([x[0] for x in test.select(header[\"col_user\"]).distinct().collect()])\n", "both_sets = train_set_users.intersection(test_set_users)\n", "test = test.filter(F.col(header[\"col_user\"]).isin(both_sets))\n", "print (\"N train\", train.count())\n", "print (\"N test\", test.count())"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["#### Build uniform index"]}, {"block": 15, "type": "code", "linesLength": 15, "startIndex": 85, "lines": ["# we need to index item IDs which we want to score later, i.e. we need to consider all items\n", "train = train.withColumn('type', F.lit(1))\n", "test = test.withColumn('type', F.lit(0))\n", "df_all = train.union(test)\n", "df_all.createOrReplaceTempView(\"df_all\")\n", "\n", "# create new index for the items\n", "query = \"select \" + header[\"col_user\"] + \", \" +\\\n", "    \"dense_rank() over(partition by 1 order by \" + header[\"col_user\"] + \") as row_id, \" +\\\n", "                    header[\"col_item\"] + \", \" +\\\n", "    \"dense_rank() over(partition by 1 order by \" + header[\"col_item\"] + \") as col_id, \" +\\\n", "        header[\"col_rating\"] + \", \" + header[\"col_timestamp\"] + \", type from df_all\"\n", "print(\"Running query -- \" + query)\n", "df_all = spark.sql(query)\n", "df_all.createOrReplaceTempView(\"df_all\")"]}, {"block": 16, "type": "markdown", "linesLength": 2, "startIndex": 100, "lines": ["#### Recover the original data but now with index built-in\n", "Obtain the indexed dataframes."]}, {"block": 17, "type": "code", "linesLength": 7, "startIndex": 102, "lines": ["query = \"select row_id, col_id, \" + header[\"col_rating\"] + \", \" + header[\"col_timestamp\"] + \" from df_all where type=1\"\n", "print(\"Running query -- \" + query)\n", "train_indexed = spark.sql(query)\n", "\n", "query = \"select row_id, col_id, \" + header[\"col_rating\"] + \", \" + header[\"col_timestamp\"] + \" from df_all where type=0\"\n", "print(\"Running query -- \" + query)\n", "test_indexed = spark.sql(query)\n"]}, {"block": 18, "type": "markdown", "linesLength": 2, "startIndex": 109, "lines": ["Build index mappings: IDs to index and index to IDs.\n", "First we obtain all users and items which are used later in SAR."]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 111, "lines": ["unique_users =\\\n", "    np.array([x[header[\"col_user\"]] for x in df_all.select(header[\"col_user\"]).distinct().toLocalIterator()])\n", "unique_items =\\\n", "    np.array([x[header[\"col_item\"]] for x in df_all.select(header[\"col_item\"]).distinct().toLocalIterator()])\n"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 115, "lines": ["Indexing users and items: index all rows and columns, then split again into train and test. We perform the reduction on Spark across keys before calling .collect so this is scalable. The assumption is that we can store at least the full list of unique users and unique items on a single machine (vertical scaling).\n", "\n", "We also reverse the dictionaries in order to go ther othe way. Index to item is used to return top_k DataFrame later by undoing the index. For performance reasons we can use vector array to store index to ID mapping, but we're using dictionary for convenience (both are O(1) access anyway).\n"]}, {"block": 21, "type": "code", "linesLength": 7, "startIndex": 118, "lines": ["index2user = \\\n", "    dict(df_all.select([\"row_id\", header[\"col_user\"]]).rdd.reduceByKey(lambda _, v: v).collect())\n", "index2item = \\\n", "    dict(df_all.select([\"col_id\", header[\"col_item\"]]).rdd.reduceByKey(lambda _, v: v).collect())\n", "\n", "user_map_dict = {v: k for k, v in index2user.items()}\n", "item_map_dict = {v: k for k, v in index2item.items()}"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 125, "lines": ["Store the index values in the model object."]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 126, "lines": ["model.set_index(unique_users, unique_items, user_map_dict, item_map_dict, index2user, index2item)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["### 4. Train the SAR model on our training data, and get the top-k recommendations for our testing data"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 128, "lines": ["model.fit(train_indexed)\n", "top_k = model.recommend_k_items(test_indexed, top_k = TOP_K)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 130, "lines": ["top_k.show()"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 131, "lines": ["### 5. Evaluate how well SAR performs "]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["test.show()"]}, {"block": 29, "type": "code", "linesLength": 3, "startIndex": 133, "lines": ["rank_eval = SparkRankingEvaluation(test, top_k, k = TOP_K, col_user=\"UserId\", col_item=\"MovieId\", \n", "                                    col_rating=\"Rating\", col_prediction=\"prediction\", \n", "                                    relevancy_method=\"top_k\")"]}, {"block": 30, "type": "code", "linesLength": 6, "startIndex": 136, "lines": ["print(\"Model:\\t\" + model.model_str,\n", "      \"Top K:\\t%d\" % rank_eval.k,\n", "      \"MAP:\\t%f\" % rank_eval.map_at_k(),\n", "      \"NDCG:\\t%f\" % rank_eval.ndcg_at_k(),\n", "      \"Precision@K:\\t%f\" % rank_eval.precision_at_k(),\n", "      \"Recall@K:\\t%f\" % rank_eval.recall_at_k(), sep='\\n')"]}, {"block": 31, "type": "code", "linesLength": 0, "startIndex": 142, "lines": []}]