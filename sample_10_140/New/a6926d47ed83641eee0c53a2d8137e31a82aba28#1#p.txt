[{"block": 0, "type": "code", "linesLength": 3, "startIndex": 0, "lines": ["%matplotlib inline\n", "%reload_ext autoreload\n", "%autoreload 2"]}, {"block": 1, "type": "code", "linesLength": 5, "startIndex": 3, "lines": ["from fastai.conv_learner import *\n", "from fastai.dataset import *\n", "\n", "from pathlib import Path\n", "import json"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["## Data"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["### Setup"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["PATH = Path('data/carvana')\n", "list(PATH.iterdir())"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 12, "lines": ["MASKS_FN = 'train_masks.csv'\n", "META_FN = 'metadata.csv'\n", "TRAIN_DN = 'train'\n", "MASKS_DN = 'train_masks'"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["masks_csv = pd.read_csv(PATH/MASKS_FN)\n", "masks_csv.head()"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["meta_csv = pd.read_csv(PATH/META_FN)\n", "meta_csv.head()"]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 20, "lines": ["def show_img(im, figsize=None, ax=None, alpha=None):\n", "    if not ax: fig,ax = plt.subplots(figsize=figsize)\n", "    ax.imshow(im, alpha=alpha)\n", "    ax.set_axis_off()\n", "    return ax"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["CAR_ID = '00087a6bd4dc'"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["list((PATH/TRAIN_DN).iterdir())[:5]"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["Image.open(PATH/TRAIN_DN/f'{CAR_ID}_01.jpg').resize((300,200))"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["list((PATH/MASKS_DN).iterdir())[:5]"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["Image.open(PATH/MASKS_DN/f'{CAR_ID}_01_mask.gif').resize((300,200))"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["ims = [open_image(PATH/TRAIN_DN/f'{CAR_ID}_{i+1:02d}.jpg') for i in range(16)]"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["fig, axes = plt.subplots(4, 4, figsize=(9, 6))\n", "for i,ax in enumerate(axes.flat): show_img(ims[i], ax=ax)\n", "plt.tight_layout(pad=0.1)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Resize and convert"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["(PATH/'train_masks_png').mkdir(exist_ok=True)"]}, {"block": 18, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["def convert_img(fn):\n", "    fn = fn.name\n", "    Image.open(PATH/'train_masks'/fn).save(PATH/'train_masks_png'/f'{fn[:-4]}.png')"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["files = list((PATH/'train_masks').iterdir())\n", "with ThreadPoolExecutor(8) as e: e.map(convert_img, files)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["(PATH/'train_masks-128').mkdir(exist_ok=True)"]}, {"block": 21, "type": "code", "linesLength": 5, "startIndex": 42, "lines": ["def resize_mask(fn):\n", "    Image.open(fn).resize((128,128)).save((fn.parent.parent)/'train_masks-128'/fn.name)\n", "\n", "files = list((PATH/'train_masks_png').iterdir())\n", "with ThreadPoolExecutor(8) as e: e.map(resize_img, files)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["(PATH/'train-128').mkdir(exist_ok=True)"]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 48, "lines": ["def resize_img(fn):\n", "    Image.open(fn).resize((128,128)).save((fn.parent.parent)/'train-128'/fn.name)\n", "\n", "files = list((PATH/'train').iterdir())\n", "with ThreadPoolExecutor(8) as e: e.map(resize_img, files)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["## Dataset"]}, {"block": 25, "type": "code", "linesLength": 4, "startIndex": 54, "lines": ["TRAIN_DN = 'train-128'\n", "MASKS_DN = 'train_masks-128'\n", "sz = 128\n", "bs = 64"]}, {"block": 26, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["ims = [open_image(PATH/TRAIN_DN/f'{CAR_ID}_{i+1:02d}.jpg') for i in range(16)]\n", "im_masks = [open_image(PATH/MASKS_DN/f'{CAR_ID}_{i+1:02d}_mask.png') for i in range(16)]"]}, {"block": 27, "type": "code", "linesLength": 5, "startIndex": 60, "lines": ["fig, axes = plt.subplots(4, 4, figsize=(9, 6))\n", "for i,ax in enumerate(axes.flat):\n", "    ax = show_img(ims[i], ax=ax)\n", "    show_img(im_masks[i][...,0], ax=ax, alpha=0.5)\n", "plt.tight_layout(pad=0.1)"]}, {"block": 28, "type": "code", "linesLength": 7, "startIndex": 65, "lines": ["class MatchedFilesDataset(FilesDataset):\n", "    def __init__(self, fnames, y, transform, path):\n", "        self.y=y\n", "        assert(len(fnames)==len(y))\n", "        super().__init__(fnames, transform, path)\n", "    def get_y(self, i): return open_image(os.path.join(self.path, self.y[i]))\n", "    def get_c(self): return 0"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 72, "lines": ["x_names = np.array([Path(TRAIN_DN)/o for o in masks_csv['img']])\n", "y_names = np.array([Path(MASKS_DN)/f'{o[:-4]}_mask.png' for o in masks_csv['img']])"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["len(x_names)//16//5*16"]}, {"block": 31, "type": "code", "linesLength": 3, "startIndex": 75, "lines": ["val_idxs = list(range(1008))\n", "((val_x,trn_x),(val_y,trn_y)) = split_by_idx(val_idxs, x_names, y_names)\n", "len(val_x),len(trn_x)"]}, {"block": 32, "type": "code", "linesLength": 4, "startIndex": 78, "lines": ["aug_tfms = [RandomRotate(4, tfm_y=TfmType.PIXEL),\n", "            RandomFlip(tfm_y=TfmType.PIXEL),\n", "            RandomLighting(0.05, 0.05)]\n", "# aug_tfms = []"]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 82, "lines": ["tfms = tfms_from_model(resnet34, sz, crop_type=CropType.NO, tfm_y=TfmType.PIXEL, aug_tfms=aug_tfms)\n", "datasets = ImageData.get_ds(MatchedFilesDataset, (trn_x,trn_y), (val_x,val_y), tfms, path=PATH)\n", "md = ImageData(PATH, datasets, bs, num_workers=8, classes=None)"]}, {"block": 34, "type": "code", "linesLength": 3, "startIndex": 85, "lines": ["denorm = md.trn_ds.denorm\n", "x,y = next(iter(md.aug_dl))\n", "x = denorm(x)"]}, {"block": 35, "type": "code", "linesLength": 5, "startIndex": 88, "lines": ["fig, axes = plt.subplots(5, 6, figsize=(12, 10))\n", "for i,ax in enumerate(axes.flat):\n", "    ax=show_img(x[i], ax=ax)\n", "    show_img(y[i][...,0], ax=ax, alpha=0.5)\n", "plt.tight_layout(pad=0.1)"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["## Model"]}, {"block": 37, "type": "code", "linesLength": 6, "startIndex": 94, "lines": ["class Empty(nn.Module): \n", "    def forward(self,x): return x\n", "\n", "models = ConvnetBuilder(resnet34, 0, 0, 0, custom_head=Empty())\n", "learn = ConvLearner(md, models)\n", "learn.summary()"]}, {"block": 38, "type": "code", "linesLength": 7, "startIndex": 100, "lines": ["class StdUpsample(nn.Module):\n", "    def __init__(self, nin, nout):\n", "        super().__init__()\n", "        self.conv = nn.ConvTranspose2d(nin, nout, 2, stride=2)\n", "        self.bn = nn.BatchNorm2d(nout)\n", "        \n", "    def forward(self, x): return self.bn(F.relu(self.conv(x)))"]}, {"block": 39, "type": "code", "linesLength": 8, "startIndex": 107, "lines": ["simple_up = nn.Sequential(\n", "    nn.ReLU(),\n", "    StdUpsample(512,256),\n", "    StdUpsample(256,256),\n", "    StdUpsample(256,256),\n", "    StdUpsample(256,256),\n", "    nn.ConvTranspose2d(256, 1, 2, stride=2),\n", ")"]}, {"block": 40, "type": "code", "linesLength": 4, "startIndex": 115, "lines": ["def mask_loss(pred,targ):\n", "    return F.binary_cross_entropy_with_logits(pred[:,0],targ[...,0])\n", "\n", "def mask_acc(pred,targ): return accuracy_multi(pred[:,0], targ[...,0], 0.5)"]}, {"block": 41, "type": "code", "linesLength": 5, "startIndex": 119, "lines": ["models = ConvnetBuilder(resnet34, 0, 0, 0, custom_head=simple_up)\n", "learn = ConvLearner(md, models)\n", "learn.opt_fn=optim.Adam\n", "learn.crit=mask_loss\n", "learn.metrics=[mask_acc]"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 124, "lines": ["learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 126, "lines": ["lr=4e-2"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 127, "lines": ["learn.fit(lr,1,cycle_len=5,use_clr=(20,5))"]}, {"block": 45, "type": "code", "linesLength": 1, "startIndex": 128, "lines": ["learn.save('tmp')"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 129, "lines": ["learn.load('tmp')"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 130, "lines": ["py,ay = learn.predict_with_targs()"]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["show_img(ay[0]);"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["show_img(py[0][0]>0);"]}, {"block": 50, "type": "code", "linesLength": 1, "startIndex": 133, "lines": ["learn.unfreeze()"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 134, "lines": ["learn.bn_freeze(True)"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 135, "lines": ["lrs = np.array([lr/100,lr/10,lr])/4"]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 136, "lines": ["learn.fit(lrs,1,cycle_len=40,use_clr=(20,10))"]}, {"block": 54, "type": "code", "linesLength": 1, "startIndex": 137, "lines": ["learn.save('0')"]}, {"block": 55, "type": "code", "linesLength": 2, "startIndex": 138, "lines": ["x,y = next(iter(md.val_dl))\n", "py = to_np(learn.model(V(x)))"]}, {"block": 56, "type": "code", "linesLength": 2, "startIndex": 140, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(py[0][0]>0, ax=ax, alpha=0.5);"]}, {"block": 57, "type": "code", "linesLength": 2, "startIndex": 142, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(y[0,...,-1], ax=ax, alpha=0.5);"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 144, "lines": ["## 512x512"]}, {"block": 59, "type": "code", "linesLength": 4, "startIndex": 145, "lines": ["TRAIN_DN = 'train'\n", "MASKS_DN = 'train_masks_png'\n", "sz = 512\n", "bs = 16"]}, {"block": 60, "type": "code", "linesLength": 2, "startIndex": 149, "lines": ["x_names = np.array([Path(TRAIN_DN)/o for o in masks_csv['img']])\n", "y_names = np.array([Path(MASKS_DN)/f'{o[:-4]}_mask.png' for o in masks_csv['img']])"]}, {"block": 61, "type": "code", "linesLength": 2, "startIndex": 151, "lines": ["((val_x,trn_x),(val_y,trn_y)) = split_by_idx(val_idxs, x_names, y_names)\n", "len(val_x),len(trn_x)"]}, {"block": 62, "type": "code", "linesLength": 3, "startIndex": 153, "lines": ["tfms = tfms_from_model(resnet34, sz, crop_type=CropType.NO, tfm_y=TfmType.PIXEL, aug_tfms=aug_tfms)\n", "datasets = ImageData.get_ds(MatchedFilesDataset, (trn_x,trn_y), (val_x,val_y), tfms, path=PATH)\n", "md = ImageData(PATH, datasets, bs, num_workers=4, classes=None)"]}, {"block": 63, "type": "code", "linesLength": 3, "startIndex": 156, "lines": ["denorm = md.trn_ds.denorm\n", "x,y = next(iter(md.aug_dl))\n", "x = denorm(x)"]}, {"block": 64, "type": "code", "linesLength": 5, "startIndex": 159, "lines": ["fig, axes = plt.subplots(4, 4, figsize=(10, 10))\n", "for i,ax in enumerate(axes.flat):\n", "    ax=show_img(x[i], ax=ax)\n", "    show_img(y[i][...,0], ax=ax, alpha=0.5)\n", "plt.tight_layout(pad=0.1)"]}, {"block": 65, "type": "code", "linesLength": 8, "startIndex": 164, "lines": ["simple_up = nn.Sequential(\n", "    nn.ReLU(),\n", "    StdUpsample(512,256),\n", "    StdUpsample(256,256),\n", "    StdUpsample(256,256),\n", "    StdUpsample(256,256),\n", "    nn.ConvTranspose2d(256, 1, 2, stride=2),\n", ")"]}, {"block": 66, "type": "code", "linesLength": 5, "startIndex": 172, "lines": ["models = ConvnetBuilder(resnet34, 0, 0, 0, custom_head=simple_up)\n", "learn = ConvLearner(md, models)\n", "learn.opt_fn=optim.Adam\n", "learn.crit=mask_loss\n", "learn.metrics=[mask_acc]"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 177, "lines": ["learn.load('0')"]}, {"block": 68, "type": "code", "linesLength": 2, "startIndex": 178, "lines": ["learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 69, "type": "code", "linesLength": 1, "startIndex": 180, "lines": ["lr=4e-2"]}, {"block": 70, "type": "code", "linesLength": 1, "startIndex": 181, "lines": ["learn.fit(lr,1,cycle_len=5,use_clr=(20,5))"]}, {"block": 71, "type": "code", "linesLength": 1, "startIndex": 182, "lines": ["learn.save('tmp')"]}, {"block": 72, "type": "code", "linesLength": 1, "startIndex": 183, "lines": ["learn.load('tmp')"]}, {"block": 73, "type": "code", "linesLength": 2, "startIndex": 184, "lines": ["learn.unfreeze()\n", "learn.bn_freeze(True)"]}, {"block": 74, "type": "code", "linesLength": 1, "startIndex": 186, "lines": ["lrs = np.array([lr/100,lr/10,lr])/4"]}, {"block": 75, "type": "code", "linesLength": 1, "startIndex": 187, "lines": ["learn.fit(lrs,1,cycle_len=8,use_clr=(20,8))"]}, {"block": 76, "type": "code", "linesLength": 1, "startIndex": 188, "lines": ["learn.save('512')"]}, {"block": 77, "type": "code", "linesLength": 2, "startIndex": 189, "lines": ["x,y = next(iter(md.val_dl))\n", "py = to_np(learn.model(V(x)))"]}, {"block": 78, "type": "code", "linesLength": 2, "startIndex": 191, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(py[0][0]>0, ax=ax, alpha=0.5);"]}, {"block": 79, "type": "code", "linesLength": 2, "startIndex": 193, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(y[0,...,-1], ax=ax, alpha=0.5);"]}, {"block": 80, "type": "markdown", "linesLength": 1, "startIndex": 195, "lines": ["## 1024x1024"]}, {"block": 81, "type": "code", "linesLength": 2, "startIndex": 196, "lines": ["sz = 1024\n", "bs = 4"]}, {"block": 82, "type": "code", "linesLength": 3, "startIndex": 198, "lines": ["tfms = tfms_from_model(resnet34, sz, crop_type=CropType.NO, tfm_y=TfmType.PIXEL, aug_tfms=aug_tfms)\n", "datasets = ImageData.get_ds(MatchedFilesDataset, (trn_x,trn_y), (val_x,val_y), tfms, path=PATH)\n", "md = ImageData(PATH, datasets, bs, num_workers=4, classes=None)"]}, {"block": 83, "type": "code", "linesLength": 3, "startIndex": 201, "lines": ["denorm = md.trn_ds.denorm\n", "x,y = next(iter(md.aug_dl))\n", "x = denorm(x)"]}, {"block": 84, "type": "code", "linesLength": 5, "startIndex": 204, "lines": ["fig, axes = plt.subplots(2, 2, figsize=(10, 10))\n", "for i,ax in enumerate(axes.flat):\n", "    ax=show_img(x[i], ax=ax)\n", "    show_img(y[i][...,0], ax=ax, alpha=0.5)\n", "plt.tight_layout(pad=0.1)"]}, {"block": 85, "type": "code", "linesLength": 8, "startIndex": 209, "lines": ["simple_up = nn.Sequential(\n", "    nn.ReLU(),\n", "    StdUpsample(512,256),\n", "    StdUpsample(256,256),\n", "    StdUpsample(256,256),\n", "    StdUpsample(256,256),\n", "    nn.ConvTranspose2d(256, 1, 2, stride=2),\n", ")"]}, {"block": 86, "type": "code", "linesLength": 5, "startIndex": 217, "lines": ["models = ConvnetBuilder(resnet34, 0, 0, 0, custom_head=simple_up)\n", "learn = ConvLearner(md, models)\n", "learn.opt_fn=optim.Adam\n", "learn.crit=mask_loss\n", "learn.metrics=[mask_acc]"]}, {"block": 87, "type": "code", "linesLength": 1, "startIndex": 222, "lines": ["learn.load('512')"]}, {"block": 88, "type": "code", "linesLength": 2, "startIndex": 223, "lines": ["learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 89, "type": "code", "linesLength": 1, "startIndex": 225, "lines": ["lr=4e-2"]}, {"block": 90, "type": "code", "linesLength": 1, "startIndex": 226, "lines": ["learn.fit(lr,1,cycle_len=2,use_clr=(20,4))"]}, {"block": 91, "type": "code", "linesLength": 1, "startIndex": 227, "lines": ["learn.save('tmp')"]}, {"block": 92, "type": "code", "linesLength": 1, "startIndex": 228, "lines": ["learn.load('tmp')"]}, {"block": 93, "type": "code", "linesLength": 2, "startIndex": 229, "lines": ["learn.unfreeze()\n", "learn.bn_freeze(True)"]}, {"block": 94, "type": "code", "linesLength": 1, "startIndex": 231, "lines": ["lrs = np.array([lr/100,lr/10,lr])/8"]}, {"block": 95, "type": "code", "linesLength": 1, "startIndex": 232, "lines": ["learn.fit(lrs,1,cycle_len=4,use_clr=(20,8))"]}, {"block": 96, "type": "code", "linesLength": 1, "startIndex": 233, "lines": ["learn.fit(lrs,1,cycle_len=40,use_clr=(20,10))"]}, {"block": 97, "type": "code", "linesLength": 1, "startIndex": 234, "lines": ["learn.save('1024')"]}, {"block": 98, "type": "code", "linesLength": 2, "startIndex": 235, "lines": ["x,y = next(iter(md.val_dl))\n", "py = to_np(learn.model(V(x)))"]}, {"block": 99, "type": "code", "linesLength": 2, "startIndex": 237, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(py[0][0]>0, ax=ax, alpha=0.5);"]}, {"block": 100, "type": "code", "linesLength": 2, "startIndex": 239, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(y[0,...,-1], ax=ax, alpha=0.5);"]}, {"block": 101, "type": "code", "linesLength": 1, "startIndex": 241, "lines": ["show_img(py[0][0]>0);"]}, {"block": 102, "type": "code", "linesLength": 1, "startIndex": 242, "lines": ["show_img(y[0,...,-1]);"]}, {"block": 103, "type": "markdown", "linesLength": 1, "startIndex": 243, "lines": ["## Fin"]}, {"block": 104, "type": "code", "linesLength": 1, "startIndex": 244, "lines": ["x,y = next(iter(md.val_dl))"]}, {"block": 105, "type": "code", "linesLength": 1, "startIndex": 245, "lines": ["py = to_np(learn.model(V(x)))"]}, {"block": 106, "type": "code", "linesLength": 2, "startIndex": 246, "lines": ["ax = show_img(denorm(x)[0])\n", "show_img(py[0][0]>0, ax=ax, alpha=0.5);"]}, {"block": 107, "type": "code", "linesLength": 1, "startIndex": 248, "lines": ["ax = show_img(denorm(x)[0])\n"]}, {"block": 108, "type": "code", "linesLength": 0, "startIndex": 249, "lines": []}]