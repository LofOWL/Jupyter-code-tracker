[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Get your data ready for training"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["This module defines the basic [`DataBunch`](/basic_data.html#DataBunch) object that is used inside [`Learner`](/basic_train.html#Learner) to train a model. This is the generic class, that can take any kind of fastai [`Dataset`](https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset) or [`DataLoader`](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader). You'll find helpful functions in the data module of every application to directly create this [`DataBunch`](/basic_data.html#DataBunch) for you."]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 2, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai import * "]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 4, "lines": ["show_doc(DataBunch)"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 5, "lines": ["It also ensure all the dataloaders are on `device` and apply to them `tfms` as batch are drawn (like normalization). `path` is used internally to store temporary files, `collate_fn` is passed to the pytorch `Dataloader` (replacing the one there) to explain how to collate the samples picked for a batch. By default, it applies data to the object sent (see in [`vision.image`](/vision.image.html#vision.image) or the [data block API](/data_block.html) why this can be important). \n", "\n", "`train_dl`, `valid_dl` and optionally `test_dl` will be wrapped in [`DeviceDataLoader`](/basic_data.html#DeviceDataLoader)."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Factory method"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["show_doc(DataBunch.create)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["`num_workers` is the number of CPUs to use, `tfms`, `device` and `collate_fn` are passed to the init method."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["### Visualization"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["show_doc(DataBunch.show_batch)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### Grabbing some data"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["show_doc(DataBunch.dl)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["show_doc(DataBunch.one_batch)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["show_doc(DataBunch.one_item)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["### Empty `DataBunch` for inference"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["show_doc(DataBunch.export)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["show_doc(DataBunch.load_empty, full_name='load_empty')"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["This method should be used to create a `DataBunch` at inference, see the corresponding [tutorial](/tutorial.inference.html)."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["### Dataloader transforms"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["show_doc(DataBunch.add_tfm)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Adds a transform to all dataloaders."]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["show_doc(DeviceDataLoader)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Put the batches of `dl` on `device` after applying an optional list of `tfms`. `collate_fn` will replace the one of `dl`. All dataloaders of a [`DataBunch`](/basic_data.html#DataBunch) are of this type. "]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### Factory method"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["show_doc(DeviceDataLoader.create)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["The given `collate_fn` will be used to put the samples together in one batch (by default it grabs their data attribute). `shuffle` means the dataloader will take the samples randomly if that flag is set to `True`, or in the right order otherwise. `tfms` are passed to the init method. All `kwargs` are passed to the pytorch [`DataLoader`](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader) class initialization."]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["### Methods"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["show_doc(DeviceDataLoader.add_tfm)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["show_doc(DeviceDataLoader.remove_tfm)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["show_doc(DeviceDataLoader.new)"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["show_doc(DatasetType, doc_string=False)"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Internal enumerator to name the training, validation and test dataset/dataloader."]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["## Undocumented Methods - Methods moved below this line will intentionally be hidden"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["show_doc(DeviceDataLoader.proc_batch)"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["show_doc(DeviceDataLoader.collate_fn)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["## New Methods - Please document or move to the undocumented section"]}]