[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Training on Cifar 10 Using MXNet and H2O\n"]}, {"block": 1, "type": "markdown", "linesLength": 7, "startIndex": 1, "lines": ["https://www.cs.toronto.edu/~kriz/cifar.html\n", "\n", "The CIFAR-10 dataset\n", "\n", "The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. \n", "\n", "The dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class. "]}, {"block": 2, "type": "code", "linesLength": 10, "startIndex": 8, "lines": ["%matplotlib inline\n", "\n", "import matplotlib\n", "import scipy.io\n", "import matplotlib.pyplot as plt\n", "\n", "import cPickle\n", "import numpy as np\n", "from scipy.misc import imsave\n", "from IPython.display import Image, display, HTML"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["## Step 1: Preprocess the data"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["!mkdir -p ~/.h2o/datasets/"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["!wget -c https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz -O ~/.h2o/datasets/cifar-10-python.tar.gz"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["!tar xvzf ~/.h2o/datasets/cifar-10-python.tar.gz -C ~/.h2o/datasets/"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 22, "lines": ["import os.path\n", "with open(os.path.expanduser(\"~/.h2o/datasets/cifar-10-batches-py/batches.meta\")) as fd:\n", "    meta = cPickle.load(fd)\n", "print meta"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 26, "lines": ["labels = meta['label_names']\n", "labels"]}, {"block": 9, "type": "code", "linesLength": 14, "startIndex": 28, "lines": ["def load_cifar10_image_list(filepath):\n", "    images = []\n", "    labels = []\n", "    with open(filepath, 'rb') as fd:\n", "        d = cPickle.load(fd)\n", "        for image, label, filename in zip(d['data'], d['labels'], d['filenames']):\n", "            x = np.array(image)\n", "            x = np.dstack((x[:1024], x[1024:2048], x[2048:]))\n", "            x = x.reshape(32,32,3)\n", "            filename=os.path.expanduser(\"~/.h2o/datasets/cifar-10-batches-py/\"+filename)\n", "            imsave(filename, x)\n", "            images.append(filename)\n", "            labels.append(label)\n", "    return images, labels"]}, {"block": 10, "type": "code", "linesLength": 8, "startIndex": 42, "lines": ["x_train = []\n", "y_train = []\n", "\n", "for batch in range(1,6):\n", "    batch_name = os.path.expanduser('~/.h2o/datasets/cifar-10-batches-py/data_batch_%d' % batch)\n", "    x,y = load_cifar10_image_list(batch_name)\n", "    x_train.extend(x)\n", "    y_train.extend(y)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["!ls ~/.h2o/datasets/cifar-10-batches-py/ | sed -n '1~5000p' # show every 5000th file"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 51, "lines": ["for x in x_train[:10]:\n", "    display(Image(filename=x))"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["[labels[x] for x in y_train[:10]]"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 54, "lines": ["len(x_train)"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 55, "lines": ["batch_test = os.path.expanduser('~/.h2o/datasets/cifar-10-batches-py/test_batch')\n", "x_test, y_test = load_cifar10_image_list(batch_test)"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["import h2o\n", "h2o.init()"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["!nvidia-smi"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["train_df = {\"x0\": x_train, \"x1\": y_train }"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["test_df = {\"x0\" : x_test, \"x1\": y_test }"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["train_hf = h2o.H2OFrame(train_df)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 63, "lines": ["test_hf = h2o.H2OFrame(test_df)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["Let's turn the class label into a factor"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 65, "lines": ["train_hf['x1'] = train_hf['x1'].asfactor()\n", "test_hf['x1'] = test_hf['x1'].asfactor()"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 67, "lines": ["train_hf.head(10)"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 68, "lines": ["from h2o.estimators.deepwater import H2ODeepWaterEstimator"]}, {"block": 26, "type": "code", "linesLength": 14, "startIndex": 69, "lines": ["deepwater_model = H2ODeepWaterEstimator(\n", "    epochs=10,                            ## \n", "    nfolds=3,                             ## 3-fold cross-validation\n", "    learning_rate=2e-3,\n", "    mini_batch_size=64,\n", "#    problem_type='image',                ## autodetected by default\n", "    network='vgg',\n", "#    network_definition_file=\"mycnn.json\" ## provide your own mxnet .json model\n", "    image_shape=[32,32], \n", "    channels=3,\n", "#    score_interval=0,                    ## lower limit on how often to score\n", "#    train_samples_per_iteration=1000,    ## controls the frequency of scoring\n", "    gpu=True\n", ")"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["deepwater_model.train(x=['x0'], y='x1', training_frame=train_hf)"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 84, "lines": ["train_error = deepwater_model.model_performance(train=True).mean_per_class_error()\n", "print \"training error:\", train_error"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 86, "lines": ["xval_error = deepwater_model.model_performance(xval=True).mean_per_class_error()\n", "print \"cross-validated error:\", xval_error"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["deepwater_model"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["## Predict "]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["random_test_image_hf = test_hf[int(np.random.random()*len(test_df)),:]['x0']"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 91, "lines": ["random_test_image_hf"]}, {"block": 34, "type": "code", "linesLength": 2, "startIndex": 92, "lines": ["filename = random_test_image_hf.as_data_frame(use_pandas=False)[1][0]\n", "filename"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["Image(filename=filename)"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 95, "lines": ["pred = deepwater_model.predict(random_test_image_hf)"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["predlabel = int(pred['predict'].as_data_frame(use_pandas=False)[1][0])"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 97, "lines": ["labels[predlabel]"]}]