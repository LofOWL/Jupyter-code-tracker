[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Training on Cifar 10 Using MXNet and H2O\n"]}, {"block": 1, "type": "code", "linesLength": 10, "startIndex": 1, "lines": ["%matplotlib inline\n", "\n", "import matplotlib\n", "import scipy.io\n", "import matplotlib.pyplot as plt\n", "\n", "import cPickle\n", "import numpy as np\n", "from scipy.misc import imsave\n", "from IPython.display import Image, display, HTML"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["## Step 1: Preprocess the data"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["!mkdir -p /tmp/cifar10"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["with open(\"/datasets/cifar-10-batches-py/batches.meta\") as fd:\n", "    meta = cPickle.load(fd)\n", "print meta"]}, {"block": 5, "type": "code", "linesLength": 14, "startIndex": 16, "lines": ["def load_cifar10_image_list(filepath):\n", "    images = []\n", "    labels = []\n", "    with open(filepath, 'rb') as fd:\n", "        d = cPickle.load(fd)\n", "        for image, label, filename in zip(d['data'], d['labels'], d['filenames']):\n", "            x = np.array(image)\n", "            x = np.dstack((x[:1024], x[1024:2048], x[2048:]))\n", "            x = x.reshape(32,32,3)\n", "            filename=\"/tmp/cifar10/\"+filename\n", "            imsave(filename, x)\n", "            images.append(filename)\n", "            labels.append(label)\n", "    return images, labels"]}, {"block": 6, "type": "code", "linesLength": 8, "startIndex": 30, "lines": ["x_train = []\n", "y_train = []\n", "\n", "for batch in range(1,6):\n", "    batch_name = '/datasets/cifar-10-batches-py/data_batch_%d' % batch\n", "    x,y = load_cifar10_image_list(batch_name)\n", "    x_train.extend(x)\n", "    y_train.extend(y)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["!ls /datasets/cifar-10-batches-py/"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["for x in x_train[:5]:\n", "    display(Image(filename=x))"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["len(x_train)"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["batch_test = '/datasets/cifar-10-batches-py/test_batch'\n", "x_test, y_test = load_cifar10_image_list(batch_test)"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 44, "lines": ["import h2o\n", "h2o.init()"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["train_df = {\"x0\": x_train, \"x1\": y_train }"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["test_df = {\"x0\" : x_test, \"x1\": y_test }"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["train_hf = h2o.H2OFrame.from_python(train_df)"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["test_hf = h2o.H2OFrame.from_python(test_df)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Let's 1 hot encode the class"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 51, "lines": ["train_hf['x1'] = train_hf['x1'].asfactor()\n", "test_hf['x1'] = test_hf['x1'].asfactor()"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["from h2o.estimators.deepwater import H2ODeepWaterEstimator"]}, {"block": 19, "type": "code", "linesLength": 12, "startIndex": 54, "lines": ["vgg_model = H2ODeepWaterEstimator(\n", "    epochs=10, \n", "    nfolds=2,\n", "    learning_rate=1e-3, \n", "    mini_batch_size=64,\n", "    network='VGG', \n", "    image_shape=[32,32], \n", "    channels=3,\n", "    score_interval=0, \n", "    train_samples_per_iteration=1000,\n", "    gpu=True\n", ")"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 66, "lines": ["train_hf.head(10)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 67, "lines": ["vgg_model.train(x=['x0'], y='x1', training_frame=train_hf, problem_type='image_classification')"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 68, "lines": ["error = vgg_model.model_performance(train=True).mean_per_class_error()\n", "print \"model error:\", error"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["## Predict "]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["random_test_image = test_df['x0'][int(np.random.random()*len(test_df))]"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 72, "lines": ["random_test_image"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 73, "lines": ["Image(filename=random_test_image)"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["valid_nn_models = ['lenet', 'alexnet', 'vgg', 'resnet', 'inception', 'googlenet' ]"]}, {"block": 28, "type": "code", "linesLength": 0, "startIndex": 75, "lines": []}]