[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["##ThinkDSP\n", "\n", "This notebook contains code solutions to exercises in Chapter 5: Autocorrelation\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 10, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import thinkstats2\n", "\n", "import numpy as np\n", "import pandas as pd\n", "\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 4, "startIndex": 17, "lines": ["**Exercise:** If you did the exercises in the previous chapter, you downloaded\n", "the historical price of BitCoins and estimated the power spectrum\n", "of the price changes.  Using the same data, compute the autocorrelation\n", "of BitCoin prices.  Does the autocorrelation function drop off quickly?  Is there evidence of periodic behavior?"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=1625, parse_dates=[0])\n", "ys = df.Close.values"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["wave = thinkdsp.Wave(ys, framerate=1)\n", "wave.plot()"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Here's the autocorrelation function using the statistical definition, which unbiases, normalizes, and standardizes; that is, it shifts the mean to zero, divides through by standard deviation, and divides the sum by N."]}, {"block": 6, "type": "code", "linesLength": 8, "startIndex": 26, "lines": ["from autocorr import autocorr\n", "\n", "lags, corrs = autocorr(wave)\n", "\n", "thinkplot.preplot(5)\n", "thinkplot.plot(lags, corrs)\n", "thinkplot.config(xlabel='lag',\n", "                 ylabel='correlation')"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["The ACF drops off slowly with increasing lag, suggesting some kind of pink noise.  And it looks like there are moderate correlations with lags near 200, 425 and 700 days."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["We can compare my implementation of `autocorr` with `np.correlate`, which uses the definition of correlation used in signal processing.  It doesn't unbias, normalize, or standardize the wave."]}, {"block": 9, "type": "code", "linesLength": 6, "startIndex": 36, "lines": ["corrs2 = np.correlate(wave.ys, wave.ys, mode='same')\n", "\n", "thinkplot.preplot(1)\n", "thinkplot.plot(corrs2)\n", "thinkplot.config(xlabel='lag',\n", "                 ylabel='dot product')"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["The second half of the result corresponds to positive lags:"]}, {"block": 11, "type": "code", "linesLength": 5, "startIndex": 43, "lines": ["N = len(corrs2)\n", "half = corrs2[N//2:]\n", "thinkplot.plot(half)\n", "thinkplot.config(xlabel='lag',\n", "                 ylabel='dot product')"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["We can standardize the results after the fact by dividing through by `lengths`:"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 49, "lines": ["lengths = range(N, N//2, -1)\n", "half /= lengths\n", "half /= half[0]\n", "thinkplot.plot(half)\n", "thinkplot.config(xlabel='lag',\n", "                 ylabel='dot product')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["But even after standardizing, the results look very different.  In the results from `correlate`, the peak at lag 200 is less apparent, and the other two peaks are obliterated."]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 56, "lines": ["thinkplot.preplot(2)\n", "thinkplot.plot(corrs, label='autocorr')\n", "thinkplot.plot(half, label='correlate')\n", "thinkplot.config(xlabel='lag', ylabel='correlation')"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 60, "lines": ["I think the reason the results are so different is that this dataset looks very different in different parts of the range; in particular, the variance changes a lot over time.\n", "\n", "For this dataset, the statistical definition of ACF, is probably more appropriate.\n"]}, {"block": 17, "type": "markdown", "linesLength": 7, "startIndex": 63, "lines": ["**Exercise:** The example code in `chap05.ipynb` shows how to use autocorrelation\n", "to estimate the fundamental frequency of a periodic signal.\n", "Encapsulate this code in a function called `estimate_fundamental`,\n", "and use it to track the pitch of a recorded sound.\n", "\n", "To see how well it works, try superimposing your pitch estimates on a\n", "spectrogram of the recording."]}, {"block": 18, "type": "code", "linesLength": 3, "startIndex": 70, "lines": ["wave = thinkdsp.read_wave('28042__bcjordan__voicedownbew.wav')\n", "wave.normalize()\n", "wave.make_audio()"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["I'll use the same example from `chap05.ipynb`.  Here's the spectrogram:"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["wave.make_spectrogram(4096).plot(high=70)"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["And here's a function that encapsulates the code from Chapter 5.  In general, finding the first, highest peak in the autocorrelation function is tricky.  I kept is simple by specifying the range of lags to search."]}, {"block": 22, "type": "code", "linesLength": 6, "startIndex": 76, "lines": ["def estimate_fundamental(segment, low=70, high=150):\n", "    lags, corrs = autocorr(segment)\n", "    lag = np.array(corrs[low:high]).argmax() + low\n", "    period = lag / segment.framerate\n", "    frequency = 1 / period\n", "    return frequency"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["Here's an example of how it works."]}, {"block": 24, "type": "code", "linesLength": 4, "startIndex": 83, "lines": ["duration = 0.01\n", "segment = wave.segment(start=0.2, duration=duration)\n", "freq = estimate_fundamental(segment)\n", "freq"]}, {"block": 25, "type": "markdown", "linesLength": 3, "startIndex": 87, "lines": ["And here's a loop that tracks pitch over the sample.\n", "\n", "The `ts` are the mid-points of each segment."]}, {"block": 26, "type": "code", "linesLength": 11, "startIndex": 90, "lines": ["step = 0.05\n", "starts = np.arange(0.0, 1.4, step)\n", "\n", "ts = []\n", "freqs = []\n", "\n", "for start in starts:\n", "    ts.append(start + step/2)\n", "    segment = wave.segment(start=start, duration=duration)\n", "    freq = estimate_fundamental(segment)\n", "    freqs.append(freq)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 101, "lines": ["Here's the pitch-tracking curve superimposed on the spectrogram:"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 102, "lines": ["wave.make_spectrogram(4096).plot(high=70)\n", "thinkplot.plot(ts, freqs, color='green')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 104, "lines": ["Looks pretty good!"]}, {"block": 30, "type": "code", "linesLength": 0, "startIndex": 105, "lines": []}]