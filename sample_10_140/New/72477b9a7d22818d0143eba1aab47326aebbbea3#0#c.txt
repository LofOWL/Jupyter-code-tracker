[{"block": 0, "type": "markdown", "linesLength": 13, "startIndex": 0, "lines": ["# H2O GBM Tuning Tutorial for Python\n", "\n", "### Arno Candel, PhD, Chief Architect, H2O.ai\n", "### Ported to Python by Navdeep Gill, M.S., Hacker/Data Scientist, H2O.ai\n", "\n", "In this tutorial, we show how to build a well-tuned H2O GBM model for a supervised classification task. We specifically don't focus on feature engineering and use a small dataset to allow you to reproduce these results in a few minutes on a laptop. This script can be directly transferred to datasets that are hundreds of GBs large and H2O clusters with dozens of compute nodes.\n", "\n", "You can download the source [from H2O's github repository](https://github.com/h2oai/h2o-3/blob/master/h2o-docs/src/product/tutorials/gbm/gbmTuning.ipynb).\n", "\n", "Original [R Markdown version here](https://github.com/h2oai/h2o-3/blob/master/h2o-docs/src/product/tutorials/gbm/gbmTuning.Rmd).\n", "\n", "## Installation of the H2O Python Package\n", "Either download H2O from [H2O.ai's website](http://h2o.ai/download) or install the latest version of H2O into Python with the following set of commands:"]}, {"block": 1, "type": "markdown", "linesLength": 18, "startIndex": 13, "lines": ["Install dependencies from command line (prepending with `sudo` if needed):\n", "\n", "```\n", "[sudo] pip install -U requests\n", "[sudo] pip install -U tabulate\n", "[sudo] pip install -U future\n", "[sudo] pip install -U six\n", "```\n", "\n", "The following command removes the H2O module for Python.\n", "```\n", "[sudo] pip uninstall h2o\n", "```\n", "\n", "Next, use pip to install this version of the H2O Python module.\n", "```\n", "[sudo] pip install http://h2o-release.s3.amazonaws.com/h2o/rel-turchin/6/Python/h2o-3.8.2.6-py2.py3-none-any.whl\n", "```"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["## Launch an H2O cluster on localhost"]}, {"block": 3, "type": "code", "linesLength": 6, "startIndex": 32, "lines": ["import h2o\n", "import numpy as np\n", "import math\n", "h2o.init(nthreads=-1, strict_version_check=True)\n", "## optional: connect to a running H2O cluster\n", "#h2o.init(ip=\"mycluster\", port=55555)"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 38, "lines": ["## Import the data into H2O \n", "Everything is scalable and distributed from now on. All processing is done on the fully multi-threaded and distributed H2O Java-based backend and can be scaled to large datasets on large compute clusters.\n", "Here, we use a small public dataset ([Titanic](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/Titanic.html)), but you can use datasets that are hundreds of GBs large."]}, {"block": 5, "type": "code", "linesLength": 17, "startIndex": 41, "lines": ["## 'path' can point to a local file, hdfs, s3, nfs, Hive, directories, etc.\n", "df = h2o.import_file(path = \"http://s3.amazonaws.com/h2o-public-test-data/smalldata/gbm_test/titanic.csv\")\n", "print df.dim\n", "print df.head\n", "print df.tail\n", "print df.describe\n", "\n", "## pick a response for the supervised problem\n", "response = \"survived\"\n", "\n", "## the response variable is an integer, we will turn it into a categorical/factor for binary classification\n", "df[response] = df[response].asfactor()           \n", "\n", "## use all other columns (except for the name & the response column (\"survived\")) as predictors\n", "predictors = df.columns\n", "del predictors[1:3]\n", "print predictors"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["From now on, everything is generic and directly applies to most datasets. We assume that all feature engineering is done at this stage and focus on model tuning. For multi-class problems, you can use `h2o.logloss()` or `h2o.confusion_matrix()` instead of `h2o.auc()` and for regression problems, you can use `h2o.mean_residual_deviance()` or `h2o.mse()`."]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 59, "lines": ["## Split the data for Machine Learning\n", "We split the data into three pieces: 60% for training, 20% for validation, 20% for final testing. \n", "Here, we use random splitting, but this assumes i.i.d. data. If this is not the case (e.g., when events span across multiple rows or data has a time structure), you'll have to sample your data non-randomly."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["train, valid, test = df.split_frame(ratios=[0.6,0.2], seed=1234, destination_frames=['train.hex','valid.hex','test.hex'])"]}, {"block": 9, "type": "markdown", "linesLength": 5, "startIndex": 63, "lines": ["## Establish baseline performance\n", "As the first step, we'll build some default models to see what accuracy we can expect. Let's use the [AUC metric](http://mlwiki.org/index.php/ROC_Analysis) for this demo, but you can use `h2o.logloss()` and `stopping_metric=\"logloss\"` as well. It ranges from 0.5 for random models to 1 for perfect models.\n", "\n", "\n", "The first model is a default GBM, trained on the 60% training split"]}, {"block": 10, "type": "code", "linesLength": 6, "startIndex": 68, "lines": ["#We only provide the required parameters, everything else is default\n", "gbm = h2o.H2OGradientBoostingEstimator(distribution='bernoulli')\n", "gbm.train(x=predictors, y=response, training_frame=train)\n", "\n", "## Show a detailed model summary\n", "print gbm"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["The AUC is over 94%, so this model is highly predictive!"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 75, "lines": ["## Get the AUC on the validation set\n", "perf = gbm.model_performance(valid)\n", "print perf.auc()"]}, {"block": 13, "type": "markdown", "linesLength": 2, "startIndex": 78, "lines": ["The second model is another default GBM, but trained on 80% of the data (here, we combine the training and validation splits to get more training data), and cross-validated using 4 folds.\n", "Note that cross-validation takes longer and is not usually done for really large datasets."]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 80, "lines": ["## rbind() makes a copy here, so it's better to use split_frame with `ratios = c(0.8)` instead above\n", "cv_gbm = h2o.H2OGradientBoostingEstimator(distribution='bernoulli',nfolds = 4, seed = 0xDECAF)\n", "cv_gbm.train(x = predictors, y = response, training_frame = train.rbind(valid))"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["We see that the cross-validated performance is similar to the validation set performance:"]}, {"block": 16, "type": "code", "linesLength": 10, "startIndex": 84, "lines": ["## Show a detailed summary of the cross validation metrics\n", "## This gives you an idea of the variance between the folds\n", "cv_summary = cv_gbm.cross_validation_metrics_summary().as_data_frame()\n", "#print(cv_summary) ## Full summary of all metrics\n", "print(cv_summary.iloc[4]) ## get the row with just the AUCs\n", "\n", "## Get the cross-validated AUC by scoring the combined holdout predictions.\n", "## (Instead of taking the average of the metrics across the folds)\n", "#perf_cv = cv_gbm.model_performance(xval=True) ## This only works with H2O version > 3.8.2.6\n", "#print perf_cv.auc()"]}, {"block": 17, "type": "markdown", "linesLength": 4, "startIndex": 94, "lines": ["Next, we train a GBM with \"I feel lucky\" parameters.\n", "We'll use early stopping to automatically tune the number of trees using the validation AUC. \n", "We'll use a lower learning rate (lower is always better, just takes more trees to converge).\n", "We'll also use stochastic sampling of rows and columns to (hopefully) improve generalization."]}, {"block": 18, "type": "code", "linesLength": 24, "startIndex": 98, "lines": ["gbm_lucky = h2o.H2OGradientBoostingEstimator(\n", "  ## more trees is better if the learning rate is small enough \n", "  ## here, use \"more than enough\" trees - we have early stopping\n", "  ntrees = 10000,                                                            \n", "\n", "  ## smaller learning rate is better (this is a good value for most datasets, but see below for annealing)\n", "  learn_rate = 0.01,                                                         \n", "\n", "  ## early stopping once the validation AUC doesn't improve by at least 0.01% for 5 consecutive scoring events\n", "  stopping_rounds = 5, stopping_tolerance = 1e-4, stopping_metric = \"AUC\", \n", "\n", "  ## sample 80% of rows per tree\n", "  sample_rate = 0.8,                                                       \n", "\n", "  ## sample 80% of columns per split\n", "  col_sample_rate = 0.8,                                                   \n", "\n", "  ## fix a random number generator seed for reproducibility\n", "  seed = 1234,                                                             \n", "\n", "  ## score every 10 trees to make early stopping reproducible (it depends on the scoring interval)\n", "  score_tree_interval = 10)\n", "\n", "gbm_lucky.train(x=predictors, y=response, training_frame=train, validation_frame=valid)"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 122, "lines": ["This model doesn't seem to be much better than the previous models:"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 123, "lines": ["perf_lucky = gbm_lucky.model_performance(valid)\n", "print perf_lucky.auc()"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 125, "lines": ["For this small dataset, dropping 20% of observations per tree seems too aggressive in terms of adding regularization. For larger datasets, this is usually not a bad idea. But we'll let this parameter tune freshly below, so no worries."]}, {"block": 22, "type": "markdown", "linesLength": 16, "startIndex": 126, "lines": ["## Hyper-Parameter Search\n", "\n", "Next, we'll do real hyper-parameter optimization to see if we can beat the best AUC so far (around 94%).\n", "\n", "The key here is to start tuning some key parameters first (i.e., those that we expect to have the biggest impact on the results). From experience with gradient boosted trees across many datasets, we can state the following \"rules\":\n", "\n", "1. Build as many trees (`ntrees`) as it takes until the validation set error starts increasing.\n", "2. A lower learning rate (`learn_rate`) is generally better, but will require more trees. Using `learn_rate=0.02 `and `learn_rate_annealing=0.995` (reduction of learning rate with each additional tree) can help speed up convergence without sacrificing accuracy too much, and is great to hyper-parameter searches. For faster scans, use values of 0.05 and 0.99 instead.\n", "3. The optimum maximum allowed depth for the trees (`max_depth`) is data dependent, deeper trees take longer to train, especially at depths greater than 10.\n", "4. Row and column sampling (`sample_rate` and `col_sample_rate`) can improve generalization and lead to lower validation and test set errors. Good general values for large datasets are around 0.7 to 0.8 (sampling 70-80 percent of the data) for both parameters. Column sampling per tree (`col_sample_rate_per_tree`) can also be tuned. Note that it is multiplicative with `col_sample_rate`, so setting both parameters to 0.8 results in 64% of columns being considered at any given node to split.\n", "5. For highly imbalanced classification datasets (e.g., fewer buyers than non-buyers), stratified row sampling based on response class membership can help improve predictive accuracy.  It is configured with `sample_rate_per_class` (array of ratios, one per response class in lexicographic order).\n", "6. Most other options only have a small impact on the model performance, but are worth tuning with a Random hyper-parameter search nonetheless, if highest performance is critical.\n", "\n", "First we want to know what value of `max_depth` to use because it has a big impact on the model training time and optimal values depend strongly on the dataset.\n", "We'll do a quick Cartesian grid search to get a rough idea of good candidate `max_depth` values. Each model in the grid search will use early stopping to tune the number of trees using the validation set AUC, as before.\n", "We'll use learning rate annealing to speed up convergence without sacrificing too much accuracy."]}, {"block": 23, "type": "code", "linesLength": 42, "startIndex": 142, "lines": ["## Depth 10 is usually plenty of depth for most datasets, but you never know\n", "hyper_params = {'max_depth' : range(1,30,2)}\n", "#hyper_params = {max_depth = c(4,6,8,12,16,20)} ##faster for larger datasets\n", "\n", "#Build initial GBM Model\n", "gbm_grid = h2o.H2OGradientBoostingEstimator(distribution='bernoulli',\n", "                                    ## more trees is better if the learning rate is small enough \n", "                                    ## here, use \"more than enough\" trees - we have early stopping\n", "                                    ntrees=10000,\n", "                                    ## smaller learning rate is better\n", "                                    ## since we have learning_rate_annealing, we can afford to start with a \n", "                                    #bigger learning rate\n", "                                    learn_rate=0.05,\n", "                                    ## sample 80% of rows per tree\n", "                                    sample_rate = 0.8,\n", "                                    ## sample 80% of columns per split\n", "                                    col_sample_rate = 0.8,\n", "                                    ## fix a random number generator seed for reproducibility\n", "                                    seed = 1234,\n", "                                    ## score every 10 trees to make early stopping reproducible \n", "                                    #(it depends on the scoring interval)\n", "                                    score_tree_interval = 10, \n", "                                    ## early stopping once the validation AUC doesn't improve by at least 0.01% for \n", "                                    #5 consecutive scoring events\n", "                                    stopping_rounds = 5,\n", "                                    stopping_metric = \"AUC\",\n", "                                    stopping_tolerance = 1e-4)\n", "\n", "#Build grid search with previously made GBM and hyper parameters\n", "grid = h2o.H2OGridSearch(gbm_grid,hyper_params,\n", "                         grid_id = 'depth_grid',\n", "                         search_criteria = {'strategy': \"Cartesian\"})\n", "\n", "\n", "#Train grid search\n", "grid.train(x=predictors, \n", "           y=response,\n", "           ## learning rate annealing: learning_rate shrinks by 1% after every tree \n", "           ## (use 1.00 to disable, but then lower the learning_rate)\n", "           learn_rate_annealing = 0.99, ## this parameter currently cannot be passed above to the constructor\n", "           training_frame = train,\n", "           validation_frame = valid)"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 184, "lines": ["## by default, display the grid search results sorted by increasing logloss (since this is a classification task)\n", "print grid"]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 186, "lines": ["## sort the grid models by decreasing AUC\n", "sorted_grid = grid.sort_by('auc(valid=True)',increasing=False)\n", "print(sorted_grid)"]}, {"block": 26, "type": "code", "linesLength": 9, "startIndex": 189, "lines": ["# find the range of the max_depth for the top ten models\n", "top_depths = sorted_grid[0:5]\n", "max_depths = top_depths['Hyperparameters: [max_depth]']\n", "print max_depths\n", "\n", "# get the max depths as a list\n", "max_min_list = []\n", "for element in max_depths:\n", "    max_min_list.append(element[0])"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 198, "lines": ["It appears that `max_depth` values of 19 to 29 are best suited for this dataset, which is unusally deep!"]}, {"block": 28, "type": "code", "linesLength": 5, "startIndex": 199, "lines": ["new_max = max(max_min_list)\n", "new_min = min(max_min_list)\n", "\n", "print \"MaxDepth\", new_max\n", "print \"MinDepth\", new_min"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 204, "lines": ["Now that we know a good range for max_depth, we can tune all other parameters in more detail. Since we don't know what combinations of hyper-parameters will result in the best model, we'll use random hyper-parameter search to \"let the machine get luckier than a best guess of any human\"."]}, {"block": 30, "type": "code", "linesLength": 19, "startIndex": 205, "lines": ["# create hyperameter and search criteria lists (ranges are inclusive..exclusive))\n", "hyper_params_tune = {'max_depth' : list(range(new_min,new_max+1,1)),\n", "                'sample_rate': [x/100. for x in range(20,101)],\n", "                'col_sample_rate' : [x/100. for x in range(20,101)],\n", "                'col_sample_rate_per_tree': [x/100. for x in range(20,101)],\n", "                'col_sample_rate_change_per_level': [x/100. for x in range(90,111)],\n", "                'min_rows': [2**x for x in range(0,int(math.log(train.nrow,2)-1)+1)],\n", "                'nbins': [2**x for x in range(4,11)],\n", "                'nbins_cats': [2**x for x in range(4,13)],\n", "                'min_split_improvement': [0,1e-8,1e-6,1e-4],\n", "                'histogram_type': [\"UniformAdaptive\",\"QuantilesGlobal\",\"RoundRobin\"]}\n", "search_criteria_tune = {'strategy': \"RandomDiscrete\",\n", "                   'max_runtime_secs': 600,  ## limit the runtime to 10 minutes\n", "                   'max_models': 1000,  ## build no more than 1000 models\n", "                   'seed' : 1234,\n", "                   'stopping_rounds' : 5,\n", "                   'stopping_metric' : \"AUC\",\n", "                   'stopping_tolerance': 1e-3\n", "                   }"]}, {"block": 31, "type": "code", "linesLength": 35, "startIndex": 224, "lines": ["gbm_final_grid = h2o.H2OGradientBoostingEstimator(distribution='bernoulli',\n", "                                    ## more trees is better if the learning rate is small enough \n", "                                    ## here, use \"more than enough\" trees - we have early stopping\n", "                                    ntrees=10000,\n", "                                    ## smaller learning rate is better\n", "                                    ## since we have learning_rate_annealing, we can afford to start with a \n", "                                    #bigger learning rate\n", "                                    learn_rate=0.05,\n", "                                    ## score every 10 trees to make early stopping reproducible \n", "                                    #(it depends on the scoring interval)\n", "                                    score_tree_interval = 10,\n", "                                    ## fix a random number generator seed for reproducibility\n", "                                    seed = 1234,\n", "                                    ## early stopping once the validation AUC doesn't improve by at least 0.01% for \n", "                                    #5 consecutive scoring events\n", "                                    stopping_rounds = 5,\n", "                                    stopping_metric = \"AUC\",\n", "                                    stopping_tolerance = 1e-4)\n", "            \n", "#Build grid search with previously made GBM and hyper parameters\n", "final_grid = h2o.H2OGridSearch(gbm_final_grid, hyper_params = hyper_params_tune,\n", "                                    grid_id = 'final_grid',\n", "                                    search_criteria = search_criteria_tune)\n", "#Train grid search\n", "final_grid.train(x=predictors, \n", "           y=response,\n", "           ## learning rate annealing: learning_rate shrinks by 1% after every tree \n", "           ## (use 1.00 to disable, but then lower the learning_rate)\n", "           learn_rate_annealing = 0.99,  ## this parameter currently cannot be passed above to the constructor\n", "           ## early stopping based on timeout (no model should take more than 1 hour - modify as needed)\n", "           max_runtime_secs = 3600, \n", "           training_frame = train,\n", "           validation_frame = valid)\n", "\n", "print final_grid"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 259, "lines": ["We can see that the best models have even better validation AUCs than our previous best models, so the random grid search was successful!"]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 260, "lines": ["## Sort the grid models by AUC\n", "sorted_final_grid = final_grid.sort_by('auc(valid=True)',increasing=False)\n", "print sorted_final_grid"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 263, "lines": ["We can inspect the best 5 models from the grid search explicitly, and query their validation AUC:"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 264, "lines": ["print sorted_final_grid[\"auc(valid=True)\"][0:5]"]}, {"block": 36, "type": "markdown", "linesLength": 2, "startIndex": 265, "lines": ["You can also see the results of the grid search in [Flow](http://localhost:54321/):\n", "![alt text](./final_grid.png \"Final Grid Search Results in Flow\")"]}, {"block": 37, "type": "markdown", "linesLength": 3, "startIndex": 267, "lines": ["## Model Inspection and Final Test Set Scoring\n", "\n", "Let's see how well the best model of the grid search (as judged by validation set AUC) does on the held out test set:"]}, {"block": 38, "type": "code", "linesLength": 3, "startIndex": 270, "lines": ["#Get the best model from the list (the model name listed at the top of the table)\n", "best_model = h2o.get_model('final_grid_model_46')\n", "performance_best_model = best_model.model_performance(test)"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 273, "lines": ["Good news. It does as well on the test set as on the validation set, so it looks like our best GBM model generalizes well to the unseen test set:"]}, {"block": 40, "type": "code", "linesLength": 2, "startIndex": 274, "lines": ["#Get the performance on the test model\n", "print performance_best_model.auc()"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 276, "lines": ["We can inspect the winning model's parameters:"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 277, "lines": ["for key, value in best_model.params.iteritems():\n", "    print key,value['actual']"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 279, "lines": ["Now we can confirm that these parameters are generally sound, by building a GBM model on the whole dataset (instead of the 60%) and using internal 5-fold cross-validation (re-using all other parameters including the seed):"]}, {"block": 44, "type": "code", "linesLength": 19, "startIndex": 280, "lines": ["gbm_best = h2o.H2OGradientBoostingEstimator(distribution='bernoulli',\n", "                                    ntrees=10000,\n", "                                    learn_rate=0.05,\n", "                                    col_sample_rate = 0.86,\n", "                                    col_sample_rate_change_per_level = 1.07,\n", "                                    col_sample_rate_per_tree = 1,\n", "                                    seed = 1234,\n", "                                    sample_rate = 0.39,\n", "                                    score_tree_interval = 10, \n", "                                    stopping_rounds = 5,\n", "                                    stopping_metric = \"AUC\",\n", "                                    stopping_tolerance = 1e-4,\n", "                                    nbins_cats = 32,\n", "                                    nbins = 128,\n", "                                    min_rows = 8,\n", "                                    max_depth = 26,\n", "                                    histogram_type = \"QuantilesGlobal\",\n", "                                    min_split_improvement = 1e-6,\n", "                                    nfolds = 5)"]}, {"block": 45, "type": "code", "linesLength": 1, "startIndex": 299, "lines": ["gbm_best.train(x=predictors, y=response,learn_rate_annealing = 0.99, training_frame=df)"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 300, "lines": ["print gbm_best.cross_validation_metrics_summary()"]}, {"block": 47, "type": "markdown", "linesLength": 3, "startIndex": 301, "lines": ["Ouch! So it looks like we overfit quite a bit on the validation set as the mean AUC on the 5 folds is \"only\" 96.28%, with a standard deviation of 0.6% (absolute). So we cannot always expect AUCs of 97% with these parameters on this dataset. So to get a better estimate of model performance, the Random hyper-parameter search could have used `nfolds = 5` (or 10, or similar) in combination with 80% of the data for training (i.e., not holding out a validation set, but only the final test set). However, this would take more time, as `nfolds+1` models will be built for every set of parameters.\n", "\n", "Another idea is to test the performance of the top 5 models via 5-fold cross-validation and pick the best one, or make an ensemble. See the [R Markdown](https://github.com/h2oai/h2o-3/blob/master/h2o-docs/src/product/tutorials/gbm/gbmTuning.Rmd) version of this script for that."]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 304, "lines": ["Keeping the same \"best\" model, we can make test set predictions as follows:"]}, {"block": 49, "type": "code", "linesLength": 3, "startIndex": 305, "lines": ["preds = best_model.predict(test)\n", "preds.head()\n", "#gbm@model$validation_metrics@metrics$max_criteria_and_metric_scores"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 308, "lines": ["Note that the label (survived or not) is predicted as well (in the first predict column), and it uses the threshold with the highest F1 score (here: 0.5432907) to make labels from the probabilities for survival (`p1`). The probability for death (`p0`) is given for convenience, as it is just `1-p1`."]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 309, "lines": ["best_model.model_performance()"]}, {"block": 52, "type": "markdown", "linesLength": 3, "startIndex": 310, "lines": ["You can also see the \"best\" model in more detail in [Flow](http://localhost:54321/):\n", "![alt text](./best_gbm1.png \"Best GBM from Grid Search in Flow\")\n", "![alt text](./best_gbm2.png \"Best GBM from Grid Search in Flow\")"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 313, "lines": ["The model and the predictions can be saved to file as follows:"]}, {"block": 54, "type": "code", "linesLength": 2, "startIndex": 314, "lines": ["h2o.save_model(best_model, \"/tmp/bestModel.csv\", force=True)\n", "h2o.export_file(preds, \"/tmp/bestPreds.csv\", force=True)"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 316, "lines": ["#h2o.download_pojo(best_model)"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 317, "lines": ["The model can also be exported as a plain old Java object (POJO) for H2O-independent (standalone/Storm/Kafka/UDF) scoring in any Java environment."]}, {"block": 57, "type": "markdown", "linesLength": 40, "startIndex": 318, "lines": ["```\n", "/*\n", "  Licensed under the Apache License, Version 2.0\n", "    http://www.apache.org/licenses/LICENSE-2.0.html\n", "\n", "  AUTOGENERATED BY H2O at 2016-05-27T22:11:18.485-07:00\n", "  3.8.2.6\n", "  \n", "  Standalone prediction code with sample test data for GBMModel named final_grid_model_46\n", "\n", "  How to download, compile and execute:\n", "      mkdir tmpdir\n", "      cd tmpdir\n", "      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar\n", "      curl http://127.0.0.1:54321/3/Models.java/final_grid_model_46 > final_grid_model_46.java\n", "      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m final_grid_model_46.java\n", "\n", "     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)\n", "*/\n", "...\n", "class final_grid_model_46_Tree_289_class_0 {\n", "  static final double score0(double[] data) {\n", "    double pred =      (!Double.isNaN(data[9]) && data[9 /* boat */] != 12.0f ? \n", "         (data[9 /* boat */] <13.003977f ? \n", "             (data[9 /* boat */] <11.504464f ? \n", "                 (data[1 /* sex */] <0.5f ? \n", "                     (data[6 /* fare */] <24.978184f ? \n", "                        0.0027945167f : \n", "                         (data[11 /* home.dest */] <132.0f ? \n", "                            0.0027875851f : \n", "                             (data[11 /* home.dest */] <265.5f ? \n", "                                 (data[6 /* fare */] <49.690052f ? \n", "                                    0.002784563f : \n", "                                    0.0027828787f) : \n", "                                0.0027856496f))) : \n", "                    0.002798641f) : \n", "                0.0028186426f) : \n", "            0.00350058f) : \n", "...\n", "```"]}, {"block": 58, "type": "markdown", "linesLength": 3, "startIndex": 358, "lines": ["## Ensembling Techniques\n", "\n", "After learning above that the variance of the test set AUC of the top few models was rather large, we might be able to turn this into our advantage by using ensembling techniques. The simplest one is taking the average of the predictions (survival probabilities) of the top `k` grid search model predictions (here, we use `k=10`):"]}, {"block": 59, "type": "code", "linesLength": 9, "startIndex": 361, "lines": ["prob = None\n", "k=10\n", "for i in range(0,k): \n", "    gbm = h2o.get_model(sorted_final_grid[\"Model Id\"][i])\n", "    if (prob is None):\n", "        prob = gbm.predict(test)[\"p1\"]\n", "    else:\n", "        prob = prob + gbm.predict(test)[\"p1\"]\n", "prob = prob/k"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 370, "lines": ["We now have a blended probability of survival for each person on the Titanic."]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 371, "lines": ["prob.head()"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 372, "lines": ["We can bring those ensemble predictions to our Python session's memory space and use other Python packages."]}, {"block": 63, "type": "markdown", "linesLength": 3, "startIndex": 373, "lines": ["This simple blended ensemble test set prediction has an even higher AUC than the best single model, so we can assume that this would hold true using cross-validation as well. We leave this as an exercise for the reader - take the parameters of the top `10` models, retrain them with `nfolds=5` on the full dataset, set `keep_holdout_predictions=TRUE` and sum up their predicted probabilities in `h2o.getFrame(cvgbm[i]@model$cross_validation_holdout_predictions_frame_id)`, then score that with cvAUC as shown above).\n", "\n", "For more sophisticated ensembling approaches, such as stacking via a superlearner, we refer to the [H2O Ensemble](https://github.com/h2oai/h2o-3/tree/master/h2o-r/ensemble) github page."]}, {"block": 64, "type": "markdown", "linesLength": 6, "startIndex": 376, "lines": ["## Summary\n", "We learned how to build H2O GBM models for a binary classification task on a small but realistic dataset with numerical and categorical variables, with the goal to maximize the AUC (ranges from 0.5 to 1). We first established a baseline with the default model, then carefully tuned the remaining hyper-parameters without \"too much\" human guess-work. We used both Cartesian and Random hyper-parameter searches to find good models. We were able to get the AUC on a holdout test set from the low 94% range with the default model to the mid 97% after tuning, and to the high 97% with some simple ensembling technique known as blending. We performed simple cross-validation variance analysis to learn that results were slightly \"lucky\" due to the specific train/valid/test set splits, and settled to expect mid 96% AUCs instead.\n", "\n", "Note that this script and the findings therein are directly transferrable to large datasets on distributed clusters including Spark/Hadoop environments.\n", "\n", "More information can be found here [http://www.h2o.ai/docs/](http://www.h2o.ai/docs/)."]}]