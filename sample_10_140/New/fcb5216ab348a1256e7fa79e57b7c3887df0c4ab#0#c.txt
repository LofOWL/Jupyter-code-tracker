[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["## ThinkDSP\n", "\n", "This notebook contains code examples from Chapter 4: Noise\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 6, "startIndex": 7, "lines": ["# Get thinkdsp.py\n", "\n", "import os\n", "\n", "if not os.path.exists('thinkdsp.py'):\n", "    !wget https://github.com/AllenDowney/ThinkDSP/raw/master/code/thinkdsp.py"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["import numpy as np\n", "np.random.seed(17)"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["The simplest noise to generate is uncorrelated uniform (UU) noise:"]}, {"block": 4, "type": "code", "linesLength": 5, "startIndex": 16, "lines": ["from thinkdsp import UncorrelatedUniformNoise\n", "\n", "signal = UncorrelatedUniformNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "wave.make_audio()"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Here's what a segment of it looks like:"]}, {"block": 6, "type": "code", "linesLength": 7, "startIndex": 22, "lines": ["from thinkdsp import decorate\n", "\n", "segment = wave.segment(duration=0.1)\n", "segment.plot()\n", "decorate(xlabel='Time (s)',\n", "         ylabel='Amplitude',\n", "         ylim=[-1.05, 1.05])"]}, {"block": 7, "type": "code", "linesLength": 0, "startIndex": 29, "lines": []}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["And here's the spectrum:"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 30, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot(linewidth=0.5)\n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Amplitude')"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["In the context of noise it is more conventional to look at the spectrum of power, which is the square of amplitude:"]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 35, "lines": ["spectrum.plot_power(linewidth=0.5)\n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Power')"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["UU noise has the same power at all frequencies, on average, which we can confirm by looking at the normalized cumulative sum of power, which I call an integrated spectrum:"]}, {"block": 13, "type": "code", "linesLength": 4, "startIndex": 39, "lines": ["integ = spectrum.make_integrated_spectrum()\n", "integ.plot_power()\n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Cumulative power')"]}, {"block": 14, "type": "markdown", "linesLength": 5, "startIndex": 43, "lines": ["A straight line in this figure indicates that UU noise has equal power at all frequencies, on average.  By analogy with light, noise with this property is called \"white noise\".\n", "\n", "### Brownian noise\n", "\n", "Brownian noise is generated by adding up a sequence of random steps."]}, {"block": 15, "type": "code", "linesLength": 5, "startIndex": 48, "lines": ["from thinkdsp import BrownianNoise\n", "\n", "signal = BrownianNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "wave.make_audio()"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 53, "lines": ["The sound is less bright, or more muffled, than white noise.\n", "\n", "Here's what the wave looks like:"]}, {"block": 17, "type": "code", "linesLength": 4, "startIndex": 56, "lines": ["wave.plot(linewidth=1)\n", "decorate(xlabel='Time (s)',\n", "         ylabel='Amplitude',\n", "         ylim=[-1.05, 1.05])"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["Here's what the power spectrum looks like on a linear scale."]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 61, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot_power(linewidth=0.5)\n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Power')"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 65, "lines": ["So much of the energy is at low frequencies, we can't even see the high frequencies.\n", "\n", "We can get a better view by plotting the power spectrum on a log-log scale."]}, {"block": 21, "type": "code", "linesLength": 11, "startIndex": 68, "lines": ["# The f=0 component is very small, so on a log scale\n", "# it's very negative.  If we clobber it before plotting,\n", "# we can see the rest of the spectrum more clearly.\n", "spectrum.hs[0] = 0\n", "\n", "spectrum.plot_power(linewidth=0.5)\n", "\n", "loglog = dict(xscale='log', yscale='log')\n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Power',\n", "         **loglog)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["Now the relationship between power and frequency is clearer.  The slope of this line is approximately -2, which indicates that $P = K / f^2$, for some constant $K$."]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 80, "lines": ["signal =  BrownianNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "spectrum = wave.make_spectrum()\n", "result = spectrum.estimate_slope()\n", "result.slope"]}, {"block": 24, "type": "markdown", "linesLength": 7, "startIndex": 85, "lines": ["The estimated slope of the line is closer to -1.8 than -2, for reasons we'll see later.\n", "\n", "### Pink noise\n", "\n", "Pink noise is characterized by a parameter, $\\beta$, usually between 0 and 2.  You can hear the differences below.\n", "\n", "With $\\beta=0$, we get white noise:"]}, {"block": 25, "type": "code", "linesLength": 5, "startIndex": 92, "lines": ["from thinkdsp import PinkNoise\n", "\n", "signal = PinkNoise(beta=0)\n", "wave = signal.make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["With $\\beta=1$, pink noise has the relationship $P = K / f$, which is why it is also called $1/f$ noise."]}, {"block": 27, "type": "code", "linesLength": 3, "startIndex": 98, "lines": ["signal = PinkNoise(beta=1)\n", "wave = signal.make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 101, "lines": ["With $\\beta=2$, we get Brownian (aka red) noise."]}, {"block": 29, "type": "code", "linesLength": 3, "startIndex": 102, "lines": ["signal = PinkNoise(beta=2)\n", "wave = signal.make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 105, "lines": ["The following figure shows the power spectrums for white, pink, and red noise on a log-log scale."]}, {"block": 31, "type": "code", "linesLength": 13, "startIndex": 106, "lines": ["betas = [0, 1, 2]\n", "\n", "for beta in betas:\n", "    signal = PinkNoise(beta=beta)\n", "    wave = signal.make_wave(duration=0.5, framerate=1024)\n", "    spectrum = wave.make_spectrum()\n", "    spectrum.hs[0] = 0\n", "    label = f'beta={beta}'\n", "    spectrum.plot_power(linewidth=1, alpha=0.7, label=label)\n", "    \n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Power',\n", "         **loglog)"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 119, "lines": ["### Uncorrelated Gaussian noise\n", "\n", "An alternative to UU noise is uncorrelated Gaussian (UG noise)."]}, {"block": 33, "type": "code", "linesLength": 7, "startIndex": 122, "lines": ["from thinkdsp import UncorrelatedGaussianNoise\n", "\n", "signal = UncorrelatedGaussianNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "wave.plot(linewidth=0.5)\n", "decorate(xlabel='Time (s)',\n", "         ylabel='Amplitude')"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["The spectrum of UG noise is also UG noise."]}, {"block": 35, "type": "code", "linesLength": 4, "startIndex": 130, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot_power(linewidth=1)\n", "decorate(xlabel='Frequency (Hz)',\n", "         ylabel='Power')"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 134, "lines": ["We can use a normal probability plot to test the distribution of the power spectrum."]}, {"block": 37, "type": "code", "linesLength": 20, "startIndex": 135, "lines": ["import matplotlib.pyplot as plt\n", "\n", "def normal_prob_plot(sample, fit_color='0.8', **options):\n", "    \"\"\"Makes a normal probability plot with a fitted line.\n", "\n", "    sample: sequence of numbers\n", "    fit_color: color string for the fitted line\n", "    options: passed along to Plot\n", "    \"\"\"\n", "    n = len(sample)\n", "    xs = np.random.normal(0, 1, n)\n", "    xs.sort()\n", "    \n", "    ys = np.sort(sample)\n", "    \n", "    mean, std = np.mean(sample), np.std(sample)\n", "    fit_ys = mean + std * xs\n", "    plt.plot(xs, fit_ys, color='gray', alpha=0.5, label='model')\n", "\n", "    plt.plot(xs, ys, **options)"]}, {"block": 38, "type": "code", "linesLength": 3, "startIndex": 155, "lines": ["normal_prob_plot(spectrum.real, color='C0', label='real part')\n", "decorate(xlabel='Normal sample',\n", "         ylabel='Power')"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 158, "lines": ["A straight line on a normal probability plot indicates that the distribution of the real part of the spectrum is Gaussian."]}, {"block": 40, "type": "code", "linesLength": 3, "startIndex": 159, "lines": ["normal_prob_plot(spectrum.imag, color='C1', label='imag part')\n", "decorate(xlabel='Normal sample',\n", "         ylabel='Power')"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 162, "lines": ["And so is the imaginary part."]}, {"block": 42, "type": "code", "linesLength": 0, "startIndex": 163, "lines": []}]