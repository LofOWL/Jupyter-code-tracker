[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# It\u00e9rateurs"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9daire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Dans ce compl\u00e9ment nous allons dire quelques mots du module `itertools` qui fournit sous forme d'it\u00e9rateurs des utilitaires communs qui peuvent \u00eatre tr\u00e8s utiles. On vous rappelle que l'int\u00e9r\u00eat premier des it\u00e9rateurs est de parcourir des donn\u00e9es sans cr\u00e9er de structure de donn\u00e9es temporaire, donc \u00e0 co\u00fbt m\u00e9moire faible et constant."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Le module `itertools`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["\u00c0 ce stade, j'esp\u00e8re que vous savez trouver [la documentation du module](https://docs.python.org/3/library/itertools.html) que je vous invite \u00e0 avoir sous la main."]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["import itertools"]}, {"block": 7, "type": "markdown", "linesLength": 6, "startIndex": 11, "lines": ["Comme vous le voyez dans la doc, les fonctionnalit\u00e9s de `itertools` tombent dans 3 cat\u00e9gories\u00a0:\n", " * des it\u00e9rateurs infinis, comme par exemple `cycle`\u00a0;\n", " * des it\u00e9rateurs pour \u00e9num\u00e9rer les combinatoires usuelles en math\u00e9matiques, comme les permutations, les combinaisons, le produit cart\u00e9sien, etc.\u00a0;\n", " * et enfin des it\u00e9rateurs correspondants \u00e0 des traits que nous avons d\u00e9j\u00e0 rencontr\u00e9s, mais impl\u00e9ment\u00e9s sous forme d'it\u00e9rateurs.\n", " \n", "\u00c0 nouveau, toutes ces fonctionnalit\u00e9s sont offertes **sous la forme d'it\u00e9rateurs**."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Pour d\u00e9tailler un tout petit peu cette derni\u00e8re famille, signalons\u00a0:"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": [" * `chain` qui permet de **concat\u00e9ner** plusieurs it\u00e9rables sous la forme d'un **it\u00e9rateur**\u00a0:"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["for x in itertools.chain((1, 2), [3, 4]):\n", "    print(x)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": [" * `islice` qui fournit un it\u00e9rateur sur un slice d'un it\u00e9rable. On peut le voir comme une g\u00e9n\u00e9ralisation de `range` qui parcours n'importe quel it\u00e9rable."]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 22, "lines": ["import string\n", "support = string.ascii_lowercase\n", "print(f'support={support}')"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["# range\n", "for x in range(3, 8):\n", "    print(x)"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 28, "lines": ["# islice\n", "for x in itertools.islice(support, 3, 8):\n", "    print(x)"]}]