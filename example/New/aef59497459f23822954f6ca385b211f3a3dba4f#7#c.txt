[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Objets mutables et objets immuables"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Les cha\u00eenes sont des objets immuables"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Voici un exemple d'un fragment de code qui illustre le caract\u00e8re immuable des cha\u00eenes de caract\u00e8res. Nous l'ex\u00e9cutons sous [pythontutor](pythontutor.com), afin de bien illustrer les relations entre variables et objets."]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 9, "lines": ["# il vous faut charger cette cellule\n", "# pour pouvoir utiliser les suivantes\n", "%load_ext ipythontutor"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["**Note**: une fois que vous avez \u00e9valu\u00e9 la cellule avec `%%ipythontutor`, vous devez cliquer sur le bouton `Forward` pour voir pas \u00e0 pas le comportement du programme."]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 13, "lines": ["Le sc\u00e9nario est tr\u00e8s simple, on cr\u00e9e deux variables `s1` et `s2` vers le m\u00eame objet `'abc'`, puis on fait une op\u00e9ration `+=` sur la variable `s1`.\n", "\n", "Comme l'objet est une cha\u00eene, il est donc immuable, on ne **peut pas modifier l'objet** directement; pour obtenir l'effet recherch\u00e9 (\u00e0 savoir que `s1` s'allonge de `'def'`), python **cr\u00e9e un deuxi\u00e8me objet**, comme on le voit bien sous pythontutor:"]}, {"block": 8, "type": "code", "linesLength": 7, "startIndex": 16, "lines": ["%%ipythontutor heapPrimitives=true\n", "# deux variables vers le m\u00eame objet\n", "s1 = 'abc'\n", "s2 = s1\n", "# on essaie de modifier l'objet\n", "s1 += 'def'\n", "# pensez \u00e0 cliquer sur `Forward`"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["### Les listes sont des objets mutables"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Voici ce qu'on obtient par contraste pour le m\u00eame sc\u00e9nario mais qui cette fois utilise des listes, qui sont des objets mutables:"]}, {"block": 11, "type": "code", "linesLength": 7, "startIndex": 25, "lines": ["%%ipythontutor heapPrimitives=true ratio=0.8\n", "# deux variables vers le m\u00eame objet\n", "liste1 = ['a', 'b', 'c']\n", "liste2 = liste1\n", "# on modifie l'objet\n", "liste1 += ['d', 'e', 'f']\n", "# pensez \u00e0 cliquer sur `Forward`"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["### Conclusion"]}, {"block": 13, "type": "markdown", "linesLength": 5, "startIndex": 33, "lines": ["Ce comportement n'est pas propre \u00e0 l'usage de l'op\u00e9rateur `+=` - que pour cette raison d'ailleurs nous avons tendance \u00e0 d\u00e9conseiller.\n", "\n", "Les objets mutables et immuables ont par essence un comportement diff\u00e9rent, il est tr\u00e8s important d'avoir ceci pr\u00e9sent \u00e0 l'esprit.\n", "\n", "Nous aurons notamment l'occasion d'approfondir cela dans la s\u00e9quence consacr\u00e9e aux r\u00e9f\u00e9rences partag\u00e9es, en semaine 3."]}]