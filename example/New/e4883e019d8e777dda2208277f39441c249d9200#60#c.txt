[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Affectation simultan\u00e9e"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous avons d\u00e9j\u00e0 parl\u00e9 de l'affectation par *sequence unpacking* (en Semaine 2, s\u00e9quence \"Les tuples\"), qui consiste \u00e0 affecter \u00e0 plusieurs variables des \"morceaux\" d'un objet, comme dans&nbsp;:"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 4, "lines": ["x, y = ['spam', 'egg']"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Dans ce compl\u00e9ment nous allons voir une autre forme de l'affectation, qui consiste \u00e0 affecter **le m\u00eame objet** \u00e0 plusieurs variables. Commen\u00e7ons par un exemple simple&nbsp;:"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["a = b = 1\n", "print('a', a, 'b', b)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["La raison pour laquelle nous abordons cette construction maintenant est qu'elle a une forte relation avec les r\u00e9f\u00e9rences partag\u00e9es; pour bien le voir, nous allons utiliser une valeur mutable comme valeur \u00e0 affecter&nbsp;:"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["# on affecte a et b au m\u00eame objet liste vide\n", "a = b = []"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["D\u00e8s lors nous sommes dans le cas typique d'une r\u00e9f\u00e9rence partag\u00e9e; une modification de  `a` va se r\u00e9percuter sur `b` puisque ces deux variables d\u00e9signent **le m\u00eame objet**&nbsp;:"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["a.append(1)\n", "print('a', a, 'b', b)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Ceci est \u00e0 mettre en contraste avec plusieurs affectations s\u00e9par\u00e9es&nbsp;:"]}, {"block": 12, "type": "code", "linesLength": 7, "startIndex": 15, "lines": ["# si on utilise deux affectations diff\u00e9rentes\n", "a = []\n", "b = []\n", "\n", "# alors on peut changer a sans changer b\n", "a.append(1)\n", "print('a', a, 'b', b)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["On voit que dans ce cas chaque affectation cr\u00e9e une liste vide diff\u00e9rente, et les deux variables ne partagent plus de donn\u00e9e. "]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["D'une mani\u00e8re g\u00e9n\u00e9rale, utiliser l'affectation simultan\u00e9e vers un objet mutable cr\u00e9e m\u00e9caniquement des **r\u00e9f\u00e9rences partag\u00e9es**, aussi v\u00e9rifiez bien dans ce cas que c'est votre intention. "]}]