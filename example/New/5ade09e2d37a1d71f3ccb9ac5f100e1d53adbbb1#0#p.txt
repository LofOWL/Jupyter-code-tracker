[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Les fonctions `globals` et `locals`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Un exemple"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 8, "lines": ["python fournit un acc\u00e8s \u00e0 la liste des noms et valeurs des variables visibles \u00e0 cet endroit du code. Dans le jargon des langages de programmation on appelle ceci **l'environnement**.\n", "\n", "Cela est fait gr\u00e2ce aux fonctions *builtins* `globals` et `locals`, que nous allons commencer par essayer sur quelques exemples. Nous avons pour cela \u00e9crit un module d\u00e9di\u00e9:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["import env_locals_globals"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Dont voici le code"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["from modtools import show_module\n", "show_module(env_locals_globals)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["et voici ce qu'on obtient lorsqu'on appelle "]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["env_locals_globals.temoin(10)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["### Interpr\u00e9tation"]}, {"block": 11, "type": "markdown", "linesLength": 5, "startIndex": 18, "lines": ["Que nous montre cet exemple ?\n", "\n", "* D'une part la fonction **`globals`** nous donne la liste des symboles d\u00e9finis au niveau de **l'espace de noms du module**. Il s'agit \u00e9videmment du module dans lequel est d\u00e9finie la fonction, pas celui dans lequel elle est appel\u00e9e. Vous remarquerez que ceci englobe **tous** les symboles du module `env_locals_globals`, et non pas seulement ceux d\u00e9finis avant `temoin`, c'est-\u00e0-dire la variable `globale`, les deux fonctions `display_env` et `temoin`, et la classe `Foo`. \n", "\n", "* D'autre part **`locals`** nous donne les variables locales qui sont accessibles **\u00e0 cet endroit du code**, comme le montre ce second exemple qui se concentre sur `locals` \u00e0 diff\u00e9rents points d'une m\u00eame fonction. "]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["import env_locals"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["# le code de ce module \n", "show_module(env_locals)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["env_locals.temoin(10)"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 28, "lines": ["**NOTE**: cette section est en pratique devenue obsol\u00e8te maintenant que les *f-strings* sont pr\u00e9sents dans la version 3.6.\n", "\n", "Nous l'avons conserv\u00e9e pour l'instant toutefois, pour ceux d'entre vous qui ne peuvent pas encore utiliser les *f-strings* en production. N'h\u00e9sitez pas \u00e0 passer si vous n'\u00eates pas dans ce cas."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["### Usage pour le formatage de cha\u00eenes"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Les deux fonctions `locals` et `globals` ne sont pas d'une utilisation tr\u00e8s fr\u00e9quente. Elles peuvent cependant \u00eatre utiles dans le contexte du formatage de cha\u00eenes, comme on peut le voir dans les deux exemples ci-dessous."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["##### Avec `format`"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["On peut utiliser `format` qui s'attend \u00e0 quelque chose comme:"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["\"{nom}\".format(nom=\"Dupont\")"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["que l'on peut obtenir de mani\u00e8re \u00e9quivalente, en anticipant sur la prochaine vid\u00e9o, avec le passage d'arguments en `**`:"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["\"{nom}\".format(**{'nom': 'Dupont'})"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["En versant la fonction `locals` dans cette formule on obtient une forme relativement \u00e9l\u00e9gante"]}, {"block": 25, "type": "code", "linesLength": 4, "startIndex": 39, "lines": ["def format_et_locals(nom, prenom, civilite, telephone):\n", "    return \"{civilite} {prenom} {nom} : Poste {telephone}\".format(**locals())\n", "\n", "format_et_locals('Dupont', 'Jean', 'Mr', '7748')"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["##### Avec l'op\u00e9rateur `%`"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["De mani\u00e8re similaire, avec l'op\u00e9rateur `%` - dont nous rappelons qu'il est obsol\u00e8te - on peut \u00e9crire"]}, {"block": 28, "type": "code", "linesLength": 4, "startIndex": 45, "lines": ["def pourcent_et_locals(nom, prenom, civilite, telephone):\n", "    return \"%(civilite)s %(prenom)s %(nom)s : Poste %(telephone)s\"%locals()\n", "\n", "pourcent_et_locals('Dupont', 'Jean', 'Mr', '7748')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["##### Avec un *f-string*"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Pour rappel si vous disposez de python 3.6, vous pouvez alors \u00e9crire simplement - et sans avoir recours, donc, \u00e0 `locals()` ou autre:"]}, {"block": 31, "type": "code", "linesLength": 5, "startIndex": 51, "lines": ["# attention ceci n\u00e9cessite python-3.6\n", "def avec_f_string(nom, prenom, civilite, telephone):\n", "    return f\"{civilite} {prenom} {nom} : Poste {telephone}\"\n", "\n", "avec_f_string('Dupont', 'Jean', 'Mr', '7748')"]}]