[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# G\u00e9rer des enregistrements"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Impl\u00e9menter un enregistrement comme un dictionnaire"]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 8, "lines": ["Il nous faut faire le lien entre dictionnaire Python et la notion d'enregistrement, c'est-\u00e0-dire une donn\u00e9e composite qui contient plusieurs champs. (\u00c0 cette notion correspond, selon les langages, ce qu'on appelle un `struct` ou un `record`.)\n", "\n", "Imaginons qu'on veuille manipuler un ensemble de donn\u00e9es concernant des personnes\u00a0; chaque personne est suppos\u00e9e avoir un nom, un \u00e2ge et une adresse mail.\n", "\n", "Il est possible, et assez fr\u00e9quent, d'utiliser le dictionnaire comme support pour mod\u00e9liser ces donn\u00e9es comme ceci\u00a0:"]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 13, "lines": ["personnes = [\n", "    {'nom': 'Pierre',  'age': 25, 'email': 'pierre@example.com'},\n", "    {'nom': 'Paul',    'age': 18, 'email': 'paul@example.com'},\n", "    {'nom': 'Jacques', 'age': 52, 'email': 'jacques@example.com'},\n", "]"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 18, "lines": ["Bon, tr\u00e8s bien, nous avons nos donn\u00e9es, il est facile de les utiliser.\n", "\n", "Par exemple, pour l'anniversaire de Pierre on fera\u00a0:"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["personnes[0]['age'] += 1"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Ce qui nous donne\u00a0:"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 23, "lines": ["for personne in personnes:\n", "    print(10*\"=\")\n", "    for info, valeur in list(personne.items()):\n", "        print(f\"{info} -> {valeur}\")"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["### Un dictionnaire pour indexer les enregistrements"]}, {"block": 11, "type": "markdown", "linesLength": 5, "startIndex": 28, "lines": ["Cela dit, il est bien clair que cette fa\u00e7on de faire n'est pas tr\u00e8s pratique\u00a0; pour marquer l'anniversaire de Pierre on ne sait bien entendu pas que son enregistrement est le premier dans la liste. C'est pourquoi il est plus adapt\u00e9, pour mod\u00e9liser ces informations, d'utiliser non pas une liste, mais \u00e0 nouveau\u2026 un dictionnaire.\n", "\n", "Si on imagine qu'on a commenc\u00e9 par lire ces donn\u00e9es s\u00e9quentiellement dans un fichier, et qu'on a calcul\u00e9 l'objet `personnes` comme la liste qu'on a vue ci-dessus, alors il est possible de construire un index de ces dictionnaires, (un dictionnaire de dictionnaires, donc).\n", "\n", "C'est-\u00e0-dire, en anticipant un peu sur la construction de dictionnaires par compr\u00e9hension\u00a0:"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 33, "lines": ["# on cr\u00e9e un index permettant de retrouver rapidement\n", "# une personne dans la liste\n", "index_par_nom = {personne['nom']: personne for personne in personnes}\n", "\n", "print(\"enregistrement pour Pierre\", index_par_nom['Pierre'])"]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 38, "lines": ["Attardons-nous un tout petit peu\u00a0; nous avons construit un dictionnaire par compr\u00e9hension, en cr\u00e9ant autant d'entr\u00e9es que de personnes. Nous aborderons en d\u00e9tail la notion de compr\u00e9hension de sets et de dictionnaires en semaine 5, donc si cette notation vous para\u00eet \u00e9trange pour le moment, pas d'inqui\u00e9tude.\n", "\n", "Le r\u00e9sultat est donc un dictionnaire qu'on peut afficher comme ceci\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 41, "lines": ["for nom, record in index_par_nom.items():\n", "    print(f\"Nom : {nom} -> enregistrement : {record}\")"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["Dans cet exemple, le premier niveau de dictionnaire permet de trouver rapidement un objet \u00e0 partir d'un nom\u00a0; dans le second niveau au contraire on utilise le dictionnaire pour impl\u00e9menter un enregistrement, \u00e0 la fa\u00e7on d'un `struct` en C."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["### Techniques similaires"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Notons enfin qu'il existe aussi, en Python, un autre m\u00e9canisme qui peut \u00eatre utilis\u00e9 pour g\u00e9rer ce genre d'objets composites, ce sont les classes que nous verrons en semaine 6, et qui permettent de d\u00e9finir de nouveaux `types` plut\u00f4t que, comme nous l'avons fait ici, d'utiliser un type pr\u00e9d\u00e9fini. Dans ce sens, l'utilisation d'une classe permet davantage de souplesse, au prix de davantage d'effort."]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["#### La m\u00eame id\u00e9e, mais avec une classe `Personne`"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Je vais donner ici une impl\u00e9mentation du code ci-dessus, qui utilise une classe pour mod\u00e9liser les personnes. Naturellement je n'entre pas dans les d\u00e9tails, que l'on verra en semaine 6, mais j'esp\u00e8re vous donner un aper\u00e7u des classes dans un usage r\u00e9aliste, et vous montrer les avantages de cette approche."]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["Pour commencer je d\u00e9finis la classe `Personne`, qui va me servir \u00e0 mod\u00e9liser chaque personne\u00a0:"]}, {"block": 22, "type": "code", "linesLength": 14, "startIndex": 50, "lines": ["class Personne:\n", "\n", "    # le constructeur - vous ignorez le param\u00e8tre self,\n", "    # on pourra construire une personne \u00e0 partir de\n", "    # 3 param\u00e8tres\n", "    def __init__(self, nom, age, email):\n", "        self.nom = nom\n", "        self.age = age\n", "        self.email = email\n", "\n", "    # je d\u00e9finis cette m\u00e9thode pour avoir\n", "    # quelque chose de lisible quand je print()\n", "    def __repr__(self):\n", "        return f\"{self.nom} ({self.age} ans) sur {self.email}\""]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["Pour construire ma liste de personnes, je fais alors\u00a0:"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 65, "lines": ["personnes2 = [\n", "    Personne('Pierre',  25, 'pierre@example.com'),\n", "    Personne('Paul',    18, 'paul@example.com'),\n", "    Personne('Jacques', 52, 'jacques@example.com'),\n", "]"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 70, "lines": ["Si je regarde un \u00e9l\u00e9ment de la liste j'obtiens\u00a0:"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["personnes2[0]"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["Je peux indexer tout ceci comme tout \u00e0 l'heure, si j'ai besoin d'un acc\u00e8s rapide\u00a0:"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 73, "lines": ["# je dois utiliser cette fois personne.nom et non plus personne['nom']\n", "index2 = {personne.nom : personne for personne in personnes2}"]}, {"block": 29, "type": "markdown", "linesLength": 3, "startIndex": 75, "lines": ["Le principe ici est exactement identique \u00e0 ce qu'on a fait avec le dictionnaire de dictionnaires, mais on a construit un dictionnaire d'instances.\n", "\n", "Et de cette fa\u00e7on\u00a0:"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 78, "lines": ["print(index2['Pierre'])"]}]