[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Compr\u00e9hensions"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Liste des valeurs d'une fonction"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["# Pour charger l'exercice\n", "from corrections.exo_liste_p import exo_liste_P"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 6, "lines": ["On se donne une fonction polynomiale\n", "\n", "$P(x) = 2x^2 -3x -2$"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["On vous demande d'\u00e9crire une fonction `liste_P` qui prend en argument une liste de nombres r\u00e9els $x$ et qui retourne la liste des valeurs $P(x)$."]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["# voici un exemple de ce qui est attendu\n", "exo_liste_P.example()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["\u00c9crivez votre code dans la cellule suivante (*On vous sugg\u00e8re d'\u00e9crire une fonction P qui impl\u00e9mente le polyn\u00f4me mais \u00e7a n'est pas strictement indispensable, seul le r\u00e9sultat de `liste_P` compte*):"]}, {"block": 9, "type": "code", "linesLength": 5, "startIndex": 13, "lines": ["def P(x):\n", "    \"<votre code>\"\n", "\n", "def liste_P(liste_x): \n", "    \"<votre_code>\""]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Et vous pouvez le v\u00e9rifier en \u00e9valuant cette cellule:"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["# pour v\u00e9rifier votre code\n", "exo_liste_P.correction(liste_P)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["******"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["## R\u00e9cr\u00e9ation"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Si vous avez correctement impl\u00e9ment\u00e9 la fonction `liste_P` telle que demand\u00e9 dans le premier exercice, vous pouvez visualiser le polyn\u00f4me `P` en utilisant `matplotlib` avec le code suivant:"]}, {"block": 15, "type": "code", "linesLength": 8, "startIndex": 24, "lines": ["from pylab import arange, plot\n", "\n", "# on prend les X de -10 \u00e0 10 par pas de 1/2 \n", "x = arange (-10., 10., 0.5)\n", "# on calcule la valeur de P sur chaque point\n", "y = liste_P(x)\n", "# et on peut plotter avec pylab\n", "plot (x, y)"]}]