[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Ensembles"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# charger l'exercice\n", "from corrections.exo_read_set import exo_read_set"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["On se propose d'\u00e9crire une fonction `read_set` qui construit un ensemble \u00e0 partir du contenu d'un fichier. Voici par exemple un fichier d'entr\u00e9e"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["!cat data/setref1.txt"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["`read_set` va prendre en argument un nom de fichier (vous pouvez supposer qu'il existe), enlever les espaces \u00e9ventuels au d\u00e9but et \u00e0 la fin de chaque ligne, et construire un ensemble de toutes les lignes; par exemple:"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["exo_read_set.example()"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["# \u00e9crivez votre code ici\n", "def read_set(filename):\n", "    \"votre code\""]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["# v\u00e9rifiez votre code ici\n", "exo_read_set.correction(read_set)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["*****"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["## Deuxi\u00e8me partie - niveau basique"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["# la d\u00e9finition de l'exercice\n", "from corrections.exo_read_set import exo_search_in_set"]}, {"block": 13, "type": "markdown", "linesLength": 11, "startIndex": 22, "lines": ["Ceci \u00e9tant acquis, on veut \u00e9crire une deuxi\u00e8me fonction `search_in_set` qui prend en argument deux fichiers:\n", "\n", "* `filename_reference` est le nom d'un fichier contenant des mots de reference,\n", "* `filename` est le nom d'un fichier contenant des mots, dont on veut savoir s'ils sont ou non dans les r\u00e9f\u00e9rences.\n", "\n", "Pour cela `search_in_set` doit retourner une liste, contenant pour chaque ligne du fichier `filename` un tuple avec\n", "\n", "  * la ligne (sans les espaces de d\u00e9but et de fin, ni la fin de ligne)\n", "  * un bool\u00e9en qui indique si ce mot est pr\u00e9sent dans les r\u00e9f\u00e9rences ou pas.\n", "\n", "Par exemple:"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["!cat data/setref1.txt"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["!cat data/setsample1.txt"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["exo_search_in_set.example()"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["# \u00e0 vous\n", "def search_in_set(filename_reference, filename):\n", "    \"votre code\""]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["# v\u00e9rifiez\n", "exo_search_in_set.correction(search_in_set)"]}]