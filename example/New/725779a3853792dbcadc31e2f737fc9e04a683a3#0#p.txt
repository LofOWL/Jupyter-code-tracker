[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# extensions asynchrones du langage"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["# acc\u00e8s http"]}, {"block": 3, "type": "code", "linesLength": 6, "startIndex": 3, "lines": ["import time\n", "\n", "urls = [\"http://www.irs.gov/pub/irs-pdf/f1040.pdf\",\n", "        \"http://www.irs.gov/pub/irs-pdf/f1040ez.pdf\",\n", "        \"http://www.irs.gov/pub/irs-pdf/f1040es.pdf\",\n", "        \"http://www.irs.gov/pub/irs-pdf/f1040sb.pdf\"]"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["##### en version s\u00e9quentielle"]}, {"block": 5, "type": "code", "linesLength": 9, "startIndex": 10, "lines": ["import requests\n", "\n", "beg = time.time()\n", "\n", "for url in urls:\n", "    req = requests.get(url)\n", "    print(f\"{url} returned {len(req.text)} chars\")\n", "    \n", "print(f\"duration = {time.time()-beg}s\")"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["import asyncio\n", "import aiohttp"]}, {"block": 7, "type": "code", "linesLength": 9, "startIndex": 21, "lines": ["async def fetch(url):\n", "    \n", "    async with aiohttp.ClientSession() as session:\n", "         print(f\"fetching {url}\")\n", "        \n", "        async with session.get(url) as response:\n", "            #print(f\"{url} returned status {response.status}\")\n", "            raw = await response.read()\n", "            print(f\"{url} returned {len(raw)} bytes\")"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["# context managers asynchrones"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["* `__aenter__` et `__aexit__` : awaitables"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["* [d\u00e9fini dans PEP492](https://www.python.org/dev/peps/pep-0492/#asynchronous-context-managers-and-async-with)"]}, {"block": 11, "type": "code", "linesLength": 4, "startIndex": 33, "lines": ["# une coroutine qui va chercher toutes les URLs\n", "# ne fait toujours rien, naturellement\n", "async def fetch_urls():\n", "    await asyncio.gather(*(fetch(url) for url in urls))"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 37, "lines": ["loop = asyncio.get_event_loop()\n", "\n", "beg = time.time()\n", "loop.run_until_complete(fetch_urls())\n", "print(f\"duration = {time.time()-beg}s\")"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["# it\u00e9rations asynchrones"]}, {"block": 14, "type": "markdown", "linesLength": 2, "startIndex": 43, "lines": ["* boucle `async for` [PEP-492](https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for)\n", "* compr\u00e9hensions asynchrones [PEP-530](https://www.python.org/dev/peps/pep-0530/)"]}, {"block": 15, "type": "code", "linesLength": 10, "startIndex": 45, "lines": ["import asyncio\n", "\n", "# une variante\n", "async def fetch2(url, i):\n", "    async with aiohttp.ClientSession() as session:\n", "        async with session.get(url) as response:\n", "            # avec ici une it\u00e9ration asynchrone\n", "            async for line in response.content: \n", "                print(f'{i}', end='')\n", "    return url"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 55, "lines": ["asyncio.get_event_loop().run_until_complete(\n", "    asyncio.gather(*(fetch2(url, i) for i, url in enumerate(urls))))"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["# r\u00e9sum\u00e9 (1)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["* fonction coroutine `async def foo()`"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["* `foo()` \u2192 objet *coroutine* :  faire `await foo()`"]}, {"block": 20, "type": "markdown", "linesLength": 6, "startIndex": 60, "lines": ["**autoris\u00e9**\n", "\n", "````\n", "async def foo():\n", "    await bar()\n", "````"]}, {"block": 21, "type": "markdown", "linesLength": 6, "startIndex": 66, "lines": ["**pas autoris\u00e9** : *SyntaxError*\n", "\n", "````\n", "def foo():\n", "    await bar()\n", "````"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["# r\u00e9sum\u00e9 (2)"]}, {"block": 23, "type": "markdown", "linesLength": 2, "startIndex": 73, "lines": ["* `async with`\n", "* `async for`"]}, {"block": 24, "type": "markdown", "linesLength": 2, "startIndex": 75, "lines": ["* Boucle d'\u00e9v\u00e9nements \n", "  * `asyncio.get_event_loop()` "]}]