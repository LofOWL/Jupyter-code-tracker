[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["La boucle `while`"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Boucles sans fin - `break`\n"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["Utiliser `while` plut\u00f4t que `for` est une affaire de style et d'habitude. Cela dit avec l'apparition des it\u00e9rateurs, l'usage du `for` est en g\u00e9n\u00e9ral privil\u00e9gi\u00e9 pour les boucles finies et d\u00e9terministes.\n", "\n", "Le `while` reste malgr\u00e9 tout d'un usage courant avec une condition `True`, conjointement avec `break` (qui fonctionne, au m\u00eame titre d'ailleurs que `continue`, \u00e0 l'int\u00e9rieur d'une boucle `while` exactement comme dans un `for`)"]}, {"block": 4, "type": "code", "linesLength": 7, "startIndex": 6, "lines": ["# on demande \u00e0 l'utilisateur d'entrer une reponse,\n", "# mais on veut \u00eatre s\u00fbr que ce soit 'o' ou 'n'\n", "while True:\n", "    reponse = raw_input (\"r\u00e9pondez par 'o' ou par 'n' : \")\n", "    if reponse in ['o','n']:\n", "        break\n", "print 'reponse',reponse\n"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Ce qui en l'occurrence pourrait s'\u00e9crire aussi:"]}, {"block": 6, "type": "code", "linesLength": 5, "startIndex": 14, "lines": ["# pareil mais \u00e9crit autrement\n", "reponse=\"\"\n", "while reponse not in ['o', 'n'] :\n", "    reponse = raw_input (\"r\u00e9pondez par 'o' ou par 'n' : \")\n", "print 'reponse',reponse"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Ici encore, question de go\u00fbt. "]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 20, "lines": ["Un autre exemple"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Un autre exemple de cas o\u00f9 l'instruction `while` n'est pas facilement remplac\u00e9e par une boucle `for` nous est donn\u00e9 avec l'algorithme d'Euclide pour calculer le PGCD de deux entiers. Et il n'est pas facile non plus de se passer du `break` dans ce cas-l\u00e0:"]}, {"block": 10, "type": "code", "linesLength": 12, "startIndex": 22, "lines": ["def pgcd (a,b):\n", "    \"le pgcd de a et b par l'algorithme d'Euclide\"\n", "    # on suppose que a >= b, il faut inverser sinon\n", "    if b > a : \n", "        a,b = b,a\n", "    while True:\n", "        r = a % b\n", "        if r == 0:\n", "            return b\n", "        a,b = b,r\n", "\n", "pgcd (1944, 18432)        "]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 34, "lines": ["Rappel sur les conditions"]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 35, "lines": ["On peut utiliser dans une boucle `while` toutes les formes de conditions que l'on avait vues \u00e0 l'occasion de l'instruction `if`.\n", "\n", "Dans le contexte de la boucle `while` on comprend mieux, toutefois, pourquoi le langage autorise d'\u00e9crire des conditions dont le r\u00e9sultat n'est **pas n\u00e9cessairement un bool\u00e9en**. Voyons cela sur un exemple simple:"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 38, "lines": ["# une autre fa\u00e7on de parcourir une liste\n", "liste = [ 'a', 'b', 'c' ]\n", "while liste:\n", "    element = liste.pop()\n", "    print element"]}, {"block": 14, "type": "markdown", "linesLength": 7, "startIndex": 43, "lines": ["Il peut \u00eatre int\u00e9ressant de comparer ce code avec ce qu'on obtiendrait avec une simple boucle `for`.\n", "\n", " * Une premi\u00e8re diff\u00e9rence est qu'avec `while` on pourrait facilement traiter les \u00e9l\u00e9ments de la liste deux par deux si cela faisait du sens dans le contexte.\n", "\n", " * On voit aussi tout de suite que les \u00e9l\u00e9ments sont trait\u00e9s en sens inverse; il faut savoir qu'avec le type `list` l'op\u00e9ration `pop()` est tr\u00e8s efficace - elle fonctionne en temps constant. Aussi la boucle `while` peut-\u00eatre plus efficace, pour traiter une liste en sens inverse.\n", " \n", " * Mais contrairement \u00e0 une boucel `for` cette forme est intrusive, en ce sens que bien s\u00fbr la liste est modifi\u00e9e; alors que, on le rappelle, \u00e0 l'int\u00e9rieur d'une boucle `for` on ne **peut pas** modifier l'objet de la boucle."]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 50, "lines": ["Une curiosit\u00e9 : la clause `else`"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["Signalons enfin que la boucle `while` - au m\u00eame titre d'ailleurs que la boucle `for`, peut \u00eatre assortie [d'une clause `else`](https://docs.python.org/2/reference/compound_stmts.html#the-while-statement), qui est ex\u00e9cut\u00e9e \u00e0 la fin de la boucle, sauf dans le cas d'une sortie avec `break`."]}, {"block": 17, "type": "code", "linesLength": 17, "startIndex": 52, "lines": ["# Un exemple de `else` dans un while\n", "\n", "def scan (liste, break_mode):\n", "    # si break_mode est vrai on va faire un break apr\u00e8s le premier \u00e9l\u00e9ment de la liste\n", "    message = \"avec\" if break_mode else \"sans\"\n", "    print 20*'-',\"Scan {} break\".format(message)\n", "    while liste:\n", "        print liste.pop()\n", "        if break_mode:\n", "            break\n", "    else:\n", "        print 'else...'\n", "\n", "        \n", "scan(['a'], False)\n", "\n", "scan(['a'], True)\n"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["Ce trait est toutefois **tr\u00e8s rarement** utilis\u00e9."]}]