[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Passage d'arguments"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# pour charger l'exercice\n", "from corrections.exo_distance import exo_distance"]}, {"block": 4, "type": "markdown", "linesLength": 6, "startIndex": 9, "lines": ["Vous devez \u00e9crire une fonction `distance` qui prend un nombre quelconque d'arguments num\u00e9riques non complexes, et qui retourne la racine carr\u00e9e de la somme des carr\u00e9s des arguments. \n", "\n", "Plus pr\u00e9cis\u00e9ment\u00a0:\n", "$distance$ ($x_1$, ..., $x_n$) = $\\sqrt{\\sum x_i^2}$\n", "\n", "Par convention on fixe que $ distance() = 0 $"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["# des exemples\n", "exo_distance.example()"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 17, "lines": ["# ATTENTION vous devez aussi d\u00e9finir les arguments de la fonction\n", "def distance(votre, signature):\n", "    return \"votre code\""]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["# la correction\n", "exo_distance.correction(distance)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["## Exercice - niveau interm\u00e9diaire"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["# Pour charger l'exercice\n", "from corrections.exo_numbers import exo_numbers"]}, {"block": 10, "type": "markdown", "linesLength": 7, "startIndex": 25, "lines": ["On vous demande d'\u00e9crire une fonction `numbers` \n", "* qui prend en argument un nombre quelconque d'entiers,\n", "* et qui retourne un tuple contenant\n", " * la somme\n", " * le minimum\n", " * le maximum\n", "de ses arguments."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Si aucun argument n'est pass\u00e9, `numbers` doit renvoyer un tuple contenant 3 entiers `0`."]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 33, "lines": ["# par exemple\n", "exo_numbers.example()"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["En guise d'indice, je vous invite \u00e0 regarder les fonctions *built-in* [`sum`](https://docs.python.org/3/library/functions.html#sum), [`min`](https://docs.python.org/3/library/functions.html#min) et [`max`](https://docs.python.org/3/library/functions.html#max). "]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["# vous devez d\u00e9finir votre propre signature\n", "def numbers(votre, signature):\n", "    \"<votre_code>\""]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["# pour v\u00e9rifier votre code\n", "exo_numbers.correction(numbers)"]}]