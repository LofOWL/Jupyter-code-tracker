[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Construction de liste par compr\u00e9hension"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## R\u00e9vision - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Ce m\u00e9canisme tr\u00e8s pratique permet de construire simplement une liste \u00e0 partir d'une autre (ou de **tout autre type it\u00e9rable** en r\u00e9alit\u00e9, mais nous y viendrons).\n", "\n", "Pour l'introduire en deux mots, disons que la compr\u00e9hension de liste est \u00e0 l'instruction `for` ce que l'expression conditionnelle est \u00e0 l'instruction  `if`, c'est-\u00e0-dire qu'il s'agit d'une **expression \u00e0 part enti\u00e8re**."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["### Cas le plus simple"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Voyons tout de suite un exemple\u00a0:"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 12, "lines": ["depart = (-5, -3, 0, 3, 5, 10)\n", "arrivee = [x**2 for x in depart]\n", "arrivee"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Le r\u00e9sultat de cette expression est donc une liste, dont les \u00e9l\u00e9ments sont les r\u00e9sultats de l'expression `x**2` pour `x` prenant toutes les valeurs de `depart`."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["**Remarque**\u00a0: si on prend un point de vue un peu plus math\u00e9matique, ceci revient donc \u00e0 appliquer une certaine fonction (ici $x \\rightarrow x^2$) \u00e0 une collection de valeurs, et \u00e0 retourner la liste des r\u00e9sultats. Dans les langages fonctionnels, cette op\u00e9ration est connue sous le nom de `map`, comme on l'a vu dans la s\u00e9quence pr\u00e9c\u00e9dente."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["##### Digression"]}, {"block": 10, "type": "code", "linesLength": 5, "startIndex": 18, "lines": ["# profitons de cette occasion pour voir \n", "# comment tracer une courbe avec matplotlib\n", "%matplotlib inline\n", "import matplotlib.pyplot as plt\n", "plt.ion()"]}, {"block": 11, "type": "code", "linesLength": 4, "startIndex": 23, "lines": ["# si on met le d\u00e9part et l'arriv\u00e9e \n", "# en abscisse et en ordonn\u00e9e, on trace\n", "# une version tronqu\u00e9e de la courbe de f: x -> x**2\n", "plt.plot(depart, arrivee);"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["### Restriction \u00e0 certains \u00e9l\u00e9ments"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["Il est possible \u00e9galement de ne prendre en compte que certains des \u00e9l\u00e9ments de la liste de d\u00e9part, comme ceci\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["[x**2 for x in depart if x%2 == 0]"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["qui cette fois ne contient que les carr\u00e9s des \u00e9l\u00e9ments pairs de `depart`. "]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["**Remarque**\u00a0: pour prolonger la remarque pr\u00e9c\u00e9dente, cette op\u00e9ration s'appelle fr\u00e9quemment `filter` dans les langages de programmation."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["### Autres types"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["On peut fabriquer une compr\u00e9hension \u00e0 partir de tout objet it\u00e9rable, pas forc\u00e9ment une liste, mais le r\u00e9sultat est toujours une liste, comme on le voit sur ces quelques exemples\u00a0:"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["[ord(x) for x in 'abc']"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["[chr(x) for x in (97, 98, 99)]"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["### Autres types (2)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["On peut \u00e9galement construire par compr\u00e9hension des dictionnaires et des ensembles\u00a0:"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["d = {x: ord(x) for x in 'abc'}\n", "d"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["e = {x**2 for x in (97, 98, 99) if x %2 == 0}\n", "e"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["### Pour en savoir plus"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["Voyez [la section sur les compr\u00e9hensions de liste](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) dans la documentation python."]}]