[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Les fichiers"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Voici quelques utilisations habituelles du type `file` en python"]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Avec un *context manager*"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 4, "lines": ["Nous avons vu dans la vid\u00e9o les m\u00e9canismes de base sur les fichiers. Nous avons vu notamment qu'il est important de bien fermer un fichier apr\u00e8s usage.\n", "\n", "Dans la pratique, il est recommand\u00e9 de **toujours** utiliser l'instruction `with`, que nous approfondirons en semaine 6. Dans l'imm\u00e9diat notez qu'au lieu de faire"]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 7, "lines": ["# la m\u00e9thode \"de bas niveau\"\n", "sortie = open (\"s1.txt\",\"w\")\n", "for i in range (2):\n", "    sortie.write (\"{}\\n\".format(i))\n", "sortie.close()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["On fera plut\u00f4t"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 13, "lines": ["# avec un context manager: on garantit la fermeture du fichier\n", "with open (\"s1.txt\",\"w\") as sortie:\n", "    for i in range (2):\n", "        sortie.write (\"{}\\n\".format(i))"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Depuis son introduction dans python-2.5, cette forme est devenue tr\u00e8s populaire car elle pr\u00e9sente le gros avantage de **garantir** que le fichier sera **bien ferm\u00e9**, et cela m\u00eame si une exception devait \u00eatre lev\u00e9e \u00e0 l'int\u00e9rieur du bloc `with`. Et marginalement le code est plus lisible dans cette deuxi\u00e8me forme."]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 18, "lines": ["Les modes d'ouverture"]}, {"block": 10, "type": "markdown", "linesLength": 4, "startIndex": 19, "lines": ["Les modes d'ouverture les plus utilis\u00e9s sont\n", " * `'r'` (la cha\u00eene contenant l'unique caract\u00e8re `r`) pour ouvrir un fichier en lecture seulement;\n", " * `'w'` en \u00e9criture seulement; le contenu pr\u00e9c\u00e9dent du fichier, s'il existait, est perdu;\n", " * `'a'` en \u00e9criture seulement, mais pour ajouter du contenu \u00e0 la fin de fichier;\n"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Voici par exemple comment on pourrait ajouter du texte dans le fichier \"test.txt\"qui devrait, \u00e0 ce stade contenir les 5 premiers entiers"]}, {"block": 12, "type": "code", "linesLength": 11, "startIndex": 24, "lines": ["# on ouvre le fichier en mode 'a' comme append - ou ajouter\n", "with open (\"s1.txt\",\"a\") as sortie:\n", "    for i in range (100,102):\n", "        sortie.write (\"{}\\n\".format(i))\n", "\n", "# maintenant on regarde ce que contient le fichier\n", "with open (\"s1.txt\") as entree: # remarquez que sans 'mode', on ouvre en lecture seule\n", "    for line in entree:\n", "        # comme line contient deja la fin de ligne\n", "        # on ajoute une virgule pour eviter une deuxieme fin de ligne\n", "        print line,               "]}, {"block": 13, "type": "markdown", "linesLength": 6, "startIndex": 35, "lines": ["Il existe de nombreuses variantes pour par exemple\n", " * ouvrir le fichier en lecture et en \u00e9criture,\n", " * ouvrir le fichier en mode binaire,\n", " * utiliser le mode dit *universal newlines* qui permet de s'affranchir des diff\u00e9rences de fin de ligne entre les fichiers produits sur, d'une part linux et MacOS, et d'autre part Windows.\n", "\n", "Ces variantes sont d\u00e9crites dans [la section sur la fonction built-in `open`](https://docs.python.org/2/library/functions.html#open) dans la documentation python."]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 41, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 42, "lines": ["Comment lire un contenu"]}, {"block": 16, "type": "heading", "linesLength": 1, "startIndex": 43, "lines": ["Haut niveau"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Les fichiers textuels classiques se lisent en g\u00e9n\u00e9ral, comme on vient d'ailleurs de le faire, avec **une simple boucle `for` sur l'objet fichier**. "]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["On trouve aussi, dans du code plus ancien, l'appel \u00e0 la m\u00e9thode **`readlines`** qui retourne une liste de lignes."]}, {"block": 19, "type": "code", "linesLength": 3, "startIndex": 46, "lines": ["with open (\"s1.txt\") as entree:\n", "    for line in entree.readlines():\n", "        print line,"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 49, "lines": ["Remarquez toutefois que ceci implique de charger l'**int\u00e9gralit\u00e9** du contenu du fichier en m\u00e9moire. La boucle `for` est donc de loin pr\u00e9f\u00e9rable, surtout si le fichier \u00e0 lire est susceptible d'\u00eatre volumineux. \n", "\n", "Vous aurez d'ailleurs remarqu\u00e9 la relation avec la discussion que nous avons eue en fin de semaine derni\u00e8re au sujet de la performance des it\u00e9rateurs."]}, {"block": 21, "type": "heading", "linesLength": 1, "startIndex": 52, "lines": ["Bas niveau"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["Signalons enfin la m\u00e9thode de bas niveau **`read`** qui permet de lire tout un fichier d'un coup"]}, {"block": 23, "type": "code", "linesLength": 4, "startIndex": 54, "lines": ["# sans argument la m\u00e9thode read() lit tout le fichier\n", "with open (\"s1.txt\") as entree:\n", "    contenu = entree.read()\n", "print \"taille = {} -  {} occurrences de 0\".format(len(contenu),contenu.count('0'))"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["On encore morceau par morceau; nous allons l'illustrer en lisant les 8 premiers caract\u00e8res du fichier, quatre par quatre (soit deux lectures):"]}, {"block": 25, "type": "code", "linesLength": 4, "startIndex": 59, "lines": ["# a des fins pedagogiques uniquement\n", "with open (\"s1.txt\") as entree:\n", "    for i in xrange(2):\n", "        print \"Lecture de >>{}<<\".format(entree.read(4))\n"]}, {"block": 26, "type": "heading", "linesLength": 1, "startIndex": 63, "lines": ["La m\u00e9thode `flush`"]}, {"block": 27, "type": "markdown", "linesLength": 3, "startIndex": 64, "lines": ["Les entr\u00e9es-sortie sur fichier sont bien souvent *bufferis\u00e9es* par le syst\u00e8me d'exploitation. Cela signifie qu'un appel \u00e0 `write` ne provoque pas forc\u00e9ment une \u00e9criture imm\u00e9diate, car pour des raisons de performance on attend d'avoir suffisamment de mati\u00e8re avant d'\u00e9crire sur le disque.\n", "\n", "Il y a des cas o\u00f9 ce comportement peut s'av\u00e9rer g\u00eanant, et o\u00f9 on a besoin d'\u00e9crire imm\u00e9diatement (et donc de vider le *buffer*). Pour cela il existe une m\u00e9thode sur les fichiers baptis\u00e9e `flush`."]}, {"block": 28, "type": "heading", "linesLength": 1, "startIndex": 67, "lines": ["Pour en savoir plus"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["Comme on le voit, le type `file` en python offre \u00e0 la fois des fonctions \u00e9volu\u00e9es, par exemple qui analysent le contenu ligne par ligne, et des fonctions de tr\u00e8s bas niveau. Pour une liste plus compl\u00e8te vous pouvez vous reportez \u00e9galement, quoi qu'elle date un peu, \u00e0 [la documentation de r\u00e9f\u00e9rence sur les objets `file`](https://docs.python.org/2.4/lib/bltin-file-objects.html)."]}]