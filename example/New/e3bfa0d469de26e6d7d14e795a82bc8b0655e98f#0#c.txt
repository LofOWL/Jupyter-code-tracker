[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 2, "startIndex": 5, "lines": ["\n", "# Op\u00e9ration avanc\u00e9es en pandas"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Introduction"]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 9, "lines": ["Pandas supporte des op\u00e9rations de manipulation des Series et DataFrame qui sont similaires dans l'esprit \u00e0 ce que l'on peut faire avec une base de donn\u00e9es et le langage SQL, mais de mani\u00e8re plus intuitive et expressive et beaucoup plus efficacement puisque les op\u00e9rations se d\u00e9roulent toutes en m\u00e9moire. \n", "\n", "Vous pouvez concat\u00e9ner (`concat`) des DataFrame, faire des jointures (`merge`), faire des regroupements (`groupby`) ou r\u00e9organiser les indexes (`pivot`).\n", "\n", "Nous allons dans la suite d\u00e9velopper ces diff\u00e9rentes techniques. "]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["### Concat\u00e9nations avec `concat`"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["`concat` est utilis\u00e9 pour concat\u00e9ner des Series ou des DataFrames. Regardons un exemple."]}, {"block": 7, "type": "code", "linesLength": 6, "startIndex": 16, "lines": ["import numpy as np\n", "import pandas as pd\n", "\n", "s1 = pd.Series([30, 35], index=['alice', 'bob'])\n", "s2 = pd.Series([32, 22, 29], index=['bill', 'alice', 'jo'])\n", "pd.concat([s1, s2])"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["On remarque, cependant, que par d\u00e9faut "]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Par d\u00e9faut, `concat` concat\u00e8ne les lignes, c'est-\u00e0-dire que `s2` sera sous `s1`, mais on peut changer ce comportement un utilisant l'argument `axis`."]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["pd.concat([s1, s2], axis=1)"]}, {"block": 11, "type": "code", "linesLength": 0, "startIndex": 25, "lines": []}]