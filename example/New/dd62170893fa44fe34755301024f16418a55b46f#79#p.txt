[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Compr\u00e9hensions"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercice - niveau basique"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 2, "lines": ["# pour charger l'exercice\n", "from corrections.w4s4_comprehensions import exo_aplatir"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Il vous est demand\u00e9 d'\u00e9crire une fonction `aplatir` qui prend *un unique* argument `l_conteneurs`, une liste (ou plus g\u00e9n\u00e9ralement un it\u00e9rable) de conteneurs, et qui retourne la liste de tous les \u00e9l\u00e9ments de tous les conteneurs."]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 5, "lines": ["# par exemple\n", "exo_aplatir.exemple()"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["def aplatir(conteneurs):\n", "    \"<votre_code>\""]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["# v\u00e9rifier votre code\n", "exo_aplatir.correction(aplatir)"]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 11, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 12, "lines": ["# chargement de l'exercice\n", "from corrections.w4s4_comprehensions import exo_alternat"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["\u00c0 pr\u00e9sent, on passe en argument deux conteneurs (deux it\u00e9rables) `c1` et `c2` de m\u00eame taille \u00e0 la fonction `alternat`, qui doit construire une liste contenant les \u00e9l\u00e9ments pris alternativement dans `c1` et dans `c2`."]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["# exemple\n", "exo_alternat.exemple()"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["def alternat(c1, c2):\n", "    \"<votre_code>\""]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["# pour v\u00e9rifier votre code\n", "exo_alternat.correction(alternat)"]}, {"block": 13, "type": "heading", "linesLength": 1, "startIndex": 21, "lines": ["Exercice - niveau interm\u00e9diaire"]}, {"block": 14, "type": "markdown", "linesLength": 5, "startIndex": 22, "lines": ["On se donne deux ensembles A et B de tuples de la forme\n", "\n", "    (entier, valeur)\n", "\n", "On vous demande d'\u00e9crire une fonction `intersect` qui retourne l'ensemble des objets `valeur` associ\u00e9s (dans A ou dans B) \u00e0 un entier qui soit pr\u00e9sent dans (un tuple de) A *et* dans (un tuple de) B."]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 27, "lines": ["# un exemple\n", "from corrections.w4s4_comprehensions import exo_intersect\n", "exo_intersect.exemple()"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 30, "lines": ["def intersect(A, B):\n", "    \"<votre_code>\""]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 32, "lines": ["# pour v\u00e9rifier votre code\n", "exo_intersect.correction(intersect)"]}]