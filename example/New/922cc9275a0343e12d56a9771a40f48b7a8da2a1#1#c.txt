[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Un pi\u00e8ge courant"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["N'utilisez pas d'objet mutable pour les valeurs par d\u00e9faut"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["En python il existe un pi\u00e8ge dans lequel il est tr\u00e8s facile de tomber. Aussi si vous voulez aller \u00e0 l'essentiel: **n'utilisez pas d'objet mutable pour les valeurs par d\u00e9faut**.\n", "\n", "Si vous avez besoin d'\u00e9crire une fonction qui prend en argument par d\u00e9faut une liste ou un dictionnaire vide, voici comment faire"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 6, "lines": ["# ne faites SURTOUT PAS \u00e7a\n", "def ne_faites_pas_ca(options={}):\n", "    \"faire quelque chose\""]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 9, "lines": ["# mais plutot comme ceci\n", "def mais_plutot_ceci(options=None):\n", "    if options is None: \n", "        options = {}\n", "    \"faire quelque chose\""]}, {"block": 6, "type": "heading", "linesLength": 1, "startIndex": 14, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 7, "type": "heading", "linesLength": 1, "startIndex": 15, "lines": ["Que se passe-t-il si on le fait ?"]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 16, "lines": ["Pour exhiber l'exemple le plus simple possible, prenons le cas d'une fonction qui calcule une valeur - ici un entier al\u00e9atoire entre 0 et 10 -, et l'ajoute \u00e0 une liste pass\u00e9e par l'appelant. \n", "\n", "Et pour rendre la vie de l'appelant plus facile, on se dit qu'il peut \u00eatre utile de faire en sorte que si l'appelant n'a pas de liste sous la main, on va cr\u00e9er pour lui une liste vide. Et pour \u00e7a on fait"]}, {"block": 9, "type": "code", "linesLength": 6, "startIndex": 19, "lines": ["import random\n", "# l'intention ici est: si l'appelant ne fournit pas \n", "# la liste en entr\u00e9e on cr\u00e9e pour lui une liste vide\n", "def ajouter_un_aleatoire(resultats=[]):\n", "    resultats.append(random.randint(0,10))\n", "    return resultats"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Si on appelle cette fonction une premi\u00e8re fois, tout semble bien aller"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["ajouter_un_aleatoire()"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Sauf que, si on appelle la fonction une deuxi\u00e8me fois, on a une surprise"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["ajouter_un_aleatoire()"]}, {"block": 14, "type": "heading", "linesLength": 1, "startIndex": 29, "lines": ["Pourquoi ?"]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 30, "lines": ["Le probl\u00e8me ici est qu'une valeur par d\u00e9faut - ici l'expression `[]` - est \u00e9valu\u00e9e **une fois** au moment de la **d\u00e9finition** de la fonction. \n", "\n", "Toutes les fois o\u00f9 la fonction est appel\u00e9e avec cet argument manquant, on va utiliser le m\u00eame objet, qui la premi\u00e8re fois est bien une liste vide, mais qui se fait modifier par le premier appel. \n", "\n", "Si bien que la deuxi\u00e8me fois on r\u00e9utilise la m\u00eame liste **qui n'est plus vide**. Pour aller plus loin, vous pouvez regarder la documentation python sur [ce probl\u00e8me](https://docs.python.org/2/faq/programming.html#why-are-default-values-shared-between-objects)."]}]