[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les instructions `+=` et autres revisit\u00e9es"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous avons vu en deuxi\u00e8me semaine (S\u00e9quence \"Les types num\u00e9riques\") une premi\u00e8re introduction aux instructions `+=` et ses d\u00e9riv\u00e9es comme `*=`, `**=`, etc."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Ces constructions ont une d\u00e9finition \u00e0 g\u00e9om\u00e9trie variable"]}, {"block": 5, "type": "markdown", "linesLength": 5, "startIndex": 5, "lines": ["En C quand on utilise `+=` (ou encore `++`) on modifie la m\u00e9moire en place - historiquement, cet op\u00e9rateur permettait au programmeur d'aider \u00e0 l'optimisation du code pour utiliser les instructions assembleur idoines.\n", "\n", "Ces constructions en python s'inspirent clairement de C, aussi dans l'esprit ces constructions devraient fonctionner en **modifiant** l'objet r\u00e9f\u00e9renc\u00e9 par la variable. \n", "\n", "Mais les types num\u00e9riques en python ne sont **pas mutables**, alors que les listes le sont. Du coup le comportement de `+=` est **diff\u00e9rent** selon qu'on l'utilise sur un nombre ou sur une liste, ou plus g\u00e9n\u00e9ralement selon qu'on l'invoque sur un type mutable ou non. Voyons cela sur des exemples tr\u00e8s simples."]}, {"block": 6, "type": "code", "linesLength": 5, "startIndex": 10, "lines": ["# Premier exemple avec un entier\n", "\n", "# on commence avec une r\u00e9f\u00e9rence partag\u00e9e\n", "a = b = 3\n", "a is b"]}, {"block": 7, "type": "code", "linesLength": 9, "startIndex": 15, "lines": ["# on utilise += sur une des deux variables\n", "a += 1\n", "\n", "# ceci n'a pas modifi\u00e9 b\n", "# c'est normal, l'entier n'est pas mutable\n", "\n", "print(a)\n", "print(b)\n", "print(a is b)"]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 24, "lines": ["# Deuxi\u00e8me exemple, cette fois avec une liste\n", "\n", "# la m\u00eame r\u00e9f\u00e9rence partag\u00e9e\n", "a = b = []\n", "a is b"]}, {"block": 9, "type": "code", "linesLength": 8, "startIndex": 29, "lines": ["# pareil, on fait += sur une des variables\n", "a += [1]\n", "\n", "# cette fois on a modifi\u00e9 a et b\n", "# car += a pu modifier la liste en place\n", "print(a)\n", "print(b)\n", "print(a is b)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Vous voyez donc que la s\u00e9mantique de `+=` (c'est bien entendu le cas pour toutes les autres formes d'instructions qui combinent l'affectation avec un op\u00e9rateur) **est diff\u00e9rente** suivant que l'objet r\u00e9f\u00e9renc\u00e9 par le terme de gauche est **mutable ou immuable**."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Pour cette raison, c'est l\u00e0 une opinion personnelle, cette famille d'instructions n'est pas le trait le plus r\u00e9ussi dans le langage, et je ne recommande pas de l'utiliser."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["### Pr\u00e9cision sur la d\u00e9finition de `+=`"]}, {"block": 13, "type": "markdown", "linesLength": 7, "startIndex": 40, "lines": ["Nous avions dit en premi\u00e8re semaine, et en premi\u00e8re approximation, que \n", "\n", "    x += y\n", "    \n", "\u00e9tait \u00e9quivalent \u00e0 \n", "\n", "    x = x + y"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["Au vu de ce qui pr\u00e9c\u00e8de, on voit que ce n'est **pas tout \u00e0 fait exact**, puisque&nbsp;:"]}, {"block": 15, "type": "code", "linesLength": 8, "startIndex": 48, "lines": ["# si on fait x += y sur une liste \n", "# on fait un effet de bord sur la liste\n", "# comme on vient de le voir\n", "\n", "a = []\n", "print(\"avant\", id(a))\n", "a += [1]\n", "print(\"apr\u00e8s\", id(a))"]}, {"block": 16, "type": "code", "linesLength": 7, "startIndex": 56, "lines": ["# alors que si on fait x = x + y sur une liste\n", "# on cr\u00e9e un nouvel objet liste\n", "\n", "a = []\n", "print(\"avant\", id(a))\n", "a = a + [1]\n", "print(\"apr\u00e8s\", id(a))"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 63, "lines": ["Vous voyez donc que vis-\u00e0-vis des r\u00e9f\u00e9rences partag\u00e9es, ces deux fa\u00e7ons de faire m\u00e8nent \u00e0 un r\u00e9sultat diff\u00e9rent. "]}]