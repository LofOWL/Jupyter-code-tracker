[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les fonctions `globals` et `locals`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Un exemple"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 4, "lines": ["python fournit un acc\u00e8s \u00e0 la liste des noms et valeurs des variables visibles \u00e0 cet endroit du code. Dans le jargon des langages de programmation on appelle ceci **l'environnement**.\n", "\n", "Cela est fait gr\u00e2ce aux fonctions *builtin* `globals` et `locals`, que nous allons commencer par essayer sur quelques exemples. Nous avons pour cela \u00e9crit un module d\u00e9di\u00e9:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["import env_locals_globals"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 8, "lines": ["-----\n", "\n", "Dont voici le code"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["from modtools import show_module\n", "show_module(env_locals_globals)"]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 13, "lines": ["-----\n", "\n", "et voici ce qu'on obtient lorsqu'on appelle "]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["env_locals_globals.temoin(10)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["### Interpr\u00e9tation"]}, {"block": 11, "type": "markdown", "linesLength": 5, "startIndex": 18, "lines": ["Que nous montre cet exemple ?\n", "\n", "D'une part la fonction **`globals`** nous donne la liste des symboles d\u00e9finis au niveau de **l'espace de noms du module**. Il s'agit \u00e9videmment du module dans lequel est d\u00e9finie la fonction, pas celui dans lequel elle est appel\u00e9e. Vous remarquerez que ceci englobe **tous** les symboles du modules et non pas seulement ceux d\u00e9finis avant `temoin`, c'est-\u00e0-dire la variable `globale`, les deux fonctions, et la classe `Foo`. \n", "\n", "D'autre part **`locals`** nous donne les variables locales qui sont accessibles **\u00e0 cet endroit du code**, comme le montre ce second exemple qui se concentre sur `locals` \u00e0 diff\u00e9rents points d'une m\u00eame fonction. "]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 23, "lines": ["import env_locals\n", "\n", "# le code de ce module \n", "show_module(env_locals)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["env_locals.temoin(10)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["### Usage pour le formatage de cha\u00eenes"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Ces deux fonctions ne sont pas d'une utilisation tr\u00e8s fr\u00e9quente. Elles peuvent cependant \u00eatre utiles dans le contexte du formatage de cha\u00eenes, comme on peut le voir dans les deux exemples ci-dessous."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["##### Avec `format`"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["On peut utiliser `format` qui s'attend \u00e0 quelque chose comme "]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["\"{nom}\".format(nom=\"Dupont\")"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["que l'on peut obtenir de mani\u00e8re \u00e9quivalente, avec le passage d'arguments en `**`, comme on l'a vu en fin de semaine pass\u00e9e:"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["\"{nom}\".format(**{'nom': 'Dupont'})"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["En versant la fonction `locals` dans cette formule on obtient une forme relativement \u00e9l\u00e9gante"]}, {"block": 22, "type": "code", "linesLength": 4, "startIndex": 36, "lines": ["def format_et_locals(nom, prenom, civilite, telephone):\n", "    return \"{civilite} {prenom} {nom} : Poste {telephone}\".format(**locals())\n", "\n", "format_et_locals('Dupont', 'Jean', 'Mr', '7748')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["##### Avec l'op\u00e9rateur `%`"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["De mani\u00e8re similaire, avec l'op\u00e9rateur `%` - dont nous rappelons qu'il est obsol\u00e8te - on peut \u00e9crire"]}, {"block": 25, "type": "code", "linesLength": 4, "startIndex": 42, "lines": ["def pourcent_et_locals(nom, prenom, civilite, telephone):\n", "    return \"%(civilite)s %(prenom)s %(nom)s : Poste %(telephone)s\"%locals()\n", "\n", "pourcent_et_locals('Dupont', 'Jean', 'Mr', '7748')"]}]