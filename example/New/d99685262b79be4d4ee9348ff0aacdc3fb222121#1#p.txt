[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Affectations & Op\u00e9rations"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["Il existe en python toute une famille d'op\u00e9rateurs d\u00e9riv\u00e9s de l'affectation, qui permettent de faire en une fois une op\u00e9ration et une affectation. En voici quelques exemples."]}, {"block": 3, "type": "heading", "linesLength": 1, "startIndex": 3, "lines": ["Incr\u00e9mentation"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["On peut facilement augmenter la valeur d'une variable num\u00e9rique comme ceci"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 5, "lines": ["entier = 10\n", "\n", "entier += 2\n", "print 'entier',entier"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Comme on le devine peut-\u00eatre, ceci serait \u00e9quivalent \u00e0 "]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["entier = entier + 2\n", "print 'entier',entier"]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 12, "lines": ["Autres op\u00e9rateurs courants"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Cette forme, qui combine op\u00e9ration sur une variable, et r\u00e9affectation du r\u00e9sultat \u00e0 la m\u00eame variable, est disponible avec tous les op\u00e9rateurs courants"]}, {"block": 10, "type": "code", "linesLength": 6, "startIndex": 14, "lines": ["entier -= 4\n", "print 'apr\u00e8s d\u00e9cr\u00e9ment',entier\n", "entier *= 2\n", "print 'apr\u00e8s doublement',entier\n", "entier /= 2\n", "print 'mis \u00e0 moiti\u00e9',entier\n"]}, {"block": 11, "type": "heading", "linesLength": 1, "startIndex": 20, "lines": ["Types non num\u00e9riques"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["En r\u00e9alit\u00e9 cette construction est disponible sur tous les types qui supportent l'op\u00e9rateur en question. Par exemple les listes qui peuvent \u00eatre additionn\u00e9es entre elles:"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 22, "lines": ["liste = range(3)\n", "print 'liste',liste\n", "\n", "liste += [ 'a', 'b']\n", "print 'apr\u00e9s ajout',liste"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Beaucoup de types supportent l'op\u00e9rateur +, qui est sans doute de loin celui qui est le plus utilis\u00e9 avec cette construction."]}, {"block": 15, "type": "heading", "linesLength": 1, "startIndex": 28, "lines": ["Op\u00e9rateurs plus abscons"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Signalons enfin qu'on trouve cette construction aussi avec d'autres op\u00e9rateurs moins fr\u00e9quents, par exemple"]}, {"block": 17, "type": "code", "linesLength": 8, "startIndex": 30, "lines": ["entier = 2\n", "print 'entier:',entier\n", "entier **= 10\n", "print '\u00e0 la puissance dix:',entier\n", "entier %= 5\n", "print 'modulo 5:',entier\n", "entier <<= 2\n", "print 'double d\u00e9calage gauche:',entier"]}]