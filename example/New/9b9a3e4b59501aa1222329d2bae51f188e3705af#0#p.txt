[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Dictionnaires et listes"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["from corrections.exo_graph_dict import exo_graph_dict"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["On veut impl\u00e9menter un petit mod\u00e8le de graphes. Comme on a les donn\u00e9es dans des fichiers, on veut analyser des fichiers d'entr\u00e9e qui ressemblent \u00e0 ceci\u00a0:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["!cat data/graph1.txt"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 10, "lines": ["qui signifierait\u00a0:\n", "* un graphe \u00e0 3 sommets *s1*, *s2* et *s3*\u00a0;\n", "* et 4 ar\u00eates\u00a0: une entre *s1* et *s2* de longueur 10; une entre *s2* et *s3* de longueur 10, etc\u2026"]}, {"block": 7, "type": "markdown", "linesLength": 5, "startIndex": 13, "lines": ["On vous demande d'\u00e9crire une fonction qui lit un tel fichier texte, et construit (et retourne) un dictionnaire Python qui repr\u00e9sente ce graphe.\n", "\n", "Dans cet exercice on choisit\u00a0:\n", "* de mod\u00e9liser le graphe comme un dictionnaire index\u00e9 sur les (noms de) sommets\u00a0;\n", "* et chaque valeur est une liste de tuples de la forme (*suivant*, *longueur*), dans l'ordre d'apparition dans le fichier d'entr\u00e9e."]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["# voici ce qu'on obtiendrait par exemple avec les donn\u00e9es ci-dessus\n", "exo_graph_dict.example()"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["**Notes**\n", "* Vous remarquerez que l'exemple ci-dessus retourne un dictionnaire standard; une solution qui utiliserait `defaultdict` est acceptable \u00e9galement;\n", "* Notez bien \u00e9galement que dans le r\u00e9sultat, la longueur d'un arc est attendue comme un **`int`**."]}, {"block": 10, "type": "code", "linesLength": 5, "startIndex": 23, "lines": ["# n'oubliez pas d'importer si n\u00e9cessaire\n", "\n", "# \u00e0 vous de jouer\n", "def graph_dict(filename):\n", "    \"votre code\""]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["exo_graph_dict.correction(graph_dict)"]}]