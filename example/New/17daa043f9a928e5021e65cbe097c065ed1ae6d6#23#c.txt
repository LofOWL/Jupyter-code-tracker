[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# La notion de package"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Dans ce compl\u00e9ment, nous approfondissons la notion de module, qui a \u00e9t\u00e9 introduite dans les vid\u00e9os, et nous d\u00e9crivons la notion de *package* qui permet de cr\u00e9er des biblioth\u00e8ques plus structur\u00e9es qu'avec un simple module."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Pour ce notebook nous aurons besoin de deux utilitaires pour voir le code correspondant aux modules et packages que nous manipulons\u00a0:"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["from modtools import show_module"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["### Rappel sur les modules"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["Nous avons vu dans la vid\u00e9o qu'on peut charger une biblioth\u00e8que, lorsqu'elle se pr\u00e9sente sous la forme d'un seul fichier source, au travers d'un objet python de type **module**. "]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Chargeons un module \"jouet\"\u00a0:"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["import module_simple"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Voyons \u00e0 quoi ressemble ce module\u00a0:"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["show_module(module_simple)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["On a bien compris maintenant que le module joue le r\u00f4le d'**espace de nom**, dans le sens o\u00f9\u00a0:"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 17, "lines": ["# on peut d\u00e9finir sans risque une variable globale 'spam'\n", "spam = 'eggs'\n", "print(\"spam globale\", spam)"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["# qui est ind\u00e9pendante de celle d\u00e9finie dans le module\n", "print(\"spam du module\", module_simple.spam)"]}, {"block": 15, "type": "markdown", "linesLength": 4, "startIndex": 22, "lines": ["Pour r\u00e9sumer, un module est donc un objet python qui correspond \u00e0 la fois \u00e0\u00a0:\n", "\n", "* un (seul) **fichier** sur le disque\u00a0;\n", "* et un **espace de nom** pour les variables du programme."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### La notion de package"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Lorsqu'il s'agit d'impl\u00e9menter une tr\u00e8s grosse biblioth\u00e8que, il n'est pas concevable de tout concentrer en un seul fichier. C'est l\u00e0 qu'intervient la notion de **package**, qui est un peu aux **r\u00e9pertoires** ce que que le **module** est aux **fichiers**."]}, {"block": 18, "type": "markdown", "linesLength": 7, "startIndex": 28, "lines": ["Nous allons illustrer ceci en cr\u00e9ant un package qui contient un module. Pour cela nous cr\u00e9ons une arborescence de fichiers comme ceci\u00a0:\n", "\n", "```bash\n", "package_jouet/\n", "              __init__.py\n", "              module_jouet.py\n", "```"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["On importe un package exactement comme un module\u00a0:"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["import package_jouet"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Voici le contenu de ces deux fichiers\u00a0:"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["show_module(package_jouet)"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["show_module(package_jouet.module_jouet)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["Comme on le voit, le package porte **le m\u00eame nom** que le r\u00e9pertoire, c'est-\u00e0-dire que, de m\u00eame que le module `module_simple` correspond au fichier `module_simple.py`, le package python `package_jouet` corrrespond au r\u00e9pertoire `package_jouet`."]}, {"block": 25, "type": "markdown", "linesLength": 3, "startIndex": 41, "lines": ["Cependant, pour d\u00e9finir un package, il faut **obligatoirement** cr\u00e9er dans le r\u00e9pertoire (celui, donc, que l'on veut exposer \u00e0 python), un fichier nomm\u00e9 **`__init__.py`**.\n", "\n", "Comme on le voit, importer un package revient essentiellement \u00e0 charger le fichier `__init__.py` dans le r\u00e9pertoire correspondant. "]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["On a coutume de faire la diff\u00e9rence entre package et module, mais en termes d'impl\u00e9mentation les deux objets sont en fait de m\u00eame nature, ce sont des modules\u00a0:"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["type(package_jouet)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["type(package_jouet.module_jouet)"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["Ainsi, le package se pr\u00e9sente aussi comme un espace de nom, \u00e0 pr\u00e9sent on a une troisi\u00e8me variable `spam` qui est encore diff\u00e9rente des deux autres\u00a0:"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["package_jouet.spam"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["L'espace de noms du package permet de r\u00e9f\u00e9rencer les packages ou modules qu'il contient, comme on l'a vu ci-dessus, le package r\u00e9f\u00e9rence le module au travers de son attribut `module_jouet`\u00a0:"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["package_jouet.module_jouet"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["### \u00c0 quoi sert `__init__.py`\u00a0?"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["Vous remarquerez que le module `module_jouet` a \u00e9t\u00e9 charg\u00e9 au m\u00eame moment que `package_jouet`. Ce comportement **n'est pas implicite**. C'est nous qui avons explicitement choisi d'importer le module dans le package (dans `__init__.py`)."]}, {"block": 35, "type": "markdown", "linesLength": 3, "startIndex": 53, "lines": ["Cette technique correpond \u00e0 un usage assez fr\u00e9quent, o\u00f9 on veut exposer directement dans l'espace de nom du package des symboles qui sont en r\u00e9alit\u00e9 d\u00e9finis dans un module.\n", "\n", "Avec le code ci-dessus, apr\u00e8s avoir import\u00e9 `package_jouet`, nous pouvons utiliser"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["package_jouet.jouet"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["alors qu'en fait il faudrait \u00e9crire en toute rigueur"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["package_jouet.module_jouet.jouet"]}, {"block": 39, "type": "markdown", "linesLength": 4, "startIndex": 59, "lines": ["Mais cela impose alors \u00e0 l'utilisateur d'avoir une connaissance sur l'organisation interne de la biblioth\u00e8que, ce qui est consid\u00e9r\u00e9 comme une mauvaise pratique.\n", "\n", "D'abord, cela donne facilement des noms \u00e0 rallonge et du coup nuit \u00e0 la lisibilit\u00e9, ce n'est pas pratique.\n", "Mais surtout, que se passerait-il alors si le d\u00e9veloppeur du package voulait renommer des modules \u00e0 l'int\u00e9rieur de la biblioth\u00e8que\u00a0? On ne veut pas que ce genre de d\u00e9cision ait un impact sur les utilisateurs."]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 63, "lines": ["Au del\u00e0 de cet usage permettant de d\u00e9finir une sorte de raccourcis, le code plac\u00e9 dans `__init__.py` est charg\u00e9 d'initialiser la biblioth\u00e8que. Le fichier **peut \u00eatre vide** mais **doit absolument exister**. Nous vous mettons en garde car c'est une erreur fr\u00e9quente de l'oublier. Sans lui vous ne pourrez importer ni le package, ni les modules ou sous-packages qu'il contient."]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["\u00c0 nouveau c'est ce fichier qui est charg\u00e9 par l'interpr\u00e9teur python lorsque vous importez le package. Comme pour les modules, le fichier n'est charg\u00e9 qu'une seule fois par l'interpr\u00e9teur python, s'il rencontre plus tard \u00e0 nouveau le m\u00eame `import`, il l'ignore silencieusement."]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["### Pour en savoir plus"]}, {"block": 43, "type": "markdown", "linesLength": 2, "startIndex": 66, "lines": ["Voir la [section sur les modules](https://docs.python.org/3/tutorial/modules.html) dans la documentation python, et notamment la [section sur les packages](https://docs.python.org/3/tutorial/modules.html#packages).\n", "\n"]}]