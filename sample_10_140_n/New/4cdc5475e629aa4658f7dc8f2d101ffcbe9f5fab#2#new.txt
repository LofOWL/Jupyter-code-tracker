[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Random Forest Model interpretation"]}, {"block": 1, "type": "code", "linesLength": 2, "startIndex": 1, "lines": ["%load_ext autoreload\n", "%autoreload 2"]}, {"block": 2, "type": "code", "linesLength": 8, "startIndex": 3, "lines": ["%matplotlib inline\n", "\n", "from fastai.imports import *\n", "from fastai.structured import *\n", "from pandas_summary import DataFrameSummary\n", "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n", "from IPython.display import display\n", "from sklearn import metrics"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["set_plot_sizes(12,14,16)"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["## Load in our data from last lesson"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 13, "lines": ["PATH = \"data/bulldozers/\"\n", "\n", "df_raw = pd.read_feather('tmp/raw')\n", "df_trn, y_trn = proc_df(df_raw, 'SalePrice')"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 17, "lines": ["def split_vals(a,n): return a[:n], a[n:]\n", "n_valid = 12000\n", "n_trn = len(df_trn)-n_valid\n", "X_train, X_valid = split_vals(df_trn, n_trn)\n", "y_train, y_valid = split_vals(y_trn, n_trn)\n", "raw_train, raw_valid = split_vals(df_raw, n_trn)"]}, {"block": 7, "type": "code", "linesLength": 7, "startIndex": 23, "lines": ["def rmse(x,y): return math.sqrt(((x-y)**2).mean())\n", "\n", "def print_score(m):\n", "    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n", "                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n", "    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n", "    print(res)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["df_raw"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["# Confidence based on tree variance"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["For model interpretation, there's no need to use the full dataset on each tree - using a subset will be both faster, and also provide better interpretability (since an overfit model will not provide much variance across trees)."]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["set_rf_samples(50000)"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 34, "lines": ["m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["We saw how the model averages predictions across the trees to get an estimate - but how can we know the confidence of the estimate? One simple way is to use the standard deviation of predictions, instead of just the mean. This tells us the *relative* confidence of predictions - that is, for rows where the trees give very different results, you would want to be more cautious of using those results, compared to cases where they are more consistent. Using the same example as in the last lesson when we looked at bagging:"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["%time preds = np.stack([t.predict(X_valid) for t in m.estimators_])\n", "np.mean(preds[:,0]), np.std(preds[:,0])"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["When we use python to loop through trees like this, we're calculating each in series, which is slow! We can use parallel processing to speed things up:"]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 41, "lines": ["def get_preds(t): return t.predict(X_valid)\n", "%time preds = np.stack(parallel_trees(m, get_preds))\n", "np.mean(preds[:,0]), np.std(preds[:,0])"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["We can see that different trees are giving different estimates this this auction. In order to see how prediction confidence varies, we can add this into our dataset."]}, {"block": 18, "type": "code", "linesLength": 4, "startIndex": 45, "lines": ["x = raw_valid.copy()\n", "x['pred_std'] = np.std(preds, axis=0)\n", "x['pred'] = np.mean(preds, axis=0)\n", "x.Enclosure.value_counts().plot.barh();"]}, {"block": 19, "type": "code", "linesLength": 3, "startIndex": 49, "lines": ["flds = ['Enclosure', 'SalePrice', 'pred', 'pred_std']\n", "enc_summ = x[flds].groupby('Enclosure', as_index=False).mean()\n", "enc_summ"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["enc_summ = enc_summ[~pd.isnull(enc_summ.SalePrice)]\n", "enc_summ.plot('Enclosure', 'SalePrice', 'barh', xlim=(0,11));"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 54, "lines": ["enc_summ.plot('Enclosure', 'pred', 'barh', xerr='pred_std', alpha=0.6, xlim=(0,11));"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["*Question*: Why are the predictions nearly exactly right, but the error bars are quite wide?"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["raw_valid.ProductSize.value_counts().plot.barh();"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 57, "lines": ["flds = ['ProductSize', 'SalePrice', 'pred', 'pred_std']\n", "summ = x[flds].groupby(flds[0]).mean()\n", "summ"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["(summ.pred_std/summ.pred).sort_values(ascending=False)"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["# Feature importance"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["It's not normally enough to just to know that a model can make accurate predictions - we also want to know *how* it's making predictions. The most important way to see this is with *feature importance*."]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 63, "lines": ["fi = rf_feat_importance(m, df_trn); fi[:10]"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["fi.plot('cols', 'imp', figsize=(10,6), legend=False);"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 65, "lines": ["def plot_fi(fi): return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 66, "lines": ["plot_fi(fi[:30]);"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 67, "lines": ["to_keep = fi[fi.imp>0.005].cols; len(to_keep)"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 68, "lines": ["df_keep = df_trn[to_keep].copy()\n", "X_train, X_valid = split_vals(df_keep, n_trn)"]}, {"block": 34, "type": "code", "linesLength": 4, "startIndex": 70, "lines": ["m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5,\n", "                          n_jobs=-1, oob_score=True)\n", "m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 74, "lines": ["fi = rf_feat_importance(m, df_keep)\n", "plot_fi(fi);"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 76, "lines": ["## One-hot encoding"]}, {"block": 37, "type": "code", "linesLength": 6, "startIndex": 77, "lines": ["df_trn2, y_trn = proc_df(df_raw, 'SalePrice', max_n_cat=7)\n", "X_train, X_valid = split_vals(df_trn2, n_trn)\n", "\n", "m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.6, n_jobs=-1, oob_score=True)\n", "m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 38, "type": "code", "linesLength": 2, "startIndex": 83, "lines": ["fi = rf_feat_importance(m, df_trn2)\n", "plot_fi(fi[:25]);"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["# Removing redundant features"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["One thing that makes this harder to interpret is that there seem to be some variables with very similar meanings. Let's try to remove redundent features."]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 87, "lines": ["from scipy.cluster import hierarchy as hc"]}, {"block": 42, "type": "code", "linesLength": 6, "startIndex": 88, "lines": ["corr = np.round(scipy.stats.spearmanr(df_keep).correlation, 4)\n", "corr_condensed = hc.distance.squareform(1-corr)\n", "z = hc.linkage(corr_condensed, method='average')\n", "fig = plt.figure(figsize=(16,10))\n", "dendrogram = hc.dendrogram(z, labels=df_keep.columns, orientation='left', leaf_font_size=16)\n", "plt.show()"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["Let's try removing some of these related features to see if the model can be simplified without impacting the accuracy."]}, {"block": 44, "type": "code", "linesLength": 5, "startIndex": 95, "lines": ["def get_oob(df):\n", "    m = RandomForestRegressor(n_estimators=30, min_samples_leaf=5, max_features=0.6, n_jobs=-1, oob_score=True)\n", "    x, _ = split_vals(df, n_trn)\n", "    m.fit(x, y_train)\n", "    return m.oob_score_"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 100, "lines": ["Here's our baseline."]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["get_oob(df_keep)"]}, {"block": 47, "type": "markdown", "linesLength": 1, "startIndex": 102, "lines": ["Now we try removing each variable one at a time."]}, {"block": 48, "type": "code", "linesLength": 2, "startIndex": 103, "lines": ["for c in ('saleYear', 'saleElapsed', 'fiModelDesc', 'fiBaseModel', 'Grouser_Tracks', 'Coupler_System'):\n", "    print(c, get_oob(df_keep.drop(c, axis=1)))"]}, {"block": 49, "type": "markdown", "linesLength": 1, "startIndex": 105, "lines": ["It looks like we can try one from each group for removal. Let's see what that does."]}, {"block": 50, "type": "code", "linesLength": 2, "startIndex": 106, "lines": ["to_drop = ['saleYear', 'fiBaseModel', 'Grouser_Tracks']\n", "get_oob(df_keep.drop(to_drop, axis=1))"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 108, "lines": ["Looking good! Let's use this dataframe from here. We'll save the list of columns so we can reuse it later."]}, {"block": 52, "type": "code", "linesLength": 2, "startIndex": 109, "lines": ["df_keep.drop(to_drop, axis=1, inplace=True)\n", "X_train, X_valid = split_vals(df_keep, n_trn)"]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["np.save('tmp/keep_cols.npy', np.array(df_keep.columns))"]}, {"block": 54, "type": "code", "linesLength": 2, "startIndex": 112, "lines": ["keep_cols = np.load('tmp/keep_cols.npy')\n", "df_keep = df_trn[keep_cols]"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 114, "lines": ["And let's see how this model looks on the full dataset."]}, {"block": 56, "type": "code", "linesLength": 1, "startIndex": 115, "lines": ["reset_rf_samples()"]}, {"block": 57, "type": "code", "linesLength": 3, "startIndex": 116, "lines": ["m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 119, "lines": ["# Partial dependence"]}, {"block": 59, "type": "code", "linesLength": 2, "startIndex": 120, "lines": ["from pdpbox import pdp\n", "from plotnine import *"]}, {"block": 60, "type": "code", "linesLength": 1, "startIndex": 122, "lines": ["set_rf_samples(50000)"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 123, "lines": ["This next analysis will be a little easier if we use the 1-hot encoded categorical variables, so let's load them up again."]}, {"block": 62, "type": "code", "linesLength": 4, "startIndex": 124, "lines": ["df_trn2, y_trn = proc_df(df_raw, 'SalePrice', max_n_cat=7)\n", "X_train, X_valid = split_vals(df_trn2, n_trn)\n", "m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.6, n_jobs=-1)\n", "m.fit(X_train, y_train);"]}, {"block": 63, "type": "code", "linesLength": 1, "startIndex": 128, "lines": ["plot_fi(rf_feat_importance(m, df_trn2)[:10]);"]}, {"block": 64, "type": "code", "linesLength": 1, "startIndex": 129, "lines": ["df_raw.plot('YearMade', 'saleElapsed', 'scatter', alpha=0.01, figsize=(10,8));"]}, {"block": 65, "type": "code", "linesLength": 1, "startIndex": 130, "lines": ["x_all = get_sample(df_raw[df_raw.YearMade>1930], 500)"]}, {"block": 66, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["ggplot(x_all, aes('YearMade', 'SalePrice'))+stat_smooth(se=True, method='loess')"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["x = get_sample(X_train[X_train.YearMade>1930], 500)"]}, {"block": 68, "type": "code", "linesLength": 5, "startIndex": 133, "lines": ["def plot_pdp(feat, clusters=None, feat_name=None):\n", "    feat_name = feat_name or feat\n", "    p = pdp.pdp_isolate(m, x, feat)\n", "    return pdp.pdp_plot(p, feat_name, plot_lines=True, \n", "                        cluster=clusters is not None, n_cluster_centers=clusters)"]}, {"block": 69, "type": "code", "linesLength": 1, "startIndex": 138, "lines": ["plot_pdp('YearMade')"]}, {"block": 70, "type": "code", "linesLength": 1, "startIndex": 139, "lines": ["plot_pdp('YearMade', clusters=5)"]}, {"block": 71, "type": "code", "linesLength": 3, "startIndex": 140, "lines": ["feats = ['saleElapsed', 'YearMade']\n", "p = pdp.pdp_interact(m, x, feats)\n", "pdp.pdp_interact_plot(p, feats)"]}, {"block": 72, "type": "code", "linesLength": 1, "startIndex": 143, "lines": ["plot_pdp(['Enclosure_EROPS w AC', 'Enclosure_EROPS', 'Enclosure_OROPS'], 5, 'Enclosure')"]}, {"block": 73, "type": "code", "linesLength": 2, "startIndex": 144, "lines": ["df_raw.YearMade[df_raw.YearMade<1950] = 1950\n", "df_keep['age'] = df_raw['age'] = df_raw.saleYear-df_raw.YearMade"]}, {"block": 74, "type": "code", "linesLength": 4, "startIndex": 146, "lines": ["X_train, X_valid = split_vals(df_keep, n_trn)\n", "m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.6, n_jobs=-1)\n", "m.fit(X_train, y_train)\n", "plot_fi(rf_feat_importance(m, df_keep));"]}, {"block": 75, "type": "markdown", "linesLength": 1, "startIndex": 150, "lines": ["# Tree interpreter"]}, {"block": 76, "type": "code", "linesLength": 1, "startIndex": 151, "lines": ["from treeinterpreter import treeinterpreter as ti"]}, {"block": 77, "type": "code", "linesLength": 1, "startIndex": 152, "lines": ["df_train, df_valid = split_vals(df_raw[df_keep.columns], n_trn)"]}, {"block": 78, "type": "code", "linesLength": 1, "startIndex": 153, "lines": ["row = X_valid.values[None,0]; row"]}, {"block": 79, "type": "code", "linesLength": 1, "startIndex": 154, "lines": ["prediction, bias, contributions = ti.predict(m, row)"]}, {"block": 80, "type": "code", "linesLength": 1, "startIndex": 155, "lines": ["prediction[0], bias[0]"]}, {"block": 81, "type": "code", "linesLength": 1, "startIndex": 156, "lines": ["[o for o in zip(df_keep.columns, df_valid.iloc[0], sorted(contributions[0]))]"]}, {"block": 82, "type": "code", "linesLength": 1, "startIndex": 157, "lines": ["contributions[0].sum()"]}, {"block": 83, "type": "markdown", "linesLength": 1, "startIndex": 158, "lines": ["# Extrapolation"]}, {"block": 84, "type": "code", "linesLength": 4, "startIndex": 159, "lines": ["df_ext = df_keep.copy()\n", "df_ext['is_valid'] = 1\n", "df_ext.is_valid[:n_trn] = 0\n", "x, y = proc_df(df_ext, 'is_valid')"]}, {"block": 85, "type": "code", "linesLength": 3, "startIndex": 163, "lines": ["m = RandomForestClassifier(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "m.fit(x, y);\n", "m.oob_score_"]}, {"block": 86, "type": "code", "linesLength": 1, "startIndex": 166, "lines": ["fi = rf_feat_importance(m, x); fi[:10]"]}, {"block": 87, "type": "code", "linesLength": 1, "startIndex": 167, "lines": ["feats=['SalesID', 'saleElapsed', 'MachineID']"]}, {"block": 88, "type": "code", "linesLength": 1, "startIndex": 168, "lines": ["(X_train[feats]/1000).describe()"]}, {"block": 89, "type": "code", "linesLength": 1, "startIndex": 169, "lines": ["(X_valid[feats]/1000).describe()"]}, {"block": 90, "type": "code", "linesLength": 1, "startIndex": 170, "lines": ["x.drop(feats, axis=1, inplace=True)"]}, {"block": 91, "type": "code", "linesLength": 3, "startIndex": 171, "lines": ["m = RandomForestClassifier(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "m.fit(x, y);\n", "m.oob_score_"]}, {"block": 92, "type": "code", "linesLength": 1, "startIndex": 174, "lines": ["fi = rf_feat_importance(m, x); fi[:10]"]}, {"block": 93, "type": "code", "linesLength": 1, "startIndex": 175, "lines": ["set_rf_samples(50000)"]}, {"block": 94, "type": "code", "linesLength": 1, "startIndex": 176, "lines": ["feats=['SalesID', 'saleElapsed', 'MachineID', 'age', 'YearMade', 'saleDayofyear']"]}, {"block": 95, "type": "code", "linesLength": 4, "startIndex": 177, "lines": ["X_train, X_valid = split_vals(df_keep, n_trn)\n", "m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 96, "type": "code", "linesLength": 7, "startIndex": 181, "lines": ["for f in feats:\n", "    df_subs = df_keep.drop(f, axis=1)\n", "    X_train, X_valid = split_vals(df_subs, n_trn)\n", "    m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "    m.fit(X_train, y_train)\n", "    print(f)\n", "    print_score(m)"]}, {"block": 97, "type": "code", "linesLength": 1, "startIndex": 188, "lines": ["reset_rf_samples()"]}, {"block": 98, "type": "code", "linesLength": 5, "startIndex": 189, "lines": ["df_subs = df_keep.drop(['SalesID', 'MachineID', 'saleDayofyear'], axis=1)\n", "X_train, X_valid = split_vals(df_subs, n_trn)\n", "m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n", "m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 99, "type": "code", "linesLength": 1, "startIndex": 194, "lines": ["plot_fi(rf_feat_importance(m, X_train));"]}, {"block": 100, "type": "code", "linesLength": 1, "startIndex": 195, "lines": ["np.save('tmp/subs_cols.npy', np.array(df_subs.columns))"]}, {"block": 101, "type": "markdown", "linesLength": 1, "startIndex": 196, "lines": ["# Our final model!"]}, {"block": 102, "type": "code", "linesLength": 3, "startIndex": 197, "lines": ["m = RandomForestRegressor(n_estimators=160, max_features=0.5, n_jobs=-1, oob_score=True)\n", "%time m.fit(X_train, y_train)\n", "print_score(m)"]}, {"block": 103, "type": "code", "linesLength": 0, "startIndex": 200, "lines": []}]