[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["##ThinkDSP\n", "\n", "This notebook contains code examples from Chapter 9: Differentiation and Integration\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 17, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import thinkstats2\n", "\n", "import numpy as np\n", "import pandas as pd\n", "import scipy.signal\n", "\n", "import warnings\n", "warnings.filterwarnings('ignore')\n", "\n", "PI2 = 2 * np.pi\n", "\n", "np.set_printoptions(precision=3, suppress=True)\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["As the first example, I'll look at daily closing stock prices for Facebook, from its IPO on 17 May 2012 to 8 December 2015 (note: the dataset includes only trading days )"]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 25, "lines": ["names = ['date', 'open', 'high', 'low', 'close', 'volume']\n", "df = pd.read_csv('fb.csv', header=0, names=names, parse_dates=[0])\n", "ys = df.close.values[::-1]\n", "len(ys)"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Here's what the time series looks like (ignoring the actual gaps between trading days)."]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 30, "lines": ["close = thinkdsp.Wave(ys, framerate=1)\n", "close.plot()\n", "thinkplot.config(xlabel='Time (days)', ylabel='Price ($)')"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["And here's the spectrum on a log-log scale."]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 34, "lines": ["close_spectrum = close.make_spectrum()\n", "close_spectrum.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude',\n", "                 xscale='log', yscale='log')"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["The slope of the power spectrum is -1.86, which is similar to red noise (which should have a slope of -2)."]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["close_spectrum.estimate_slope().slope"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["We can use `np.diff` to compute the difference between successive elements, which is the daily change."]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 41, "lines": ["change = thinkdsp.Wave(np.diff(ys), framerate=1)\n", "change.plot()\n", "thinkplot.config(xlabel='Time (days)', ylabel='Price change($)')"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["And here's the spectrum of the daily changes:"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 45, "lines": ["change_spectrum = change.make_spectrum()\n", "change_spectrum.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude')"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 48, "lines": ["Recall that the spectrum of white noise looks like white noise.\n", "\n", "Here's the spectrum on a log-log scale."]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 51, "lines": ["change_spectrum.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude',\n", "                 xscale='log', yscale='log')"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["The estimated slope is close to zero, which is consistent with white noise."]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["change_spectrum.estimate_slope().slope"]}, {"block": 18, "type": "markdown", "linesLength": 5, "startIndex": 56, "lines": ["We can think the diff operation as convolution with a difference window, [1, -1].\n", "\n", "And convolution with this window corresponds to multiplication by a filter.\n", "\n", "The following function computes the filter that corresponds to the window."]}, {"block": 19, "type": "code", "linesLength": 12, "startIndex": 61, "lines": ["def make_filter(window, wave):\n", "    \"\"\"Computes the filter that corresponds to a window.\n", "    \n", "    window: NumPy array\n", "    wave: wave used to choose the length and framerate\n", "    \n", "    returns: new Spectrum\n", "    \"\"\"\n", "    padded = thinkdsp.zero_pad(window, len(wave))\n", "    window_wave = thinkdsp.Wave(padded, framerate=wave.framerate)\n", "    window_spectrum = window_wave.make_spectrum()\n", "    return window_spectrum"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["And here's what the filter looks like for the difference window:"]}, {"block": 21, "type": "code", "linesLength": 4, "startIndex": 74, "lines": ["diff_window = np.array([1.0, -1.0])\n", "diff_filter = make_filter(diff_window, close)\n", "diff_filter.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude ratio')"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["And the angles:"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 79, "lines": ["thinkplot.plot(diff_filter.angles)\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Phase offset (radians)')"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 81, "lines": ["So we could also compute the daily changes by multiplying the spectrum of closing prices by the diff filter:"]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 82, "lines": ["change_spectrum2 = close_spectrum * diff_filter\n", "change_spectrum2.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude')"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["And then converting the spectrum to a wave."]}, {"block": 27, "type": "code", "linesLength": 8, "startIndex": 86, "lines": ["change2 = change_spectrum2.make_wave()\n", "\n", "# we have to trim the first element to avoid wrap-around\n", "change2.ys = change2.ys[1:]\n", "change2.ts = change2.ts[1:]\n", "\n", "change2.plot()\n", "thinkplot.config(xlabel='Time (day)', ylabel='Price change ($)')"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["Then we can confirm that we get the same result both ways (within floating point error)."]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 95, "lines": ["max(abs(change.ys - change2.ys))"]}, {"block": 30, "type": "markdown", "linesLength": 3, "startIndex": 96, "lines": ["###Differentiation\n", "\n", "This diff operation is an approximation of differentiation, and we can compute the filter for differentiation analytically: each complex component is multiplied by $2 \\pi i f$."]}, {"block": 31, "type": "code", "linesLength": 5, "startIndex": 99, "lines": ["#start with a filter that has the right size, then replace hs\n", "deriv_filter = close.make_spectrum()\n", "deriv_filter.hs = PI2 * 1j * deriv_filter.fs\n", "deriv_filter.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude ratio')"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 104, "lines": ["Now we can apply the derivative filter to the spectrum of closing prices:"]}, {"block": 33, "type": "code", "linesLength": 5, "startIndex": 105, "lines": ["deriv_spectrum = close.make_spectrum()\n", "deriv_spectrum.differentiate()\n", "\n", "deriv_spectrum.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude')"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["The results are similar to what we got from `np.diff`, with some differences due to (1) the difference window is only a coarse approximation of the derivative, especially at higher frequencies, and (2) the spectral derivative is based on the assumption that the signal is periodic, so the behavior at the beginning and end is different."]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 111, "lines": ["deriv = deriv_spectrum.make_wave()\n", "len(deriv), len(change)"]}, {"block": 36, "type": "code", "linesLength": 5, "startIndex": 113, "lines": ["GRAY = '0.7'\n", "deriv = deriv_spectrum.make_wave()\n", "change.plot(color=GRAY, alpha=0.5)\n", "deriv.plot(alpha=0.3)\n", "thinkplot.config(xlabel='Time (day)')"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 118, "lines": ["We can see the differences more clearly by zooming in on a slice:"]}, {"block": 38, "type": "code", "linesLength": 5, "startIndex": 119, "lines": ["low, high = 0, 50\n", "thinkplot.preplot(2)\n", "thinkplot.plot(change.ys[low:high], label='diff')\n", "thinkplot.plot(deriv.ys[low:high], label='deriv')\n", "thinkplot.config(xlabel='Time (day)', ylabel='Price change ($)')"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 124, "lines": ["The diffs and the spectral derivative are similar in many places, but sometimes substantially different."]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 125, "lines": ["Here's the difference between the derivative filter and the difference filter:"]}, {"block": 41, "type": "code", "linesLength": 3, "startIndex": 126, "lines": ["deriv_filter.plot()\n", "diff_filter.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude ratio')"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["The difference filter does not amplify the highest frequencies as much, which is why the diffs are smoother than the derivative."]}, {"block": 43, "type": "markdown", "linesLength": 5, "startIndex": 130, "lines": ["## Integration\n", "\n", "Now let's think about integration.  We can compute the filter for integration analytically: each frequency component gets divided by $2 \\pi i f$.\n", "\n", "I plot the result on a log-y scale so we can see it more clearly."]}, {"block": 44, "type": "code", "linesLength": 10, "startIndex": 135, "lines": ["#start with a copy of the deriv filter and replace the hs\n", "integ_filter = deriv_filter.copy()\n", "integ_filter.hs = 1 / (PI2 * 1j * integ_filter.fs)\n", "\n", "# set the component at freq=0 to 0\n", "integ_filter.hs[0] = 0\n", "\n", "integ_filter.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude ratio', \n", "                 yscale='log')"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 145, "lines": ["We can confirm that the integration filter is correct by applying it to the spectrum of the derivative we just computed:"]}, {"block": 46, "type": "code", "linesLength": 7, "startIndex": 146, "lines": ["integ_spectrum = deriv_spectrum.copy()\n", "integ_spectrum.integrate()\n", "print(integ_spectrum.hs[0])\n", "integ_spectrum.hs[0] = 0\n", "integ_spectrum.plot()\n", "thinkplot.config(xlabel='Frequency (1/day)', ylabel='Amplitude')\n", "thinkplot.config(yscale='log')"]}, {"block": 47, "type": "markdown", "linesLength": 3, "startIndex": 153, "lines": ["And then converting back to a wave.  The result is identical to the daily closing prices we started with, but shifted so the mean is 0.  \n", "\n", "The reason the mean is 0 is that the derivative clobbers the first element of the spectrum, which is the bias.  Once the bias information is lost, integration can't restore it.  So the result has an unspecified constant of integration."]}, {"block": 48, "type": "code", "linesLength": 6, "startIndex": 156, "lines": ["thinkplot.preplot(2)\n", "integ_wave = integ_spectrum.make_wave()\n", "close.plot(label='closing prices')\n", "integ_wave.plot(label='integrated derivative')\n", "thinkplot.config(xlabel='Time (day)', ylabel='Price ($)', \n", "                 legend=True, loc='upper left')"]}, {"block": 49, "type": "markdown", "linesLength": 1, "startIndex": 162, "lines": ["And we can confirm that the difference is very small."]}, {"block": 50, "type": "code", "linesLength": 2, "startIndex": 163, "lines": ["shift = np.mean(close.ys) - np.mean(integ_wave.ys)\n", "max(abs(integ_wave.ys-close.ys+shift))"]}, {"block": 51, "type": "markdown", "linesLength": 5, "startIndex": 165, "lines": ["###Cumulative sum\n", "\n", "In the same way that the diff operator approximates differentiation, the cumulative sum approximates integration.\n", "\n", "I'll demonstrate with a Sawtooth signal."]}, {"block": 52, "type": "code", "linesLength": 2, "startIndex": 170, "lines": ["in_wave = thinkdsp.SawtoothSignal(freq=50).make_wave(duration=0.1, framerate=44100)\n", "in_wave.plot()"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 172, "lines": ["Here's the spectrum before the cumulative sum:"]}, {"block": 54, "type": "code", "linesLength": 3, "startIndex": 173, "lines": ["in_spectrum = in_wave.make_spectrum()\n", "in_spectrum.plot()\n", "thinkplot.config()"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 176, "lines": ["The output wave is the cumulative sum of the input"]}, {"block": 56, "type": "code", "linesLength": 3, "startIndex": 177, "lines": ["out_wave = in_wave.cumsum()\n", "out_wave.unbias()\n", "out_wave.plot()"]}, {"block": 57, "type": "markdown", "linesLength": 1, "startIndex": 180, "lines": ["And here's its spectrum"]}, {"block": 58, "type": "code", "linesLength": 2, "startIndex": 181, "lines": ["out_spectrum = out_wave.make_spectrum()\n", "out_spectrum.plot()"]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 183, "lines": ["Now we compute the ratio of the output to the input:"]}, {"block": 60, "type": "code", "linesLength": 1, "startIndex": 184, "lines": ["sum(in_spectrum.amps < 1), len(in_spectrum)"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 185, "lines": ["In between the harmonics, the input componenents are small, so I set those ratios to NaN."]}, {"block": 62, "type": "code", "linesLength": 6, "startIndex": 186, "lines": ["ratio_spectrum = out_spectrum.ratio(in_spectrum, thresh=1)\n", "ratio_spectrum.plot(style='.', markersize=4)\n", "\n", "thinkplot.config(xlabel='Frequency (Hz)',\n", "                 ylabel='Amplitude ratio',\n", "                 yscale='log')"]}, {"block": 63, "type": "markdown", "linesLength": 1, "startIndex": 192, "lines": ["To get the cumsum filter, I compute the diff filter again and invert it."]}, {"block": 64, "type": "code", "linesLength": 18, "startIndex": 193, "lines": ["diff_window = np.array([1.0, -1.0])\n", "padded = thinkdsp.zero_pad(diff_window, len(in_wave))\n", "diff_wave = thinkdsp.Wave(padded, framerate=in_wave.framerate)\n", "diff_filter = diff_wave.make_spectrum()\n", "\n", "cumsum_filter = diff_filter.copy()\n", "cumsum_filter.hs = 1 / cumsum_filter.hs\n", "cumsum_filter.hs[0] = 0\n", "cumsum_filter.plot(label='cumsum filter', color=GRAY, linewidth=7)\n", "\n", "integ_filter = cumsum_filter.copy()\n", "integ_filter.hs = integ_filter.framerate / (PI2 * 1j * integ_filter.fs)\n", "integ_filter.plot(label='integral filter')\n", "\n", "thinkplot.config(xlabel='Frequency (Hz)',\n", "                 ylabel='Amplitude ratio',\n", "                 yscale='log', \n", "                 legend=True, loc='upper right')"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 211, "lines": ["Finally, we can compare the computed ratios to the filter.  They match, confirming that the cumsum filter is the inverse of the diff filter."]}, {"block": 66, "type": "code", "linesLength": 5, "startIndex": 212, "lines": ["cumsum_filter.plot(label='cumsum filter', color=GRAY, linewidth=7)\n", "ratio_spectrum.plot(label='ratio', style='.', markersize=4)\n", "thinkplot.config(xlabel='Frequency (Hz)',\n", "                 ylabel='Amplitude ratio',\n", "                 yscale='log', legend=True)"]}, {"block": 67, "type": "markdown", "linesLength": 1, "startIndex": 217, "lines": ["Now we can compute the output wave using the convolution theorem, and compare the results:"]}, {"block": 68, "type": "code", "linesLength": 1, "startIndex": 218, "lines": ["len(in_spectrum), len(cumsum_filter)"]}, {"block": 69, "type": "code", "linesLength": 8, "startIndex": 219, "lines": ["thinkplot.preplot(2)\n", "\n", "out_wave.plot(label='cumsum')\n", "\n", "out_wave2 = (in_spectrum * cumsum_filter).make_wave()\n", "out_wave2.plot(label='filter')\n", "\n", "thinkplot.config(legend=True, loc='lower right')"]}, {"block": 70, "type": "markdown", "linesLength": 1, "startIndex": 227, "lines": ["They are the same, within floating point error."]}, {"block": 71, "type": "code", "linesLength": 1, "startIndex": 228, "lines": ["max(abs(out_wave.ys - out_wave2.ys))"]}, {"block": 72, "type": "code", "linesLength": 0, "startIndex": 229, "lines": []}]