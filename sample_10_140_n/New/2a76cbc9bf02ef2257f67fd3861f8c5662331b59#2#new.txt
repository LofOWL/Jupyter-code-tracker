[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["<i>Copyright (c) Microsoft Corporation. All rights reserved.</i>\n", "\n", "<i>Licensed under the MIT License.</i>"]}, {"block": 1, "type": "markdown", "linesLength": 17, "startIndex": 3, "lines": ["# SAR Single Node on MovieLens (Python, CPU)\n", "\n", "SAR is a fast scalable adaptive algorithm for personalized recommendations based on user transaction history. It produces easily explainable / interpretable recommendations and handles \"cold item\" and \"semi-cold user\" scenarios. SAR is a kind of neighborhood based algorithm (as discussed in [Recommender Systems by Aggarwal](https://dl.acm.org/citation.cfm?id=2931100)) which is intended for ranking top items for each user. \n", "\n", "SAR recommends items that are most ***similar*** to the ones that the user already has an existing ***affinity*** for. Two items are ***similar*** if the users who have interacted with one item are also likely to have interacted with another. A user has an ***affinity*** to an item if they have interacted with it in the past.\n", "\n", "### Advantages of SAR:\n", "- High accuracy for an easy to train and deploy algorithm\n", "- Fast training, only requiring simple counting to construct matrices used at prediction time. \n", "- Fast scoring, only involving multiplication of the similarity matric with an affinity vector\n", "\n", "### Notes to use SAR properly:\n", "- Since it does not use item or user features, it can be at a disadvantage against algorithms that do.\n", "- It's memory-hungry, requiring the creation of an $mxm$ sparse square matrix (where $m$ is the number of items). This can also be a problem for many matrix factorization algorithms.\n", "- SAR favors an implicit rating scenario and it does not predict ratings.\n", "\n", "This notebook provides an example of how to utilize and evaluate SAR in Python on a CPU."]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["# 0 Global Settings and Imports"]}, {"block": 3, "type": "code", "linesLength": 17, "startIndex": 21, "lines": ["# set the environment path to find Recommenders\n", "import sys\n", "sys.path.append(\"../../\")\n", "import time\n", "import os\n", "import itertools\n", "import numpy as np\n", "import pandas as pd\n", "import papermill as pm\n", "\n", "from reco_utils.recommender.sar.sar_singlenode import SARSingleNode\n", "from reco_utils.dataset import movielens\n", "from reco_utils.dataset.python_splitters import python_random_split\n", "from reco_utils.evaluation.python_evaluation import map_at_k, ndcg_at_k, precision_at_k, recall_at_k\n", "\n", "print(\"System version: {}\".format(sys.version))\n", "print(\"Pandas version: {}\".format(pd.__version__))"]}, {"block": 4, "type": "markdown", "linesLength": 8, "startIndex": 38, "lines": ["# 1 Load Data\n", "\n", "SAR is intended to be used on interactions with the following schema:\n", "`<User ID>, <Item ID>,<Time>,[<Event Type>], [<Event Weight>]`. \n", "\n", "Each row represents a single interaction between a user and an item. These interactions might be different types of events on an e-commerce website, such as a user clicking to view an item, adding it to a shopping basket, following a recommendation link, and so on. Each event type can be assigned a different weight, for example, we might assign a \u201cbuy\u201d event a weight of 10, while a \u201cview\u201d event might only have a weight of 1.\n", "\n", "The MovieLens dataset is well formatted interactions of Users providing Ratings to Movies (movie ratings are used as the event weight) - we will use it for the rest of the example."]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 46, "lines": ["# top k items to recommend\n", "TOP_K = 10\n", "\n", "# Select Movielens data size: 100k, 1m, 10m, or 20m\n", "MOVIELENS_DATA_SIZE = '100k'"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["### 1.1 Download and use the MovieLens Dataset"]}, {"block": 7, "type": "code", "linesLength": 9, "startIndex": 52, "lines": ["data = movielens.load_pandas_df(\n", "    size=MOVIELENS_DATA_SIZE,\n", "    header=['UserId','MovieId','Rating','Timestamp']\n", ")\n", "\n", "# Convert the float precision to 32-bit in order to reduce memory consumption \n", "data.loc[:, 'Rating'] = data['Rating'].astype(np.float32)\n", "\n", "data.head()"]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 61, "lines": ["### 1.2 Split the data using the python random splitter provided in utilities:\n", "\n", "We utilize the provided `python_random_split` function to split into `train` and `test` datasets randomly at a 80/20 ratio."]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["train, test = python_random_split(data)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["# 2 Train the SAR Model"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 66, "lines": ["### 2.1 Instantiate the SAR algorithm and set the index\n", "\n", "In order to use SAR, we need to hash users and items and set an index in order for SAR matrix operations to work. First we instantiate SAR using the reference implementation provided in `SARSingleNode`:"]}, {"block": 12, "type": "code", "linesLength": 11, "startIndex": 69, "lines": ["header = {\n", "    \"col_user\": \"UserId\",\n", "    \"col_item\": \"MovieId\",\n", "    \"col_rating\": \"Rating\",\n", "    \"col_timestamp\": \"Timestamp\",\n", "}\n", "\n", "model = SARSingleNode(\n", "    remove_seen=True, similarity_type=\"jaccard\", \n", "    time_decay_coefficient=30, time_now=None, timedecay_formula=True, **header\n", ")"]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 80, "lines": ["We will hash users and items to smaller continuous space.\n", "This is an ordered set - it's discrete, but contiguous.\n", "This helps keep the matrices we keep in memory as small as possible."]}, {"block": 14, "type": "code", "linesLength": 17, "startIndex": 83, "lines": ["start_time = time.time()\n", "\n", "unique_users = data[\"UserId\"].unique()\n", "unique_items = data[\"MovieId\"].unique()\n", "enumerate_items_1, enumerate_items_2 = itertools.tee(enumerate(unique_items))\n", "enumerate_users_1, enumerate_users_2 = itertools.tee(enumerate(unique_users))\n", "\n", "item_map_dict = {x: i for i, x in enumerate_items_1}\n", "user_map_dict = {x: i for i, x in enumerate_users_1}\n", "# The reverse of the dictionary above - array index to actual ID\n", "index2user = dict(enumerate_users_2)\n", "index2item = dict(enumerate_items_2)\n", "\n", "# We need to index the train and test sets for SAR matrix operations to work\n", "model.set_index(unique_users, unique_items, user_map_dict, item_map_dict, index2user, index2item)\n", "\n", "preprocess_time = time.time() - start_time"]}, {"block": 15, "type": "markdown", "linesLength": 9, "startIndex": 100, "lines": ["### 2.2 Train the SAR model on our training data, and get the top-k recommendations for our testing data\n", "\n", "SAR first computes an item-to-item ***co-occurence matrix***. Co-occurence represents the number of times two items appear together for any given user. Once we have the co-occurence matrix, we compute an ***item similarity matrix*** by rescaling the cooccurences by a given metric (Jaccard similarity in this example). \n", "\n", "We also compute an ***affinity matrix*** to capture the strength of the relationship between each user and each item. Affinity is driven by different types (like *rating* or *viewing* a movie), and by the time of the event. \n", "\n", "Recommendations are achieved by multiplying the affinity matrix $A$ and the similarity matrix $S$. The result is a ***recommendation score matrix*** $R$. We compute the ***top-k*** results for each user in the `recommend_k_items` function seen below.\n", "\n", "A full walkthrough of the SAR algorithm can be found [here](../02_modeling/sar_educational_walkthrough.ipynb)."]}, {"block": 16, "type": "code", "linesLength": 6, "startIndex": 109, "lines": ["start_time = time.time()\n", "\n", "model.fit(train)\n", "\n", "train_time = time.time() - start_time + preprocess_time\n", "print(\"Took {} seconds for training.\".format(train_time))"]}, {"block": 17, "type": "code", "linesLength": 10, "startIndex": 115, "lines": ["start_time = time.time()\n", "\n", "top_k = model.recommend_k_items(test)\n", "\n", "test_time = time.time() - start_time\n", "print(\"Took {} seconds for prediction.\".format(test_time))\n", "\n", "# TODO: remove this call when the model returns same type as input\n", "top_k['UserId'] = pd.to_numeric(top_k['UserId'])\n", "top_k['MovieId'] = pd.to_numeric(top_k['MovieId'])"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 125, "lines": ["display(top_k.head())"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 126, "lines": ["### 5. Evaluate how well SAR performs \n", "\n", "We evaluate how well SAR performs with for a few common ranking metrics provided in the `PythonRankingEvaluation` classs in utilities. We will consider the Mean Average Precision (MAP), Normalized Discounted Cumalative Gain (NDCG), Precision, and Recall for the top-k items per user we computed with SAR."]}, {"block": 20, "type": "code", "linesLength": 3, "startIndex": 129, "lines": ["eval_map = map_at_k(test, top_k, col_user=\"UserId\", col_item=\"MovieId\", \n", "                    col_rating=\"Rating\", col_prediction=\"prediction\", \n", "                    relevancy_method=\"top_k\", k=TOP_K)"]}, {"block": 21, "type": "code", "linesLength": 3, "startIndex": 132, "lines": ["eval_ndcg = ndcg_at_k(test, top_k, col_user=\"UserId\", col_item=\"MovieId\", \n", "                      col_rating=\"Rating\", col_prediction=\"prediction\", \n", "                      relevancy_method=\"top_k\", k=TOP_K)"]}, {"block": 22, "type": "code", "linesLength": 3, "startIndex": 135, "lines": ["eval_precision = precision_at_k(test, top_k, col_user=\"UserId\", col_item=\"MovieId\", \n", "                                col_rating=\"Rating\", col_prediction=\"prediction\", \n", "                                relevancy_method=\"top_k\", k=TOP_K)"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 138, "lines": ["eval_recall = recall_at_k(test, top_k, col_user=\"UserId\", col_item=\"MovieId\", \n", "                          col_rating=\"Rating\", col_prediction=\"prediction\", \n", "                          relevancy_method=\"top_k\", k=TOP_K)"]}, {"block": 24, "type": "code", "linesLength": 6, "startIndex": 141, "lines": ["print(\"Model:\\t\" + model.model_str,\n", "      \"Top K:\\t%d\" % TOP_K,\n", "      \"MAP:\\t%f\" % eval_map,\n", "      \"NDCG:\\t%f\" % eval_ndcg,\n", "      \"Precision@K:\\t%f\" % eval_precision,\n", "      \"Recall@K:\\t%f\" % eval_recall, sep='\\n')"]}, {"block": 25, "type": "code", "linesLength": 7, "startIndex": 147, "lines": ["# Record results with papermill for tests\n", "pm.record(\"map\", eval_map)\n", "pm.record(\"ndcg\", eval_ndcg)\n", "pm.record(\"precision\", eval_precision)\n", "pm.record(\"recall\", eval_recall)\n", "pm.record(\"train_time\", train_time)\n", "pm.record(\"test_time\", test_time)"]}]