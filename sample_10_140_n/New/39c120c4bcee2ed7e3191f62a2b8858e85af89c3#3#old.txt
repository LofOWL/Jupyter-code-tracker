[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Additional training functions"]}, {"block": 1, "type": "markdown", "linesLength": 5, "startIndex": 1, "lines": ["[`train`](/train.html#train) provides a number of extension methods that are added to [`Learner`](/basic_train.html#Learner) (see below for a list and details), along with three simple callbacks:\n", "\n", "- [`ShowGraph`](/train.html#ShowGraph)\n", "- [`GradientClipping`](/train.html#GradientClipping)\n", "- [`BnFreeze`](/train.html#BnFreeze)"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 6, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.train import *\n", "from fastai.vision import *\n"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["## [`Learner`](/basic_train.html#Learner) extension methods"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["These methods are automatically added to all [`Learner`](/basic_train.html#Learner) objects created after importing this module. They provide convenient access to a number of callbacks, without requiring them to be manually created."]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["show_doc(fit_one_cycle)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["show_doc(one_cycle_scheduler)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["See [`OneCycleScheduler`](/callbacks.one_cycle.html#OneCycleScheduler) for details."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["show_doc(lr_find)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["See [`LRFinder`](/callbacks.lr_finder.html#LRFinder) for details."]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["show_doc(to_fp16)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["See [`MixedPrecision`](/callbacks.fp16.html#MixedPrecision) for details."]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["show_doc(to_fp32)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["show_doc(mixup)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["show_doc(ClassificationInterpretation)"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["See [`MixUpCallback`](/callbacks.mixup.html#MixUpCallback) for more details."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["## Additional callbacks"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["We'll show examples below using our MNIST sample. As usual the `on_something` methods are directly called by the fastai library, no need to call them yourself."]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["path = untar_data(URLs.MNIST_SAMPLE)\n", "data = ImageDataBunch.from_folder(path)"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["show_doc(ShowGraph, title_level=3)"]}, {"block": 20, "type": "markdown", "linesLength": 4, "startIndex": 27, "lines": ["```python\n", "learn = create_cnn(data, models.resnet18, metrics=accuracy, callback_fns=ShowGraph)\n", "learn.fit(3)\n", "```"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["![Training graph](imgs/train_graph.gif)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["show_doc(ShowGraph.on_epoch_end)"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["show_doc(GradientClipping)"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 34, "lines": ["learn = create_cnn(data, models.resnet18, metrics=accuracy,\n", "    callback_fns=partial(GradientClipping, clip=0.1))\n", "learn.fit(1)"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["show_doc(GradientClipping.on_backward_end)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["show_doc(BnFreeze)"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["For batchnorm layers where `requires_grad==False`, you generally don't want to update their moving average statistics, in order to avoid the model's statistics getting out of sync with its pre-trained weights. You can add this callback to automate this freezing of statistics (internally, it calls `eval` on these layers)."]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["learn = create_cnn(data, models.resnet18, metrics=accuracy, callback_fns=BnFreeze)\n", "learn.fit(1)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["show_doc(BnFreeze.on_epoch_begin)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["## Undocumented Methods - Methods moved below this line will intentionally be hidden"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["## New Methods - Please document or move to the undocumented section"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["show_doc(ClassificationInterpretation.plot_top_losses)"]}, {"block": 33, "type": "markdown", "linesLength": 0, "startIndex": 46, "lines": []}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["show_doc(ClassificationInterpretation.from_learner)"]}, {"block": 35, "type": "markdown", "linesLength": 0, "startIndex": 47, "lines": []}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["show_doc(ClassificationInterpretation.top_losses)"]}, {"block": 37, "type": "markdown", "linesLength": 0, "startIndex": 48, "lines": []}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["show_doc(ClassificationInterpretation.confusion_matrix)"]}, {"block": 39, "type": "markdown", "linesLength": 0, "startIndex": 49, "lines": []}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["show_doc(ClassificationInterpretation.most_confused)"]}, {"block": 41, "type": "markdown", "linesLength": 0, "startIndex": 50, "lines": []}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["show_doc(ClassificationInterpretation.plot_confusion_matrix)"]}, {"block": 43, "type": "markdown", "linesLength": 0, "startIndex": 51, "lines": []}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["show_doc(ClassificationInterpretation.plot_multi_top_losses)"]}, {"block": 45, "type": "markdown", "linesLength": 0, "startIndex": 52, "lines": []}]