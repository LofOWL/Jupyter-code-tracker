[{"block": 0, "type": "markdown", "linesLength": 4, "startIndex": 0, "lines": ["# Surprise Singular Value Decomposition (SVD)\n", "\n", "\n", "This notebook serves both as an introduction to the [Surprise](http://surpriselib.com/) library, and also introduces the 'SVD' algorithm which is very similar to ALS presented in the ALS deep dive notebook. This algorithm was heavily used during the Netflix Prize competition by the winning BellKor team."]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["## 0 Global Settings and Imports"]}, {"block": 2, "type": "code", "linesLength": 13, "startIndex": 5, "lines": ["import sys\n", "import os\n", "from zipfile import ZipFile\n", "sys.path.append(\"../../\")\n", "import surprise\n", "import papermill as pm\n", "import pandas as pd\n", "from reco_utils.dataset.url_utils import maybe_download\n", "from reco_utils.dataset.python_splitters import python_random_split\n", "from reco_utils.evaluation.python_evaluation import rmse, mae, rsquared, exp_var\n", "\n", "print(\"System version: {}\".format(sys.version))\n", "print(\"Surprise version: {}\".format(surprise.__version__))"]}, {"block": 3, "type": "markdown", "linesLength": 35, "startIndex": 18, "lines": ["## 1 Matrix factorization algorithm\n", "\n", "The SVD model algorithm is very similar to the ALS algorithm presented in the ALS deep dive notebook. The two differences between the two approaches are:\n", "\n", "- SVD additionally models the user and item biases (also called baselines in the litterature) from users and items.\n", "- The optimization technique in ALS is Alternating Least Squares (hence the name), while SVD uses stochastic gradient descent.\n", "\n", "### 1.1 The SVD model\n", "\n", "In ALS, the ratings are modeled as follows:\n", "\n", "$$\\hat r_{u,i} = q_{i}^{T}p_{u}$$\n", "\n", "SVD introduces two new scalar variables: the user biases $b_u$ and the item biases $b_i$. The user biases are supposed to capture the tendency of some users to rate items higher (or lower) than the average. The same goes for items: some items are usually rated higher than some others. The model is SVD is then as follows:\n", "\n", "$$\\hat r_{u,i} = \\mu + b_u + b_i + q_{i}^{T}p_{u}$$\n", "\n", "Where $\\mu$ is the global average of all the ratings in the dataset. The regularised optimization problem naturally becomes:\n", "\n", "$$ \\sum(r_{u,i} - (\\mu + b_u + b_i + q_{i}^{T}p_{u}))^2 +     \\lambda(b_i^2 + b_u^2 + ||q_i||^2 + ||p_u||^2)$$\n", "\n", "where $\\lambda$ is a the regularization parameter.\n", "\n", "\n", "### 1.2 Stochastic Gradient Descent\n", "\n", "Stochastic Gradient Descent (SGD) is a very common algorithm for optimization where the parameters (here the biases and the factor vectors) are iteratively incremented with the negative gradients w.r.t the optimization function. The algorithm essentially performs the following steps for a given number of iterations:\n", "\n", "\n", "$$b_u \\leftarrow b_u + \\gamma (e_{ui} - \\lambda b_u)$$\n", "$$b_i \\leftarrow b_i + \\gamma (e_{ui} - \\lambda b_i)$$  \n", "$$p_u \\leftarrow p_u + \\gamma (e_{ui} \\cdot q_i - \\lambda p_u)$$\n", "$$q_i \\leftarrow q_i + \\gamma (e_{ui} \\cdot p_u - \\lambda q_i)$$\n", "\n", "where $\\gamma$ is the learning rate and $e_{ui} =  r_{ui} - \\hat r_{u,i} = r_{u,i} - (\\mu + b_u + b_i + q_{i}^{T}p_{u})$ is the error made by the model for the pair $(u, i)$."]}, {"block": 4, "type": "markdown", "linesLength": 5, "startIndex": 53, "lines": ["# 1 Load Data\n", "\n", "We will use the Movielens dataset, which is composed of integer ratings from 1 to 5. \n", "\n", "Surprise supports dataframes as long as they have three colums reprensenting the user ids, item ids, and the ratings (in this order)."]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["# Select Movielens data size: 100k, 1m, 10m, or 20m\n", "MOVIELENS_DATA_SIZE = '100k'"]}, {"block": 6, "type": "code", "linesLength": 43, "startIndex": 60, "lines": ["# MovieLens data have different data-format for each size of dataset \n", "data_header = None\n", "if MOVIELENS_DATA_SIZE == '100k':\n", "    separator = '\\t'\n", "    data_name = 'u.data'\n", "    data_folder = 'ml-100k'\n", "elif MOVIELENS_DATA_SIZE == '1m':\n", "    separator = '::'\n", "    data_name = 'ratings.dat'\n", "    data_folder = 'ml-1m'\n", "elif MOVIELENS_DATA_SIZE == '10m':\n", "    separator = '::'\n", "    data_name = 'ratings.dat'\n", "    data_folder = 'ml-10M100K'\n", "elif MOVIELENS_DATA_SIZE == '20m':\n", "    separator = ','\n", "    data_name = 'ratings.csv'\n", "    data_folder = 'ml-20m'\n", "    data_header = 0\n", "else:\n", "    raise ValueError('Invalid data size. Should be one of {100k, 1m, 10m, or 20m}') \n", "\n", "# Download dataset zip file and decompress if haven't done yet\n", "data_path = os.path.join(data_folder, data_name)\n", "if not os.path.exists(data_path):\n", "    filename = 'ml-' + MOVIELENS_DATA_SIZE + '.zip'\n", "    filepath = maybe_download('http://files.grouplens.org/datasets/movielens/'+filename, filename)\n", "\n", "    with ZipFile(filepath, 'r') as zf:\n", "        zf.extractall()\n", "    \n", "    # remove zip file we already used\n", "    os.remove(filepath)\n", "    \n", "data = pd.read_csv(\n", "    data_path,\n", "    sep=separator,\n", "    engine='python',\n", "    names=['UserId','MovieId','Rating','Timestamp'],\n", "    header=data_header\n", ")\n", "data = data[[\"UserId\", \"MovieId\", \"Rating\"]]\n", "data.head()"]}, {"block": 7, "type": "markdown", "linesLength": 5, "startIndex": 103, "lines": ["# 2 Train the SVD Model\n", "\n", "Note that Surprise has a lot of built-in support for [cross-validation](https://surprise.readthedocs.io/en/stable/getting_started.html#use-cross-validation-iterators) or also [grid search](https://surprise.readthedocs.io/en/stable/getting_started.html#tune-algorithm-parameters-with-gridsearchcv) inspired scikit-learn, but we will here use the provided tools instead.\n", "\n", "We start by splitting our data into trainset and testset with the `python_random_split` function."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 108, "lines": ["train, test = python_random_split(data)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 109, "lines": ["Surprise needs to build an internal model of the data. We here use the `load_from_df` method to build a `Dataset` object, and then indicate that we want to train on all the samples of this dataset by using the `build_full_trainset` method."]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 110, "lines": ["train = surprise.Dataset.load_from_df(train, reader=surprise.Reader('ml-100k')).build_full_trainset()\n", "train"]}, {"block": 11, "type": "markdown", "linesLength": 8, "startIndex": 112, "lines": ["The [SVD](https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD) has a lot of parameters. The most important ones are:\n", "- `n_factors`, which controls the dimension of the latent space (i.e. the size of the vectors $p_u$ and $q_i$). Usually, the quality of the training set predictions grows with as `n_factors` gets higher.\n", "- `n_epochs`, which defines the number of iteration of the SGD procedure.\n", "\n", "Note that both parameter also affect the training time.\n", "\n", "\n", "We will here set `n_factors` to `200` and `n_epochs` to `30`. To train the model, we simply need to call the `fit()` method."]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 120, "lines": ["svd = surprise.SVD(random_state=0, n_factors=200, n_epochs=30, verbose=True)\n", "svd.fit(train)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 122, "lines": ["Now that our model is fitted, we can call `predict` to get some predictions. `predict` returns an internal object `Prediction` which can be easily converted back to a dataframe:"]}, {"block": 14, "type": "code", "linesLength": 7, "startIndex": 123, "lines": ["predictions = [svd.predict(row.UserId, row.MovieId, row.Rating)\n", "               for (_, row) in test.iterrows()]\n", "predictions = pd.DataFrame(predictions)\n", "predictions = predictions.rename(index=str, columns={'uid': 'userID', 'iid': 'itemID',\n", "                                                     'est': 'prediction'})\n", "predictions = predictions.drop(['details', 'r_ui'], axis='columns')\n", "predictions.head()"]}, {"block": 15, "type": "markdown", "linesLength": 7, "startIndex": 130, "lines": ["### 5. Evaluate how well SVD performs \n", "\n", "The SVD algorithm was specifically designed to predict ratings as close as possible to their actual values. In particular, it is designed to have a very low RMSE (Root Mean Squared Error), computed as:\n", "\n", "$$\\sqrt{\\frac{1}{N} \\sum(\\hat{r_{ui}} - r_{ui})^2}$$\n", "\n", "As we can see, the RMSE and MAE (Mean Absolute Error) are pretty low (i.e. good), indicating that on average predicted ratings are about 0.3 or 0.4 away from their actual values. The RMSE is of course a bit higher, because high errors are penalized much more."]}, {"block": 16, "type": "code", "linesLength": 15, "startIndex": 137, "lines": ["test = test.rename(index=str, columns={'UserId': 'userID', 'MovieId': 'itemID', 'Rating': 'rating'})\n", "\n", "eval_rmse = rmse(test, predictions)\n", "eval_mae = mae(test, predictions)\n", "eval_rsquared = rsquared(test, predictions)\n", "eval_exp_var = exp_var(test, predictions)\n", "\n", "eval_rmse, eval_mae, eval_rsquared, eval_exp_var\n", "\n", "\n", "\n", "print(\"RMSE:\\t\\t%f\" % eval_rmse,\n", "      \"MAE:\\t\\t%f\" % eval_mae,\n", "      \"rsquared:\\t%f\" % eval_rsquared,\n", "      \"exp var:\\t%f\" % eval_exp_var, sep='\\n')"]}, {"block": 17, "type": "code", "linesLength": 5, "startIndex": 152, "lines": ["# Record results with papermill for tests\n", "pm.record(\"rmse\", eval_rmse)\n", "pm.record(\"mae\", eval_mae)\n", "pm.record(\"rsquared\", eval_rsquared)\n", "pm.record(\"exp_var\", eval_exp_var)"]}, {"block": 18, "type": "code", "linesLength": 0, "startIndex": 157, "lines": []}]