[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Torch Core"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["This module contains all the basic functions we need in other modules of the fastai library (split with [`core`](/core.html#core) that contains the ones not requiring pytorch). Its documentation can easily be skipped at a first read, unless you want to know what a given fuction does."]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 2, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.torch_core import * "]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["## Global constants"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["`AdamW = partial(optim.Adam, betas=(0.9,0.99))` <div style=\"text-align: right\"><a href=\"https://github.com/fastai/fastai/blob/master/fastai/torch_core.py#L43\">[source]</a></div>"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["`bn_types = (nn.BatchNorm1d, nn.BatchNorm2d, nn.BatchNorm3d)` <div style=\"text-align: right\"><a href=\"https://github.com/fastai/fastai/blob/master/fastai/torch_core.py#L41\">[source]</a></div>"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["`default_device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')` <div style=\"text-align: right\"><a href=\"https://github.com/fastai/fastai/blob/master/fastai/torch_core.py#L42\">[source]</a></div>"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["## Functions that operate conversions"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["show_doc(flatten_model, full_name='flatten')"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Flattens all the layers of `m`. "]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["show_doc(model2half)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["show_doc(np2model_tensor)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["show_doc(requires_grad)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["show_doc(tensor)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["show_doc(to_cpu)"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["show_doc(to_data)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["show_doc(to_detach)"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 18, "lines": ["show_doc(to_device)"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 19, "lines": ["show_doc(to_half)"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["show_doc(to_np)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["## Functions to deal with model initialization"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["show_doc(apply_init)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["show_doc(apply_leaf)"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["show_doc(cond_init)"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["show_doc(in_channels)"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["show_doc(init_default)"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["## Functions to get information of a model"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["show_doc(children)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["show_doc(first_layer)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["show_doc(last_layer)"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["show_doc(num_children)"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["show_doc(one_param)"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["show_doc(range_children)"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["show_doc(trainable_params)"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["## Functions to deal with BatchNorm layers"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["show_doc(bn2float)"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["show_doc(set_bn_eval)"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["show_doc(split_bn_bias)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["## Functions to get random tensors"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["show_doc(log_uniform)"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["show_doc(rand_bool)"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["show_doc(uniform)"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["show_doc(uniform_int)"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["## Other functions"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["show_doc(FloatItem, title_level=3)"]}, {"block": 45, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["show_doc(calc_loss)"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["show_doc(data_collate)"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["show_doc(grab_idx)"]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["show_doc(logit)"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["show_doc(logit_)"]}, {"block": 50, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["show_doc(model_type)"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["show_doc(np_address)"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["show_doc(split_model)"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["If `splits` are layers, the model is split at those (not included) sequentially. If `want_idxs` is True, the corresponding indexes are returned. If `splits` are lists of layers, the model is split according to those."]}, {"block": 54, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["show_doc(split_model_idx)"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["show_doc(trange_of)"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["## Undocumented Methods - Methods moved below this line will intentionally be hidden"]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["show_doc(tensor__array__)"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["## New Methods - Please document or move to the undocumented section"]}]