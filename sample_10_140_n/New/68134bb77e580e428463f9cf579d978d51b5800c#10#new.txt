[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Computer Vision models zoo"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.vision.models.darknet import Darknet\n", "from fastai.vision.models.wrn import wrn_22, WideResNet"]}, {"block": 2, "type": "markdown", "linesLength": 5, "startIndex": 4, "lines": ["On top of the models offered by [torchivision](https://pytorch.org/docs/stable/torchvision/models.html), the fastai library has implementations for the following models:\n", "\n", "- Darknet architecture, which is the base of [Yolo v3](https://pjreddie.com/media/files/papers/YOLOv3.pdf)\n", "- Unet architecture based on a pretrained model. The original unet is described [here](https://arxiv.org/abs/1505.04597), the model implementation is detailed in [`models.unet`](/vision.models.unet.html#vision.models.unet)\n", "- Wide resnets architectures, as introduced in [this article](https://arxiv.org/abs/1605.07146)."]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["show_doc(Darknet)"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Create a Darknet with blocks of sizes given in `num_blocks`, ending with `num_classes` and using `nf` initial features. Darknet53 uses `num_blocks = [1,2,8,8,4]`. "]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["show_doc(WideResNet)"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Eeach group contains blocks of size `N`. `start_nf` the initial number of features. Dropout of `drop_p` is applied at the end of each block."]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["show_doc(wrn_22)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["This is a [`WideResNet`](/vision.models.wrn.html#WideResNet) with `num_groups=3`, `N=3`, `k=6` and `drop_p=0.`."]}]