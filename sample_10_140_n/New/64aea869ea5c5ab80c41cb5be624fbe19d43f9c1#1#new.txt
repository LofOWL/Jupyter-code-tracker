[{"block": 0, "type": "code", "linesLength": 3, "startIndex": 0, "lines": ["%matplotlib inline\n", "%reload_ext autoreload\n", "%autoreload 2"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## Super resolution data"]}, {"block": 2, "type": "code", "linesLength": 5, "startIndex": 4, "lines": ["from fastai.conv_learner import *\n", "from pathlib import Path\n", "torch.cuda.set_device(0)\n", "\n", "torch.backends.cudnn.benchmark=True"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["PATH = Path('data/imagenet')\n", "PATH_TRN = PATH/'train'"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 11, "lines": ["fnames_full,label_arr_full,all_labels = folder_source(PATH, 'train')\n", "fnames_full = ['/'.join(Path(fn).parts[-2:]) for fn in fnames_full]\n", "list(zip(fnames_full[:5],label_arr_full[:5]))"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["all_labels[:5]"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 15, "lines": ["np.random.seed(42)\n", "keep_pct = 1.\n", "# keep_pct = 0.02\n", "keeps = np.random.rand(len(fnames_full)) < keep_pct\n", "fnames = np.array(fnames_full, copy=False)[keeps]\n", "label_arr = np.array(label_arr_full, copy=False)[keeps]"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["arch = vgg16\n", "sz_lr = 72"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 23, "lines": ["scale,bs = 2,64\n", "# scale,bs = 4,32\n", "sz_hr = sz_lr*scale"]}, {"block": 9, "type": "code", "linesLength": 7, "startIndex": 26, "lines": ["class MatchedFilesDataset(FilesDataset):\n", "    def __init__(self, fnames, y, transform, path):\n", "        self.y=y\n", "        assert(len(fnames)==len(y))\n", "        super().__init__(fnames, transform, path)\n", "    def get_y(self, i): return open_image(os.path.join(self.path, self.y[i]))\n", "    def get_c(self): return 0"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["aug_tfms = [RandomDihedral(tfm_y=TfmType.PIXEL)]"]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 34, "lines": ["val_idxs = get_cv_idxs(len(fnames), val_pct=min(0.01/keep_pct, 0.1))\n", "((val_x,trn_x),(val_y,trn_y)) = split_by_idx(val_idxs, np.array(fnames), np.array(fnames))\n", "len(val_x),len(trn_x)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["img_fn = PATH/'train'/'n01558993'/'n01558993_9684.JPEG'"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 38, "lines": ["tfms = tfms_from_model(arch, sz_lr, tfm_y=TfmType.PIXEL, aug_tfms=aug_tfms, sz_y=sz_hr)\n", "datasets = ImageData.get_ds(MatchedFilesDataset, (trn_x,trn_y), (val_x,val_y), tfms, path=PATH_TRN)\n", "md = ImageData(PATH, datasets, bs, num_workers=16, classes=None)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["denorm = md.val_ds.denorm"]}, {"block": 15, "type": "code", "linesLength": 6, "startIndex": 42, "lines": ["def show_img(ims, idx, figsize=(5,5), normed=True, ax=None):\n", "    if ax is None: fig,ax = plt.subplots(figsize=figsize)\n", "    if normed: ims = denorm(ims)\n", "    else:      ims = np.rollaxis(to_np(ims),1,4)\n", "    ax.imshow(np.clip(ims,0,1)[idx])\n", "    ax.axis('off')"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 48, "lines": ["x,y = next(iter(md.val_dl))\n", "x.size(),y.size()"]}, {"block": 17, "type": "code", "linesLength": 4, "startIndex": 50, "lines": ["idx=1\n", "fig,axes = plt.subplots(1, 2, figsize=(9,5))\n", "show_img(x,idx, ax=axes[0])\n", "show_img(y,idx, ax=axes[1])"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 54, "lines": ["batches = [next(iter(md.aug_dl)) for i in range(9)]"]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 55, "lines": ["fig, axes = plt.subplots(3, 6, figsize=(18, 9))\n", "for i,(x,y) in enumerate(batches):\n", "    show_img(x,idx, ax=axes.flat[i*2])\n", "    show_img(y,idx, ax=axes.flat[i*2+1])"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["## Model"]}, {"block": 21, "type": "code", "linesLength": 4, "startIndex": 60, "lines": ["def conv(ni, nf, kernel_size=3, actn=False):\n", "    layers = [nn.Conv2d(ni, nf, kernel_size, padding=kernel_size//2)]\n", "    if actn: layers.append(nn.ReLU(True))\n", "    return nn.Sequential(*layers)"]}, {"block": 22, "type": "code", "linesLength": 7, "startIndex": 64, "lines": ["class ResSequential(nn.Module):\n", "    def __init__(self, layers, res_scale=1.0):\n", "        super().__init__()\n", "        self.res_scale = res_scale\n", "        self.m = nn.Sequential(*layers)\n", "\n", "    def forward(self, x): return x + self.m(x) * self.res_scale"]}, {"block": 23, "type": "code", "linesLength": 4, "startIndex": 71, "lines": ["def res_block(nf):\n", "    return ResSequential(\n", "        [conv(nf, nf, actn=True), conv(nf, nf)],\n", "        0.1)"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 75, "lines": ["def upsample(ni, nf, scale):\n", "    layers = []\n", "    for i in range(int(math.log(scale,2))):\n", "        layers += [conv(ni, nf*4), nn.PixelShuffle(2)]\n", "    return nn.Sequential(*layers)"]}, {"block": 25, "type": "code", "linesLength": 11, "startIndex": 80, "lines": ["class SrResnet(nn.Module):\n", "    def __init__(self, nf, scale):\n", "        super().__init__()\n", "        features = [conv(3, 64)]\n", "        for i in range(8): features.append(res_block(64))\n", "        features += [conv(64,64), upsample(64, 64, scale),\n", "                     nn.BatchNorm2d(64),\n", "                     conv(64, 3)]\n", "        self.features = nn.Sequential(*features)\n", "        \n", "    def forward(self, x): return self.features(x)"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 91, "lines": ["## Pixel loss"]}, {"block": 27, "type": "code", "linesLength": 4, "startIndex": 92, "lines": ["m = to_gpu(SrResnet(64, scale))\n", "m = nn.DataParallel(m, [0,2])\n", "learn = Learner(md, SingleModel(m), opt_fn=optim.Adam)\n", "learn.crit = F.mse_loss"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 96, "lines": ["learn.lr_find(start_lr=1e-5, end_lr=10000)\n", "learn.sched.plot()"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["lr=2e-3"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 99, "lines": ["learn.fit(lr, 1, cycle_len=1, use_clr_beta=(40,10))"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 100, "lines": ["x,y = next(iter(md.val_dl))\n", "preds = learn.model(VV(x))"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 102, "lines": ["idx=4\n", "show_img(y,idx,normed=False)"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 104, "lines": ["show_img(preds,idx,normed=False);"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 105, "lines": ["show_img(x,idx,normed=True);"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 106, "lines": ["x,y = next(iter(md.val_dl))\n", "preds = learn.model(VV(x))"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 108, "lines": ["show_img(y,idx,normed=False)"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 109, "lines": ["show_img(preds,idx,normed=False);"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 110, "lines": ["show_img(x,idx);"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 111, "lines": ["## Perceptual loss"]}, {"block": 40, "type": "code", "linesLength": 12, "startIndex": 112, "lines": ["def icnr(x, scale=2, init=nn.init.kaiming_normal):\n", "    new_shape = [int(x.shape[0] / (scale ** 2))] + list(x.shape[1:])\n", "    subkernel = torch.zeros(new_shape)\n", "    subkernel = init(subkernel)\n", "    subkernel = subkernel.transpose(0, 1)\n", "    subkernel = subkernel.contiguous().view(subkernel.shape[0],\n", "                                            subkernel.shape[1], -1)\n", "    kernel = subkernel.repeat(1, 1, scale ** 2)\n", "    transposed_shape = [x.shape[1]] + [x.shape[0]] + list(x.shape[2:])\n", "    kernel = kernel.contiguous().view(transposed_shape)\n", "    kernel = kernel.transpose(0, 1)\n", "    return kernel"]}, {"block": 41, "type": "code", "linesLength": 5, "startIndex": 124, "lines": ["m_vgg = vgg16(True)\n", "\n", "blocks = [i-1 for i,o in enumerate(children(m_vgg))\n", "              if isinstance(o,nn.MaxPool2d)]\n", "blocks, [m_vgg[i] for i in blocks]"]}, {"block": 42, "type": "code", "linesLength": 3, "startIndex": 129, "lines": ["vgg_layers = children(m_vgg)[:23]\n", "m_vgg = nn.Sequential(*vgg_layers).cuda().eval()\n", "set_trainable(m_vgg, False)"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["def flatten(x): return x.view(x.size(0), -1)"]}, {"block": 44, "type": "code", "linesLength": 5, "startIndex": 133, "lines": ["class SaveFeatures():\n", "    features=None\n", "    def __init__(self, m): self.hook = m.register_forward_hook(self.hook_fn)\n", "    def hook_fn(self, module, input, output): self.features = output\n", "    def remove(self): self.hook.remove()        "]}, {"block": 45, "type": "code", "linesLength": 18, "startIndex": 138, "lines": ["class FeatureLoss(nn.Module):\n", "    def __init__(self, m, layer_ids, layer_wgts):\n", "        super().__init__()\n", "        self.m,self.wgts = m,layer_wgts\n", "        self.sfs = [SaveFeatures(m[i]) for i in layer_ids]\n", "\n", "    def forward(self, input, target, sum_layers=True):\n", "        self.m(VV(target.data))\n", "        res = [F.l1_loss(input,target)/100]\n", "        targ_feat = [V(o.features.data.clone()) for o in self.sfs]\n", "        self.m(input)\n", "        res += [F.l1_loss(flatten(inp.features),flatten(targ))*wgt\n", "               for inp,targ,wgt in zip(self.sfs, targ_feat, self.wgts)]\n", "        if sum_layers: res = sum(res)\n", "        return res\n", "    \n", "    def close(self):\n", "        for o in self.sfs: o.remove()"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 156, "lines": ["m = SrResnet(64, scale)"]}, {"block": 47, "type": "code", "linesLength": 3, "startIndex": 157, "lines": ["conv_shuffle = m.features[10][0][0]\n", "kernel = icnr(conv_shuffle.weight, scale=scale)\n", "conv_shuffle.weight.data.copy_(kernel);"]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 160, "lines": ["m = to_gpu(m)"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 161, "lines": ["learn = Learner(md, SingleModel(m), opt_fn=optim.Adam)"]}, {"block": 50, "type": "code", "linesLength": 2, "startIndex": 162, "lines": ["t = torch.load(learn.get_model_path('sr-samp0'), map_location=lambda storage, loc: storage)\n", "learn.model.load_state_dict(t, strict=False)"]}, {"block": 51, "type": "code", "linesLength": 1, "startIndex": 164, "lines": ["learn.freeze_to(999)"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 165, "lines": ["for i in range(10,13): set_trainable(m.features[i], True)"]}, {"block": 53, "type": "code", "linesLength": 3, "startIndex": 166, "lines": ["conv_shuffle = m.features[10][2][0]\n", "kernel = icnr(conv_shuffle.weight, scale=scale)\n", "conv_shuffle.weight.data.copy_(kernel);"]}, {"block": 54, "type": "code", "linesLength": 2, "startIndex": 169, "lines": ["m = nn.DataParallel(m, [0,2])\n", "learn = Learner(md, SingleModel(m), opt_fn=optim.Adam)"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 171, "lines": ["learn.set_data(md)"]}, {"block": 56, "type": "code", "linesLength": 1, "startIndex": 172, "lines": ["learn.crit = FeatureLoss(m_vgg, blocks[:3], [0.2,0.7,0.1])"]}, {"block": 57, "type": "code", "linesLength": 2, "startIndex": 173, "lines": ["lr=6e-3\n", "wd=1e-7"]}, {"block": 58, "type": "code", "linesLength": 1, "startIndex": 175, "lines": ["learn.lr_find(1e-4, 0.1, wds=wd, linear=True)"]}, {"block": 59, "type": "code", "linesLength": 1, "startIndex": 176, "lines": ["learn.sched.plot(n_skip_end=1)"]}, {"block": 60, "type": "code", "linesLength": 1, "startIndex": 177, "lines": ["learn.fit(lr, 1, cycle_len=2, wds=wd, use_clr=(20,10))"]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 178, "lines": ["learn.save('sr-samp0')"]}, {"block": 62, "type": "code", "linesLength": 1, "startIndex": 179, "lines": ["learn.save('sr-samp1')"]}, {"block": 63, "type": "code", "linesLength": 1, "startIndex": 180, "lines": ["learn.load('sr-samp1')"]}, {"block": 64, "type": "code", "linesLength": 1, "startIndex": 181, "lines": ["lr=3e-3"]}, {"block": 65, "type": "code", "linesLength": 1, "startIndex": 182, "lines": ["learn.fit(lr, 1, cycle_len=1, wds=wd, use_clr=(20,10))"]}, {"block": 66, "type": "code", "linesLength": 1, "startIndex": 183, "lines": ["learn.save('sr-samp2')"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 184, "lines": ["learn.unfreeze()"]}, {"block": 68, "type": "code", "linesLength": 1, "startIndex": 185, "lines": ["learn.load('sr-samp2')"]}, {"block": 69, "type": "code", "linesLength": 1, "startIndex": 186, "lines": ["learn.fit(lr/3, 1, cycle_len=1, wds=wd, use_clr=(20,10))"]}, {"block": 70, "type": "code", "linesLength": 1, "startIndex": 187, "lines": ["learn.save('sr1')"]}, {"block": 71, "type": "code", "linesLength": 1, "startIndex": 188, "lines": ["learn.sched.plot_loss()"]}, {"block": 72, "type": "code", "linesLength": 7, "startIndex": 189, "lines": ["def plot_ds_img(idx, ax=None, figsize=(7,7), normed=True):\n", "    if ax is None: fig,ax = plt.subplots(figsize=figsize)\n", "    im = md.val_ds[idx][0]\n", "    if normed: im = denorm(im)[0]\n", "    else:      im = np.rollaxis(to_np(im),0,3)\n", "    ax.imshow(im)\n", "    ax.axis('off')"]}, {"block": 73, "type": "code", "linesLength": 2, "startIndex": 196, "lines": ["fig,axes=plt.subplots(6,6,figsize=(20,20))\n", "for i,ax in enumerate(axes.flat): plot_ds_img(i+200,ax=ax, normed=True)"]}, {"block": 74, "type": "code", "linesLength": 1, "startIndex": 198, "lines": ["x,y=md.val_ds[215]"]}, {"block": 75, "type": "code", "linesLength": 1, "startIndex": 199, "lines": ["y=y[None]"]}, {"block": 76, "type": "code", "linesLength": 3, "startIndex": 200, "lines": ["learn.model.eval()\n", "preds = learn.model(VV(x[None]))\n", "x.shape,y.shape,preds.shape"]}, {"block": 77, "type": "code", "linesLength": 1, "startIndex": 203, "lines": ["learn.crit(preds, V(y), sum_layers=False)"]}, {"block": 78, "type": "code", "linesLength": 1, "startIndex": 204, "lines": ["learn.crit.close()"]}, {"block": 79, "type": "code", "linesLength": 3, "startIndex": 205, "lines": ["_,axes=plt.subplots(1,2,figsize=(14,7))\n", "show_img(x[None], 0, ax=axes[0])\n", "show_img(preds,0, normed=True, ax=axes[1])"]}, {"block": 80, "type": "code", "linesLength": 0, "startIndex": 208, "lines": []}]