[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["##ThinkDSP\n", "\n", "This notebook contains code solutions to exercises in Chapter 4: Noise\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 10, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import thinkstats2\n", "\n", "import numpy as np\n", "import pandas as pd\n", "\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 8, "startIndex": 17, "lines": ["**Exercise:** ``A Soft Murmur'' is a web site that plays a mixture of natural\n", "noise sources, including rain, waves, wind, etc.  At\n", "http://asoftmurmur.com/about/ you can find their list\n", "of recordings, most of which are at http://freesound.org.\n", "\n", "Download a few of these files and compute the spectrum of each\n", "signal.  Does the power spectrum look like white noise, pink noise,\n", "or Brownian noise?  How does the spectrum vary over time?"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["wave = thinkdsp.read_wave('132736__ciccarelli__ocean-waves.wav')\n", "wave.make_audio()"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["I chose a recording of ocean waves.  I selected a short segment:"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["segment = wave.segment(start=1.5, duration=1.0)\n", "segment.make_audio()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["And here's its spectrum:"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 31, "lines": ["spectrum = segment.make_spectrum()\n", "\n", "thinkplot.preplot(2)\n", "spectrum.plot()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Amplitude drops off with frequency, so this might be red or pink noise.  We can check by looking at the power spectrum on a log-log scale."]}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["thinkplot.preplot(2)\n", "spectrum.plot_power()\n", "thinkplot.config(xscale='log', yscale='log', legend=False)"]}, {"block": 10, "type": "markdown", "linesLength": 5, "startIndex": 39, "lines": ["This structure, with increasing and then decreasing amplitude, seems to be common in natural noise sources.\n", "\n", "Above $f = 10^3$, it might be dropping off linearly, but we can't really tell.\n", "\n", "To see how the spectrum changes over time, I'll select another segment:"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 44, "lines": ["segment2 = wave.segment(start=2.5, duration=1.0)\n", "segment2.make_audio()"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["And plot the two spectrums:"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 47, "lines": ["spectrum2 = segment2.make_spectrum()\n", "\n", "thinkplot.preplot(2)\n", "spectrum.plot()\n", "spectrum2.plot(color='orange')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["Here they are again, plotting power on a log-log scale."]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 53, "lines": ["thinkplot.preplot(2)\n", "spectrum.plot_power()\n", "spectrum2.plot_power(color='orange')\n", "thinkplot.config(xscale='log', yscale='log')"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 57, "lines": ["So the structure seems to be consistent over time.\n", "\n", "We can also look at a spectrogram:"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["segment.make_spectrogram(512).plot(high=100)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Within this segment, the overall amplitude drops off, but the mixture of frequencies seems consistent."]}, {"block": 19, "type": "markdown", "linesLength": 13, "startIndex": 62, "lines": ["**Exercise:** In a noise signal, the mixture of frequencies changes over time.\n", "In the long run, we expect the power at all frequencies to be equal,\n", "but in any sample, the power at each frequency is random.\n", "\n", "To estimate the long-term average power at each frequency, we can\n", "break a long signal into segments, compute the power spectral\n", "density for each segment, and then compute the average across\n", "the segments.  You can read more about this algorithm at\n", "http://en.wikipedia.org/wiki/Bartlett's_method.\n", "\n", "Implement Bartlett's method and use it to estimate the power\n", "spectral density for a noise wave.  Hint: look at the implementation\n", "of `make_spectrogram`."]}, {"block": 20, "type": "code", "linesLength": 7, "startIndex": 75, "lines": ["def bartlett_method(wave, seg_length=512):\n", "    spectro = wave.make_spectrogram(seg_length)\n", "    spectrums = spectro.spec_map.values()\n", "    psds = [spectrum.power for spectrum in spectrums]\n", "    hs = np.sqrt(sum(psds))\n", "    spectrum = thinkdsp.Spectrum(hs, wave.framerate)\n", "    return spectrum"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["`bartlett_method` makes a spectrogram and extracts `spec_map`, which maps from times to Spectrum objects.  It computes the PSD for each spectrum, adds them up, and puts the results into a Spectrum object."]}, {"block": 22, "type": "code", "linesLength": 11, "startIndex": 83, "lines": ["psd = bartlett_method(segment)\n", "psd2 = bartlett_method(segment2)\n", "\n", "thinkplot.preplot(2)\n", "psd.plot_power()\n", "psd2.plot_power(color='orange')\n", "\n", "thinkplot.config(xlabel='freq (Hz)', \n", "                 ylabel='power', \n", "                 xscale='log', \n", "                 yscale='log')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["Now we can see the relationship between power and frequency more clearly.  It is not a simple linear relationship, but it is consistent across different segments, even in details like the notches near 5000 Hz, 6000 Hz, and above 10,000 Hz. "]}, {"block": 24, "type": "markdown", "linesLength": 4, "startIndex": 95, "lines": ["**Exercise:** At http://www.coindesk.com you can download the daily\n", "price of a BitCoin as a CSV file.  Read this file and compute\n", "the spectrum of BitCoin prices as a function of time.\n", "Does it resemble white, pink, or Brownian noise?"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 99, "lines": ["df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=1625, parse_dates=[0])\n", "ys = df.Close.values"]}, {"block": 26, "type": "code", "linesLength": 2, "startIndex": 101, "lines": ["wave = thinkdsp.Wave(ys, framerate=1)\n", "wave.plot()"]}, {"block": 27, "type": "code", "linesLength": 3, "startIndex": 103, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot_power()\n", "thinkplot.config(xscale='log', yscale='log', legend=False)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 106, "lines": ["The slope is -1.8, which is similar to red noise (which should have a slope of -2)."]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 107, "lines": ["spectrum.estimate_slope()[0]"]}, {"block": 30, "type": "markdown", "linesLength": 6, "startIndex": 108, "lines": ["**Exercise:** The algorithm in this chapter for generating pink noise is\n", "conceptually simple but computationally expensive.  There are\n", "more efficient alternatives, like the Voss-McCartney algorithm.\n", "Research this method, implement it, compute the spectrum of\n", "the result, and confirm that it has the desired relationship\n", "between power and frequency."]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 114, "lines": ["# TODO: Write a solution to this exercise."]}]