[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## NLP Interpret"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.text import * \n", "from fastai.text.interpret import *"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["[`text.interpret`](/text.interpret.html#text.interpret) is the module that implements custom [`Interpretation`](/train.html#Interpretation) classes for different NLP tasks by inheriting from it."]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 5, "lines": ["from fastai.gen_doc.nbdoc import *\n", "from fastai.vision import *"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["show_doc(TextClassificationInterpretation)"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 8, "lines": ["show_doc(TextClassificationInterpretation.intrinsic_attention)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 9, "lines": ["show_doc(TextClassificationInterpretation.html_intrinsic_attention)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["show_doc(TextClassificationInterpretation.show_intrinsic_attention)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["show_doc(TextClassificationInterpretation.show_top_losses)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Let's show how [`TextClassificationInterpretation`](/text.interpret.html#TextClassificationInterpretation) can be used once we train a text classification model."]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### train "]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["imdb = untar_data(URLs.IMDB_SAMPLE)"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 15, "lines": ["data_lm = (TextList.from_csv(imdb, 'texts.csv', cols='text')\n", "                   .split_by_rand_pct()\n", "                   .label_for_lm()\n", "                   .databunch())\n", "data_lm.save()"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["data_lm.show_batch()"]}, {"block": 14, "type": "code", "linesLength": 4, "startIndex": 21, "lines": ["learn = language_model_learner(data_lm, AWD_LSTM)\n", "learn.fit_one_cycle(2, 1e-2)\n", "learn.save('mini_train_lm')\n", "learn.save_encoder('mini_train_encoder')"]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 25, "lines": ["data_clas = (TextList.from_csv(imdb, 'texts.csv', cols='text', vocab=data_lm.vocab)\n", "                   .split_from_df(col='is_valid')\n", "                   .label_from_df(cols='label')\n", "                   .databunch(bs=42))"]}, {"block": 16, "type": "code", "linesLength": 4, "startIndex": 29, "lines": ["learn = text_classifier_learner(data_clas, AWD_LSTM)\n", "learn.load_encoder('mini_train_encoder')\n", "learn.fit_one_cycle(2, slice(1e-3,1e-2))\n", "learn.save('mini_train_clas')"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["### interpret"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["interp = TextClassificationInterpretation.from_learner(learn) "]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["interp.show_intrinsic_attention(\"I really like this movie, it is amazing!\")"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["## Undocumented Methods - Methods moved below this line will intentionally be hidden"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["## New Methods - Please document or move to the undocumented section"]}]