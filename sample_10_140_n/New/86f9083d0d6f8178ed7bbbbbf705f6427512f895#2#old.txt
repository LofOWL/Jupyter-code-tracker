[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["##ThinkDSP\n", "\n", "This notebook contains code solutions to exercises in Chapter 2: Harmonics\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 10, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import numpy as np\n", "import math\n", "\n", "PI2 = 2 * math.pi\n", "\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["Make a recording of an interesting sound as a WAV file, or go to freesound.org and find one.  Load it and play it from IPython.  If you make an interesting recording, consider uploading it to freesound (and make a note if you do).\n", "\n", "WARNING: LOUD!"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 20, "lines": ["wave = thinkdsp.read_wave('18871__zippi1__sound-bell-440hz.wav')\n", "wave.make_audio()"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["Select a short segment of a waveform and plot it.  See if you can find a segment that shows a few cycles of a periodic signal.  Does it look like a sinusoid or mixture of sinusoids?"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["wave.segment(start=1.0, duration=0.01).plot()"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["wave.segment(start=10.0, duration=0.01).plot()"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Compute and plot the spectrum of at least one segment of the wave.  Describe the harmonic structure, if any."]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 26, "lines": ["segment = wave.segment(start=10.0, duration=0.1)\n", "spectrum = segment.make_spectrum()\n", "spectrum.plot(high=100)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Apply a few different filters to the segment (or the whole wave) and listen to the effect.  Try a low pass, high pass, and band-stop filter.  Try some different cutoff frequencies."]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 30, "lines": ["segment = wave.segment(start=1.0, duration=0.5)\n", "spectrum = segment.make_spectrum()\n", "spectrum.plot(high=2000)"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 33, "lines": ["spectrum.low_pass(500)\n", "spectrum.plot(high=2000)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["spectrum.make_wave().make_audio()"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Synthesize a wave by creating a spectrum with arbitrary harmonics, invoking make_wave, and listening. What happens as you add frequency components that are not multiples of the fundamental?"]}, {"block": 14, "type": "code", "linesLength": 16, "startIndex": 37, "lines": ["framerate = 20000\n", "duration = 0.5\n", "max_freq = framerate / 2\n", "n = duration * framerate / 2 \n", "\n", "freqs = numpy.arange(500, 9500, 500)\n", "amps = 1 / freqs**2\n", "\n", "hs = numpy.zeros(n, dtype=numpy.complex)\n", "\n", "for freq, amp in zip(freqs, amps):\n", "    index = freq / max_freq * n\n", "    hs[index] = amp\n", "\n", "spectrum = thinkdsp.Spectrum(hs, framerate=framerate)\n", "spectrum.make_wave().make_audio()"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 53, "lines": ["A sawtooth signal has a waveform that ramps up linearly from -1 to 1, then drops to -1 and repeats. See \n", "\n", "Write a class called SawtoothSignal that extends Signal and provides evaluate to evaluate a sawtooth signal.  Note: there is an implementation of SawtoothSignal in thinkdsp.py; you should avoid looking at it until you have written your own."]}, {"block": 16, "type": "code", "linesLength": 14, "startIndex": 56, "lines": ["class SawtoothSignal(thinkdsp.Sinusoid):\n", "    \"\"\"Represents a sawtooth signal.\"\"\"\n", "    \n", "    def evaluate(self, ts):\n", "        \"\"\"Evaluates the signal at the given times.\n", "\n", "        ts: float array of times\n", "        \n", "        returns: float wave array\n", "        \"\"\"\n", "        cycles = self.freq * ts + self.offset / PI2\n", "        frac, _ = numpy.modf(cycles)\n", "        ys = thinkdsp.normalize(thinkdsp.unbias(frac), self.amp)\n", "        return ys"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["SawtoothSignal().make_wave(framerate=40000).make_audio()"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["Compute the spectrum of a sawtooth wave. How does the harmonic structure compare to triangle and square waves?"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 72, "lines": ["SawtoothSignal().make_wave(framerate=40000).make_spectrum().plot()"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["Sample an 1100 Hz triangle at 10000 frames per second and listen to it. Can you hear the aliased harmonic? It might help if you play a sequence of notes with increasing pitch."]}, {"block": 21, "type": "code", "linesLength": 7, "startIndex": 74, "lines": ["from operator import __or__\n", "\n", "waves = [thinkdsp.TriangleSignal(freq).make_wave(duration=0.5, framerate=10000) for freq in [900, 950, 1000, 1050, 1100]]\n", "    \n", "wave = reduce(__or__, waves)\n", "    \n", "wave.make_audio()"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 81, "lines": ["wave.make_spectrum().plot()"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["wave.make_spectrogram(seg_length=1024).plot()"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["Compute the spectrum of an 1100 Hz square wave sampled at 10 kHz, and compare it to the spectrum of a triangle wave in Figure 2.5"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 84, "lines": ["wave = thinkdsp.SquareSignal(1100).make_wave(duration=0.5, framerate=10000)\n", "wave.make_spectrum().plot()"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["The triangle and square waves have odd harmonics only; the sawtooth wave has both even and odd harmonics. The harmonics of the square and sawtooth waves drop off in proportion to $1/f$; the harmonics of the triangle wave drop off like $1/f^2$. Can you find a waveform that has even and odd harmonics that drop off like $1/f^2$?"]}, {"block": 27, "type": "code", "linesLength": 3, "startIndex": 87, "lines": ["signal = thinkdsp.SawtoothSignal(freq=500)\n", "wave = signal.make_wave(duration=0.5, framerate=20000)\n", "wave.make_audio()"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 90, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 92, "lines": ["spectrum.pink_filter(beta=2)\n", "spectrum.plot()"]}, {"block": 30, "type": "code", "linesLength": 2, "startIndex": 94, "lines": ["wave = spectrum.make_wave()\n", "wave.make_audio()"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 96, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 32, "type": "code", "linesLength": 6, "startIndex": 97, "lines": ["import numpy\n", "freqs = numpy.arange(500, 9500, 500)\n", "amps = 1 / freqs**2\n", "signal = sum(thinkdsp.CosSignal(freq, amp) for freq, amp in zip(freqs, amps))\n", "wave = signal.make_wave(duration=0.5, framerate=20000)\n", "wave.make_audio()"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 103, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 105, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 35, "type": "code", "linesLength": 5, "startIndex": 106, "lines": ["signal = thinkdsp.SawtoothSignal(freq=500)\n", "wave = signal.make_wave(duration=0.5, framerate=20000)\n", "wave.ys = numpy.cumsum(wave.ys)\n", "wave.unbias()\n", "wave.make_audio()"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 112, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 38, "type": "code", "linesLength": 15, "startIndex": 114, "lines": ["class ParabolicSignal(thinkdsp.Sinusoid):\n", "    \"\"\"Represents a parabolic signal.\"\"\"\n", "    \n", "    def evaluate(self, ts):\n", "        \"\"\"Evaluates the signal at the given times.\n", "\n", "        ts: float array of times\n", "        \n", "        returns: float wave array\n", "        \"\"\"\n", "        cycles = self.freq * ts + self.offset / PI2\n", "        frac, _ = numpy.modf(cycles)\n", "        ys = frac**2\n", "        ys = thinkdsp.normalize(thinkdsp.unbias(ys), self.amp)\n", "        return ys"]}, {"block": 39, "type": "code", "linesLength": 2, "startIndex": 129, "lines": ["wave = ParabolicSignal(freq=500).make_wave(duration=0.5, framerate=20000)\n", "wave.make_audio()"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["wave.segment(duration=0.01).plot()"]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 132, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 42, "type": "code", "linesLength": 0, "startIndex": 134, "lines": []}]