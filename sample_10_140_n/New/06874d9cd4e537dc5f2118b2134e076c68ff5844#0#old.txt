[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["# MNIST GPU Deep Learning Benchmark with H2O Deep Water\n", "In reference to [Szilard's Benchmark-DL](https://github.com/szilard/benchm-dl)"]}, {"block": 1, "type": "code", "linesLength": 7, "startIndex": 2, "lines": ["import sys, os\n", "import os.path\n", "import h2o\n", "from h2o.estimators.deepwater import H2ODeepWaterEstimator\n", "PATH = os.path.expanduser(\"~/h2o-3/\")\n", "h2o.init(nthreads=-1)\n", "if not H2ODeepWaterEstimator.available(): exit"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["### We use one NVidia GTX1080"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["!nvidia-smi"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["### We define the CNN"]}, {"block": 5, "type": "code", "linesLength": 23, "startIndex": 12, "lines": ["def cnn(num_classes):\n", "    import mxnet as mx\n", "    data = mx.symbol.Variable('data')\n", "\n", "    conv1 = mx.symbol.Convolution(data=data, kernel=(4,4), num_filter=32)\n", "    relu1 = mx.symbol.Activation(data=conv1, act_type=\"relu\")\n", "    pool1 = mx.symbol.Pooling(data=relu1, pool_type=\"max\", kernel=(2,2), stride=(2,2))\n", "\n", "    conv2 = mx.symbol.Convolution(data=pool1, kernel=(3,3), num_filter=16)\n", "    relu2 = mx.symbol.Activation(data=conv2, act_type=\"relu\")\n", "    pool2 = mx.symbol.Pooling(data=relu2, pool_type=\"max\", kernel=(2,2), stride=(2,2))\n", "    drop = mx.symbol.Dropout(data=pool2, p=0.2)\n", "\n", "    flatten = mx.symbol.Flatten(data=drop)\n", "    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=128)\n", "    relu3 = mx.symbol.Activation(data=fc1, act_type=\"relu\")\n", "\n", "    fc2 = mx.symbol.FullyConnected(data=relu3, num_hidden=64)\n", "    relu4 = mx.symbol.Activation(data=fc2, act_type=\"relu\")\n", "\n", "    fc3 = mx.symbol.FullyConnected(data=relu4, num_hidden=num_classes)\n", "    net = mx.symbol.SoftmaxOutput(data=fc3, name='softmax')\n", "    return net"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["### Let's train the model"]}, {"block": 7, "type": "code", "linesLength": 22, "startIndex": 36, "lines": ["train = h2o.import_file(PATH + \"bigdata/laptop/mnist/train.csv.gz\")\n", "predictors  = list(range(0,784))\n", "resp        = 784\n", "train[resp] = train[resp].asfactor()\n", "nclasses    = train[resp].nlevels()[0]\n", "cnn(nclasses).save(\"/tmp/cnn.json\")\n", "model = H2ODeepWaterEstimator(epochs=10,\n", "                              learning_rate=0.05,\n", "                              learning_rate_annealing=1e-5,\n", "                              momentum_start=0.9,\n", "                              momentum_stable=0.9,\n", "                              mini_batch_size=128,\n", "                              train_samples_per_iteration=0,\n", "                              score_duty_cycle=0,\n", "                              stopping_rounds=0,\n", "                              ignore_const_cols=False,\n", "                              network_definition_file=\"/tmp/cnn.json\",\n", "                              image_shape=[28,28],\n", "                              channels=1,\n", "                              device_id=[0])\n", "\n", "model.train(x=predictors,y=resp, training_frame=train)"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 58, "lines": ["### It takes about 26 seconds to train 600k samples"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["model.scoring_history()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["### Let's evaluate the test set performance"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 61, "lines": ["test = h2o.import_file(PATH + \"bigdata/laptop/mnist/test.csv.gz\")\n", "print(model.model_performance(test))"]}]