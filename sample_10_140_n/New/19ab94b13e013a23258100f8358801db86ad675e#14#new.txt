[{"block": 0, "type": "code", "linesLength": 1, "startIndex": 0, "lines": ["import h2o"]}, {"block": 1, "type": "code", "linesLength": 1, "startIndex": 1, "lines": ["h2o.init()"]}, {"block": 2, "type": "code", "linesLength": 4, "startIndex": 2, "lines": ["from h2o.utils.shared_utils import _locate # private function. used to find files within h2o git project directory.\n", "\n", "# Airlines dataset\n", "air = h2o.import_file(path=_locate(\"smalldata/airlines/AirlinesTrain.csv.zip\"))"]}, {"block": 3, "type": "code", "linesLength": 7, "startIndex": 6, "lines": ["# Construct validation and training datasets by sampling (20/80)\n", "r = air[0].runif()\n", "air_train = air[r < 0.8]\n", "air_valid = air[r >= 0.8]\n", "\n", "myX = [\"Origin\", \"Dest\", \"Distance\", \"UniqueCarrier\", \"fMonth\", \"fDayofMonth\", \"fDayOfWeek\"]\n", "myY = \"IsDepDelayed\""]}, {"block": 4, "type": "code", "linesLength": 9, "startIndex": 13, "lines": ["# Build gbm\n", "gbm = h2o.gbm(x=air_train[myX], \n", "              y=air_train[myY], \n", "              validation_x=air_valid[myX],\n", "              validation_y=air_valid[myY],\n", "              distribution=\"bernoulli\", \n", "              ntrees=100, \n", "              max_depth=3, \n", "              learn_rate=0.01)"]}, {"block": 5, "type": "code", "linesLength": 10, "startIndex": 22, "lines": ["# Show various confusion matrices for training dataset (based on metric(s))\n", "print(gbm.confusion_matrix()) # maximum f1 threshold chosen by default\n", "\n", "print(gbm.confusion_matrix(metrics=\"f2\"))\n", "\n", "print(gbm.confusion_matrix(metrics=\"precision\"))\n", "\n", "cms = gbm.confusion_matrix(metrics=[\"accuracy\", \"f0point5\"])\n", "print(cms[0])\n", "print(cms[1])"]}, {"block": 6, "type": "code", "linesLength": 7, "startIndex": 32, "lines": ["# Show various confusion matrices for training dataset (based on threshold(s))\n", "print(gbm.confusion_matrix(thresholds=0.77))\n", "\n", "cms = gbm.confusion_matrix(thresholds=[0.1, 0.5, 0.99])\n", "print(cms[0])\n", "print(cms[1])\n", "print(cms[2])"]}, {"block": 7, "type": "code", "linesLength": 8, "startIndex": 39, "lines": ["# Show various confusion matrices for validation dataset (based on metric(s))\n", "print(gbm.confusion_matrix(metrics=\"f2\", valid=True))\n", "\n", "print(gbm.confusion_matrix(metrics=\"precision\", valid=True))\n", "\n", "cms = gbm.confusion_matrix(metrics=[\"accuracy\", \"f0point5\"], valid=True)\n", "print(cms[0])\n", "print(cms[1])"]}, {"block": 8, "type": "code", "linesLength": 7, "startIndex": 47, "lines": ["# Show various confusion matrices for validation dataset (based on threshold(s))\n", "print(gbm.confusion_matrix(thresholds=0.77))\n", "\n", "cms = gbm.confusion_matrix(thresholds=[0.25, 0.33, 0.44])\n", "print(cms[0])\n", "print(cms[1])\n", "print(cms[2])"]}, {"block": 9, "type": "code", "linesLength": 10, "startIndex": 54, "lines": ["# Show various confusion matrices for validation dataset (based on metric(s) AND threshold(s))\n", "cms = gbm.confusion_matrix(thresholds=0.77, metrics=\"f1\") \n", "print(cms[0])\n", "print(cms[1])\n", "\n", "cms = gbm.confusion_matrix(thresholds=[0.25, 0.33], metrics=[\"f2\", \"f0point5\"])\n", "print(cms[0])\n", "print(cms[1])\n", "print(cms[2])\n", "print(cms[3])"]}, {"block": 10, "type": "code", "linesLength": 5, "startIndex": 64, "lines": ["# Test dataset\n", "air_test = h2o.import_file(path=_locate(\"smalldata/airlines/AirlinesTest.csv.zip\"))\n", "\n", "# Test performance\n", "gbm_perf = gbm.model_performance(air_test)"]}, {"block": 11, "type": "code", "linesLength": 8, "startIndex": 69, "lines": ["# Show various confusion matrices for test dataset (based on metric(s))\n", "print(gbm_perf.confusion_matrix(metrics=\"f0point5\"))\n", "\n", "print(gbm_perf.confusion_matrix(metrics=\"min_per_class_accuracy\"))\n", "\n", "cms = gbm_perf.confusion_matrix(metrics=[\"accuracy\", \"f0point5\"])\n", "print(cms[0])\n", "print(cms[1])"]}, {"block": 12, "type": "code", "linesLength": 7, "startIndex": 77, "lines": ["# Show various confusion matrices for test dataset (based on threshold(s))\n", "print(gbm_perf.confusion_matrix(thresholds=0.5))\n", "\n", "cms = gbm_perf.confusion_matrix(thresholds=[0.01, 0.75, .88])\n", "print(cms[0])\n", "print(cms[1])\n", "print(cms[2])"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 84, "lines": ["# Convert a ConfusionMatrix to a python list of lists: [ [tns,fps], [fns,tps] ]\n", "cm = gbm.confusion_matrix()\n", "print(cm.to_list())\n", "\n", "cm = gbm_perf.confusion_matrix()\n", "print(cm.to_list())"]}]