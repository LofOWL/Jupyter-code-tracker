[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["ThinkDSP, by Allen Downey\n", "\n", "This notebook contains code examples from Chapter 2: Harmonics"]}, {"block": 1, "type": "code", "linesLength": 7, "startIndex": 3, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "\n", "%precision 3\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Create a triangle signal and plot a 3 period segment."]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 11, "lines": ["signal = thinkdsp.TriangleSignal(200)\n", "duration = signal.period*3\n", "segment = signal.make_wave(duration, framerate=10000)\n", "segment.plot()"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Make a 1-second wave and play it."]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 16, "lines": ["segment = signal.make_wave(duration=1, framerate=10000)\n", "segment.apodize()\n", "segment.make_audio()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Make a 0.5 second wave and compute its spectrum."]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 20, "lines": ["wave = signal.make_wave(duration=0.5, framerate=10000)\n", "spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Make a square signal and plot a 3 period segment."]}, {"block": 9, "type": "code", "linesLength": 5, "startIndex": 24, "lines": ["signal = thinkdsp.SquareSignal(100)\n", "duration = signal.period*3\n", "segment = signal.make_wave(duration, framerate=10000)\n", "segment.plot()\n", "thinkplot.config(ylim=[-1.05, 1.05], legend=False)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Make a 1 second wave and play it."]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 30, "lines": ["segment = signal.make_wave(duration=1, framerate=10000)\n", "segment.apodize()\n", "segment.make_audio()"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Make a 0.5 second wave and compute its spectrum."]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 34, "lines": ["wave = signal.make_wave(duration=0.5, framerate=10000)\n", "spectrum = wave.make_spectrum()\n", "spectrum.plot()"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Make a cosine signal at 4500 Hz, make a wave at framerate 10 kHz, and plot 5 periods."]}, {"block": 15, "type": "code", "linesLength": 6, "startIndex": 38, "lines": ["framerate = 10000\n", "\n", "signal = thinkdsp.CosSignal(4500)\n", "duration = signal.period*5\n", "segment = signal.make_wave(duration, framerate=framerate)\n", "segment.plot()"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 44, "lines": ["Make a cosine signal at 5500 Hz, make a wave at framerate 10 kHz, and plot the same duration.\n", "\n", "With framerate 10 kHz, the folding frequency is 5 kHz, so a 4500 Hz signal and a 5500 Hz signal look exactly the same."]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 47, "lines": ["signal = thinkdsp.CosSignal(5500)\n", "segment = signal.make_wave(duration, framerate=framerate)\n", "segment.plot()"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["Make a triangle signal and plot the spectrum.  See how the harmonics get folded."]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 51, "lines": ["signal = thinkdsp.TriangleSignal(1100)\n", "segment = signal.make_wave(duration=0.5, framerate=10000)\n", "spectrum = segment.make_spectrum()\n", "spectrum.plot()"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["Explore the implementation of Wave.make_spectrum.  Make a triangle wave."]}, {"block": 21, "type": "code", "linesLength": 4, "startIndex": 56, "lines": ["signal = thinkdsp.TriangleSignal(880)\n", "wave = signal.make_wave(duration=1, framerate=10000)\n", "segment = wave.segment(duration=0.005)\n", "segment.plot()"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["Play it."]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["wave.make_audio()"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["Extract the wave array and compute the real FFT (which is just an FFT optimized for real inputs)."]}, {"block": 25, "type": "code", "linesLength": 3, "startIndex": 63, "lines": ["import numpy\n", "hs = numpy.fft.rfft(wave.ys)\n", "hs"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["Compute the frequencies that match up with the elements of the FFT."]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 67, "lines": ["f_max = framerate / 2.0\n", "fs = numpy.linspace(0, f_max, len(hs))"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 69, "lines": ["Plot the magnitudes vs the frequencies."]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 70, "lines": ["magnitude = numpy.absolute(hs)\n", "thinkplot.plot(fs, magnitude)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["Plot the phases vs the frequencies."]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 73, "lines": ["angle = numpy.angle(hs)\n", "thinkplot.plot(fs, angle)"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["Shuffle the phases."]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 76, "lines": ["import random\n", "random.shuffle(angle)\n", "thinkplot.plot(fs, angle)"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["Put the shuffled phases back into the spectrum.  Each element in `hs` is a complex number with magitude $A$ and phase $\\phi$, we we compute $A e^{i \\phi}$"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["i = complex(0, 1)\n", "spectrum.hs = magnitude * numpy.exp(i * angle)"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["Convert the spectrum back to a wave (which uses irfft)."]}, {"block": 37, "type": "code", "linesLength": 3, "startIndex": 83, "lines": ["wave = spectrum.make_wave()\n", "segment = wave.segment(duration=0.005)\n", "segment.plot()"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["Play the wave with the shuffled phases."]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 87, "lines": ["wave.make_audio()"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["Although the two signals have different waveforms, they have the same frequency components with the same amplitudes.  They differ only in phase."]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["The following interaction explores the effect of aliasing on the harmonics of a sawtooth signal."]}, {"block": 42, "type": "code", "linesLength": 6, "startIndex": 90, "lines": ["def view_harmonics(freq, framerate):\n", "    signal = thinkdsp.SawtoothSignal(freq)\n", "    wave = signal.make_wave(duration=0.1, framerate=framerate)\n", "    spectrum = wave.make_spectrum()\n", "    spectrum.plot(color='blue')\n", "    thinkplot.config(xlabel='frequency', ylabel='amplitude')"]}, {"block": 43, "type": "code", "linesLength": 6, "startIndex": 96, "lines": ["from ipywidgets import interact, interactive, fixed\n", "import ipywidgets as widgets\n", "\n", "slider1 = widgets.FloatSlider(min=100, max=10000, value=100, step=100)\n", "slider2 = widgets.FloatSlider(min=5000, max=40000, value=10000, step=1000)\n", "interact(view_harmonics, freq=slider1, framerate=slider2)"]}, {"block": 44, "type": "code", "linesLength": 0, "startIndex": 102, "lines": []}, {"block": 45, "type": "code", "linesLength": 0, "startIndex": 102, "lines": []}]