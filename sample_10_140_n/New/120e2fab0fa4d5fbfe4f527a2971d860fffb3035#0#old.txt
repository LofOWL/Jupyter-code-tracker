[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: IPython Widgets\n", "\n", "In this notebook, we will get an introduction to IPython widgets. These are useful tools that allow us to build interactivity in our notebooks for example, selecting certain data or updating charts."]}, {"block": 1, "type": "code", "linesLength": 20, "startIndex": 3, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.set_config_file(world_readable=True, theme=\"pearl\")\n", "cf.go_offline(connected=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n"]}, {"block": 2, "type": "code", "linesLength": 6, "startIndex": 23, "lines": ["import ipywidgets as widgets\n", "from ipywidgets import interact \n", "\n", "df = pd.read_parquet('https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/data/medium_data_2019_01_06?raw=true')\n", "df.head()\n", "df.describe()"]}, {"block": 3, "type": "code", "linesLength": 12, "startIndex": 29, "lines": ["from sklearn import datasets\n", "import matplotlib.pyplot as plt\n", "\n", "digits = datasets.load_digits()\n", "\n", "def browse_images(digits):\n", "    n = len(digits.images)\n", "    def view_image(i):\n", "        plt.imshow(digits.images[i], cmap=plt.cm.gray_r, interpolation='nearest')\n", "        plt.title('Training: %s' % digits.target[i])\n", "        plt.show()\n", "    interact(view_image, i=(0,n-1))"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["browse_images(digits)"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["import os\n", "from IPython.display import Image, display"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["selection.layout. = '200px'"]}, {"block": 7, "type": "code", "linesLength": 7, "startIndex": 45, "lines": ["fdir = 'images/'\n", "\n", "def show_images(file):\n", "    display(Image(fdir+file))\n", "    \n", "selection = widgets.Dropdown(options=os.listdir(fdir), description='Choose an Image')\n", "show_images_interact = interact(show_images, file=selection)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["show_images_interact.widget"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["!ls -a -t -r -l"]}, {"block": 10, "type": "code", "linesLength": 11, "startIndex": 54, "lines": ["import subprocess\n", "import pprint\n", "\n", "root_dir = '../../Data-Analysis/'\n", "\n", "def show_dir(dir):\n", "    x = subprocess.check_output(f\"cd {root_dir}{dir} && ls -a -t -r -l -h\", shell=True).decode()\n", "    print(x)\n", "\n", "    \n", "file_browser = interact(show_dir, dir=widgets.Dropdown(options=os.listdir(root_dir), value='bayesian_lr', description='Directory'))"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 65, "lines": ["from ipywidgets import interact, interactive\n", "from IPython.display import clear_output, display, HTML"]}, {"block": 12, "type": "code", "linesLength": 6, "startIndex": 67, "lines": ["def correlations(column1, column2):\n", "    print(f\"Correlation: {df[column1].corr(df[column2])}\")\n", "    \n", "corr_interact = interact(correlations, \n", "         column1 = widgets.Dropdown(options=list(df.select_dtypes('number').columns)),\n", "         column2=widgets.Dropdown(options=list(df.select_dtypes('number').columns)))"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 73, "lines": ["df.head()"]}, {"block": 14, "type": "code", "linesLength": 6, "startIndex": 74, "lines": ["def scatter_plot(x, y):\n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             xTitle=x.title(), yTitle=y.title(), title=f'{y.title()} vs {x.title()}')\n", "    \n", "scatter_interact = interact(scatter_plot, x = widgets.Dropdown(options=list(df.select_dtypes('number').columns), value='fans'),\n", "                                          y=widgets.Dropdown(options=list(df.select_dtypes('number').columns), value='num_responses'))"]}, {"block": 15, "type": "code", "linesLength": 9, "startIndex": 80, "lines": ["def scatter_plot(x, y, theme):\n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             xTitle=x.title(), yTitle=y.title(), \n", "             title=f'{y.title()} vs {x.title()}',\n", "            theme=theme)\n", "    \n", "scatter_interact = interact(scatter_plot, x = widgets.Dropdown(options=list(df.select_dtypes('number').columns), value='fans'),\n", "                                          y=widgets.Dropdown(options=list(df.select_dtypes('number').columns), value='num_responses'),\n", "                           theme=cf.themes.THEMES.keys())"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 89, "lines": ["from ipywidgets import interact_manual"]}, {"block": 17, "type": "code", "linesLength": 9, "startIndex": 90, "lines": ["def scatter_plot(x, y, theme):\n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             xTitle=x.title(), yTitle=y.title(), \n", "             title=f'{y.title()} vs {x.title()}',\n", "            theme=theme)\n", "    \n", "scatter_interact = interact_manual(scatter_plot, x = widgets.Dropdown(options=list(df.select_dtypes('number').columns), value='fans'),\n", "                                          y=widgets.Dropdown(options=list(df.select_dtypes('number').columns), value='num_responses'),\n", "                           theme=cf.themes.THEMES.keys())"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 99, "lines": ["df.set_index('published_date', inplace=True)"]}, {"block": 19, "type": "code", "linesLength": 8, "startIndex": 100, "lines": ["def plot_up_to(column, date):\n", "    date = pd.Timestamp(date)\n", "    plot_df = df[df.index <= date]\n", "    plot_df[column].cumsum().iplot(mode='markers+lines', xTitle='published date', yTitle=column,\n", "                                  title=f'{column.title()} Until {date.date()}')\n", "    \n", "interact(plot_up_to, column=widgets.Dropdown(options=list(df.columns)), \n", "         date = widgets.DatePicker(value=pd.to_datetime('2019-01-01')))"]}, {"block": 20, "type": "code", "linesLength": 0, "startIndex": 108, "lines": []}]