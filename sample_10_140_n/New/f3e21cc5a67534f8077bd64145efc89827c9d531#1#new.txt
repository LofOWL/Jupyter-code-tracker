[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["##ThinkDSP\n", "\n", "This notebook contains code solutions to exercises in Chapter 3: Non-periodic signals\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 14, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import numpy as np\n", "\n", "import warnings\n", "warnings.filterwarnings('ignore')\n", "\n", "from IPython.html.widgets import interact, interact_manual, fixed\n", "from IPython.html import widgets\n", "from IPython.display import display\n", "\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 10, "startIndex": 21, "lines": ["###Exercise\n", "\n", "Run and listen to the examples in chap03.ipynb.  In the leakage example, try replacing the Hamming window with one of the other windows provided by NumPy, and see what effect they have on leakage. \n", "\n", "See http://docs.scipy.org/doc/numpy/reference/routines.window.html\n", "\n", "\n", "### Solution\n", "\n", "Here's the leakage example:"]}, {"block": 3, "type": "code", "linesLength": 7, "startIndex": 31, "lines": ["signal = thinkdsp.SinSignal(freq=440)\n", "duration = signal.period * 30.25\n", "wave = signal.make_wave(duration)\n", "spectrum = wave.make_spectrum()\n", "\n", "spectrum.plot(high=880)\n", "thinkplot.config(xlabel='Frequency (Hz)')"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["The following figure shows the effect of 4 different windows."]}, {"block": 5, "type": "code", "linesLength": 10, "startIndex": 39, "lines": ["thinkplot.preplot(4)\n", "\n", "for window_func in [np.bartlett, np.blackman, np.hamming, np.hanning]:\n", "    wave = signal.make_wave(duration)\n", "    wave.ys *= window_func(len(wave.ys))\n", "\n", "    spectrum = wave.make_spectrum()\n", "    spectrum.plot(high=880, label=window_func.__name__)\n", "\n", "thinkplot.config(xlabel='Frequency (Hz)', legend=True)"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["All four do a good job of reducing leakage.  The Bartlett filter leaves some residual \"ringing\".  The Hamming filter dissipates the least amount of energy. "]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 50, "lines": ["###Exercise\n", "\n", "Write a class called `SawtoothChirp` that extends `Chirp` and overrides evaluate to generate a sawtooth waveform with frequency that increases (or decreases) linearly."]}, {"block": 8, "type": "code", "linesLength": 20, "startIndex": 53, "lines": ["import math\n", "PI2 = 2 * math.pi\n", "\n", "class SawtoothChirp(thinkdsp.Chirp):\n", "    \"\"\"Represents a sawtooth signal with varying frequency.\"\"\"\n", "\n", "    def _evaluate(self, ts, freqs):\n", "        \"\"\"Helper function that evaluates the signal.\n", "\n", "        ts: float array of times\n", "        freqs: float array of frequencies during each interval\n", "        \"\"\"\n", "        dts = np.diff(ts)\n", "        dps = PI2 * freqs * dts\n", "        phases = np.cumsum(dps)\n", "        phases = np.insert(phases, 0, 0)\n", "        cycles = phases / PI2\n", "        frac, _ = np.modf(cycles)\n", "        ys = thinkdsp.normalize(thinkdsp.unbias(frac), self.amp)\n", "        return ys\n"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["Here's what it sounds like."]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 74, "lines": ["signal = SawtoothChirp(start=220, end=880)\n", "wave = signal.make_wave(duration=1, framerate=10000)\n", "wave.apodize()\n", "wave.make_audio()"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 78, "lines": ["And here's the spectrogram."]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 79, "lines": ["sp = wave.make_spectrogram(1024)\n", "sp.plot()"]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 81, "lines": ["At a relatively low frame rate, you can see the aliased harmonics bouncing off the folding frequency.  And you can hear them as a background hiss.  If you crank up the frame rate, they go away.\n", "\n", "By the way, if you are a fan of the original Star Trek series, you might recognize the sawtooth chirp as the red alert signal:"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 84, "lines": ["thinkdsp.read_wave('tos-redalert.wav').make_audio()"]}, {"block": 15, "type": "markdown", "linesLength": 5, "startIndex": 85, "lines": ["###Exercise \n", "\n", "In musical terminology, a \u201cglissando\u201d is a note that slides from one pitch to another, so it is similar to a chirp. Find or make a recording of a glissando and plot its spectrogram.  \n", "\n", "One suggestion: George Gershwin's *Rhapsody in Blue* starts with a famous clarinet glissando; you can download a recording from http://archive.org/details/rhapblue11924."]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 90, "lines": ["wave = thinkdsp.read_wave('72475__rockwehrmann__glissup02.wav')\n", "wave.make_audio()"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 92, "lines": ["wave.make_spectrogram(512).plot(high=5000)"]}, {"block": 18, "type": "markdown", "linesLength": 13, "startIndex": 93, "lines": ["###Exercise \n", "\n", "A trombone player can play a glissando by extending the trombone slide while blowing continuously. As the slide extends, the total length of the tube gets longer, and the resulting pitch is inversely proportional to length.\n", "Assuming that the player moves the slide at a constant speed, how\n", "does frequency vary with time?  \n", "\n", "Write a class called `TromboneGliss` that extends `Chirp` and\n", "provides `evaluate`.  Make a wave that simulates a trombone\n", "glissando from F3 down to C3 and back up to F3.  C3 is 262 Hz; F3 is\n", "349 Hz.\n", "\n", "Plot a spectrogram of the resulting wave.  Is a trombone glissando\n", "more like a linear or exponential chirp?"]}, {"block": 19, "type": "code", "linesLength": 14, "startIndex": 106, "lines": ["class TromboneGliss(thinkdsp.Chirp):\n", "    \"\"\"Represents a trombone-like signal with varying frequency.\"\"\"\n", "    \n", "    def evaluate(self, ts):\n", "        \"\"\"Evaluates the signal at the given times.\n", "\n", "        ts: float array of times\n", "        \n", "        returns: float wave array\n", "        \"\"\"\n", "        l1, l2 = 1.0 / self.start, 1.0 / self.end\n", "        lengths = np.linspace(l1, l2, len(ts)-1)\n", "        freqs = 1 / lengths\n", "        return self._evaluate(ts, freqs)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 120, "lines": ["Here's the first part of the wave:"]}, {"block": 21, "type": "code", "linesLength": 6, "startIndex": 121, "lines": ["low = 262\n", "high = 349\n", "signal = TromboneGliss(high, low)\n", "wave1 = signal.make_wave(duration=1)\n", "wave1.apodize()\n", "wave1.make_audio()"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["And the second part:"]}, {"block": 23, "type": "code", "linesLength": 4, "startIndex": 128, "lines": ["signal = TromboneGliss(low, high)\n", "wave2 = signal.make_wave(duration=1)\n", "wave2.apodize()\n", "wave2.make_audio()"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 132, "lines": ["Putting them together:"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 133, "lines": ["wave = wave1 | wave2\n", "wave.make_audio()"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 135, "lines": ["Here's the spectrogram:"]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 136, "lines": ["sp = wave.make_spectrogram(1024)\n", "sp.plot(high=1000)"]}, {"block": 28, "type": "markdown", "linesLength": 4, "startIndex": 138, "lines": ["###Exercise\n", "\n", "Make or find a recording of a series of vowel sounds and look at the\n", "spectrogram.  Can you identify different vowels?"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 142, "lines": ["wave = thinkdsp.read_wave('87778__marcgascon7__vocals.wav')\n", "wave.make_audio()"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 144, "lines": ["wave.make_spectrogram(1024).plot(high=1000)"]}, {"block": 31, "type": "markdown", "linesLength": 5, "startIndex": 145, "lines": ["The stripe across the bottom is probably background noise.  The peaks in the spectrogram are called \"formants\".\n", "\n", "In general, vowel sounds are distinguished by the amplitude ratios of the first two formants relative to the fundamental.  For more, see https://en.wikipedia.org/wiki/Formant\n", "\n", "We can see the formats more clearly by selecting a segment during 'ah'."]}, {"block": 32, "type": "code", "linesLength": 5, "startIndex": 150, "lines": ["high = 1000\n", "thinkplot.preplot(5)\n", "\n", "segment = wave.segment(start=1, duration=0.25)\n", "segment.make_spectrum().plot(high=high)"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 155, "lines": ["The fundamental is near 100 Hz.  The next highest peaks are at 200 Hz and 700 Hz.  People who know more about this than I do can identify vowels by looking at spectrums, but I can't."]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 156, "lines": ["The 'eh' segment has a high-amplitude formant near 500 Hz."]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 157, "lines": ["segment = wave.segment(start=2.2, duration=0.25)\n", "segment.make_spectrum().plot(high=high)"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 159, "lines": ["The 'ih' segment has no high frequency components."]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 160, "lines": ["segment = wave.segment(start=3.5, duration=0.25)\n", "segment.make_spectrum().plot(high=high)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 162, "lines": ["The 'oh' segment has a high-amplitude formant near 500 Hz, even higher than the fundamental."]}, {"block": 39, "type": "code", "linesLength": 2, "startIndex": 163, "lines": ["segment = wave.segment(start=5.1, duration=0.25)\n", "segment.make_spectrum().plot(high=high)"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 165, "lines": ["The 'oo' segment has a high-amplitude formant near 300 Hz and no high-frequency components"]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 166, "lines": ["segment = wave.segment(start=6.5, duration=0.25)\n", "segment.make_spectrum().plot(high=high)"]}, {"block": 42, "type": "code", "linesLength": 0, "startIndex": 168, "lines": []}]