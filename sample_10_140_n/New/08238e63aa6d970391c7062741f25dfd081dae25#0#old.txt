[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Widgets"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["from fastai import *\n", "from fastai.vision import *\n", "from fastai.widgets import DatasetFormatter, ImageCleaner"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["fastai offers several widgets to support the workflow of a deep learning practitioner. The purpose of the widgets are to help you organize, clean, and prepare your data for your model. Widgets are separated by data type."]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["## Images"]}, {"block": 4, "type": "markdown", "linesLength": 2, "startIndex": 6, "lines": ["### DatasetFormatter\n", "The [`DatasetFormatter`](/widgets.image_cleaner.html#DatasetFormatter) class prepares your image dataset for widgets by returning a formatted [`DatasetTfm`](/vision.data.html#DatasetTfm) based on the [`DatasetType`](/basic_data.html#DatasetType) specified. Use `from_toplosses` to grab the most problematic images directly from your learner. Optionally, you can restrict the formatted dataset returned to `n_imgs`."]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 8, "lines": ["path = untar_data(URLs.MNIST_SAMPLE)\n", "data = ImageDataBunch.from_folder(path)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["learn = create_cnn(data, models.resnet18, metrics=error_rate)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["learn.fit_one_cycle(2)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["learn.save('stage-1')"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["We create a databunch with all the data in the training set and no validation set (DatasetFormatter uses only the training set)"]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 14, "lines": ["data = (ImageItemList.from_folder(path)\n", "                     .no_split()\n", "                     .label_from_folder()\n", "                     .databunch())"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["learn = create_cnn(data, models.resnet18, metrics=[accuracy])\n", "learn.load('stage-1');"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["[`ImageCleaner`](/widgets.image_cleaner.html#ImageCleaner) is for cleaning up images that don't belong in your dataset. It renders images in a row and gives you the opportunity to delete the file from your file system. To use [`ImageCleaner`](/widgets.image_cleaner.html#ImageCleaner) we must first use `DatasetFormatter().from_toplosses` to get the suggested indices for misclassified images."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["### ImageCleaner"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 22, "lines": ["ds, idxs = DatasetFormatter().from_toplosses(learn)"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["ImageCleaner(ds, idxs, path)"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["You can also use ImageCleaner to find duplicates in your dataset. For this, you need to run `DatasetFormatter().from_similars` and then `ImageCleaner` with `duplicates=True`."]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["ds, idxs = DatasetFormatter().from_similars(learn, layer_ls=[0,7,1], pool_dim=1)"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["ImageCleaner(ds, idxs, path, duplicates=True)"]}]