[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Async and Await Primer"]}, {"block": 1, "type": "markdown", "linesLength": 7, "startIndex": 1, "lines": ["A quick primer on `async`/`await`. Async and await are relatively new features in Python which allow **concurent** programming. They won't make your code magically faster, but may make your code easier to read, maintain and reason about. \n", "You will likely hear the terms event-loop, coroutines and many other ones, they will make sens in time. \n", "\n", "The key thing to remember is that \n", " - async-functions can call both sync and async functions.\n", " - sync functions can only call sync. \n", " - You _must_ always `await <async functions>`\n"]}, {"block": 2, "type": "markdown", "linesLength": 12, "startIndex": 8, "lines": ["## Event loop\n", "\n", "It's like the \"One ring\", there shoudl be only one. IPython (and Jupyter) usually already run one.\n", "\n", "### Bad news\n", "If you need to run any code that need to create and manage an event-loop, consult the docs. \n", "Typically you can't run a tornado app inside jupyter.\n", "\n", "### Good news\n", "\n", "If you don't know/don't care, all is already setup for you. \n", "\n"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 20, "lines": ["## Example\n", "\n", "Let's deactivate enventloop integration and try what is (usually invalid Python)"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["%autoawait False"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["from asyncio import sleep"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 25, "lines": ["# does not sleep, need to be awaited\n", "print('before sleep')\n", "sleep(5)\n", "print('after sleep')"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["await sleep(5)"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 30, "lines": ["def f():\n", "    await sleep(5)\n", "f()"]}, {"block": 9, "type": "code", "linesLength": 6, "startIndex": 33, "lines": ["async def f():\n", "    print('before...')\n", "    await sleep(5)\n", "    print('after')\n", "### does not call f\n", "f()"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["await f()"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["... back to step beginning. "]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["## Autoawait"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Autoawait will _attempt_ to detect async code and run it for you. There are of course limitations (bug report welcome)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["%autoawait True"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["You will note that any line that start with `%` is invalid Python and are IPython specific syntax. Those are call magics (line-magics with a single `%` sign, cell magics with a double `%%` sign)"]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 45, "lines": ["print('before')\n", "await sleep(5)\n", "print('after')"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["Top level await is now valid syntax. "]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["tpl = 'https://anapioficeandfire.com/api/characters/{}'"]}, {"block": 19, "type": "code", "linesLength": 12, "startIndex": 50, "lines": ["%%time\n", "\n", "results = []\n", "for i in range(1,50):\n", "    import requests\n", "    print('.', end='')\n", "    r = requests.get(tpl.format(i)).json()['aliases']\n", "    print('x', end='')\n", "    results.append(r)\n", "    \n", "for r in results:\n", "    print(r)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["# Moving to asynchronous"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 63, "lines": ["Nothing is perfect; if you get RuntimeErrors with asyncio, you may need to restart your kernel. More during my colleagues aiohttp tutorial this Afternoon"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["import aiohttp"]}, {"block": 23, "type": "code", "linesLength": 4, "startIndex": 65, "lines": ["async with aiohttp.ClientSession() as session:\n", "    response = await session.get(tpl.format(583))\n", "    json = await response.json()\n", "    print(json['aliases'])"]}, {"block": 24, "type": "code", "linesLength": 6, "startIndex": 69, "lines": ["async def get_char(i, session):\n", "        print('.', end='')\n", "        response = await session.get(tpl.format(i))\n", "        json = await response.json()\n", "        print('x', end='')\n", "        return json['aliases']"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 75, "lines": ["async with aiohttp.ClientSession() as s:\n", "    print(await get_char(1303, s))"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 77, "lines": ["tasks = []"]}, {"block": 27, "type": "code", "linesLength": 9, "startIndex": 78, "lines": ["import asyncio\n", "async with aiohttp.ClientSession() as session:\n", "    # start \n", "    for i in range(1,50):\n", "        task = asyncio.ensure_future(get_char(i, session))\n", "        tasks.append(task)\n", "    results = await asyncio.gather(*tasks)\n", "    for r in results:\n", "        print(r)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["## Advance Autoawait usage, Exercise"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["Find the documentation for autoawait, and try to make it work with another asynchronous library. For exampe try to ply with [`trio`](https://trio.readthedocs.io/en/latest/), using `trio.sleep`  and `trio.open_nursery` to get several concurent task running, pritning different message regularly and at random intervals. What happen if you use `time.sleep()` instead of `trio.sleep()` ? What hapen if you use `asyncio.sleep()` ?"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 89, "lines": ["import trio"]}, {"block": 31, "type": "code", "linesLength": 4, "startIndex": 90, "lines": ["async def every(n, message):\n", "    for i in range(30):\n", "        await trio.sleep(n)\n", "        print(message)"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["%autoawait trio"]}, {"block": 33, "type": "code", "linesLength": 4, "startIndex": 95, "lines": ["async with trio.open_nursery() as nursery:\n", "    nursery.start_soon(every, 1, 'Plic')\n", "    nursery.start_soon(every, 2, 'Ploc')\n", "    "]}, {"block": 34, "type": "code", "linesLength": 0, "startIndex": 99, "lines": []}]