[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Multi-label classification"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["%reload_ext autoreload\n", "%autoreload 2\n", "%matplotlib inline"]}, {"block": 2, "type": "code", "linesLength": 6, "startIndex": 4, "lines": ["from fastai.imports import *\n", "from fastai.transforms import *\n", "from fastai.conv_learner import *\n", "from fastai.model import *\n", "from fastai.dataset import *\n", "from fastai.sgdr import *"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["from time import sleep"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["PATH = 'data/planet/'"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["## Multi-label versus single-label classification"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 13, "lines": ["from fastai.plots import *"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["def get_1st(path): return glob(f'{path}/*.*')[0]"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 15, "lines": ["dc_path = \"data/dogscats/valid/\"\n", "list_paths = [get_1st(f\"{dc_path}cats\"), get_1st(f\"{dc_path}dogs\")]\n", "plots_from_files(list_paths, titles=[\"cat\", \"dog\"], maintitle=\"Single-label classification\")"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["In single-label classification each sample belongs to one class. In the previous example, each image is either a *dog* or a *cat*."]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["os.makedirs('data/planet/models', exist_ok=True)\n", "os.makedirs('/cache/planet/tmp', exist_ok=True)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["!ls /datasets/kaggle/planet-understanding-the-amazon-from-space/"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 22, "lines": ["!ln -s /datasets/kaggle/planet-understanding-the-amazon-from-space/train-jpg {PATH}\n", "!ln -s /datasets/kaggle/planet-understanding-the-amazon-from-space/train_v2.csv {PATH}\n", "!ln -s /cache/planet/tmp {PATH}"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["list_paths = [f\"{PATH}train-jpg/train_0.jpg\", f\"{PATH}train-jpg/train_1.jpg\"]\n", "titles=[\"haze primary\", \"agriculture clear primary water\"]\n", "plots_from_files(list_paths, titles=titles, maintitle=\"Multi-label classification\")"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["In multi-label classification each sample can belong to one or more clases. In the previous example, the first images belongs to two clases: *haze* and *primary*. The second image belongs to four clases: *agriculture*, *clear*, *primary* and  *water*."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["## Multi-label models for Planet dataset"]}, {"block": 16, "type": "code", "linesLength": 5, "startIndex": 30, "lines": ["from planet import f2\n", "\n", "sz=256\n", "metrics=[f2]\n", "f_model = resnet34"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 35, "lines": ["label_csv = f'{PATH}train_v2.csv'\n", "n = len(list(open(label_csv)))-1\n", "val_idxs = get_cv_idxs(n)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["We use a different set of data augmentations for this dataset - we also allow vertical flips, since we don't expect vertical orientation of satellite images to change our classifications."]}, {"block": 19, "type": "code", "linesLength": 4, "startIndex": 39, "lines": ["def get_data(sz):\n", "    tfms = tfms_from_model(f_model, sz, aug_tfms=transforms_top_down, max_zoom=1.05)\n", "    return ImageClassifierData.from_csv(PATH, 'train-jpg', label_csv, tfms=tfms,\n", "                    suffix='.jpg', val_idxs=val_idxs, test_name='test-jpg')"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["sz=64"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["data = get_data(sz)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["data = data.resize(int(sz*1.3), 'tmp')"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["learn = ConvLearner.pretrained(f_model, data, metrics=metrics)"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 47, "lines": ["lrf=learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["lr = 0.2"]}, {"block": 26, "type": "code", "linesLength": 2, "startIndex": 50, "lines": ["sleep(2)\n", "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["lrs = np.array([lr/9,lr/3,lr])"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 53, "lines": ["learn.unfreeze()\n", "learn.fit(lrs, 3, cycle_len=1, cycle_mult=2)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["learn.save(f'{sz}')"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["learn.sched.plot_loss()"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["sz=128"]}, {"block": 32, "type": "code", "linesLength": 3, "startIndex": 58, "lines": ["learn.set_data(get_data(sz))\n", "learn.freeze()\n", "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)"]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 61, "lines": ["learn.unfreeze()\n", "learn.fit(lrs, 3, cycle_len=1, cycle_mult=2)\n", "learn.save(f'{sz}')"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["sz=256"]}, {"block": 35, "type": "code", "linesLength": 3, "startIndex": 65, "lines": ["learn.set_data(get_data(sz))\n", "learn.freeze()\n", "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 68, "lines": ["learn.unfreeze()\n", "learn.fit(lrs, 3, cycle_len=1, cycle_mult=2)\n", "learn.save(f'{sz}')"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["tta = learn.TTA()"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 72, "lines": ["f2(*tta)"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["### End"]}, {"block": 40, "type": "code", "linesLength": 0, "startIndex": 74, "lines": []}]