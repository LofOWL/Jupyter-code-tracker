[{"block": 0, "type": "markdown", "linesLength": 7, "startIndex": 0, "lines": ["## ThinkDSP\n", "\n", "This notebook contains code examples from Chapter 4: Noise\n", "\n", "Copyright 2015 Allen Downey\n", "\n", "License: [Creative Commons Attribution 4.0 International](http://creativecommons.org/licenses/by/4.0/)"]}, {"block": 1, "type": "code", "linesLength": 14, "startIndex": 7, "lines": ["from __future__ import print_function, division\n", "\n", "%matplotlib inline\n", "import warnings\n", "warnings.filterwarnings('ignore')\n", "\n", "import thinkdsp\n", "import thinkplot\n", "import thinkstats2 \n", "\n", "import numpy as np\n", "\n", "from ipywidgets import interact, interactive, fixed\n", "import ipywidgets as widgets"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["thinkdsp.random_seed(17)"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["The simplest noise to generate is uncorrelated uniform (UU) noise:"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 23, "lines": ["signal = thinkdsp.UncorrelatedUniformNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "wave.make_audio()"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Here's what a segment of it looks like:"]}, {"block": 6, "type": "code", "linesLength": 6, "startIndex": 27, "lines": ["segment = wave.segment(duration=0.1)\n", "segment.plot(linewidth=1)\n", "thinkplot.config(xlabel='time',\n", "                 ylabel='amplitude',\n", "                 ylim=[-1.05, 1.05],\n", "                 legend=False)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["And here's the spectrum:"]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 34, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot(linewidth=0.5)\n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                 ylabel='amplitude',\n", "                 xlim=[0, spectrum.fs[-1]])"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["In the context of noise it is more conventional to look at the spectrum of power, which is the square of amplitude:"]}, {"block": 10, "type": "code", "linesLength": 4, "startIndex": 40, "lines": ["spectrum.plot_power(linewidth=0.5)\n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                 ylabel='power',\n", "                 xlim=[0, spectrum.fs[-1]])"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["UU noise has the same power at all frequencies, on average, which we can confirm by looking at the normalized cumulative sum of power, which I call an integrated spectrum:"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 45, "lines": ["integ = spectrum.make_integrated_spectrum()\n", "integ.plot_power()\n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                ylabel='cumulative power',\n", "                xlim=[0, spectrum.fs[-1]])"]}, {"block": 13, "type": "markdown", "linesLength": 5, "startIndex": 50, "lines": ["A straight line in this figure indicates that UU noise has equal power at all frequencies, on average.  By analogy with light, noise with this property is called \"white noise\".\n", "\n", "### Brownian noise\n", "\n", "Brownian noise is generated by adding up a sequence of random steps."]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 55, "lines": ["signal = thinkdsp.BrownianNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "wave.make_audio()"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 58, "lines": ["The sound is less bright, or more muffled, than white noise.\n", "\n", "Here's what the wave looks like:"]}, {"block": 16, "type": "code", "linesLength": 4, "startIndex": 61, "lines": ["wave.plot(linewidth=1)\n", "thinkplot.config(xlabel='time',\n", "                 ylabel='amplitude',\n", "                 ylim=[-1.05, 1.05])"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["Here's what the power spectrum looks like on a linear scale."]}, {"block": 18, "type": "code", "linesLength": 5, "startIndex": 66, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot_power(linewidth=0.5)\n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                 ylabel='power',\n", "                 xlim=[0, spectrum.fs[-1]])"]}, {"block": 19, "type": "markdown", "linesLength": 3, "startIndex": 71, "lines": ["So much of the energy is at low frequencies, we can't even see the high frequencies.\n", "\n", "We can get a better view by plotting the power spectrum on a log-log scale."]}, {"block": 20, "type": "code", "linesLength": 11, "startIndex": 74, "lines": ["# The f=0 component is very small, so on a log scale\n", "# it's very negative.  If we clobber it before plotting,\n", "# we can see the rest of the spectrum better.\n", "spectrum.hs[0] = 0\n", "\n", "spectrum.plot_power(linewidth=0.5)\n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                 ylabel='power',\n", "                 xscale='log',\n", "                 yscale='log',\n", "                 xlim=[0, spectrum.fs[-1]])"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["Now the relationship between power and frequency is clearer.  The slope of this line is approximately -2, which indicates that $P = K / f^2$, for some constant $K$."]}, {"block": 22, "type": "code", "linesLength": 5, "startIndex": 86, "lines": ["signal = thinkdsp.BrownianNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "spectrum = wave.make_spectrum()\n", "result = spectrum.estimate_slope()\n", "result.slope"]}, {"block": 23, "type": "markdown", "linesLength": 7, "startIndex": 91, "lines": ["The estimated slope of the line is closer to -1.8 than -2, for reasons we'll see later.\n", "\n", "### Pink noise\n", "\n", "Pink noise is characterized by a parameter, $\\beta$, usually between 0 and 2.  You can hear the differences below.\n", "\n", "With $\\beta=0$, we get white noise:"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 98, "lines": ["signal = thinkdsp.PinkNoise(beta=0)\n", "wave = signal.make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 101, "lines": ["With $\\beta=1$, pink noise has the relationship $P = K / f$, which is why it is also called $1/f$ noise."]}, {"block": 26, "type": "code", "linesLength": 3, "startIndex": 102, "lines": ["signal = thinkdsp.PinkNoise(beta=1)\n", "wave = signal.make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 105, "lines": ["With $\\beta=2$, we get Brownian (aka red) noise."]}, {"block": 28, "type": "code", "linesLength": 3, "startIndex": 106, "lines": ["signal = thinkdsp.PinkNoise(beta=2)\n", "wave = signal.make_wave(duration=0.5)\n", "wave.make_audio()"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 109, "lines": ["The following figure shows the power spectrums for white, pink, and red noise on a log-log scale."]}, {"block": 30, "type": "code", "linesLength": 15, "startIndex": 110, "lines": ["colors = ['#9ecae1', '#4292c6', '#2171b5']\n", "betas = [0, 1, 2]\n", "\n", "for beta, color in zip(betas, colors):\n", "    signal = thinkdsp.PinkNoise(beta=beta)\n", "    wave = signal.make_wave(duration=0.5, framerate=1024)\n", "    spectrum = wave.make_spectrum()\n", "    spectrum.hs[0] = 0\n", "    spectrum.plot_power(linewidth=1, color=color)\n", "    \n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                 ylabel='power',\n", "                 xscale='log',\n", "                 yscale='log',\n", "                 xlim=[0, spectrum.fs[-1]])"]}, {"block": 31, "type": "markdown", "linesLength": 3, "startIndex": 125, "lines": ["### Uncorrelated Gaussian noise\n", "\n", "An alternative to UU noise is uncorrelated Gaussian (UG noise)."]}, {"block": 32, "type": "code", "linesLength": 5, "startIndex": 128, "lines": ["signal = thinkdsp.UncorrelatedGaussianNoise()\n", "wave = signal.make_wave(duration=0.5, framerate=11025)\n", "wave.plot(linewidth=0.5)\n", "thinkplot.config(xlabel='time',\n", "                 ylabel='amplitude')"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 133, "lines": ["The spectrum of UG noise is also UG noise."]}, {"block": 34, "type": "code", "linesLength": 5, "startIndex": 134, "lines": ["spectrum = wave.make_spectrum()\n", "spectrum.plot_power(linewidth=1)\n", "thinkplot.config(xlabel='frequency (Hz)',\n", "                 ylabel='power',\n", "                 xlim=[0, spectrum.fs[-1]])"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 139, "lines": ["We can use a normal probability plot to test the distribution of the power spectrum."]}, {"block": 36, "type": "code", "linesLength": 8, "startIndex": 140, "lines": ["from thinkstats2 import NormalProbabilityPlot\n", "\n", "NormalProbabilityPlot(spectrum.real, label='real part')\n", "thinkplot.config(xlabel='normal sample',\n", "                 ylabel='power',\n", "                 ylim=[-250, 250],\n", "                 legend=True,\n", "                 loc='lower right')"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 148, "lines": ["A straight line on a normal probability plot indicates that the distribution of the real part of the spectrum is Gaussian."]}, {"block": 38, "type": "code", "linesLength": 6, "startIndex": 149, "lines": ["NormalProbabilityPlot(spectrum.imag, label='imag part')\n", "thinkplot.config(xlabel='normal sample',\n", "                 ylabel='power',\n", "                 ylim=[-250, 250],\n", "                 legend=True,\n", "                 loc='lower right')"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 155, "lines": ["And so is the imaginary part."]}, {"block": 40, "type": "code", "linesLength": 0, "startIndex": 156, "lines": []}]