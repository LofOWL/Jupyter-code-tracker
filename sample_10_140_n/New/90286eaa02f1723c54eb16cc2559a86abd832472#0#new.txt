[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["<i>Copyright (c) Microsoft Corporation. All rights reserved.</i>\n", "\n", "<i>Licensed under the MIT License.</i>"]}, {"block": 1, "type": "markdown", "linesLength": 8, "startIndex": 3, "lines": ["# Content Based Personalization\n", "## LightGBM on Azure Databricks<br>\n", "This notebook provides a quick example of how to train LightGBM model on Azure Databricks and deploy it using MML Spark for a content personalization scenario.<br><br>\n", "LightGBM \\[1\\] is a gradient boosting framework that uses tree-based learning algorithms.<br>\n", "MML Spark \\[2\\] allows LightGBM to be called in a Spark environment which provides several advantages:\n", "- Distributed computation for model development\n", "- Easy integration into existing Spark workflows\n", "- Model serving through Spark Serving \\[3\\]"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["## Global Settings and Imports"]}, {"block": 3, "type": "markdown", "linesLength": 2, "startIndex": 12, "lines": ["A python script is provided to simplify setting up Azure Databricks with the correct\n", "dependencies.<br> Run ```python scripts/databricks_install.py -h``` for more details."]}, {"block": 4, "type": "code", "linesLength": 19, "startIndex": 14, "lines": ["import os\n", "import sys\n", "from tempfile import TemporaryDirectory\n", "sys.path.append(\"../../\")\n", "\n", "import pyspark\n", "from pyspark.ml import PipelineModel\n", "from pyspark.ml.feature import FeatureHasher\n", "from pyspark.sql.functions import col, udf\n", "from pyspark.sql.types import FloatType\n", "import requests\n", "\n", "from reco_utils.common.spark_utils import start_or_get_spark\n", "from reco_utils.common.notebook_utils import is_databricks\n", "from reco_utils.dataset.criteo import load_spark_df\n", "from reco_utils.dataset.spark_splitters import spark_random_split\n", "\n", "print(\"System version: {}\".format(sys.version))\n", "print(\"PySpark version: {}\".format(pyspark.version.__version__))"]}, {"block": 5, "type": "code", "linesLength": 9, "startIndex": 33, "lines": ["# Setup MML Spark\n", "if not is_databricks():\n", "    # get the maven coordinates for MML Spark from databricks_install script\n", "    from reco_utils.scripts.databricks_install import MMLSPARK_INFO\n", "    packages = [MMLSPARK_INFO['maven']['coordinates']]\n", "    spark = start_or_get_spark(packages=packages)\n", "\n", "from mmlspark import ComputeModelStatistics\n", "from mmlspark import LightGBMClassifier"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 42, "lines": ["from azureml.core import Workspace\n", "from azureml.core.model import Model\n", "\n", "print(\"Azure ML SDK version: \", azureml.core.VERSION)"]}, {"block": 7, "type": "markdown", "linesLength": 4, "startIndex": 46, "lines": ["## Data Preparation\n", "The Criteo Display Advertising Challenge (DAC) dataset [4] is a well-known industry benchmarking dataset for developing CTR prediction models, and is used frequently by research papers. The original dataset contains over 45M rows, but there is also a down-sampled dataset which has 100,000 rows (this can be used by setting DATA_SIZE = 'sample').<br><br>\n", "The dataset contains 1 label column and 38 feature columns, where 13 columns are integer values (int00-int12) and 25 columns are categorical features (cat00-cat24).<br><br>\n", "What the columns represent is not provided, but for this case we can consider the integer and categorical values as features representing the user and / or item content. The label is binary and indicates a user interaction with an item, so this is a useful dataset to demonstrate how to build a model that will predict likelihood of a user interacting with an item based on the user and item content features.\n"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["DATA_SIZE = 'sample'"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["raw_data = load_spark_df(size=DATA_SIZE, spark=spark)"]}, {"block": 10, "type": "markdown", "linesLength": 4, "startIndex": 52, "lines": ["### Feature Processing\n", "The feature data provided has many missing values across both integer and categorical feature fields. In addition the categorical features have many distinct values, so effectively cleaning and representing the feature data is an important step prior to training a model.<br><br>\n", "One of the simplest ways of managing both features that have missing values as well as high cardinality is to use the hashing trick. The FeatureHasher transformer will pass integer values through and will hash categorical features into a sparse vector of lower dimensionality which can be used effectively by LightGBM.<br><br>\n", "First the dataset is split randomly for training and testing and feature processing is applied to each dataset."]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["raw_train, raw_test = spark_random_split(raw_data, ratio=0.8, seed=42)"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["columns = [c for c in raw_data.columns if c != 'label']\n", "feature_processor = FeatureHasher(inputCols=columns, outputCol='features')"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 59, "lines": ["train = feature_processor.transform(raw_train)\n", "test = feature_processor.transform(raw_test)"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 61, "lines": ["# save data to tables to finalize feature transformation\n", "train.write.mode('overwrite').saveAsTable('train')\n", "test.write.mode('overwrite').saveAsTable('test')"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 64, "lines": ["# load data from table\n", "train = spark.table('train')\n", "test = spark.table('test')"]}, {"block": 16, "type": "markdown", "linesLength": 10, "startIndex": 67, "lines": ["## Model Training\n", "In MML Spark the LightGBM implementation for binary classification is invoked using the LightGBMClassifier class and specifying the objective as 'binary'. In this instance the occurrence of positive labels is quite low, so setting the isUnbalance flag to true helps account for this imbalance.<br><br>\n", "\n", "### Hyper-parameters\n", "Below are some of the key hyper-parameters \\[5\\] for training a LightGBM classifier on Spark\n", "- numLeaves: the number of leaves in each tree\n", "- numIterations: the number of iterations to apply boosting\n", "- learningRate: the learning rate for training across trees\n", "- featureFraction: the fraction of features used for training a tree\n", "- earlyStoppingRound: round at which early stopping can be applied to avoid overfitting"]}, {"block": 17, "type": "code", "linesLength": 5, "startIndex": 77, "lines": ["NUM_LEAVES = 32\n", "NUM_ITERATIONS = 10\n", "LEARNING_RATE = 0.15\n", "FEATURE_FRACTION = 0.8\n", "EARLY_STOPPING_ROUND = 20"]}, {"block": 18, "type": "code", "linesLength": 13, "startIndex": 82, "lines": ["lgbm = LightGBMClassifier(\n", "    labelCol='label',\n", "    featuresCol='features',\n", "    objective='binary',\n", "    isUnbalance=True,\n", "    boostingType='gbdt',\n", "    boostFromAverage=True,\n", "    numLeaves=NUM_LEAVES,\n", "    numIterations=NUM_ITERATIONS,\n", "    learningRate=LEARNING_RATE,\n", "    featureFraction=FEATURE_FRACTION,\n", "    earlyStoppingRound=EARLY_STOPPING_ROUND,\n", ")"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 95, "lines": ["### Model Training and Evaluation"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 96, "lines": ["model = lgbm.fit(train)\n", "predictions = model.transform(test)"]}, {"block": 21, "type": "code", "linesLength": 8, "startIndex": 98, "lines": ["evaluator = (\n", "    ComputeModelStatistics()\n", "    .setScoredLabelsCol(\"prediction\")\n", "    .setLabelCol(\"label\")\n", "    .setEvaluationMetric(\"AUC\")\n", ")\n", "\n", "evaluator.transform(predictions).show()"]}, {"block": 22, "type": "markdown", "linesLength": 2, "startIndex": 106, "lines": ["## Model Saving and Loading\n", "The full pipeline for operating on raw data including feature processing and model prediction can be saved and reloaded for use in another workflow."]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 108, "lines": ["with TemporaryDirectory() as tmp:\n", "    save_file = os.path.join(tmp, r'finished.model')\n", "    pipeline = PipelineModel(stages=[feature_processor, model])\n", "    pipeline.save(save_file)\n", "    loaded_pipeline = PipelineModel.load(save_file)"]}, {"block": 24, "type": "markdown", "linesLength": 5, "startIndex": 113, "lines": ["## Reference\n", "\\[1\\] Guolin Ke, Qi Meng, Thomas Finley, Taifeng Wang, Wei Chen, Weidong Ma, Qiwei Ye, and Tie-Yan Liu. 2017. LightGBM: A highly efficient gradient boosting decision tree. In Advances in Neural Information Processing Systems. 3146\u20133154.<br>\n", "\\[2\\] MML Spark: https://mmlspark.blob.core.windows.net/website/index.html <br>\n", "\\[3\\] MML Spark Serving: https://github.com/Azure/mmlspark/blob/master/docs/mmlspark-serving.md <br>\n", "\\[4\\] The Criteo dataset: http://labs.criteo.com/wp-content/uploads/2015/04/dac_sample.tar.gz <br>\n"]}, {"block": 25, "type": "code", "linesLength": 0, "startIndex": 118, "lines": []}]