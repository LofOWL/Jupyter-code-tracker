[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## CIFAR 10"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 1, "lines": ["%matplotlib inline\n", "%reload_ext autoreload\n", "%autoreload 2"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 4, "lines": ["from fastai.conv_learner import *\n", "PATH = \"data/cifar10/\"\n", "os.makedirs(PATH,exist_ok=True)"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n", "stats = (np.array([ 0.4914 ,  0.48216,  0.44653]), np.array([ 0.24703,  0.24349,  0.26159]))"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 9, "lines": ["def get_data(sz,bs):\n", "    tfms = tfms_from_stats(stats, sz, aug_tfms=[RandomFlipXY()], pad=sz//8)\n", "    return ImageClassifierData.from_paths(PATH, val_name='test', tfms=tfms, bs=bs)"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["bs=128"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["### Look at data"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["data = get_data(32,4)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["x,y=next(iter(data.trn_dl))"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["plt.imshow(data.trn_ds.denorm(x)[0]);"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["plt.imshow(data.trn_ds.denorm(x)[1]);"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["## Initial model"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 19, "lines": ["from fastai.models.cifar10.resnext import resnext29_8_64\n", "\n", "m = resnext29_8_64()\n", "bm = BasicModel(m.cuda(), name='cifar10_rn29_8_64')"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["data = get_data(8,bs*4)"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["learn = ConvLearner(data, bm)\n", "learn.unfreeze()"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["lr=1e-2; wd=5e-4"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["learn.lr_find()"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["learn.sched.plot()"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["%time learn.fit(lr, 1)"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["learn.fit(lr, 2, cycle_len=1)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["learn.fit(lr, 3, cycle_len=1, cycle_mult=2, wds=wd)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["learn.save('8x8_8')"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["## 16x16"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["learn.load('8x8_8')"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["learn.set_data(get_data(16,bs*2))"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["%time learn.fit(1e-3, 1, wds=wd)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["learn.unfreeze()"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["learn.lr_find()"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["learn.sched.plot()"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["lr=1e-2"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["learn.fit(lr, 2, cycle_len=1, wds=wd)"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["learn.fit(lr, 3, cycle_len=1, cycle_mult=2, wds=wd)"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["learn.save('16x16_8')"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["## 24x24"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["learn.load('16x16_8')"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["learn.set_data(get_data(24,bs))"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["learn.fit(1e-2, 1, wds=wd)"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["learn.unfreeze()"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["learn.fit(lr, 1, cycle_len=1, wds=wd)"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["learn.fit(lr, 3, cycle_len=1, cycle_mult=2, wds=wd)"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["learn.save('24x24_8')"]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["log_preds,y = learn.TTA()\n", "preds = np.mean(np.exp(log_preds),0)metrics.log_loss(y,preds), accuracy(preds,y)"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["## 32x32"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["learn.load('24x24_8')"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 56, "lines": ["learn.set_data(get_data(32,bs))"]}, {"block": 45, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["learn.fit(1e-2, 1, wds=wd)"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["learn.unfreeze()"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["learn.fit(lr, 3, cycle_len=1, cycle_mult=2, wds=wd)"]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["learn.fit(lr, 3, cycle_len=4, wds=wd)"]}, {"block": 49, "type": "code", "linesLength": 2, "startIndex": 61, "lines": ["log_preds,y = learn.TTA()\n", "metrics.log_loss(y,np.exp(log_preds)), accuracy(log_preds,y)"]}, {"block": 50, "type": "code", "linesLength": 1, "startIndex": 63, "lines": ["learn.save('32x32_8')"]}, {"block": 51, "type": "code", "linesLength": 0, "startIndex": 64, "lines": []}]