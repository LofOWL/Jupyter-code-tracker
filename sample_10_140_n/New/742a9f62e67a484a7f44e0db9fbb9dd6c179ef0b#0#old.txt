[{"block": 0, "type": "code", "linesLength": 3, "startIndex": 0, "lines": ["%matplotlib inline\n", "%reload_ext autoreload\n", "%autoreload 2"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## Super resolution data"]}, {"block": 2, "type": "code", "linesLength": 5, "startIndex": 4, "lines": ["from fastai.conv_learner import *\n", "from pathlib import Path\n", "torch.cuda.set_device(0)\n", "\n", "torch.backends.cudnn.benchmark=True"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["PATH = Path('data/imgnet-samp/')\n", "PATH_TRN = PATH/'train'"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 11, "lines": ["fnames,label_arr,all_labels = folder_source(PATH, 'train')\n", "fnames = ['/'.join(Path(fn).parts[-2:]) for fn in fnames]\n", "list(zip(fnames[:5],label_arr[:5]))"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["all_labels[:5]"]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 15, "lines": ["arch = resnet34\n", "sz_hr,sz_lr = 288,72\n", "bs = 16"]}, {"block": 7, "type": "code", "linesLength": 7, "startIndex": 18, "lines": ["class MatchedFilesDataset(FilesDataset):\n", "    def __init__(self, fnames, y, transform, path):\n", "        self.y=y\n", "        assert(len(fnames)==len(y))\n", "        super().__init__(fnames, transform, path)\n", "    def get_y(self, i): return open_image(os.path.join(self.path, self.y[i]))\n", "    def get_c(self): return 0"]}, {"block": 8, "type": "code", "linesLength": 4, "startIndex": 25, "lines": ["aug_tfms = [RandomRotate(4, tfm_y=TfmType.PIXEL),\n", "            RandomFlip(tfm_y=TfmType.PIXEL),\n", "            RandomLighting(0.05, 0.05)]\n", "# aug_tfms = []"]}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 29, "lines": ["val_idxs = get_cv_idxs(len(fnames), val_pct=0.1)\n", "((val_x,trn_x),(val_y,trn_y)) = split_by_idx(val_idxs, np.array(fnames), np.array(fnames))\n", "len(val_x),len(trn_x)"]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["tfms = tfms_from_model(arch, sz_lr, tfm_y=TfmType.PIXEL, aug_tfms=aug_tfms, sz_y=sz_hr)\n", "datasets = ImageData.get_ds(MatchedFilesDataset, (trn_x,trn_y), (val_x,val_y), tfms, path=PATH_TRN)\n", "md = ImageData(PATH, datasets, bs, num_workers=8, classes=None)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["denorm = md.trn_ds.denorm"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 36, "lines": ["def show_img(ims, idx, figsize=(5,5)):\n", "    plt.figure(figsize=figsize)\n", "    plt.imshow(np.clip(denorm(ims),0,1)[idx], interpolation=\"bilinear\")"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["x,y = next(iter(md.val_dl))\n", "x.size(),y.size()"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["show_img(x,0)"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["show_img(y,0)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["batches = [next(iter(md.aug_dl)) for i in range(9)]"]}, {"block": 17, "type": "code", "linesLength": 4, "startIndex": 44, "lines": ["fig, axes = plt.subplots(3, 6, figsize=(18, 9))\n", "for i,(x,y) in enumerate(batches):\n", "    axes.flat[i*2].imshow(denorm(x)[0])\n", "    axes.flat[i*2+1].imshow(denorm(y)[0])"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["## Model"]}, {"block": 19, "type": "code", "linesLength": 15, "startIndex": 49, "lines": ["class BnReluConv(nn.Module):\n", "    def __init__(self, ni, nf, kernel_size=3, bias=False):\n", "        super().__init__()\n", "        self.bn = nn.BatchNorm2d(ni)\n", "        self.conv = nn.Conv2d(ni, nf, kernel_size, padding=kernel_size//2, bias=bias)\n", "    \n", "    def forward(self, x): return self.conv(F.relu(self.bn(x), inplace=True))\n", "\n", "class ResBlock(nn.Module):\n", "    def __init__(self, ni, nf):\n", "        super().__init__()\n", "        self.conv1 = BnReluConv(ni, nf)\n", "        self.conv2 = BnReluConv(ni, nf)\n", "        \n", "    def forward(self, x): return x + self.conv2(self.conv1(x))"]}, {"block": 20, "type": "code", "linesLength": 18, "startIndex": 64, "lines": ["class SrResnet(nn.Module):\n", "    def __init__(self, do_sigmoid=False):\n", "        super().__init__()\n", "        self.do_sigmoid = do_sigmoid\n", "        self.conv1 = nn.Conv2d(3, 64, 9, padding=4, bias=False)\n", "        self.blocks = nn.ModuleList([ResBlock(64, 64) for i in range(4)])\n", "        self.uscale = nn.Upsample(scale_factor=2, mode='bilinear')\n", "        self.uconv1 = BnReluConv(64, 64)\n", "        self.uconv2 = BnReluConv(64, 64)\n", "        self.conv2 = BnReluConv(64, 3, kernel_size=9, bias=True)\n", "        \n", "    def forward(self, x):\n", "        x = self.conv1(x)\n", "        for block in self.blocks: x = block(x)\n", "        x = self.uconv1(self.uscale(x))\n", "        x = self.uconv2(self.uscale(x))\n", "        x = self.conv2(x)\n", "        return F.sigmoid(x) if self.do_sigmoid else x"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 82, "lines": ["opt_fn = partial(optim.Adam, betas=(0.8, 0.99))"]}, {"block": 22, "type": "code", "linesLength": 3, "startIndex": 83, "lines": ["m = SrResnet()\n", "learn = Learner(md, SingleModel(to_gpu(m)), opt_fn=opt_fn)\n", "learn.crit = F.mse_loss"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 86, "lines": ["learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["lr=1e-3"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 89, "lines": ["learn.fit(lr, 1, cycle_len=10, use_clr=(40,10))"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["preds,y = learn.predict_with_targs()"]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 91, "lines": ["idx=1\n", "show_img(y,idx)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 93, "lines": ["show_img(preds,idx);"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["## Perceptual loss"]}, {"block": 30, "type": "code", "linesLength": 2, "startIndex": 95, "lines": ["m_vgg = vgg16(True).cuda().eval()\n", "set_trainable(m_vgg, False)"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 97, "lines": ["# m_vgg = nn.Sequential(*children(m_vgg)[:13]).cuda().eval()"]}, {"block": 32, "type": "code", "linesLength": 3, "startIndex": 98, "lines": ["block_ends = [i-1 for i,o in enumerate(children(m_vgg))\n", "              if isinstance(o,nn.MaxPool2d)][1:]\n", "block_ends"]}, {"block": 33, "type": "code", "linesLength": 5, "startIndex": 101, "lines": ["class SaveFeatures():\n", "    features=None\n", "    def __init__(self, m): self.hook = m.register_forward_hook(self.hook_fn)\n", "    def hook_fn(self, module, input, output): self.features = output\n", "    def remove(self): self.hook.remove()        "]}, {"block": 34, "type": "code", "linesLength": 17, "startIndex": 106, "lines": ["class FeatureLoss(nn.Module):\n", "    def __init__(self, m, layer_ids, layer_wgts):\n", "        super().__init__()\n", "        self.m,self.wgts = m,layer_wgts\n", "        self.sfs = [SaveFeatures(m[i]) for i in layer_ids]\n", "\n", "    def forward(self, input, target, sum_layers=True):\n", "        res = [F.mse_loss(input, target)/30]\n", "        self.m(VV(target.data))\n", "        targ_feat = [V(o.features.data.clone()) for o in self.sfs]\n", "        self.m(V(input.data))\n", "        res += [F.mse_loss(inp.features,targ)*wgt for inp,targ,wgt in zip(self.sfs, targ_feat, self.wgts)]\n", "        if sum_layers: res = sum(res)\n", "        return res\n", "    \n", "    def close(self):\n", "        for o in self.sfs: o.remove()"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 123, "lines": ["layers = block_ends[:2]\n", "wgts = [1,1]"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 125, "lines": ["learn.crit.close()"]}, {"block": 37, "type": "code", "linesLength": 3, "startIndex": 126, "lines": ["m = SrResnet()\n", "learn = Learner(md, SingleModel(to_gpu(m)), opt_fn=opt_fn)\n", "learn.crit = FeatureLoss(m_vgg, layers, wgts)"]}, {"block": 38, "type": "code", "linesLength": 2, "startIndex": 129, "lines": ["learn.lr_find()\n", "learn.sched.plot()"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 131, "lines": ["lr=1e-3"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["learn.fit(lr, 1, cycle_len=50, use_clr=(40,10))"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 133, "lines": ["learn.save('sr-samp')"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 134, "lines": ["learn.load('sr-samp')"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 135, "lines": ["x,y=next(iter(md.val_dl))"]}, {"block": 44, "type": "code", "linesLength": 3, "startIndex": 136, "lines": ["learn.model.eval()\n", "preds = learn.model(V(x))\n", "learn.crit(preds, V(y), sum_layers=False)"]}, {"block": 45, "type": "code", "linesLength": 2, "startIndex": 139, "lines": ["idx=15\n", "show_img(y,idx)"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 141, "lines": ["show_img(preds,idx)"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 142, "lines": ["show_img(x,idx)"]}, {"block": 48, "type": "code", "linesLength": 0, "startIndex": 143, "lines": []}]