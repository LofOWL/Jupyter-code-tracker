[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["## Dogs v Cats"]}, {"block": 1, "type": "code", "linesLength": 11, "startIndex": 1, "lines": ["%reload_ext autoreload\n", "%autoreload 2\n", "%matplotlib inline\n", "\n", "from fastai.imports import *\n", "\n", "from fastai.transforms import *\n", "from fastai.conv_learner import *\n", "from fastai.model import *\n", "from fastai.dataset import *\n", "from fastai.sgdr import *"]}, {"block": 2, "type": "code", "linesLength": 4, "startIndex": 12, "lines": ["PATH = \"data/dogscats/\"\n", "sz = 224\n", "arch = resnet34\n", "bs = 64"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 16, "lines": ["m = arch(True)"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["m"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 18, "lines": ["m = nn.Sequential(*children(m)[:-2], \n", "                  nn.Conv2d(512, 2, 3, padding=1), \n", "                  nn.AdaptiveAvgPool2d(1), Flatten(), \n", "                  nn.LogSoftmax())"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["tfms = tfms_from_model(arch, sz, aug_tfms=transforms_side_on, max_zoom=1.1)\n", "data = ImageClassifierData.from_paths(PATH, tfms=tfms, bs=bs)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 24, "lines": ["learn = ConvLearner.from_model_data(m, data)"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["learn.freeze_to(-4)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 26, "lines": ["m[-1].trainable"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["m[-4].trainable"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["learn.fit(0.01, 1)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["learn.fit(0.01, 1, cycle_len=1)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["## CAM"]}, {"block": 14, "type": "code", "linesLength": 5, "startIndex": 31, "lines": ["class SaveFeatures():\n", "    features=None\n", "    def __init__(self, m): self.hook = m.register_forward_hook(self.hook_fn)\n", "    def hook_fn(self, module, input, output): self.features = output\n", "    def remove(self): self.hook.remove()"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["x,y = next(iter(data.val_dl))"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 37, "lines": ["x,y = x[None,1], y[None,1]\n", "vx = Variable(x.cuda(), requires_grad=True)"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["dx = data.val_ds.denorm(x)[0]\n", "plt.imshow(dx);"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["sfs = [SaveFeatures(o) for o in [m[-7], m[-6], m[-5], m[-4]]]"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 42, "lines": ["%time py = m(Variable(x.cuda()))"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["for o in sfs: o.remove()"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["[o.features.size() for o in sfs]"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["py = np.exp(to_np(py)[0]); py"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 46, "lines": ["feat = np.maximum(0, to_np(sf.features[0]))\n", "feat.shape"]}, {"block": 24, "type": "code", "linesLength": 4, "startIndex": 48, "lines": ["f2=np.dot(np.rollaxis(feat,0,3), py)\n", "f2-=f2.min()\n", "f2/=f2.max()\n", "f2"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["plt.imshow(dx)\n", "plt.imshow(scipy.misc.imresize(f2, dx.shape), alpha=0.5, cmap='hot');"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["## Model"]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 55, "lines": ["learn.unfreeze()\n", "learn.bn_freeze(True)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["lr=np.array([1e-6,1e-4,1e-2])"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["learn.fit(lr, 2, cycle_len=1)"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["accuracy(*learn.TTA())"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["learn.fit(lr, 2, cycle_len=1)"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["accuracy(*learn.TTA())"]}, {"block": 33, "type": "code", "linesLength": 0, "startIndex": 62, "lines": []}]