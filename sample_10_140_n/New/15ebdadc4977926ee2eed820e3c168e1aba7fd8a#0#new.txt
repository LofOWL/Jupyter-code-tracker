[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Interacting with Slack from Python\n", "\n", "In this notebook, we will use `Slacker` to interact with Slack. This allows us to send messages and upload files, which can be useful when training models, or monitoring scripts (or just for fun of course)!"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["First off, install the package. Documentation can be found [here](https://github.com/os/slacker). "]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 4, "lines": ["!pip install - q - U Slacker"]}, {"block": 3, "type": "code", "linesLength": 24, "startIndex": 5, "lines": ["# ALl outputs \n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "# Slacker\n", "from slacker import Slacker\n", "\n", "# Data manipulation\n", "import numpy as np\n", "import pandas as pd\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "\n", "\n", "# Visualization\n", "import seaborn as sns\n", "import matplotlib.pyplot as plt\n", "%matplotlib inline\n", "plt.style.use('fivethirtyeight')\n", "\n", "# Displaying images\n", "from IPython.display import Image"]}, {"block": 4, "type": "markdown", "linesLength": 11, "startIndex": 29, "lines": ["# Get a Slack Legacy API Token\n", "\n", "Most importantly, you need a [Slack workspace](https://slack.com/). I recommend making your own workspace where you are the admin just to get familiar with this package. Once you have your workspace, obtain a legacy token to enable interaction. Head to the following link to get a token.\n", "\n", "https://api.slack.com/custom-integrations/legacy-tokens\n", "\n", "![](images/legacy_tokens.PNG)\n", "\n", "Store the token in a safe location (not on GitHub)!\n", "\n", "This token will allow us to do anything one can do through the Slack API. The full documentation for the Slack API is [here](https://api.slack.com/methods)"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 40, "lines": ["## Authenticate with Slack\n", "\n", "Replace the line below with the location of your slack api token."]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 43, "lines": ["with open('C:/Users/willk/OneDrive/Desktop/slack_api_python.txt', 'r') as f:\n", "    slack_api_token = f.read()"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 45, "lines": ["Next we authenticate with slack by instantiating a `Slacker` object. We'll test this by checking in our connection is `successful`."]}, {"block": 8, "type": "code", "linesLength": 7, "startIndex": 46, "lines": ["# Connect to Slack\n", "slack = Slacker(slack_api_token)\n", "if slack.api.test().successful:\n", "    print(\n", "        f\"Successfully connected to {slack.team.info().body['team']['name']}.\")\n", "else:\n", "    print('Try Again!')"]}, {"block": 9, "type": "markdown", "linesLength": 7, "startIndex": 53, "lines": ["# Interacting with Slack\n", "\n", "Anything (okay, nearly anything) you can do in Slack you can do through the Python API. First, let's just do some basic info retrieval. \n", "\n", "## Retrieving Information\n", "\n", "Each time you make a request for information, you get back `response` object. The `body` object of the response holds the details of the request (if successful)."]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 60, "lines": ["r = slack.team.info()\n", "r.body"]}, {"block": 11, "type": "code", "linesLength": 3, "startIndex": 62, "lines": ["from IPython.display import Image\n", "\n", "Image(url='https://avatars.slack-edge.com/2018-11-30/492734348690_802c4805ab4a0d29383b_230.png')"]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 65, "lines": ["## What Can We Do?\n", "\n", "This is our workspace's icon! (Okay that's not very exciting.) To see everything we can do with Slacker, let's take a look at the methods and attributes."]}, {"block": 13, "type": "code", "linesLength": 7, "startIndex": 68, "lines": ["from utils import get_data_and_model, get_options\n", "import warnings\n", "warnings.filterwarnings('ignore', category=FutureWarning)\n", "\n", "command_dict = get_options(slack)\n", "command_dict['functions']['users']\n", "command_dict['functions']['channels']"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["We can look at all the channels by iterating through them."]}, {"block": 15, "type": "code", "linesLength": 6, "startIndex": 76, "lines": ["channels = slack.channels.list().body\n", "\n", "# Iterate through channels\n", "for channel in channels['channels']:\n", "    print(\n", "        f'Channel {channel[\"name\"]} Purpose: {channel[\"purpose\"][\"value\"]}\\n')"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["Here's the history of the `general` channel."]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["slack.channels.history(channel='CCCT28F08').body"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["We can also see all of the users along with their profile photo."]}, {"block": 19, "type": "code", "linesLength": 9, "startIndex": 85, "lines": ["users = slack.users.list().body\n", "\n", "for user in users['members']:\n", "    # Print some information\n", "    print(\n", "        f'\\nUser: {user[\"name\"]}, Real Name: {user[\"real_name\"]}, Time Zone: {user[\"tz_label\"]}.')\n", "    print(f'Current Status: {user[\"profile\"][\"status_text\"]}')\n", "    # Get image data and show\n", "    Image(user['profile']['image_192'])"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 94, "lines": ["## IDs\n", "\n", "When we interact with a `channel` or `user`, it's generally best to refer to it by the `id`. Therefore, it can be helpful to set up a mapping of channels and users to their ids."]}, {"block": 21, "type": "code", "linesLength": 11, "startIndex": 97, "lines": ["channel_dict = {}\n", "\n", "for channel in channels['channels']:\n", "    channel_dict[channel['name']] = channel['id']\n", "\n", "user_dict = {}\n", "\n", "for user in users['members']:\n", "    user_dict[user['name']] = user['id']\n", "\n", "user_dict"]}, {"block": 22, "type": "markdown", "linesLength": 3, "startIndex": 108, "lines": ["## Altering Attributes\n", "\n", "It's pretty lonely in this Slack workspace! Now, we can alter any attributes of users of channels with the ids For example, we can set the purpose of the `python_content` channel as follows."]}, {"block": 23, "type": "code", "linesLength": 11, "startIndex": 111, "lines": ["# Set the purpose of the channel\n", "r = slack.channels.set_purpose(channel_dict['python_content2'],\n", "                               purpose='Learning how to use Python for Slack interaction')\n", "\n", "channels = slack.channels.list().body\n", "\n", "# Iterate through channels\n", "for channel in channels['channels']:\n", "    if channel['name'] == 'python_content2':\n", "        print(\n", "            f'Channel {channel[\"name\"]} Purpose: {channel[\"purpose\"][\"value\"]}\\n')"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 122, "lines": ["Let's change a few of my attributes. First we can see what I'm up to."]}, {"block": 25, "type": "code", "linesLength": 5, "startIndex": 123, "lines": ["me = users['members'][0]\n", "me['profile']['title']\n", "me['profile']['display_name']\n", "me['profile']['status_text']\n", "me['profile']['status_emoji']"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 128, "lines": ["Okay so not that exciting. Let's change a few things."]}, {"block": 27, "type": "code", "linesLength": 7, "startIndex": 129, "lines": ["for new_value, name in zip(['Data Scientist and Writer', 'Willk', 'data-sciencing', ':male-technologist:'],\n", "                           ['title', 'display_name', 'status_text', 'status_emoji']):\n", "\n", "    r = slack.users.profile.set(user=user_dict['wjk68'],\n", "                                name=name, value=new_value)\n", "    if not r:\n", "        print(r.error)"]}, {"block": 28, "type": "code", "linesLength": 6, "startIndex": 136, "lines": ["users = slack.users.list().body\n", "me = users['members'][0]\n", "me['profile']['title']\n", "me['profile']['display_name']\n", "me['profile']['status_text']\n", "me['profile']['status_emoji']"]}, {"block": 29, "type": "markdown", "linesLength": 5, "startIndex": 142, "lines": ["### The All-Important Emoji\n", "\n", "Emoji's are set using the `:name:` emoji code notation. The easiest way to figure out which one to use is go to Slack, bring up the emoji's hover over the one you want, and find the name.\n", "\n", "![](images/emoji_choose.PNG)"]}, {"block": 30, "type": "code", "linesLength": 8, "startIndex": 147, "lines": ["import emoji\n", "\n", "\n", "def print_emoji(emoji_name):\n", "    print(emoji.emojize(emoji_name, use_aliases=True))\n", "\n", "\n", "print_emoji(':runner:')"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 155, "lines": ["print_emoji(':computer:')"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 156, "lines": ["Here's an image of all the available emoji at once. You can find all emoji codes at https://www.webpagefx.com/tools/emoji-cheat-sheet/."]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 157, "lines": ["Image(url='https://a.slack-edge.com/c00d19/img/emoji_2017_12_06/sheet_google_64_indexed_256.png')"]}, {"block": 34, "type": "markdown", "linesLength": 3, "startIndex": 158, "lines": ["### Searching\n", "\n", "You can search through any messages or files in your team's workspace."]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 161, "lines": ["def convert_ts(ts):\n", "    return pd.to_datetime(ts, unit='s').date()"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 163, "lines": ["matches = slack.search.messages(query='Python').body['messages']['matches']\n", "for match in matches:\n", "    print(f\"Time: {convert_ts(match['ts'])}, Text: {match['text']}\")"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 166, "lines": ["print(emoji.emojize(\"Python is fun :+1:\", use_aliases=True))"]}, {"block": 38, "type": "code", "linesLength": 3, "startIndex": 167, "lines": ["matches = slack.search.files(query='plot').body['files']['matches']\n", "for match in matches:\n", "    print(f\"Time: {convert_ts(match['timestamp'])}, Title: {match['title']}\")"]}, {"block": 39, "type": "markdown", "linesLength": 3, "startIndex": 170, "lines": ["### Do Not Disturb\n", "\n", "You can even find the do not disturb settings for everyone on your team."]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 173, "lines": ["slack.dnd.team_info().body"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 174, "lines": ["If you want to tell everyone to leave you alone, go ahead and do so! "]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 175, "lines": ["slack.dnd.set_snooze(num_minutes=120).body"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 176, "lines": ["And then we can end that snooze becuase there's more to do."]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 177, "lines": ["slack.dnd.end_snooze().body"]}, {"block": 45, "type": "markdown", "linesLength": 3, "startIndex": 178, "lines": ["## Creating a New Channel\n", "\n", "Let's make a brand new channel."]}, {"block": 46, "type": "code", "linesLength": 10, "startIndex": 181, "lines": ["new_channel_name = 'python_content_update'\n", "\n", "# Create new channel\n", "r = slack.channels.create(new_channel_name)\n", "new_id = slack.channels.get_channel_id(new_channel_name)\n", "\n", "# Set channel purpose\n", "r = slack.channels.set_purpose(new_id, 'Data Science and Python')\n", "r = slack.channels.info(new_id)\n", "r.body['channel']['latest']"]}, {"block": 47, "type": "markdown", "linesLength": 3, "startIndex": 191, "lines": ["## Additional Options\n", "\n", "Nearly anything you want to do on Slack you can do through this API! Feel free to check out all of the options (which you can find in the `command_dict`). The [Slack API reference](https://api.slack.com/methods) is helpful for formulating commands."]}, {"block": 48, "type": "markdown", "linesLength": 3, "startIndex": 194, "lines": ["# Posting Messages\n", "\n", "Now let's get to the heart of why we want to interact with Slack: posting new messages. It's relatively simple to post a message to any channel. "]}, {"block": 49, "type": "code", "linesLength": 5, "startIndex": 197, "lines": ["r = slack.chat.post_message(channel='python_content',\n", "                            text='Have a great day!',\n", "                            username='Python Test',\n", "                            icon_url='http://devarea.com/wp-content/uploads/2017/11/python-300x300.png')\n", "r.successful"]}, {"block": 50, "type": "markdown", "linesLength": 1, "startIndex": 202, "lines": ["![](images/posted_message.PNG)"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 203, "lines": ["If we set the `username` then the messages are posted as bots. We still get to choose the icon though."]}, {"block": 52, "type": "code", "linesLength": 2, "startIndex": 204, "lines": ["slack.channels.history(\n", "    channel=channel_dict['python_content']).body['messages'][0]['text']"]}, {"block": 53, "type": "markdown", "linesLength": 3, "startIndex": 206, "lines": ["#### Links in Messages\n", "\n", "Links are automatically expanded."]}, {"block": 54, "type": "code", "linesLength": 6, "startIndex": 209, "lines": ["r = slack.chat.post_message(channel='python_content',\n", "                            text=\"Here's an uplifting story: https://www.forbes.com/sites/stevedenning/2017/11/30/why-the-world-is-getting-better-why-hardly-anyone-knows-it/#181c93b27826\",\n", "                            unfurl_links=True,\n", "                            username='Uplift',\n", "                            icon_emoji=':point_up::skin-tone-5:')\n", "r.successful"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 215, "lines": ["![](images/unfurl.PNG)"]}, {"block": 56, "type": "markdown", "linesLength": 3, "startIndex": 216, "lines": ["### Mentioning Users\n", "\n", "You can mention specific users with `<@user_id>`."]}, {"block": 57, "type": "code", "linesLength": 6, "startIndex": 219, "lines": ["r = slack.chat.post_message(channel='python_content',\n", "                            text='<@UCEKVNHPH> Have you read any good books lately?',\n", "                            link_names=True,\n", "                            username='Query',\n", "                            icon_emoji=':green_book:')\n", "r.successful"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 225, "lines": ["![](images/query.PNG)"]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 226, "lines": ["We can also post as ourselves."]}, {"block": 60, "type": "code", "linesLength": 4, "startIndex": 227, "lines": ["r = slack.chat.post_message(channel='python_content',\n", "                            text='Anyone up for a trip to the store?',\n", "                            as_user='willk')\n", "r.successful"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 231, "lines": ["![](images/my_posted_message.PNG)"]}, {"block": 62, "type": "code", "linesLength": 2, "startIndex": 232, "lines": ["slack.channels.history(\n", "    channel=channel_dict['python_content']).body['messages'][0]['text']"]}, {"block": 63, "type": "markdown", "linesLength": 1, "startIndex": 234, "lines": ["Of course you can also notify everyone! "]}, {"block": 64, "type": "code", "linesLength": 5, "startIndex": 235, "lines": ["r = slack.chat.post_message(channel='python_content',\n", "                            text='<!everyone> *This is not a test!*',\n", "                            username='Alert',\n", "                            icon_emoji=':female-firefighter:')\n", "r.successful"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 240, "lines": ["![](images/Alert.PNG)"]}, {"block": 66, "type": "markdown", "linesLength": 3, "startIndex": 241, "lines": ["## Complex Messages\n", "\n", "Messages can be as complex as you want using attachments."]}, {"block": 67, "type": "code", "linesLength": 27, "startIndex": 244, "lines": ["r = slack.chat.post_message(channel='random',\n", "                            username='Fancy Message',\n", "                            icon_emoji=':earth_africa:',\n", "                            attachments=[\n", "                                {\n", "                                    \"fallback\": \"Required plain-text summary of the attachment.\",\n", "                                    \"color\": \"#2eb886\",\n", "                                    \"pretext\": \"Optional text that appears above the attachment block\",\n", "                                    \"author_name\": \"Fancy Message\",\n", "                                    \"title\": \"Slack API Documentation\",\n", "                                    \"title_link\": \"https://api.slack.com/\",\n", "                                    \"text\": \"Optional text that appears within the attachment\",\n", "                                    \"fields\": [\n", "                                        {\n", "                                            \"title\": \"Priority\",\n", "                                            \"value\": \"High\",\n", "                                            \"short\": False\n", "                                        }\n", "                                    ],\n", "                                    \"image_url\": \"http://my-website.com/path/to/image.jpg\",\n", "                                    \"thumb_url\": \"http://example.com/path/to/thumb.png\",\n", "                                    \"footer\": \"Slack API\",\n", "                                    \"footer_icon\": \"https://platform.slack-edge.com/img/default_application_icon.png\",\n", "                                    \"ts\": 123456789\n", "                                }\n", "                            ]\n", "                            )"]}, {"block": 68, "type": "markdown", "linesLength": 1, "startIndex": 271, "lines": ["![](images/complex.PNG)"]}, {"block": 69, "type": "markdown", "linesLength": 1, "startIndex": 272, "lines": ["We can even do crazy things like posting clickable games! "]}, {"block": 70, "type": "code", "linesLength": 52, "startIndex": 273, "lines": ["r = slack.chat.post_message(channel='random', text='Play a game!',\n", "                            username='Game Overseer',\n", "                            icon_emoji=':black_joker:',\n", "                            attachments=[\n", "                                {\n", "                                    \"text\": \"Choose a game to play\",\n", "                                    \"fallback\": \"You are unable to choose a game\",\n", "                                    \"callback_id\": \"wopr_game\",\n", "                                    \"color\": \"#3AA3E3\",\n", "                                    \"attachment_type\": \"default\",\n", "                                    \"actions\": [\n", "                                        {\n", "                                            \"name\": \"game\",\n", "                                            \"text\": \"Chess\",\n", "                                            \"type\": \"button\",\n", "                                            \"value\": \"chess\",\n", "                                            \"confirm\": {\n", "                                                \"title\": \"Chess is a great game for the mind\",\n", "                                                \"text\": \"Are you up to the challenge?\",\n", "                                                \"ok_text\": \"Yes\",\n", "                                                \"dismiss_text\": \"No\"\n", "                                            }\n", "                                        },\n", "                                        {\n", "                                            \"name\": \"game\",\n", "                                            \"text\": \"Falken's Maze\",\n", "                                            \"type\": \"button\",\n", "                                            \"value\": \"maze\",\n", "                                            \"confirm\": {\n", "                                                \"title\": \"Mazes aren't that interesting!\",\n", "                                                \"text\": \"How about the other options?\",\n", "                                                \"ok_text\": \"Yes\",\n", "                                                \"dismiss_text\": \"No\"\n", "                                            }\n", "                                        },\n", "                                        {\n", "                                            \"name\": \"game\",\n", "                                            \"text\": \"Thermonuclear War\",\n", "                                            \"style\": \"danger\",\n", "                                            \"type\": \"button\",\n", "                                            \"value\": \"war\",\n", "                                            \"confirm\": {\n", "                                                \"title\": \"Are you sure?\",\n", "                                                \"text\": \"Wouldn't you prefer a good game of chess?\",\n", "                                                \"ok_text\": \"Yes\",\n", "                                                \"dismiss_text\": \"No\"\n", "                                            }\n", "                                        }\n", "                                    ]\n", "                                }\n", "                            ]\n", "                            )"]}, {"block": 71, "type": "markdown", "linesLength": 1, "startIndex": 325, "lines": ["![](images/game_button.PNG)"]}, {"block": 72, "type": "markdown", "linesLength": 3, "startIndex": 326, "lines": ["# Uploading Files\n", "\n", "One of my favorite parts of Slack is uploading files. This is done using a local file stored on your machine."]}, {"block": 73, "type": "code", "linesLength": 4, "startIndex": 329, "lines": ["r = slack.files.upload(file_='images/volcano_crater.jpg',\n", "                       channels=['random'], title='Volcano Crater',\n", "                       initial_comment='This would make a great display background')\n", "r.successful"]}, {"block": 74, "type": "markdown", "linesLength": 1, "startIndex": 333, "lines": ["Here's the image that we posted."]}, {"block": 75, "type": "code", "linesLength": 2, "startIndex": 334, "lines": ["img_url = r.body['file']['thumb_480']\n", "img_url"]}, {"block": 76, "type": "code", "linesLength": 1, "startIndex": 336, "lines": ["Image('images/volcano_crater.jpg')"]}, {"block": 77, "type": "markdown", "linesLength": 3, "startIndex": 337, "lines": ["# Posting Plots\n", "\n", "Once we know how to upload files, we can start posting results of our analyses."]}, {"block": 78, "type": "code", "linesLength": 17, "startIndex": 340, "lines": ["import seaborn as sns\n", "import warnings\n", "warnings.filterwarnings('ignore', category=FutureWarning)\n", "\n", "# library & dataset\n", "df = sns.load_dataset('iris')\n", "\n", "# Basic 2D density plot\n", "sns.set_style(\"white\")\n", "\n", "# Some features are characteristic of 2D: color palette and wether or not color the lowest range\n", "sns.kdeplot(df.sepal_width, df.sepal_length,\n", "            cmap=\"Blues\", shade=True, shade_lowest=True, )\n", "plt.title('Good Ole Iris Data Set')\n", "\n", "# Save last figure\n", "plt.savefig('iris_plot.png', dpi=500)"]}, {"block": 79, "type": "code", "linesLength": 4, "startIndex": 357, "lines": ["r = slack.files.upload(file_='iris_plot.png',\n", "                       channels=['slack_interaction', 'python_content3'],\n", "                       title='Iris Seaborn Plot',\n", "                       initial_comment=\"I've seen this data set way too many times. Seaborn makes some nice plots though.\")"]}, {"block": 80, "type": "markdown", "linesLength": 1, "startIndex": 361, "lines": ["![](images/plot_posted.PNG)"]}, {"block": 81, "type": "code", "linesLength": 23, "startIndex": 362, "lines": ["from string import ascii_letters\n", "\n", "d = pd.DataFrame(data=np.random.normal(size=(100, 26)),\n", "                 columns=list(ascii_letters[26:]))\n", "\n", "# Compute the correlation matrix\n", "corr = d.corr()\n", "\n", "# Generate a mask for the upper triangle\n", "mask = np.zeros_like(corr, dtype=np.bool)\n", "mask[np.triu_indices_from(mask)] = True\n", "\n", "# Set up the matplotlib figure\n", "f, ax = plt.subplots(figsize=(11, 9))\n", "\n", "# Generate a custom diverging colormap\n", "cmap = sns.diverging_palette(220, 10, as_cmap=True)\n", "\n", "# Draw the heatmap with the mask and correct aspect ratio\n", "sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n", "            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n", "\n", "plt.savefig('heatmap_ex.png')"]}, {"block": 82, "type": "code", "linesLength": 4, "startIndex": 385, "lines": ["r = slack.files.upload(file_='heatmap_ex.png',\n", "                       channels=['slack_interaction', 'python_content3'],\n", "                       title='Correlation Heatmap',\n", "                       initial_comment=\"The correlations are meaningless becuase they are random. Nice plot though.\")"]}, {"block": 83, "type": "markdown", "linesLength": 3, "startIndex": 389, "lines": ["# Monitor Training\n", "\n", "Let's get serious and use slack for some real work. Here we'll monitor the progess of a convolutional neural network as it is training."]}, {"block": 84, "type": "markdown", "linesLength": 1, "startIndex": 392, "lines": ["First we'll create a new channel if it does not yet exist."]}, {"block": 85, "type": "code", "linesLength": 13, "startIndex": 393, "lines": ["channel_list = [c['name'] for c in slack.channels.list().body['channels']]\n", "\n", "reporting_channel = 'training_report'\n", "\n", "if reporting_channel not in channel_list:\n", "    slack.channels.create('training_report')\n", "\n", "cid = slack.channels.get_channel_id('training_report')\n", "r = slack.channels.set_purpose(\n", "    cid, 'Report progress while training machine learning models')\n", "r = slack.channels.set_topic(cid, 'Progress Monitoring')\n", "r = slack.channels.info(cid).body\n", "r['channel']['latest']"]}, {"block": 86, "type": "markdown", "linesLength": 3, "startIndex": 406, "lines": ["### Model and Data\n", "\n", "Now we'll import some data and a model. This is just a basic convolutional neural network that will be trained to identify numbers (MNIST). The script is from https://github.com/keras-team/keras/blob/master/examples/mnist_cnn.py"]}, {"block": 87, "type": "code", "linesLength": 4, "startIndex": 409, "lines": ["from utils import get_data_and_model\n", "\n", "x_train, x_test, y_train, y_test, model = get_data_and_model()\n", "model.summary()"]}, {"block": 88, "type": "markdown", "linesLength": 4, "startIndex": 413, "lines": ["### Keras Custom Callback\n", "\n", "We'll write a quick custom Keras callback that reports the progress while training. Refer to [the documentation](https://keras.io/callbacks/) for specifics. \n", "\n"]}, {"block": 89, "type": "code", "linesLength": 14, "startIndex": 417, "lines": ["from keras.callbacks import Callback\n", "from datetime import datetime\n", "\n", "\n", "def report_stats(text, channel):\n", "    \"\"\"Report training stats\"\"\"\n", "    r = slack.chat.post_message(channel=channel, text=text,\n", "                                username='Training Report',\n", "                                icon_emoji=':clipboard:')\n", "\n", "    if r.successful:\n", "        return True\n", "    else:\n", "        return r.error"]}, {"block": 90, "type": "code", "linesLength": 44, "startIndex": 431, "lines": ["from timeit import default_timer as timer\n", "\n", "\n", "class SlackUpdate(Callback):\n", "    \"\"\"Custom Keras callback that posts to Slack while training a neural network\"\"\"\n", "\n", "    def __init__(self, channel):\n", "        self.channel = channel\n", "\n", "    def on_train_begin(self, logs={}):\n", "        report_stats(text=f'Training started at {datetime.now()}',\n", "                     channel=reporting_channel)\n", "\n", "        self.start_time = timer()\n", "        self.train_acc = []\n", "        self.valid_acc = []\n", "        self.train_loss = []\n", "        self.valid_loss = []\n", "        self.n_epochs = 0\n", "\n", "    def on_epoch_end(self, batch, logs={}):\n", "\n", "        self.train_acc.append(logs.get('acc'))\n", "        self.valid_acc.append(logs.get('val_acc'))\n", "        self.train_loss.append(logs.get('loss'))\n", "        self.valid_loss.append(logs.get('val_loss'))\n", "        self.n_epochs += 1\n", "\n", "        message = f'Epoch: {self.n_epochs} Training Loss: {self.train_loss[-1]:.4f} Validation Loss: {self.valid_loss[-1]:.4f}'\n", "\n", "        report_stats(message, channel=self.channel)\n", "\n", "    def on_train_end(self, logs={}):\n", "\n", "        best_epoch = np.argmin(self.valid_loss)\n", "        valid_loss = self.valid_loss[best_epoch]\n", "        train_loss = self.train_loss[best_epoch]\n", "        train_acc = self.train_acc[best_epoch]\n", "        valid_acc = self.valid_acc[best_epoch]\n", "\n", "        message = f'Trained for {self.n_epochs} epochs. Best epoch was {best_epoch + 1}.'\n", "        report_stats(message, channel=self.channel)\n", "        message = f'Best validation loss = {valid_loss:.4f} Training Loss = {train_loss:.2f} Validation accuracy = {100*valid_acc:.2f}%'\n", "        report_stats(message, channel=self.channel)"]}, {"block": 91, "type": "markdown", "linesLength": 3, "startIndex": 475, "lines": ["Now let's instantiate this callback. We'll report to the new channel we created. \n", "\n", "Then we start training and can monitor the training in the channel."]}, {"block": 92, "type": "code", "linesLength": 7, "startIndex": 478, "lines": ["import tensorflow as tf\n", "updater = SlackUpdate(channel=reporting_channel)\n", "\n", "\n", "# Fit the model for 10 epochs\n", "history = model.fit(x_train, y_train, epochs=12, batch_size=512,\n", "                    callbacks=[updater], validation_split=0.4)"]}, {"block": 93, "type": "markdown", "linesLength": 1, "startIndex": 485, "lines": ["We have a thorough report of what happened during training."]}, {"block": 94, "type": "markdown", "linesLength": 1, "startIndex": 486, "lines": ["![](images/training_report.PNG)"]}, {"block": 95, "type": "markdown", "linesLength": 3, "startIndex": 487, "lines": ["## Plot Results\n", "\n", "Next we can create a plot of the training curves and send them to the reporting channel. This could also be included in the custom callback `on_train_end` method."]}, {"block": 96, "type": "markdown", "linesLength": 1, "startIndex": 490, "lines": ["First we'll plot the figure and save it."]}, {"block": 97, "type": "code", "linesLength": 4, "startIndex": 491, "lines": ["from utils import plot_history\n", "\n", "plot_history(history.history)\n", "plt.savefig('training_curves.png')"]}, {"block": 98, "type": "markdown", "linesLength": 1, "startIndex": 495, "lines": ["Next we upload the file along with some helpful comments."]}, {"block": 99, "type": "code", "linesLength": 10, "startIndex": 496, "lines": ["# Find minimum loss\n", "min_loss = min(history.history['val_loss'])\n", "best_epoch = np.argmin(history.history['val_loss']) + 1\n", "\n", "# Upload file\n", "comment = f\"Best loss of {min_loss:.4f} at epoch {best_epoch}.\"\n", "r = slack.files.upload(file_='training_curves.png', title=\"Training Curves\", channels=[reporting_channel],\n", "                       initial_comment=comment)\n", "r = slack.channels.info(cid).body\n", "r['channel']['latest']['text']"]}, {"block": 100, "type": "markdown", "linesLength": 1, "startIndex": 506, "lines": ["![](images/training_plot.PNG)"]}, {"block": 101, "type": "markdown", "linesLength": 3, "startIndex": 507, "lines": ["## Upload Predictions\n", "\n", "We'll were at it, we might as well upload some predictions on test images."]}, {"block": 102, "type": "code", "linesLength": 9, "startIndex": 510, "lines": ["from matplotlib import MatplotlibDeprecationWarning\n", "warnings.filterwarnings('ignore', category=MatplotlibDeprecationWarning)\n", "\n", "\n", "def plot_image(image, ax=None):\n", "    if ax is not None:\n", "        ax.imshow(image.reshape((28, 28)), cmap='Greys')\n", "    else:\n", "        plt.imshow(image.reshape((28, 28)), cmap='Greys')"]}, {"block": 103, "type": "code", "linesLength": 1, "startIndex": 519, "lines": ["plot_image(x_test[10])"]}, {"block": 104, "type": "code", "linesLength": 1, "startIndex": 520, "lines": ["y_test[1]"]}, {"block": 105, "type": "code", "linesLength": 25, "startIndex": 521, "lines": ["def plot_predictions(n=4):\n", "    \"\"\"Plot test image and predictions\"\"\"\n", "\n", "    # Get random images to plot\n", "    to_plot = np.random.choice(list(range(x_test.shape[0])),\n", "                               size=n, replace=False)\n", "    correct = []\n", "    # Make predictions and plot each image\n", "    for i in to_plot:\n", "        image = x_test[i]\n", "        probs = model.predict_proba(image.reshape((1, 28, 28, 1)))[0]\n", "        pred = pd.DataFrame({'prob': probs})\n", "        fig, axs = plt.subplots(1, 2, figsize=(16, 6))\n", "        plot_image(image, axs[0])\n", "\n", "        pred['prob'].plot.bar(ax=axs[1])\n", "        axs[1].set_xlabel('Class')\n", "        axs[1].set_ylabel('Probability')\n", "        axs[1].set_title('Predictions')\n", "        plt.savefig(f'images/test-{i}-predictions.png')\n", "        plt.show()\n", "\n", "        correct.append(np.argmax(probs) == np.argmax(y_test[i]))\n", "\n", "    return to_plot, correct"]}, {"block": 106, "type": "code", "linesLength": 1, "startIndex": 546, "lines": ["to_plot, c = plot_predictions()"]}, {"block": 107, "type": "code", "linesLength": 14, "startIndex": 547, "lines": ["def post_predictions(channel, n=4):\n", "    \"\"\"Post Keras preditions to Slack\"\"\"\n", "\n", "    # Make predictions\n", "    plot_indexes, correct = plot_predictions(n=n)\n", "\n", "    # Iterate through images and correct indicators\n", "    for i, r in zip(plot_indexes, correct):\n", "        filename = f'images/test-{i}-predictions.png'\n", "        # Upload the files\n", "        r = slack.files.upload(file_=filename,\n", "                               title=\"Predictions\",\n", "                               channels=[channel],\n", "                               initial_comment='Correct' if r else 'Incorrect')"]}, {"block": 108, "type": "code", "linesLength": 1, "startIndex": 561, "lines": ["post_predictions(reporting_channel)"]}, {"block": 109, "type": "markdown", "linesLength": 5, "startIndex": 562, "lines": ["Here is what the predictions look like uploaded to Slack. \n", "\n", "![](images/prediction_plots.PNG)\n", "\n", "Looks like this model does pretty well. If you set up a model to train overnight, it would be nice to see these results in the morning."]}, {"block": 110, "type": "markdown", "linesLength": 16, "startIndex": 567, "lines": ["# Conclusions\n", "\n", "While apps such as Slack can be used for fun, they also can improve productivity when used correctly. Once we realize the nearly all of these apps have Python apis, we can start to figure out how to use them programmatically for the greatest efficiency.\n", "\n", "In this notebook, we saw how to interact with Slack using the `Slacker` library in Python. The library allows us to do anything we can do through the Slack API which gives us control over almost every aspect of our workspace. \n", "\n", "We can do things such as:\n", "\n", "* Retrieve channel, message, and user information\n", "* Alter and manage settings\n", "* Post messages including complex formatted apps\n", "* Upload files such as Python plots\n", "* Track the progress of a machine learning training run\n", "* Post results of a deep learning exercise \n", "\n", "We have only covered the surface level of what we can do programmatically. Although this particular use case may not be compelling to you, the overarching idea that we can use Python to carry out many routine tasks and improve our efficiency is powerful. "]}, {"block": 111, "type": "code", "linesLength": 0, "startIndex": 583, "lines": []}]