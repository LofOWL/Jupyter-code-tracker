[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["<i>Copyright (c) Microsoft Corporation. All rights reserved.</i>\n", "\n", "<i>Licensed under the MIT License.</i>"]}, {"block": 1, "type": "markdown", "linesLength": 13, "startIndex": 3, "lines": ["# Wide and Deep Model for Movie Recommendation\n", "\n", "<br>\n", "\n", "A linear model with a wide set of cross-product features can memorize the feature interactions, while deep neural networks (DNN) can generalize the feature patterns through low-dimensional dense embeddings learned for the sparse features. [**Wide-and-deep**](https://arxiv.org/abs/1606.07792) learning jointly trains wide linear model and deep neural networks to combine the benefits of memorization and generalization for recommender systems.\n", "\n", "This notebook shows how to build and test the wide-and-deep model using [TensorFlow high-level Estimator API (v1.12)](https://www.tensorflow.org/api_docs/python/tf/estimator/DNNLinearCombinedRegressor). With the [movie recommendation dataset](https://grouplens.org/datasets/movielens/), we quickly demonstrate following topics:\n", "1. How to prepare data\n", "2. Build the model\n", "3. Use log-hook to estimate performance while training\n", "4. Test the model and export\n", "\n", "> Note: The output cells in this notebook are from the result of run on Azure DSVM (Data Science Virtual Machine) with *Standard NC6* virtual machine."]}, {"block": 2, "type": "code", "linesLength": 41, "startIndex": 16, "lines": ["import sys\n", "sys.path.append(\"../../\")\n", "\n", "import os\n", "import shutil\n", "import itertools\n", "\n", "import papermill as pm\n", "import pandas as pd\n", "import numpy as np\n", "import sklearn.preprocessing\n", "\n", "import tensorflow as tf\n", "from tensorflow.python.client import device_lib\n", "\n", "from reco_utils.common import tf_utils\n", "from reco_utils.dataset import movielens\n", "from reco_utils.dataset.pandas_df_utils import user_item_pairs, filter_by\n", "from reco_utils.dataset.python_splitters import python_random_split\n", "from reco_utils.evaluation.python_evaluation import (\n", "    rmse, mae, rsquared, exp_var,\n", "    map_at_k, ndcg_at_k, precision_at_k, recall_at_k\n", ")\n", "\n", "print(\"Tensorflow Version:\", tf.VERSION)\n", "\n", "devices = device_lib.list_local_devices()\n", "[x.name for x in devices]\n", "\n", "SUPPORTED_RANKING_METRICS = {\n", "    'map': map_at_k,\n", "    'ndcg': ndcg_at_k,\n", "    'precision': precision_at_k,\n", "    'recall': recall_at_k\n", "}\n", "SUPPORTED_RATING_METRICS = {\n", "    'rmse': rmse,\n", "    'mae': mae,\n", "    'rsquared': rsquared,\n", "    'exp_var': exp_var\n", "}"]}, {"block": 3, "type": "code", "linesLength": 44, "startIndex": 57, "lines": ["\"\"\"Parameters. This cell is being used to pass parameters from other scripts via papermill\"\"\"\n", "\n", "# Recommend top k items\n", "TOP_K = 10\n", "# Select Movielens data size: 100k, 1m, 10m, or 20m\n", "MOVIELENS_DATA_SIZE = '100k'\n", "METRICS = [\n", "    'rmse', 'mae', 'rsquared', 'exp_var',\n", "    'map', 'ndcg', 'precision', 'recall'\n", "]\n", "EVALUATE_WHILE_TRAINING = True  # If true, use session hook to evaluate model while training\n", "# Data column names\n", "USER_COL = 'UserId'\n", "ITEM_COL = 'MovieId'\n", "RATING_COL = 'Rating'\n", "ITEM_FEAT_COL = 'Genres'\n", "\n", "# Prepared train and test set pickle file paths. If None, load.\n", "DATA_DIR = None\n", "TRAIN_PICKLE_PATH = None\n", "TEST_PICKLE_PATH = None\n", "EXPORT_DIR_BASE = './outputs/model'\n", "\n", "\"\"\"Hyperparameters\"\"\"\n", "MODEL_TYPE = 'wide_deep'\n", "EPOCHS = 50\n", "BATCH_SIZE = 256\n", "# Wide (linear) model hyperparameters\n", "LINEAR_OPTIMIZER = 'Ftrl'\n", "LINEAR_OPTIMIZER_LR = 0.0001  # Learning rate\n", "LINEAR_L1_REG = 0.0           # L1 Regularization rate for FtrlOptimizer\n", "# DNN model hyperparameters\n", "DNN_OPTIMIZER = 'Adagrad'\n", "DNN_OPTIMIZER_LR = 0.1\n", "DNN_HIDDEN_LAYER_1 = 0     # Set 0 to not use this layer\n", "DNN_HIDDEN_LAYER_2 = 1024  # Set 0 to not use this layer\n", "DNN_HIDDEN_LAYER_3 = 32    # Set 0 to not use this layer\n", "DNN_HIDDEN_LAYER_4 = 1024  # With this setting, DNN hidden units will be = [512, 256, 128, 128]\n", "DNN_USER_DIM = 64\n", "DNN_ITEM_DIM = 4\n", "DNN_DROPOUT = 0.3\n", "DNN_BATCH_NORM = 1        # 1 to use batch normalization, 0 if not.\n", "\n", "MODEL_DIR = 'model_checkpoints'"]}, {"block": 4, "type": "markdown", "linesLength": 4, "startIndex": 101, "lines": ["### 1. Prepare Data\n", "\n", "#### 1.1 Movie Rating and Genres Data\n", "First, download [MovieLens](https://grouplens.org/datasets/movielens/) data. Movies in the data set are tagged as one or more genres where there are total 19 genres including '*unknown*'. We load *movie genres* to use them as item features."]}, {"block": 5, "type": "code", "linesLength": 10, "startIndex": 105, "lines": ["data_loaded = False\n", "# If local paths of train and test sets have given, use them\n", "if TRAIN_PICKLE_PATH is not None and TEST_PICKLE_PATH is not None:\n", "    if DATA_DIR is not None:\n", "        train_pickle_path = os.path.join(DATA_DIR, TRAIN_PICKLE_PATH)\n", "        test_pickle_path = os.path.join(DATA_DIR, TEST_PICKLE_PATH)\n", "    train = pd.read_pickle(path=train_pickle_path)\n", "    test = pd.read_pickle(path=test_pickle_path)\n", "    data = pd.concat([train, test])\n", "    data_loaded = True"]}, {"block": 6, "type": "code", "linesLength": 8, "startIndex": 115, "lines": ["if not data_loaded:\n", "    # The genres of each movie are returned as '|' separated string, e.g. \"Animation|Children's|Comedy\".\n", "    data = movielens.load_pandas_df(\n", "        size=MOVIELENS_DATA_SIZE,\n", "        header=[USER_COL, ITEM_COL, RATING_COL],\n", "        genres_col='Genres_string'  # load genres as a temporal column 'Genres_string'\n", "    )\n", "    display(data.head())"]}, {"block": 7, "type": "markdown", "linesLength": 4, "startIndex": 123, "lines": ["#### 1.2 Encode Item Features (Genres)\n", "To use genres from our model, we multi-hot-encode them with scikit-learn's [MultiLabelBinarizer](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MultiLabelBinarizer.html).\n", "\n", "For example, *Movie id=2355* has three genres, *Animation|Children's|Comedy*, which are being converted into an integer array of the indicator value for each genre like `[0, 0, 1, 1, 1, 0, 0, 0, ...]`. In the later step, we convert this into a float array and feed into the model."]}, {"block": 8, "type": "code", "linesLength": 8, "startIndex": 127, "lines": ["if not data_loaded:\n", "    # Encode 'genres' into int array (multi-hot representation) to use as item features\n", "    genres_encoder = sklearn.preprocessing.MultiLabelBinarizer()\n", "    data[ITEM_FEAT_COL] = genres_encoder.fit_transform(\n", "        data['Genres_string'].apply(lambda s: s.split(\"|\"))\n", "    ).tolist()\n", "    print(\"Genres:\", genres_encoder.classes_)\n", "    display(data.drop_duplicates(ITEM_COL)[[ITEM_COL, 'Genres_string', ITEM_FEAT_COL]].head())"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 135, "lines": ["#### 1.3 Train and Test Split"]}, {"block": 10, "type": "code", "linesLength": 9, "startIndex": 136, "lines": ["if not data_loaded:\n", "    train, test = python_random_split(\n", "        data.drop('Genres_string', axis=1),  # We don't need Genres original string column\n", "        ratio=0.75,\n", "        seed=123 \n", "    )\n", "    data_loaded = True\n", "\n", "print(\"Train = {}, test = {}\".format(len(train), len(test)))"]}, {"block": 11, "type": "code", "linesLength": 11, "startIndex": 145, "lines": ["# Unique items\n", "if ITEM_FEAT_COL is None:\n", "    items = data.drop_duplicates(ITEM_COL)[[ITEM_COL]].reset_index(drop=True)\n", "    item_feat_shape = None\n", "else:\n", "    items = data.drop_duplicates(ITEM_COL)[[ITEM_COL, ITEM_FEAT_COL]].reset_index(drop=True)\n", "    item_feat_shape = len(items[ITEM_FEAT_COL][0])\n", "# Unique users\n", "users = data.drop_duplicates(USER_COL)[[USER_COL]].reset_index(drop=True)\n", "\n", "print(\"Num items = {}, num users = {}\".format(len(items), len(users)))"]}, {"block": 12, "type": "markdown", "linesLength": 12, "startIndex": 156, "lines": ["### 2. Build Model\n", "\n", "Wide-and-deep model consists of a linear model and DNN. We use the following hyperparameters and feature sets for the model:\n", "\n", "<br> | <center>Wide (linear) model</center> | <center>Deep neural networks</center>\n", "---|---|---\n", "Feature set | <ul><li>User-item cross product features<br>to capture how their co-occurrence<br>correlates with the target rating</li></ul> | <ul><li>Deep, lower-dimensional embedding vectors<br>for every user and item</li><li>Item feature vector</li></ul>\n", "Hyperparameters | <ul><li>[FTRL optimizer](https://www.eecs.tufts.edu/~dsculley/papers/ad-click-prediction.pdf)<br>learning rate = 0.07<br>l1 regularization = 0.015</li></ul> | <ul><li>[Adagrad optimizer](http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)<br>learning rate = 0.018</li><li>Hidden units = [64, 128, 32]</li><li>Dropout rate = 0.2</li><li>Use batch normalization</li><li>User embedding vector size = 32</li><li>Item embedding vector size = 16 </li></ul>\n", "\n", "<br>\n", "\n", "The hyperparameters are found on *MovieLens 100k* **train set** (split by using the same `seed` we used in this notebook). We used **Azure Machine Learning service**([AzureML](https://azure.microsoft.com/en-us/services/machine-learning-service/)) for the Hyperparameter tuning. Please find details from [aml_hyperparameter_tuning](../04_model_select_and_optimize/hypertune_aml_wide_and_deep_quickstart.ipynb)."]}, {"block": 13, "type": "code", "linesLength": 50, "startIndex": 168, "lines": ["train_steps = EPOCHS * len(train) // BATCH_SIZE\n", "\n", "# Clean-up previous model dir if already exists. Otherwise, it will try to train on top of the existing one.\n", "shutil.rmtree(MODEL_DIR, ignore_errors=True)\n", "\n", "DNN_HIDDEN_UNITS = []\n", "if DNN_HIDDEN_LAYER_1 > 0:\n", "    DNN_HIDDEN_UNITS.append(DNN_HIDDEN_LAYER_1)\n", "if DNN_HIDDEN_LAYER_2 > 0:\n", "    DNN_HIDDEN_UNITS.append(DNN_HIDDEN_LAYER_2)\n", "if DNN_HIDDEN_LAYER_3 > 0:\n", "    DNN_HIDDEN_UNITS.append(DNN_HIDDEN_LAYER_3)\n", "if DNN_HIDDEN_LAYER_4 > 0:\n", "    DNN_HIDDEN_UNITS.append(DNN_HIDDEN_LAYER_4)\n", "\n", "if MODEL_TYPE is 'deep' or MODEL_TYPE is 'wide_deep':\n", "    print(\"DNN hidden units =\", DNN_HIDDEN_UNITS)\n", "    print(\"Embedding {} users to {}-dim vector\".format(len(users), DNN_USER_DIM))\n", "    print(\"Embedding {} items to {}-dim vector\\n\".format(len(items), DNN_ITEM_DIM))\n", "\n", "save_checkpoints_steps = max(1, train_steps // 5)\n", "    \n", "# Model type is tf.estimator.DNNLinearCombinedRegressor, known as 'wide-and-deep'\n", "model, wide_columns, deep_columns = tf_utils.build_model(\n", "    users=users[USER_COL].values,\n", "    items=items[ITEM_COL].values,\n", "    model_dir=MODEL_DIR,\n", "    model_type=MODEL_TYPE,\n", "    linear_optimizer=LINEAR_OPTIMIZER,\n", "    linear_optimizer_lr=LINEAR_OPTIMIZER_LR,\n", "    linear_l1_reg=LINEAR_L1_REG,\n", "    dnn_optimizer=DNN_OPTIMIZER,\n", "    dnn_optimizer_lr=DNN_OPTIMIZER_LR,\n", "    dnn_hidden_units=DNN_HIDDEN_UNITS,\n", "    dnn_user_dim=DNN_USER_DIM,\n", "    dnn_item_dim=DNN_ITEM_DIM,\n", "    dnn_dropout=DNN_DROPOUT,\n", "    dnn_batch_norm=(DNN_BATCH_NORM==1),\n", "    user_col=USER_COL,\n", "    item_col=ITEM_COL,\n", "    item_feat_col=ITEM_FEAT_COL,\n", "    item_feat_shape=item_feat_shape,\n", "    log_every_n_iter=max(1, train_steps//20),  # log 20 times\n", "    save_checkpoints_steps=save_checkpoints_steps\n", ")\n", "\n", "# Wide columns are the features for wide model, and deep columns are for DNN\n", "print(\"\\nFeature specs:\")\n", "for c in wide_columns + deep_columns:\n", "    print(str(c)[:100], \"...\")"]}, {"block": 14, "type": "markdown", "linesLength": 5, "startIndex": 218, "lines": ["### 3. Train and Evaluate Model\n", "\n", "Now we are all set to train the model. Here, we show how to utilize session hooks to track model performance while training. Our custom hook `tf_utils.evaluation_log_hook` estimates the model performance on the given data based on the specified evaluation functions. Note we pass test set to evaluate the model on rating metrics while we use <span id=\"ranking-pool\">ranking-pool (all the user-item pairs)</span> for ranking metrics.\n", "\n", "> Note: The TensorFlow Estimator's default loss calculates Mean Squared Error. Square root of the loss is the same as [RMSE](https://en.wikipedia.org/wiki/Root-mean-square_deviation)."]}, {"block": 15, "type": "code", "linesLength": 24, "startIndex": 223, "lines": ["ranking_metrics = {}\n", "rating_metrics = {}\n", "for m in METRICS:\n", "    if m in SUPPORTED_RANKING_METRICS:\n", "        ranking_metrics[m] = SUPPORTED_RANKING_METRICS[m]\n", "    elif m in SUPPORTED_RATING_METRICS:\n", "        rating_metrics[m] = SUPPORTED_RATING_METRICS[m]\n", "        \n", "cols = {\n", "    'col_user': USER_COL,\n", "    'col_item': ITEM_COL,\n", "    'col_rating': RATING_COL,\n", "    'col_prediction': 'prediction'\n", "}\n", "\n", "# Prepare ranking evaluation set, i.e. get the cross join of all user-item pairs\n", "ranking_pool = user_item_pairs(\n", "    user_df=users,\n", "    item_df=items,\n", "    user_col=USER_COL,\n", "    item_col=ITEM_COL,\n", "    user_item_filter_df=train,  # Remove seen items\n", "    shuffle=True\n", ")"]}, {"block": 16, "type": "code", "linesLength": 70, "startIndex": 247, "lines": ["\"\"\" Training hooks to track training performance (evaluate on 'train' data) \n", "\"\"\"\n", "hooks = []\n", "evaluation_logger = None\n", "if EVALUATE_WHILE_TRAINING:\n", "    class EvaluationLogger(tf_utils.Logger):\n", "        def __init__(self):\n", "            self.eval_log = {}\n", "\n", "        def log(self, metric, value):\n", "            if metric not in self.eval_log:\n", "                self.eval_log[metric] = []\n", "            self.eval_log[metric].append(value)\n", "            print(\"eval_{} = {}\".format(metric, value))\n", "\n", "        def get_log(self):\n", "            return self.eval_log\n", "\n", "    evaluation_logger = EvaluationLogger()\n", "\n", "    if len(ranking_metrics) > 0:\n", "        hooks.append(\n", "            tf_utils.evaluation_log_hook(\n", "                model,\n", "                logger=evaluation_logger,\n", "                true_df=test,\n", "                y_col=RATING_COL,\n", "                eval_df=ranking_pool,\n", "                every_n_iter=save_checkpoints_steps,\n", "                model_dir=MODEL_DIR,\n", "                eval_fns=list(ranking_metrics.values()),\n", "                **{**cols, 'k': TOP_K}\n", "            )\n", "        )\n", "    if len(rating_metrics) > 0:\n", "        hooks.append(\n", "            tf_utils.evaluation_log_hook(\n", "                model,\n", "                logger=evaluation_logger,\n", "                true_df=test,\n", "                y_col=RATING_COL,\n", "                eval_df=test.drop(RATING_COL, axis=1),\n", "                every_n_iter=save_checkpoints_steps,\n", "                model_dir=MODEL_DIR,\n", "                eval_fns=list(rating_metrics.values()),\n", "                **cols\n", "            )\n", "        )\n", "\n", "print(\"Training steps = {}, Batch size = {} (num epochs = {})\".format(train_steps, BATCH_SIZE, EPOCHS))\n", "\n", "train_fn = tf_utils.pandas_input_fn(\n", "    df=train,\n", "    y_col=RATING_COL,\n", "    batch_size=BATCH_SIZE,\n", "    num_epochs=None,  # None == run forever. We use steps=TRAIN_STEPS instead.\n", "    shuffle=True\n", ")\n", "\n", "tf.logging.set_verbosity(tf.logging.INFO)\n", "\n", "model.train(\n", "    input_fn=train_fn,\n", "    hooks=hooks,\n", "    steps=train_steps\n", ")\n", "\n", "if evaluation_logger is not None:\n", "    for m, v in evaluation_logger.get_log().items():\n", "        pm.record(\"eval_{}\".format(m), v)"]}, {"block": 17, "type": "markdown", "linesLength": 10, "startIndex": 317, "lines": ["#### 3.2 TensorBoard\n", "\n", "Once the train is done, you can browse the details of the training results as well as the metrics we logged from [TensorBoard](https://www.tensorflow.org/guide/summaries_and_tensorboard).\n", "\n", "[]()|[]()|[]()\n", ":---:|:---:|:---:\n", "<img src=\"https://recodatasets.blob.core.windows.net/images/tensorboard_0.png?sanitize=true\"> |  <img src=\"https://recodatasets.blob.core.windows.net/images/tensorboard_1.png?sanitize=true\"> | <img src=\"https://recodatasets.blob.core.windows.net/images/tensorboard_2.png?sanitize=true\">\n", "\n", "To open the TensorBoard, open a terminal from the same directory of this notebook, run `tensorboard --logdir=model_checkpoints`, and open http://localhost:6006 from a browser.\n", "\n"]}, {"block": 18, "type": "markdown", "linesLength": 3, "startIndex": 327, "lines": ["### 4. Test and Export Model\n", "\n", "#### 4.1 Item rating prediction"]}, {"block": 19, "type": "code", "linesLength": 10, "startIndex": 330, "lines": ["if len(rating_metrics) > 0:\n", "    predictions = list(model.predict(input_fn=tf_utils.pandas_input_fn(df=test)))\n", "    prediction_df = test.drop(RATING_COL, axis=1)\n", "    prediction_df['prediction'] = [p['predictions'][0] for p in predictions]\n", "    prediction_df['prediction'].describe()\n", "    \n", "    for m, fn in rating_metrics.items():\n", "        result = fn(test, prediction_df, **cols)\n", "        pm.record(m, result)\n", "        print(m, \"=\", result)"]}, {"block": 20, "type": "markdown", "linesLength": 2, "startIndex": 340, "lines": ["#### 4.2 Recommend k items\n", "For top-k recommendation evaluation, we use the ranking pool (all the user-item pairs) we prepared at the [training step](#ranking-pool). The difference is we remove users' seen items from the pool in this step which is more natural to the movie recommendation scenario."]}, {"block": 21, "type": "code", "linesLength": 10, "startIndex": 342, "lines": ["if len(ranking_metrics) > 0:\n", "    predictions = list(model.predict(input_fn=tf_utils.pandas_input_fn(df=ranking_pool)))\n", "    prediction_df = ranking_pool.copy()\n", "    prediction_df['prediction'] = [p['predictions'][0] for p in predictions]\n", "\n", "    for m, fn in ranking_metrics.items():\n", "        result = fn(test, prediction_df, **{**cols, 'k': TOP_K})\n", "        name = \"{}@{}\".format(m, TOP_K)\n", "        pm.record(name, result)\n", "        print(name, \"=\", result)"]}, {"block": 22, "type": "markdown", "linesLength": 3, "startIndex": 352, "lines": ["#### 4.3 Export Model\n", "Finally, we export the model so that we can load later for re-training, evaluation, and prediction.\n", "Examples of how to load, re-train, and evaluate the saved model can be found from [aml_hyperparameter_tuning](../04_model_select_and_optimize/hypertune_aml_wide_and_deep_quickstart.ipynb) notebook."]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 355, "lines": ["os.makedirs(EXPORT_DIR_BASE, exist_ok=True)"]}, {"block": 24, "type": "code", "linesLength": 24, "startIndex": 356, "lines": ["tf.logging.set_verbosity(tf.logging.ERROR)\n", "\n", "train_rcvr_fn = tf.contrib.estimator.build_supervised_input_receiver_fn_from_input_fn(\n", "    train_fn\n", ")\n", "eval_rcvr_fn = tf.contrib.estimator.build_supervised_input_receiver_fn_from_input_fn(\n", "    tf_utils.pandas_input_fn(df=test, y_col=RATING_COL)\n", ")\n", "serve_rcvr_fn = tf.estimator.export.build_parsing_serving_input_receiver_fn(\n", "    tf.feature_column.make_parse_example_spec(wide_columns+deep_columns)\n", ")\n", "rcvr_fn_map = {\n", "    tf.estimator.ModeKeys.TRAIN: train_rcvr_fn,\n", "    tf.estimator.ModeKeys.EVAL: eval_rcvr_fn,\n", "    tf.estimator.ModeKeys.PREDICT: serve_rcvr_fn\n", "}\n", "\n", "export_dir = tf.contrib.estimator.export_all_saved_models(\n", "    model,\n", "    export_dir_base=EXPORT_DIR_BASE,\n", "    input_receiver_fn_map=rcvr_fn_map\n", ")\n", "pm.record('saved_model_dir', str(export_dir))\n", "print(\"Model exported to\", str(export_dir))"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 380, "lines": ["#### Cleanup"]}, {"block": 26, "type": "code", "linesLength": 6, "startIndex": 381, "lines": ["\"\"\"\n", "Do not directly delete EXPORT_DIR_BASE directory since hypertune_aml_wide_and_deep_quickstart\n", "notebook uses this notebook to train and export model.\n", "Instead, use the same name for both MODEL_DIR and EXPORT_DIR_BASE to test so that can cleaned up\n", "\"\"\"\n", "shutil.rmtree(MODEL_DIR, ignore_errors=True)"]}, {"block": 27, "type": "code", "linesLength": 0, "startIndex": 387, "lines": []}]