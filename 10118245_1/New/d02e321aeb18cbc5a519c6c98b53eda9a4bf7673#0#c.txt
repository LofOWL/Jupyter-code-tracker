[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# It\u00e9rateurs"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau interm\u00e9daire"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Dans ce compl\u00e9ment nous allons:\n", " * tout d'abord dire quelques mots du module `itertools` qui fournit sous forme d'it\u00e9rateurs des utilitaires communs qui peuvent \u00eatre tr\u00e8s utiles;\n", " * puis dans la partie avanc\u00e9e du compl\u00e9ment nous allons voir, comme un autre exemple d'it\u00e9rateurs, comment impl\u00e9menter notre propre it\u00e9rateur des permutations d'un ensemble fini."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["### Le module `itertools`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["\u00c0 ce stade, j'esp\u00e8re que vous savez trouver [la documentation du module](https://docs.python.org/3/library/itertools.html) que je vous invite \u00e0 avoir sous la main."]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["import itertools"]}, {"block": 7, "type": "markdown", "linesLength": 6, "startIndex": 13, "lines": ["Comme vous le voyez dans la doc, les fonctionnalit\u00e9s de `itertools` tombent dans 3 cat\u00e9gories:\n", " * des it\u00e9rateurs infinis, comme par exemple `cycle`,\n", " * des it\u00e9rateurs pour \u00e9num\u00e9rer les combinatoires usuelles en math\u00e9matiques, comme les permutations, les combinaisons, le produit cart\u00e9sien, etc.,\n", " * et enfin des it\u00e9rateurs correspondants \u00e0 des traits que nous avons d\u00e9j\u00e0 rencontr\u00e9s, mais impl\u00e9ment\u00e9s sous forme d'it\u00e9rateurs.\n", " \n", "\u00c0 nouveau, toutes ces fonctionnalit\u00e9s sont offertes **sous la forme d'it\u00e9rateurs**."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Pour d\u00e9tailler un tout petit peu cette derni\u00e8re famille, signalons:"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": [" * `chain` qui permet de **concat\u00e9ner** plusieurs it\u00e9rables sous la forme d'un **it\u00e9rateur**:"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["for x in itertools.chain((1, 2), [3, 4]):\n", "    print(x)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": [" * `islice` qui est une g\u00e9n\u00e9ralisation de `range`, mais sur une s\u00e9quence qui n'est pas n\u00e9cessairement les premiers entiers:"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 24, "lines": ["import string\n", "support = string.ascii_lowercase\n", "print(f'support={support}')"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 27, "lines": ["# range\n", "for x in range(3, 8):\n", "    print(x)"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 30, "lines": ["# islice\n", "for x in itertools.islice(support, 3, 8):\n", "    print(x)"]}]