[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Les *property*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Je vais consid\u00e9rer plusieurs impl\u00e9mentations possibles pour une classe  `Temperature`:"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["##### Impl\u00e9mentation na\u00efve"]}, {"block": 5, "type": "code", "linesLength": 9, "startIndex": 5, "lines": ["# dans sa version la plus \u00e9pur\u00e9e, une classe\n", "# temp\u00e9rature pourrait ressembler \u00e0 \u00e7a:\n", "\n", "class Temperature1:\n", "    def __init__(self, kelvin):\n", "        self.kelvin = kelvin\n", "        \n", "    def __repr__(self):\n", "        return f\"{self.kelvin}\u00b0K\""]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 14, "lines": ["# cr\u00e9ons une instance\n", "t1 = Temperature1(20)\n", "t1"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["# et pour acc\u00e9der \u00e0 la valeur num\u00e9rique je peux faire\n", "t1.kelvin"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Avec cette impl\u00e9mentation il est tr\u00e8s facile de cr\u00e9er une temp\u00e9rature n\u00e9gative, qui n'a bien s\u00fbr pas de sens physique, ce n'est pas bon."]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["##### Interface *getter/setter*"]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 21, "lines": ["Si vous avez \u00e9t\u00e9 d\u00e9j\u00e0 expos\u00e9s \u00e0 des langages orient\u00e9s objet comme C++, Java ou autre, vous avez peut-\u00eatre l'habitude d'acc\u00e9der aux donn\u00e9es internes des instances par des **m\u00e9thodes** de type *getter** ou **setter*, de fa\u00e7on \u00e0 contr\u00f4ler les acc\u00e8s et, dans une optique d'encapsulation, de pr\u00e9server des invariants, comme ici le fait que la temp\u00e9rature doit \u00eatre positive.\n", "\n", "C'est-\u00e0-dire que vous vous dites peut-\u00eatre, \u00e7a ne devrait pas \u00eatre fait comme \u00e7a, on devrait plut\u00f4t proposer une interface pour acc\u00e9der \u00e0 l'impl\u00e9mentation interne; quelque chose comme:"]}, {"block": 11, "type": "code", "linesLength": 19, "startIndex": 24, "lines": ["class Temperature2:\n", "    def __init__(self, kelvin):\n", "        # au lieu d'\u00e9crire l'attribut il est plus s\u00fbr\n", "        # d'utiliser le setter\n", "        self.set_kelvin(kelvin)\n", "        \n", "    def set_kelvin(self, kelvin):\n", "        # je m'assure que _kelvin est toujours positif\n", "        # et j'utilise un nom d'attribut avec un _ pour signifier\n", "        # que l'attribut est priv\u00e9 et qu'il ne faut pas y toucher directement\n", "        # on pourrait aussi bien s\u00fbr lever une exception \n", "        # mais ce n'est pas mon sujet ici\n", "        self._kelvin = max(0, kelvin)\n", "        \n", "    def get_kelvin(self):\n", "        return self._kelvin\n", "        \n", "    def __repr__(self):\n", "        return f\"{self._kelvin}\u00b0K\""]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["Bon c'est vrai que d'un cot\u00e9, c'est mieux parce que je garantis un invariant, la temp\u00e9rature est toujours positive:"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 44, "lines": ["t2 = Temperature2(-30)\n", "t2"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["Mais par contre, d'un autre cot\u00e9, c'est tr\u00e8s lourd, parce que chaque fois que je veux utiliser mon objet, je dois faire pour y acc\u00e9der"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["t2.get_kelvin()"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["et surtout, si j'avais d\u00e9j\u00e0 du code qui utilisait `t.kelvin` il va falloir le modifier enti\u00e8rement."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["##### Impl\u00e9mentation pythonique"]}, {"block": 18, "type": "markdown", "linesLength": 3, "startIndex": 50, "lines": ["La fa\u00e7on de s'en sortir ici consiste \u00e0 d\u00e9finir une property. Comme on va le voir ce m\u00e9canisme permet d'\u00e9crire du code qui fait r\u00e9f\u00e9rence \u00e0 l'attribut `kelvin` de l'instance, mais qui passe tout de m\u00eame par une couche de logique.\n", "\n", "\u00c7a ressemblerait \u00e0 ceci"]}, {"block": 19, "type": "code", "linesLength": 20, "startIndex": 53, "lines": ["class Temperature3:\n", "    def __init__(self, kelvin):\n", "        self.kelvin = kelvin\n", "\n", "    # je d\u00e9finis bel et bien mes accesseurs de type getter et setter\n", "    # mais _get_kelvin commence avec un _ \n", "    # car il n'est pas cens\u00e9 \u00eatre appel\u00e9 par l'ext\u00e9rieur\n", "    def _get_kelvin(self):\n", "        return self._kelvin\n", "\n", "    # idem\n", "    def _set_kelvin(self, kelvin):\n", "        self._kelvin = max(0, kelvin)\n", "        \n", "    # une fois que j'ai ces deux \u00e9l\u00e9ments je peux cr\u00e9er une property\n", "    kelvin = property(_get_kelvin, _set_kelvin)\n", "    \n", "    # et toujours la fa\u00e7on d'imprimer\n", "    def __repr__(self):\n", "        return f\"{self._kelvin}\u00b0K\"    "]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 73, "lines": ["t3 = Temperature3(200)\n", "t3"]}, {"block": 21, "type": "code", "linesLength": 4, "startIndex": 75, "lines": ["# par contre ici on va le mettre \u00e0 z\u00e9ro\n", "# \u00e0 nouveau, une exception serait pr\u00e9f\u00e9rable sans doute\n", "t3.kelvin = -30\n", "t3"]}, {"block": 22, "type": "markdown", "linesLength": 5, "startIndex": 79, "lines": ["Comme vous pouvez le voir, cette technique a plusieurs avantages:\n", "* on a ce qu'on cherchait, c'est-\u00e0-dire une fa\u00e7on d'ajouter une couche de logique lors des acc\u00e8s en lecture et en \u00e9criture \u00e0 l'int\u00e9rieur de l'objet,\n", "* mais **sans toutefois** demander \u00e0 l'utilisateur de passer son temps \u00e0 envoyer des m\u00e9thodes `get_` et `set()` sur l'objet, ce qui a tendance \u00e0 alourdir consid\u00e9rablement le code.\n", "\n", "C'est pour cette raison que vous ne rencontrerez presque jamais en python une librairie qui offre une interface \u00e0 base de m\u00e9thodes `get_something` et `set_something`, mais au contraire les API vous exposeront directement des attributs que vous devez utiliser directement."]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["##### Pour en savoir plus"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["Voir aussi [la documentation officielle](https://docs.python.org/3.6/library/functions.html#property)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["Vous pouvez notamment aussi, en option, ajouter un *deleter* pour intercepter les instructions du type"]}, {"block": 26, "type": "code", "linesLength": 5, "startIndex": 87, "lines": ["# comme on n'a pas d\u00e9fini de deleter, on ne peut pas faire ceci\n", "try:\n", "    del t3.kelvin\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}]