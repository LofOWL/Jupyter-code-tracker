[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Une forme alternative du `if`"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["### Expressions et instructions"]}, {"block": 4, "type": "markdown", "linesLength": 8, "startIndex": 8, "lines": ["Les constructions python que nous avons vues jusqu'ici peuvent se ranger en deux familles\u00a0:\n", "\n", "* d'une part les **expressions** sont les fragments de code qui **retournent une valeur**\u00a0;\n", "  * c'est le cas lorsqu'on invoque n'importe quel op\u00e9rateur num\u00e9rique, pour les appels de fonctions, ...\n", "* d'autre part les **instructions** ;\n", "  * dans cette famille, nous avons vu par exemple l'affectation et `if`, et nous en verrons bien d'autres.\n", "\n", "La diff\u00e9rence essentielle est que les expressions peuvent \u00eatre combin\u00e9es entre elles pour faire des expressions arbitrairement grosses. Aussi, si vous avez un doute pour savoir si vous avez affaire \u00e0 une expression ou \u00e0 une instruction, demandez vous si vous pourriez utiliser ce code **comme membre droit d'une affectation**. Si oui, vous avez une expression.    "]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["### `if` est une instruction"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["La forme du `if` qui vous a \u00e9t\u00e9 pr\u00e9sent\u00e9e pendant la vid\u00e9o ne peut pas servir \u00e0 renvoyer une valeur, c'est donc une **instruction**."]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Imaginons maintenant qu'on veuille \u00e9crire quelque chose d'aussi simple que *\"affecter \u00e0 y la valeur 12 ou 35, selon que x est vrai ou non\"*."]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Avec les notions introduites jusqu'ici, il nous faudrait \u00e9crire ceci\u00a0:"]}, {"block": 9, "type": "code", "linesLength": 6, "startIndex": 20, "lines": ["x = True  # ou quoi que ce soit d'autre\n", "if x:\n", "    y = 12\n", "else:\n", "    y = 35\n", "print(y)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["### Expression conditionnelle"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 27, "lines": ["Il existe en python une expression qui fait le m\u00eame genre de test\u00a0; c'est la forme dite d'**expression conditionnelle**, qui est une **expression \u00e0 part enti\u00e8re**, avec la syntaxe\u00a0:\n", "\n", "    <resultat_si_vrai> if <condition> else <resultat_si_faux> "]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Ainsi on pourrait \u00e9crire l'exemple ci-dessus de mani\u00e8re plus simple et plus concise comme ceci\u00a0:"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 31, "lines": ["y = 12 if x else 35\n", "print(y)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Cette construction peut souvent rendre le style de programmation plus fonctionnel et plus fluide."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["### Imbrications"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Puisque cette forme est une expression, on peut l'utiliser dans une autre expression conditionnelle, comme ici\u00a0:"]}, {"block": 18, "type": "code", "linesLength": 11, "startIndex": 37, "lines": ["# on veut calculer en fonction d'une entr\u00e9e x\n", "# une sortie qui vaudra\n", "# -1 si x < -10\n", "# 0 si -10 <= x <= 10\n", "# 1 si x > 10\n", "\n", "x = 5 # ou quoi que ce soit d'autre\n", "\n", "valeur = -1 if x < -10 else (0 if x <= 10 else 1)\n", "\n", "print(valeur)"]}, {"block": 19, "type": "markdown", "linesLength": 7, "startIndex": 48, "lines": ["Remarquez bien que cet exemple est \u00e9quivalent \u00e0 la ligne\n", "\n", "```\n", "valeur = -1 if x < -10 else 0 if x <= 10 else 1\n", "```\n", "\n", "mais qu'il est fortement recommand\u00e9 d'utiliser, comme on l'a fait, un parenth\u00e9sage pour lever toute ambig\u00fcit\u00e9."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["### Pour en savoir plus"]}, {"block": 21, "type": "markdown", "linesLength": 4, "startIndex": 56, "lines": [" * La section sur les [expressions conditionnelles](https://docs.python.org/3/reference/expressions.html#conditional-expressions) de la documentation python.\n", " * Le [PEP308](http://legacy.python.org/dev/peps/pep-0308/) qui r\u00e9sume les discussions ayant donn\u00e9 lieu au choix de la syntaxe adopt\u00e9e.\n", "\n", "De mani\u00e8re g\u00e9n\u00e9rale, les PEP rassemblent les discussions pr\u00e9alables \u00e0 toutes les \u00e9volutions majeures du langage python."]}]