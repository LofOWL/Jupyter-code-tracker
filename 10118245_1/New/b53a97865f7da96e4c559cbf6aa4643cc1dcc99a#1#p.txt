[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# H\u00e9riter des types *builtin* ?"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["Vous vous demandez peut-\u00eatre s'il est possible d'h\u00e9riter des types *builtin*."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["La r\u00e9ponse est oui est nous allons voir un exemple qui est parfois tr\u00e8s utile en pratique, c'est le type - ou plus exactement la famille de types - `namedtuple`"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["### La notion de *record*"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["On se place dans un contexte voisin de celui de *record* qu'on a d\u00e9j\u00e0 rencontr\u00e9 souvent; pour ce notebook nous allons \u00e0 nouveau prendre le cas du point \u00e0 deux coordonn\u00e9es x et y. Nous avons d\u00e9j\u00e0 vu que pour impl\u00e9menter un point on peut utiliser:"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["##### un dictionnaire"]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 12, "lines": ["p1 = {'x': 1, 'y': 2}\n", "# ou de mani\u00e8re \u00e9quivalente\n", "p1 = dict(x=1, y=2)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["##### ou une classe"]}, {"block": 10, "type": "code", "linesLength": 6, "startIndex": 16, "lines": ["class Point:\n", "    def __init__(self, x, y):\n", "        self.x = x\n", "        self.y = y\n", "\n", "p2 = Point(1, 2)"]}, {"block": 11, "type": "markdown", "linesLength": 4, "startIndex": 22, "lines": ["Nous allons voir une troisi\u00e8me fa\u00e7on de s'y prendre, qui pr\u00e9sente deux caract\u00e9ristiques:\n", "\n", "* les objets seront non-mutables (en fait ce sont des tuples)\n", "* et accessoirement on pourra acc\u00e9der aux diff\u00e9rents champs par leur nom aussi bien que par un index."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Pous faire \u00e7a il nous faut donc cr\u00e9er une sous-classe de `tuple`; pour nous simplifier la vie, [le module `collections`  nous offre un utilitaire](https://docs.python.org/3/library/collections.html#collections.namedtuple):"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["##### `namedtuple`"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["from collections import namedtuple"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["Techniquement, il s'agit d'une fonction:"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["type(namedtuple)"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": [" qui **renvoie une classe** - oui les classes sont des objets comme les autres; par exemple pour cr\u00e9er une classe `TuplePoint`, on ferait"]}, {"block": 18, "type": "code", "linesLength": 4, "startIndex": 32, "lines": ["# on passe \u00e0 namedtuple:\n", "# le nom du type qu'on veut cr\u00e9er\n", "# la liste ordonn\u00e9e des composants (champs)\n", "TuplePoint = namedtuple('TuplePoint', ['x', 'y'])"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["Et maintenant si je cr\u00e9e un objet"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["p3 = TuplePoint(1, 2)"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 38, "lines": ["# cet objet est un tuple\n", "isinstance(p3, tuple)"]}, {"block": 22, "type": "code", "linesLength": 3, "startIndex": 40, "lines": ["# auquel je peux acc\u00e9der par index\n", "# comme un tuple\n", "p3[0]"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 43, "lines": ["# mais aussi par nom via un attribut\n", "p3.x"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 45, "lines": ["# et comme c'est un tuple il est immuable\n", "try:\n", "    p3.x = 10\n", "except Exception as e:\n", "    print(f\"OOPS {type(e)} {e}\")"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["### \u00c0 quoi \u00e7a sert"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["J'admets que ce n'est pas d'un usage fr\u00e9quent, mais on en a d\u00e9j\u00e0 rencontr\u00e9 un exemple dans le notebook sur le module `pathlib`. En effet le type de retour de la m\u00e9thode `Path.stat` est un `namedtuple`"]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["from pathlib import Path\n", "dot_stat = Path('.').stat()"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 54, "lines": ["dot_stat"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["isinstance(dot_stat, tuple)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["### Nom"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["Quand on cr\u00e9e une classe avec l'instruction `class`, on ne mentionne le nom de la classe qu'une seule fois. Ici vous avez remarqu\u00e9 qu'il faut en pratique le donner deux fois. Pour \u00eatre pr\u00e9cis, le param\u00e8tre qu'on a pass\u00e9 \u00e0 `namedtuple` sert \u00e0 ranger le nom dans l'attribut `__name__` de la classe cr\u00e9\u00e9e:"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["Foo = namedtuple('Bar', ['spam', 'eggs'])"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 59, "lines": ["# Foo est le nom de la variable classe\n", "foo = Foo(1, 2)"]}, {"block": 34, "type": "code", "linesLength": 2, "startIndex": 61, "lines": ["# mais cette classe a son attribut __name__ mal positionn\u00e9\n", "Foo.__name__"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 63, "lines": ["Il est donc pr\u00e9f\u00e9rable d'utiliser deux fois le m\u00eame nom.."]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["### M\u00e9moire"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["\u00c0 titre de comparaison voici la place prise par chacun de ces objets; le `namedtuple` ne semble pas de ce point de vue sp\u00e9cialement attractif par rapport \u00e0 une instance:"]}, {"block": 38, "type": "code", "linesLength": 6, "startIndex": 66, "lines": ["import sys\n", "\n", "# p1 = dict / p2 = instance / p3 = namedtuple\n", "\n", "for p in p1, p2, p3:\n", "    print(sys.getsizeof(p))"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["### Pour en savoir plus"]}, {"block": 40, "type": "markdown", "linesLength": 6, "startIndex": 73, "lines": ["Si vous \u00eates int\u00e9ress\u00e9s de savoir comment on peut bien arriver \u00e0 rendre les objets d'une classe immuable, vous pouvez commencer par regarder le code utilis\u00e9 par `namedtuple` pour cr\u00e9er son r\u00e9sultat, en l'invoquant avec le mode bavard.\n", "\n", "Vous y remarquerez notamment:\n", "\n", "* une red\u00e9finition de [la m\u00e9thode sp\u00e9ciale `__new__`](https://docs.python.org/3/reference/datamodel.html#object.__new__),\n", "* et aussi un usage des `property` que l'on a rencontr\u00e9s en d\u00e9but de semaine."]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["Vous pouvez vous reporter [\u00e0 la documentation officielle](https://docs.python.org/3/library/collections.html#collections.namedtuple)"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["# le code utilis\u00e9 pour impl\u00e9menter un namedtuple\n", "Point = namedtuple('Point', ['x', 'y'], verbose=True)"]}]