[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Outils p\u00e9riph\u00e9riques"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ments - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Pour conclure le tronc commun de ce cours Python, nous allons tr\u00e8s rapidement citer quelques outils qui ne sont pas n\u00e9cessairement dans la biblioth\u00e8que standard, mais qui sont tr\u00e8s largement utilis\u00e9s dans l'\u00e9cosyst\u00e8me python.\n", "\n", "Il s'agit d'une liste non exhaustive bien entendu."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["### Distribution et packaging"]}, {"block": 5, "type": "markdown", "linesLength": 7, "startIndex": 11, "lines": ["On l'a rapidement mentionn\u00e9, il existe une infrastructure globale pour la distribution de librairies \u00e9crites en python. Celle-ci repose sur\n", "\n", "* un site web <https://pypi.org/> o\u00f9 l'on peut consulter les - tr\u00e8s nombreuses - biblioth\u00e8ques diffus\u00e9es, avec leurs historiques et r\u00e9visions,\n", "* un outil en ligne de commande `pip`, pour installer et mettre \u00e0 jour ces biblioth\u00e8ques (utiliser `pip3` comme `python3` si vous avez python2 install\u00e9 en parall\u00e8le),\n", "* et enfin un syst\u00e8me de packaging \u00e0 destination des \u00e9diteurs.\n", "\n", "Je vous signale, par rapport \u00e0 ce dernier point, que la biblioth\u00e8que standard vient avec un outil qui s'appelle `distutils`, qui est essentiellement obsol\u00e8te, et qui n'est conserv\u00e9 que pour des questions de compatibilit\u00e9. Si vous devez commencer depuis une feuille blanche le packaging d'une nouvelle librairie, je vous recommande d'utiliser plut\u00f4t `setuptools` qui est le standard de fait dans le domaine. "]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 18, "lines": ["Dans une domaine tr\u00e8s voisin, l'outil `virtualenv` est tr\u00e8s populaire \u00e9galement ; il permet de cr\u00e9er sur une seul machine, plusieurs environnements python avec des versions et contenus diff\u00e9rents.\n", "\n", "C'est tr\u00e8s utile si vous travaillez sur plusieurs projets, dont l'un a besoin de python-3.5 avec numpy et sans pandas, et Django-1.11, et un second avec python-3.6 sans numpy et avec Django-2.0."]}, {"block": 7, "type": "markdown", "linesLength": 4, "startIndex": 21, "lines": ["Pour finir, on ne peut pas parler de packaging sans citer `conda`, l'outil de r\u00e9f\u00e9rence pour la packaging et les environnements virtuels en data science. Quelques r\u00e9f\u00e9rences sur conda :\n", "\n", " * une documentation compl\u00e8te de conda <https://conda.io/docs/>\n", " * une excellente discussion (en anglais) sur le positionnement de `pip` et `conda` <http://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/>"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["### Debugging"]}, {"block": 9, "type": "markdown", "linesLength": 12, "startIndex": 26, "lines": ["Pour le debugging, la biblioth\u00e8que standard s'appelle `pdb`. Typiquement pour mettre un *breakpoint* on \u00e9crit\u00a0:\n", "\n", "```python\n", "def foo(n):\n", "    n = n ** 2\n", "    # pour mettre un point d'arr\u00eat\n", "    import pdb\n", "    pdb.set_trace()\n", "    # la suite de foo()\n", "    return n / 10\n", "```\n", "    "]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Je vous signale d'ailleurs qu'\u00e0 partir de Python 3.7, il est recommand\u00e9 d'utiliser la nouvelle fonction *built-in* _breakpoint()_ qui rend le m\u00eame service."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["### Tests"]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 40, "lines": ["Le module `unittest` de la biblioth\u00e8que standard fournit des fonctionnalit\u00e9s de base pour \u00e9crire des tests unitaires.\n", "\n", "Je vous signale par ailleurs des outils comme `nosetests` et `pytest`, qui ne sont pas dans la distribution standard, mais qui enrichissent les capacit\u00e9s de `unittest` pour en rendre l'utilisation quotidienne plus fluide."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["### Documentation"]}, {"block": 14, "type": "markdown", "linesLength": 12, "startIndex": 44, "lines": ["Le standard de fait dans ce domaine est clairement une combinaison bas\u00e9e sur\n", "\n", "* l'outil `sphinx`, qui permet de g\u00e9n\u00e9rer la documentation \u00e0 partir du source, avec\n", "  * des plugins pour divers sous-formats dans les docstrings,\n", "  * un syst\u00e8me de templating,\n", "  * et de nombreuses autres possibilit\u00e9s ;\n", "* `readthedocs.io` qui est une plateforme ouverte pour l'h\u00e9bergement des documentations ; elle-m\u00eame facilement int\u00e9grable avec un repository type `github.io`, \n", "\n", "Pour vous donner une id\u00e9e du r\u00e9sultat, je vous invite \u00e0 consulter un module de ma facture\u00a0:\n", "\n", "* les sources sur github sur <https://github.com/parmentelat/asynciojobs>, et notamment le sous-r\u00e9pertoire `sphinx`,\n", "* et la documentation en ligne sur <http://asynciojobs.readthedocs.io/>."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["### Linter"]}, {"block": 16, "type": "markdown", "linesLength": 7, "startIndex": 57, "lines": ["Au del\u00e0 de la v\u00e9rification automatique de la pr\u00e9sentation du code (PEP8), il existe un outil `pylint` qui fait de l'analyse de code source en vue de d\u00e9tecter des erreurs le plus t\u00f4t possible dans le cycle de d\u00e9veloppement.\n", "\n", "En quelques mots, ma recommandation \u00e0 ce sujet est que\u00a0:\n", "\n", "* tout d'abord, et comme dans tous les langages en fait, il est **tr\u00e8s utile** de faire passer syst\u00e9matiquement son code dans un linter de ce genre ;\n", "* id\u00e9alement on ne devrait commiter que du code qui passe cette \u00e9tape ;\n", "* cependant, il y a un petit travail de filtrage \u00e0 faire au d\u00e9marrage, car pylint d\u00e9tecte plusieurs centaines de sortes d'erreurs, du coup il convient de passer un moment \u00e0 configurer l'outil pour qu'il en ignore certaines."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["D\u00e8s que vous commencez \u00e0 travailler sur des projets s\u00e9rieux, vous devez utiliser un \u00e9diteur qui int\u00e8gre et ex\u00e9cute automatiquement `pylint`. On peut notamment recommander [PyCharm](https://www.jetbrains.com/pycharm/). "]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 65, "lines": ["### Type hints"]}, {"block": 19, "type": "markdown", "linesLength": 5, "startIndex": 66, "lines": ["Je voudrais citer enfin l'outil `mypy` qui est un compl\u00e9ment crucial dans la mise en oeuvre des *type hints*. \n", "\n", "Comme on l'a vu en Semaine 4 dans la s\u00e9quence consacr\u00e9e aux type hints, et en tous cas jusque Python-3.6, les annotations de typage que vous ins\u00e9rez \u00e9ventuellement dans votre code sont compl\u00e8tement ignor\u00e9es de l'interpr\u00e9teur. \n", "\n", "Elles sont par contre analys\u00e9es par l'outil `mypy` qui fournit une sorte de couche suppl\u00e9mentaire de *linter* et permet de d\u00e9tecter, ici encore, les \u00e9ventuelles erreurs qui peuvent r\u00e9sulter notamment d'une mauvaise utilisation de telle ou telle librairie."]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 71, "lines": ["### Conclusion"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 72, "lines": ["\u00c0 nouveau cette liste n'est pas exhaustive, elle s'efforce simplement de guider vos premiers pas dans cet \u00e9cosyst\u00e8me.\n", "\n", "Je vous invite \u00e0 creuser de votre cot\u00e9 les diff\u00e9rents aspects qui, parmi cette liste, vous semblent les plus int\u00e9ressants pour votre usage. "]}]