[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Les fonctions `globals` et `locals`"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Un exemple"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["python fournit un acc\u00e8s \u00e0 la liste des noms et valeurs des variables visibles \u00e0 cet endroit du code. Dans le jargon des langages de programmation on appelle ceci **l'environnement**.\n", "\n", "Cela est fait gr\u00e2ce aux fonctions *builtin* `globals` et `locals`, que nous allons commencer par essayer sur quelques exemples. Nous avons pour cela \u00e9crit un module d\u00e9di\u00e9:"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["import locals_globals"]}, {"block": 5, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["-----\n", "\n", "Dont voici le code"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 10, "lines": ["from modtools import show_module\n", "show_module (locals_globals)"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 12, "lines": ["-----\n", "\n", "et voici ce qu'on obtient lorsqu'on appelle "]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 15, "lines": ["locals_globals.temoin (10,20)"]}, {"block": 9, "type": "heading", "linesLength": 1, "startIndex": 16, "lines": ["Interpr\u00e9tation"]}, {"block": 10, "type": "markdown", "linesLength": 5, "startIndex": 17, "lines": ["Que nous montre cet exemple ?\n", "\n", "D'une part la fonction **`globals`** nous donne la liste des symboles d\u00e9finis au niveau de **l'espace de nom du module**. Il s'agit \u00e9videmment du module dans lequel est d\u00e9finie la fonction, pas celui dans lequel elle est appel\u00e9e. Vous remarquerez que ceci englobe **tous** les symboles du modules et non pas seulement ceux d\u00e9finis avant `temoin`, c'est-\u00e0-dire la variable `globale`, les deux fonctions, et la classe `Foo`. \n", "\n", "D'autre part **`locals`** nous donne les variables locales qui sont accessibles **\u00e0 cet endroit du code**, comme le montre ce second exemple qui se concentre sur `locals` \u00e0 diff\u00e9rents points d'une m\u00eame fonction. "]}, {"block": 11, "type": "code", "linesLength": 8, "startIndex": 22, "lines": ["# ce n'est pas une bonne id\u00e9e d'appeler un module 'locals' \n", "# car cela 'cache' la fonction du m\u00eame nom, dont nous aurons\n", "# encore besoin plus bas\n", "# mais \u00e7a nous permet d'illustrer un 'import .. as ..' \n", "import locals as locals_module\n", "\n", "# le code de ce module \n", "show_module (locals_module)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["locals_module.temoin(10)"]}, {"block": 13, "type": "heading", "linesLength": 1, "startIndex": 31, "lines": ["Usage"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Ces deux fonctions ne sont pas d'une utilisation tr\u00e8s fr\u00e9quente, \u00e0 part dans un but p\u00e9dagogique. Il existe toutefois une utisation relativement r\u00e9pandue de `locals` dans du vieux code qui utilise le formattage de cha\u00eenes de caract\u00e8res \u00e0 base de l'op\u00e9rateur `%`, comme en voici un exemple"]}, {"block": 15, "type": "code", "linesLength": 6, "startIndex": 33, "lines": ["# une utilisation relativement commune de locals()\n", "\n", "def formatage_avec_locals (nom, prenom, civilite, telephone):\n", "    return \"%(civilite)s %(prenom)s %(nom)s : Poste %(telephone)s\"%locals()\n", "\n", "formatage_avec_locals ('Dupont', 'Jean', 'Mr', '7748')"]}]