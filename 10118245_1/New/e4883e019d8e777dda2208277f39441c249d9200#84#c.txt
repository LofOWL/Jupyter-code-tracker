[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Tri de listes : deuxi\u00e8me partie"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Nous avons vu pr\u00e9c\u00e9demment comment faire le tri simple d'une liste, en utilisant \u00e9ventuellement le param\u00e8tre `reverse` de la m\u00e9thode `sort` sur les listes. Maintenant que nous sommes familiers avec la notion de fonction, nous pouvons approfondir ce sujet."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Cas g\u00e9n\u00e9ral"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["Dans le cas g\u00e9n\u00e9ral, on est souvent amen\u00e9 \u00e0 trier des objets selon un crit\u00e8re propre \u00e0 l'application. Imaginons par exemple que l'on dispose d'une liste de tuples \u00e0 deux \u00e9l\u00e9ments, dont le premier est la latitude et le second la longitude"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["coordonnees = [(43, 7), (46, -7), (46, 0)]"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["Il est possible d'utiliser la m\u00e9thode `sort` pour faire cela, mais il va falloir l'aider un peu plus, et lui expliquer comment comparer deux \u00e9l\u00e9ments de la liste.\n", "\n", "Voyons comment on pourrait proc\u00e9der pour trier par longitude:"]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 10, "lines": ["def longitude(element): \n", "    return element[1]\n", "\n", "coordonnees.sort(key=longitude)\n", "print(\"coordonn\u00e9es tri\u00e9es par longitude\", coordonnees)"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 15, "lines": ["Comme on le devine, le proc\u00e9d\u00e9 ici consiste \u00e0 indiquer \u00e0 `sort` comment calculer, \u00e0 partir de chaque \u00e9l\u00e9ment, une valeur num\u00e9rique qui sert de base au tri. \n", "\n", "Pour cela on passe \u00e0 la m\u00e9thode `sort` un argument `key` qui d\u00e9signe **une fonction**, qui lorsqu'elle est appliqu\u00e9e \u00e0 un \u00e9l\u00e9ment de la liste, retourne la valeur qui doit servir de base au tri: dans notre exemple, la fonction `longitude`, qui renvoie le second \u00e9l\u00e9ment du tuple."]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["### Fonction de commodit\u00e9 : `sorted`"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["On a vu que `sort` r\u00e9alise le tri de la liste \"en place\". Pour les cas o\u00f9 une copie est n\u00e9cessaire, python fournit \u00e9galement une fonction de commodit\u00e9, qui permet pr\u00e9cis\u00e9ment de renvoyer la **copie** tri\u00e9e d'une liste d'entr\u00e9e. Cette fonction est baptis\u00e9e `sorted`, elle s'utilise par exemple comme ceci, sachant que les arguments `reverse` et `key` peuvent \u00eatre mentionn\u00e9s comme avec `sort`:"]}, {"block": 12, "type": "code", "linesLength": 6, "startIndex": 20, "lines": ["liste = [8, 7, 4, 3, 2, 9, 1, 5, 6]\n", "# on peut passer \u00e0 sorted les m\u00eames arguments que pour sort\n", "triee = sorted(liste, reverse=True)\n", "# nous avons maintenant deux objets distincts\n", "print('la liste tri\u00e9e est une copie ', triee)\n", "print('la liste initiale est intacte', liste)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Nous avons qualifi\u00e9 `sorted` de fonction de commodit\u00e9 car il est tr\u00e8s facile de s'en passer; en effet on aurait pu \u00e9crire \u00e0 la place du fragment pr\u00e9c\u00e9dent:"]}, {"block": 14, "type": "code", "linesLength": 7, "startIndex": 27, "lines": ["liste = [8, 7, 4, 3, 2, 9, 1, 5, 6]\n", "# ce qu'on a fait dans la cellule pr\u00e9c\u00e9dente est \u00e9quivalent \u00e0\n", "triee = liste[:]\n", "triee.sort(reverse=True)\n", "# \n", "print('la liste tri\u00e9e est une copie ', triee)\n", "print('la liste initiale est intacte', liste)"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Pour en savoir plus"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Pour avoir plus d'informations sur `sort` et `sorted` vous pouvez [lire cette section de la documentation python sur le tri.](https://docs.python.org/2.7/howto/sorting.html)"]}]