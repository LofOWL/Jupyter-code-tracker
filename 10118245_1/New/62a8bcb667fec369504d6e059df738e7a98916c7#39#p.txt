[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# `matplotlib` - 2D"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 6, "startIndex": 7, "lines": ["Plut\u00f4t que de r\u00e9crire (encore) un tutorial sur `matplotlib`, je pr\u00e9f\u00e8re utiliser les ressources disponibles en ligne en anglais\u00a0:\n", "\n", "* pour la dimension 2\u00a0: https://matplotlib.org/2.0.2/users/pyplot_tutorial.html\u00a0;\n", "* pour la dimension 3\u00a0: https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html.\n", "\n", "Je vais essentiellement utiliser des extraits tels quels. N'h\u00e9sitez pas \u00e0 consulter ces documents originaux pour davantage de pr\u00e9cisions."]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["# les imports habituels\n", "import numpy as np\n", "import matplotlib.pyplot as plt"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Intentionnellement dans ce notebook, on ne va pas utiliser le mode automatique de `matplotlib` dans les notebooks (pour rappel, `plt.ion()`), car on veut justement apprendre \u00e0 utiliser `matplotlib` dans un contexte normal."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["### `plt.plot`"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["Nous avons d\u00e9j\u00e0 vu plusieurs fois comment tracer une courbe avec `matplotlib`, avec la fonction `plot`. Si on donne seulement *une* liste de valeurs, elles sont consid\u00e9r\u00e9es comme les *Y*, les *X* \u00e9tant les entiers en nombre suffisant et en commen\u00e7ant \u00e0 0."]}, {"block": 8, "type": "code", "linesLength": 8, "startIndex": 19, "lines": ["# si je ne donne qu'une seule liste \u00e0 plot\n", "# alors ce sont les Y\n", "plt.plot([10, 20, 25, 28])\n", "# on peut aussi facilement ajouter une l\u00e9gende\n", "# ici sur l'axe des y\n", "plt.ylabel('some numbers')\n", "\n", "plt.show()"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 27, "lines": ["On peut changer le style utilis\u00e9 par `plot` pour tracer\u00a0; ce style est sp\u00e9cifi\u00e9 sous la forme d'une cha\u00eene de caract\u00e8res, par d\u00e9faut `'b-'`, qui signifie une ligne bleue (`b` pour bleu, et `-` pour ligne). Ici on va pr\u00e9ciser \u00e0 la place `ro`, `r` qui signifie rouge et `o` qui signifie cercle.\n", "\n", "Voyez [la documentation de r\u00e9f\u00e9rence de plot](https://matplotlib.org/2.0.2/api/pyplot_api.html#matplotlib.pyplot.plot) pour une liste compl\u00e8te."]}, {"block": 10, "type": "code", "linesLength": 10, "startIndex": 30, "lines": ["# mais le plus souvent on passe \u00e0 plot\n", "# une liste de X ET une liste de Y\n", "plt.plot([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], 'ro')\n", "\n", "# ici on veut dire d'utiliser\n", "# pour l'axe des X : entre 0 et 5\n", "# pour l'axe des Y : entre -5 et 20\n", "plt.axis([0, 5, -5, 20])\n", "\n", "plt.show()"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["On peut tr\u00e8s simplement dessiner plusieurs fonctions dans la m\u00eame zone\u00a0:"]}, {"block": 12, "type": "code", "linesLength": 7, "startIndex": 41, "lines": ["# \u00e9chantillon de points entre 0 et 5 espac\u00e9s de 0.2\n", "t = np.arange(0., 5., 0.2)\n", "\n", "# plusieurs styles de ligne\n", "plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')\n", "# on pourrait ajouter d'autres plot bien s\u00fbr aussi\n", "plt.show()"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["### Plusieurs *subplots*"]}, {"block": 14, "type": "code", "linesLength": 24, "startIndex": 49, "lines": ["def f(t):\n", "    return np.exp(-t) * np.cos(2*np.pi*t)\n", "\n", "## deux domaines presque identiques\n", "# celui-ci pour les points bleus\n", "t1 = np.arange(0.0, 5.0, 0.1)\n", "# celui-ci pour la ligne bleue\n", "t2 = np.arange(0.0, 5.0, 0.02)\n", "\n", "# cet appel n'est pas n\u00e9cessaire\n", "# vous pouvez v\u00e9rifier qu'on pourrait l'enlever\n", "plt.figure(1)\n", "# on cr\u00e9e un 'subplot'\n", "plt.subplot(211)\n", "# le fonctionnement de matplotlib est dit 'stateful'\n", "# par d\u00e9faut on dessine dans le dernier objet cr\u00e9\u00e9\n", "plt.axis([0, 5, -1, 1])\n", "plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')\n", "\n", "# une deuxi\u00e8me subplot\n", "plt.subplot(212)\n", "# on \u00e9crit dedans\n", "plt.plot(t2, np.cos(2*np.pi*t2), 'r--')\n", "plt.show()"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["C'est pour pouvoir construire de tels assemblages qu'il y a une fonction `plt.show()`, qui indique que la figure est termin\u00e9e."]}, {"block": 16, "type": "markdown", "linesLength": 9, "startIndex": 74, "lines": ["Il faut revenir un peu sur les arguments pass\u00e9s \u00e0 `subplot`. Lorsqu'on \u00e9crit\u00a0:\n", "```Python\n", "plt.subplot(211)\n", "```\n", "ce qui est par ailleurs juste un raccourci pour\u00a0:\n", "```Python\n", "plt.subplot(2, 1, 1)\n", "```\n", "on veut dire qu'on veut cr\u00e9er un quadrillage de 2 lignes de 1 colonne, et que le subplot va occuper le 1er emplacement."]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["### Plusieurs figures"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 84, "lines": ["En fait, on peut cr\u00e9er plusieurs figures, et plusieurs *subplots* dans chaque figure. Dans l'exemple qui suit on illustre encore mieux cette notion de *statefulness*. Je commence par vous donner l'exemple du tutorial tel quel\u00a0:"]}, {"block": 19, "type": "code", "linesLength": 18, "startIndex": 85, "lines": ["plt.figure(1)                # the first figure\n", "plt.subplot(211)             # the first subplot in the first figure\n", "plt.axis([0, 2, 1, 3])\n", "plt.plot([1, 2, 3])\n", "plt.subplot(212)             # the second subplot in the first figure\n", "plt.axis([0, 2, 4, 6])\n", "plt.plot([4, 5, 6])\n", "\n", "\n", "plt.figure(2)                # a second figure\n", "plt.axis([0, 2, 4, 6])\n", "plt.plot([4, 5, 6])          # creates a subplot(111) by default\n", "\n", "plt.figure(1)                # figure 1 current;\n", "                             # subplot(212) still current\n", "plt.subplot(211)             # make subplot(211) in figure1 current\n", "plt.title('Easy as 1, 2, 3') # subplot 211 title\n", "plt.show()"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 103, "lines": ["Cette fa\u00e7on de faire est am\u00e9liorable. D'abord c'est source d'erreurs, il faut se souvenir de ce qui pr\u00e9c\u00e8de, et du coup, si on change un tout petit peu la logique, \u00e7a risque de casser tout le reste. En outre selon les environnements, on peut obtenir un vilain avertissement.\n", "\n", "C'est pourquoi je vous conseille plut\u00f4t, pour faire la m\u00eame chose que ci-dessus, d'utiliser `plt.subplots` qui vous retourne la figure avec ses *subplots*, que vous pouvez ranger dans des variables Python\u00a0:"]}, {"block": 21, "type": "code", "linesLength": 24, "startIndex": 106, "lines": ["# c'est assez confusant au d\u00e9part, mais\n", "# traditionnellement les subplots sont appel\u00e9s 'axes'\n", "# c'est pourquoi ici on utilise ax1, ax2 et ax3 pour d\u00e9signer\n", "# des subplots\n", "\n", "# ici je cr\u00e9e une figure et deux subplots,\n", "# sur une grille de 2 lignes * 1 colonne\n", "fig1, (ax1, ax2) = plt.subplots(2, 1)\n", "\n", "# au lieu de faire plt.plot, vous pouvez envoyer\n", "# la m\u00e9thode plot \u00e0 un subplot\n", "ax1.plot([1, 2, 3])\n", "ax2.plot([4, 5, 6])\n", "\n", "fig2, ax3 = plt.subplots(1, 1)\n", "ax3.plot([4, 5, 6])\n", "\n", "# pour revenir au premier subplot\n", "# il suffit d'utiliser la variable ax1\n", "# attention on avait fait avec 'plt.title'\n", "# ici c'est la m\u00e9thode 'set_title'\n", "ax1.set_title('Easy as 1, 2, 3')\n", "\n", "plt.show()"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 130, "lines": ["### `plt.hist`"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 131, "lines": ["S'agissant de la dimension 2, voici le dernier exemple que nous tirons du tutoriel `matplotlib`, surtout pour illustrer [`plt.hist`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html?highlight=matplotlib%20pyplot%20hist#matplotlib.pyplot.hist), mais qui montre aussi comment ajouter du texte\u00a0:"]}, {"block": 24, "type": "code", "linesLength": 18, "startIndex": 132, "lines": ["# pour \u00eatre reproductible, on fixe la graine\n", "# du g\u00e9n\u00e9rateur al\u00e9atoire\n", "np.random.seed(19680801)\n", "\n", "mu, sigma = 100, 15\n", "x = mu + sigma * np.random.randn(10000)\n", "\n", "# dessiner un histogramme\n", "# on range les valeurs en 20 boites (bins)\n", "n, bins, patches = plt.hist(x, 20, normed=1, facecolor='g', alpha=0.75)\n", "\n", "plt.xlabel('Smarts')\n", "plt.ylabel('Probability')\n", "plt.title('Histogram of IQ')\n", "plt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\n", "plt.axis([40, 160, 0, 0.03])\n", "plt.grid(True)\n", "plt.show()"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 150, "lines": ["### `plt.scatter`"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 151, "lines": ["Je vous recommande aussi de regarder \u00e9galement la fonction [`plt.scatter`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html?highlight=matplotlib%20pyplot%20scatter#matplotlib.pyplot.scatter) qui permet de faire par exemple des choses comme ceci\u00a0:"]}, {"block": 27, "type": "code", "linesLength": 12, "startIndex": 152, "lines": ["# pour \u00eatre reproductible, on fixe la graine\n", "# du g\u00e9n\u00e9rateur al\u00e9atoire\n", "np.random.seed(19680801)\n", "\n", "N = 50\n", "x = np.random.rand(N)\n", "y = np.random.rand(N)\n", "colors = np.random.rand(N)\n", "area = np.pi * (15 * np.random.rand(N))**2  # 0 to 15 point radii\n", "\n", "plt.scatter(x, y, s=area, c=colors, alpha=0.5)\n", "plt.show()"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 164, "lines": ["### `plt.boxplot`"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 165, "lines": ["Avec [`boxplot`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.boxplot.html) vous obtenez des bo\u00eetes \u00e0 moustache\u00a0:"]}, {"block": 30, "type": "code", "linesLength": 19, "startIndex": 166, "lines": ["plt.figure(figsize=(6, 3))\n", "\n", "plt.subplot(121)\n", "# on peut passer \u00e0 boxplot une liste de suites de nombres\n", "# chaque suite donne lieu \u00e0 une boite \u00e0 moustache\n", "# ici 3 suites\n", "plt.boxplot([[1, 2, 3, 4, 5, 13], [6, 7, 8, 10, 11, 12], [11, 12 ,13]])\n", "plt.ylim(0, 14)\n", "\n", "plt.subplot(122)\n", "# on peut aussi comme toujours lui passer un ndarray numpy\n", "# attention c'est lu dans l'autre sens, ici aussi on a 3 suites de nombres\n", "plt.boxplot(np.array([[1, 6, 11],\n", "                      [2, 7, 12],\n", "                      [3, 8, 13],\n", "                      [4, 10, 11],\n", "                      [5, 11, 12],\n", "                      [13, 12, 13]]))\n", "plt.show()"]}]