[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout,<img src=\"media/inria-25.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# La ligne *shebang*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["    #!/usr/bin/env python"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["Ce compl\u00e9ment est uniquement valable pour MacOS et linux"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["### Le besoin"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["Nous avons vu dans la vid\u00e9o que pour lancer un programme python on fait essentiellement depuis le terminal"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 7, "lines": ["    $ python mon_module.py"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Lorsqu'il s'agit d'un programme qu'on utilise fr\u00e9quemment, on n'est pas forc\u00e9ment dans r\u00e9pertoire o\u00f9 se trouve le programme python, aussi dans ce cas on peut utiliser un chemin \"absolu\", c'est-\u00e0-dire \u00e0 partir de la racine des noms de fichiers, comme par exemple&nbsp;:"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["    $ python /le/chemin/jusqu/a/mon_module.py"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["Sauf que c'est assez malcommode et devient vite p\u00e9nible \u00e0 la longue."]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 11, "lines": ["### La solution"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["Sur linux et MacOS, il existe une astuce utile pour simplifier cela. Voyons comment s'y prendre, avec par exemple le programme `fibonacci.py` que vous pouvez [t\u00e9l\u00e9charger ici](data/fibonacci.py) (nous verrons ce code en d\u00e9tail dans les deux prochains compl\u00e9ments). Commencez par sauver ce code sur votre ordinateur dans un fichier qui s'appelle, bien entendu, `fibonacci.py`."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["On commence par \u00e9diter le tout d\u00e9but du fichier pour lui ajouter une **premi\u00e8re ligne**; il faut faire attention que la ligne contenant le **coding:** soit bien en deuxi\u00e8me position:"]}, {"block": 14, "type": "markdown", "linesLength": 5, "startIndex": 14, "lines": ["    #!/usr/bin/env python\n", "    # coding: utf-8\n", "    \n", "    ## La suite de Fibonacci (Suite)\n", "    ...etc..."]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Cette premi\u00e8re ligne s'appelle un [Shebang](http://en.wikipedia.org/wiki/Shebang_%28Unix%29) dans le jargon Unix. Unix stipule que le Shebang doit \u00eatre en **premi\u00e8re position** dans le fichier. C'est d'ailleurs pourquoi, on l'a vu pr\u00e9c\u00e9demment au sujet des caract\u00e8res accentu\u00e9s, la ligne d\u00e9crivant l'encodage avec `coding:` peut \u00eatre mise dans un fichier python en premi\u00e8re **ou deuxi\u00e8me** position dans le fichier."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["Ensuite on rajoute au fichier, depuis le terminal, le caract\u00e8re ex\u00e9cutable comme ceci:"]}, {"block": 17, "type": "markdown", "linesLength": 2, "startIndex": 21, "lines": ["    $ pwd\n", "    /le/chemin/jusqu/a/"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["    $ chmod +x fibonacci.py"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["\u00c0 partir de l\u00e0 vous pouvez utiliser le fichier `fibonacci.py` comme une commande, sans avoir \u00e0 mentionner `python`, qui sera invoqu\u00e9 au travers du shebang."]}, {"block": 20, "type": "markdown", "linesLength": 2, "startIndex": 25, "lines": ["    $ /le/chemin/jusqu/a/fibonacci.py 20\n", "    fibonacci(20) = 10946"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Et donc vous pouvez aussi le d\u00e9placer dans un r\u00e9pertoire qui est dans votre variable `PATH`, et le rendre ainsi accessible depuis n'importe quel r\u00e9pertoire en faisant simplement"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["    $ cd /tmp"]}, {"block": 23, "type": "markdown", "linesLength": 2, "startIndex": 29, "lines": ["    $ fibonacci.py 20\n", "    fibonacci(20) = 10946"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["**Remarque** tout ceci fonctionne tr\u00e8s bien tant que votre point d'entr\u00e9e - ici `fibonacci.py` - n'utilise que des modules standard. Dans le cas o\u00f9 le point d'entr\u00e9e vient avec au moins un module, il est \u00e9galement n\u00e9cessaire d'installer ces modules quelque part, et d'indiquer au point d'entr\u00e9e comment les trouver, nous y reviendrons avec la vid\u00e9o sur les modules."]}]