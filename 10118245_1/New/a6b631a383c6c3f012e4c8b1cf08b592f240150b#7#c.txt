[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Exercice"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Niveau basique"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["from corrections.exo_taxes import exo_taxes"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["On se propose d'\u00e9crire une fonction `taxes` qui calcule le montant de l'imp\u00f4t sur le revenu au Royaume-Uni."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Le bar\u00e8me est [publi\u00e9 ici par le gouvernement anglais](https://www.gov.uk/income-tax-rates), voici les donn\u00e9es utilis\u00e9es pour l'exercice\u00a0:"]}, {"block": 6, "type": "markdown", "linesLength": 6, "startIndex": 10, "lines": ["| Tranche | Revenu imposable | Taux |\n", "|---------|------------------|------|\n", "| Non imposable | jusque \u00a311.500 | 0% |\n", "| Taux de base | \u00a311.501 \u00e0 \u00a345.000 | 20% |\n", "| Taux \u00e9lev\u00e9 | \u00a345.001 \u00e0 \u00a3150.000 | 40% |\n", "| Taux suppl\u00e9mentaire | au del\u00e0 de \u00a3150.000\t| 45% |"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 16, "lines": ["Donc naturellement il s'agit d'\u00e9crire une fonction qui prend en argument le revenu imposable, et retourne le montant de l'imp\u00f4t, **arrondi \u00e0 l'entier inf\u00e9rieur**."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 17, "lines": ["exo_taxes.example()"]}, {"block": 9, "type": "markdown", "linesLength": 4, "startIndex": 18, "lines": ["**Indices**\n", "\n", "* \u00e9videmment on parle ici d'une fonction continue\u00a0;\n", "* aussi en termes de programmation, je vous encourage \u00e0 s\u00e9parer la d\u00e9finition des tranches de la fonction en elle-m\u00eame."]}, {"block": 10, "type": "code", "linesLength": 3, "startIndex": 22, "lines": ["def taxes(income):\n", "    # ce n'est pas la bonne r\u00e9ponse\n", "    return (income-11_500) * (20/100)"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["exo_taxes.correction(taxes)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["##### Repr\u00e9sentation graphique"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Comme d'habitude vous pouvez voir la repr\u00e9sentation graphique de votre fonction\u00a0:"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["import numpy as np\n", "import matplotlib.pyplot as plt"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 30, "lines": ["%matplotlib inline\n", "plt.ion()"]}, {"block": 16, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["X = np.linspace(0, 200_000)\n", "Y = [taxes(x) for x in X]\n", "plt.plot(X, Y);"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 35, "lines": ["# et pour changer la taille de la figure\n", "plt.figure(figsize=(10, 8))\n", "plt.plot(X, Y);"]}]