[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Classe"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Exercice - niveau basique"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# charger l'exercice\n", "from corrections.cls_fifo import exo_fifo"]}, {"block": 4, "type": "markdown", "linesLength": 9, "startIndex": 9, "lines": ["On veut impl\u00e9menter une classe pour manipuler une queue d'\u00e9v\u00e9nements. La logique de cette classe est que\u00a0:\n", "\n", "* on la cr\u00e9e sans argument\u00a0;\n", "* on peut toujours ajouter un \u00e9l\u00e9ment avec la m\u00e9thode `incoming`\u00a0;\n", "* et tant que la queue contient des \u00e9l\u00e9ments on peut appeler la m\u00e9thode `outgoing`, qui retourne et enl\u00e8ve un \u00e9l\u00e9ment dans la queue.\n", "\n", "Cette classe s'appelle `Fifo` pour *First In, First Out*, c'est-\u00e0-dire que les \u00e9l\u00e9ments retourn\u00e9s par `outgoing` le sont dans le m\u00eame ordre o\u00f9 ils ont \u00e9t\u00e9 ajout\u00e9s.\n", "\n", "La m\u00e9thode `outgoing` retourne `None` lorsqu'on l'appelle sur une pile vide."]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["# voici un exemple de sc\u00e9nario\n", "exo_fifo.example()"]}, {"block": 6, "type": "code", "linesLength": 8, "startIndex": 20, "lines": ["# vous pouvez d\u00e9finir votre classe ici\n", "class Fifo:\n", "    def __init__(self):\n", "        \"votre code\"\n", "    def incoming(self, value):\n", "        \"votre code\"\n", "    def outgoing(self):\n", "        \"votre code\""]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["# et la v\u00e9rifier ici\n", "exo_fifo.correction(Fifo)"]}]