[{"block": 0, "type": "heading", "linesLength": 1, "startIndex": 0, "lines": ["Instruction `if` et fonction `def`"]}, {"block": 1, "type": "heading", "linesLength": 1, "startIndex": 1, "lines": ["Exercices - niveau basique"]}, {"block": 2, "type": "heading", "linesLength": 1, "startIndex": 2, "lines": ["Fonction de divisibilit\u00e9"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 3, "lines": ["L'exercice consiste \u00e0 \u00e9crire une fonction baptis\u00e9e `divisible` qui retourne une valeur bool\u00e9enne qui indique si un des deux arguments est divisible par l'autre. \n", "\n", "Vous pouvez supposer les entr\u00e9es `a` et `b` entiers et non nuls, mais pas forc\u00e9ment positifs. "]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["def divisible(a, b):\n", "    \"<votre_code>\""]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["Vous pouvez \u00e0 pr\u00e9sent tester votre code en \u00e9valuant ceci, qui \u00e9crira un message d'erreur si un des jeux de test ne donne pas le r\u00e9sultat attendu. "]}, {"block": 6, "type": "code", "linesLength": 3, "startIndex": 9, "lines": ["# tester votre code\n", "from corrections.w2s7_if import exo_divisible\n", "exo_divisible.correction(divisible)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 12, "lines": ["**Remarque.** Vu comme le probl\u00e8me est pos\u00e9, il est assez naturel d'utiliser un `if` pour \u00e9crire 'divisible'. Vous remarquerez toutefois qu'un `if` n'est pas strictement indispensable, et nous vous invitons \u00e0 exhiber une version sans `if` qui est plus pythonique."]}, {"block": 8, "type": "heading", "linesLength": 1, "startIndex": 13, "lines": ["Manipulation de liste"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 14, "lines": ["Cet exercice consiste \u00e0 \u00e9crire une fonction `spam`, qui prend en argument une liste, et qui retourne la liste modifi\u00e9e comme suit:\n", " * si la liste est de taille paire, on intervertit les deux premiers \u00e9l\u00e9ments de la liste,\n", " * si elle est de taille impaire, on lui retire son dernier \u00e9l\u00e9ment."]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 17, "lines": ["# pour la correction et un exemple\n", "from corrections.w2s7_if import exo_spam"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 19, "lines": ["# voici quelques exemples de ce qui est attendu\n", "exo_spam.exemple()"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 21, "lines": ["# \u00e9crivez votre code \n", "def spam(liste):\n", "    \"<votre_code>\""]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["# pour le v\u00e9rifier, \u00e9valuez cette cellule\n", "exo_spam.correction(spam)"]}]