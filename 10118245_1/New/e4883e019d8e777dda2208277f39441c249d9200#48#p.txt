[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# Dictionnaires"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau basique"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Ce document r\u00e9sume les op\u00e9rations courantes disponibles sur le type `dict`. On rappelle que le type `dict` est un type **mutable**."]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 4, "lines": ["### Cr\u00e9ation en extension"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["On l'a vu, la m\u00e9thode la plus directe pour cr\u00e9er un dictionnaire est en extension comme ceci:"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["annuaire = {'marc': 35, 'alice': 30, 'eric': 38}\n", "print(annuaire)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["### Cr\u00e9ation - la fonction dict"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["Comme pour les fonctions `int` ou `list`, la fonction `dict` est une fonction de construction de dictionnaire - on dit un constructeur. On a vu aussi dans la vid\u00e9o qu'on peut utiliser ce constructeur \u00e0 base d'une liste de tuples (`cl\u00e9`, `valeur`)"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 10, "lines": ["# le param\u00e8tre de la fonction dict est \n", "# une liste de couples (cl\u00e9, valeur)\n", "annuaire = dict([('marc', 35), ('alice', 30), ('eric', 38)])\n", "print(annuaire)"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["Remarquons qu'on peut aussi utiliser cette autre forme d'appel \u00e0 `dict` pour un r\u00e9sultat \u00e9quivalent"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 15, "lines": ["annuaire = dict(marc=35, alice=30, eric=38)\n", "print(annuaire)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Remarquez ci-dessus l'absence de quotes autour des cl\u00e9s comme `marc`. Il s'agit d'un cas particulier de passage d'arguments que nous expliciterons plus longuement en fin de semaine 4."]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["### Acc\u00e8s atomique"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["Pour acc\u00e9der \u00e0 la valeur associ\u00e9e \u00e0 une cl\u00e9, on utilise la notation \u00e0 base de crochets `[]`"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["print('la valeur pour marc est', annuaire['marc'])"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["Cette forme d'acc\u00e8s ne fonctionne que si la cl\u00e9 est effectivement pr\u00e9sente dans le dictionnaire. Dans le cas contraire, une exception `KeyError` est lev\u00e9e. Aussi si vous n'\u00eates pas s\u00fbr que la cl\u00e9 soit pr\u00e9sente, vous pouvez utiliser la m\u00e9thode `get` qui accepte une valeur par d\u00e9faut:"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["print('valeur pour marc', annuaire.get('marc', 0))\n", "print('valeur pour inconnu', annuaire.get('inconnu', 0))"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["Le dictionnaire est un type **mutable**, et donc on peut **modifier la valeur** associ\u00e9e \u00e0 une cl\u00e9:"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["annuaire['eric'] = 39\n", "print(annuaire)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["Ou encore, exactement de la m\u00eame fa\u00e7on, **ajouter une entr\u00e9e**:"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["annuaire['bob'] = 42\n", "print(annuaire)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 30, "lines": ["Enfin pour **d\u00e9truire une entr\u00e9e**, on peut utiliser l'instruction `del` comme ceci:"]}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 31, "lines": ["# pour supprimer la cl\u00e9 'marc' et donc sa valeur aussi\n", "del annuaire['marc']\n", "print(annuaire)"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Pour savoir si une cl\u00e9 est pr\u00e9sente ou non, il est conseill\u00e9 d'utiliser l'op\u00e9rateur d'appartenance `in` comme ceci:"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 35, "lines": ["# forme recommand\u00e9e\n", "print('john' in annuaire)"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["### Parcourir toutes les entr\u00e9es"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["La m\u00e9thode la plus fr\u00e9quente pour parcourir tout un dictionnaire est \u00e0 base de la m\u00e9thode `items`; voici par exemple comment on pourrait afficher le contenu:"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["for nom, age in annuaire.items():\n", "    print(\"{}, age {}\".format(nom, age))"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["On remarque d'abord que les entr\u00e9es sont list\u00e9es dans le d\u00e9sordre; ceci est d\u00fb \u00e0 l'action de la fonction de hachage, que nous avons vue dans la vid\u00e9o pr\u00e9c\u00e9dente."]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["On peut obtenir s\u00e9par\u00e9ment la liste des cl\u00e9s et des valeurs avec:"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 43, "lines": ["for cl\u00e9 in annuaire.keys():\n", "    print(cl\u00e9)"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 45, "lines": ["for valeur in annuaire.values():\n", "    print(valeur)"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### La fonction `len`"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["On peut comme d'habitude obtenir la taille d'un dictionnaire avec la fonction `len`:"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["print('{} entr\u00e9es dans annuaire'.format(len(annuaire)))"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 50, "lines": ["### Pour en savoir plus sur le type `dict`"]}, {"block": 37, "type": "markdown", "linesLength": 3, "startIndex": 51, "lines": ["Pour une liste exhaustive reportez-vous \u00e0 la page de la documentation python ici\n", "\n", "https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["**********"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["### La m\u00e9thode `update`"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["On peut \u00e9galement modifier un dictionnaire avec le contenu d'un autre dictionnaire avec la m\u00e9thode `update`:"]}, {"block": 42, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["annuaire.update({'jean':25, 'eric':70})\n", "list(annuaire.items())"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["### `collections.OrderedDict` : un dictionnaire avec ordre"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 61, "lines": ["Comme cela devrait \u00eatre clair \u00e0 pr\u00e9sent, un dictionnaire est non ordonn\u00e9, dans ce sens qu'il ne se souvient pas de l'ordre dans lequel les \u00e9l\u00e9ments ont \u00e9t\u00e9 ins\u00e9r\u00e9s."]}, {"block": 45, "type": "code", "linesLength": 5, "startIndex": 62, "lines": ["d = dict()\n", "for i in ['a', 7, 3, 'x']: \n", "    d[i] = i\n", "for k, v in d.items():\n", "    print('dict', k, v)"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["Signalons l'existence dans [le module `collections`](https://docs.python.org/3/library/collections.html) de la classe [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict), qui est une extension du type `dict` mais qui poss\u00e8de cette bonne propri\u00e9t\u00e9:"]}, {"block": 47, "type": "code", "linesLength": 6, "startIndex": 68, "lines": ["from collections import OrderedDict\n", "d = OrderedDict()\n", "for i in ['a', 7, 3, 'x']: \n", "    d[i] = i\n", "for k, v in d.items():\n", "    print('OrderedDict', k, v)"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["### `collections.defaultdict` : initialisation automatique"]}, {"block": 49, "type": "markdown", "linesLength": 3, "startIndex": 75, "lines": ["Imaginons que vous devez g\u00e9rer un dictionnaire dont les valeurs sont des listes, et que votre programme ajoute des valeurs au fur et \u00e0 mesure dans ces listes.\n", "\n", "Avec un dictionnaire de base, cela peut vous amener \u00e0 \u00e9crire un code qui ressemble \u00e0 ceci:"]}, {"block": 50, "type": "code", "linesLength": 8, "startIndex": 78, "lines": ["# on lit dans un fichier des couples (x, y)\n", "\n", "tuples = [\n", "    (1, 2),\n", "    (2, 1),\n", "    (1, 3),\n", "    (2, 4),\n", "]"]}, {"block": 51, "type": "code", "linesLength": 11, "startIndex": 86, "lines": ["# et on veut construire un dictionnaire\n", "# x -> [ liste de tous les y connect\u00e9s \u00e0 x]\n", "resultat = {}\n", "\n", "for x, y in tuples:\n", "    if x not in resultat:\n", "        resultat[x] = []\n", "    resultat[x].append(y)\n", "\n", "for key, value in resultat.items():\n", "    print(key, value)"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["Cela fonctionne, mais n'est pas tr\u00e8s \u00e9l\u00e9gant. Pour simplifier ce type de traitements, vous pouvez utiliser `defaultdict`, une sous-classe de `dict` dans le module `collections`:"]}, {"block": 53, "type": "code", "linesLength": 12, "startIndex": 98, "lines": ["from collections import defaultdict\n", "\n", "# on indique que les valeurs doivent \u00eatre cr\u00e9\u00e9s \u00e0 la vol\u00e9e\n", "# en utilisant la fonction list\n", "resultat = defaultdict(list)\n", "\n", "# du coup plus besoin de v\u00e9rifier la pr\u00e9sence de la cl\u00e9\n", "for x, y in tuples:\n", "    resultat[x].append(y)\n", "    \n", "for key, value in resultat.items():\n", "    print(key, value)    "]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["Cela fonctionne aussi avec le type `int`, lorsque vous voulez par exemple compter des occurrences:"]}, {"block": 55, "type": "code", "linesLength": 8, "startIndex": 111, "lines": ["compteurs = defaultdict(int)\n", "\n", "phrase = \"une phrase dans laquelle on veut compter les caract\u00e8res\"\n", "\n", "for c in phrase:\n", "    compteurs[c] += 1\n", "    \n", "sorted(compteurs.items())"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 119, "lines": ["Signalons enfin une fonctionnalit\u00e9 un peu analogue, quoiqu'un peut moins \u00e9l\u00e9gante \u00e0 mon humble avis, mais qui est pr\u00e9sente avec les dictionnaires `dict` standard. Il s'agit de [la m\u00e9thode `setdefault`](https://docs.python.org/3/library/stdtypes.html#dict.setdefault) qui permet, en un seul appel, de retourner la valeur associ\u00e9e \u00e0 une cl\u00e9 et de cr\u00e9er cette cl\u00e9 au besoin, c'est-\u00e0-dire si elle n'est pas encore pr\u00e9sente:"]}, {"block": 57, "type": "code", "linesLength": 7, "startIndex": 120, "lines": ["print('avant', annuaire)\n", "# ceci sera sans effet car eric est d\u00e9j\u00e0 pr\u00e9sent\n", "print('set_default eric', annuaire.setdefault('eric', 50))\n", "# par contre ceci va ins\u00e9rer une entr\u00e9e dans le dictionnaire\n", "print('set_default inconnu', annuaire.setdefault('inconnu', 50))\n", "# comme on le voit \n", "print('apr\u00e8s', annuaire)"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["Notez bien que `setdefault` peut \u00e9ventuellement cr\u00e9er une entr\u00e9e mais ne **modifie jamais** la valeur associ\u00e9e \u00e0 une cl\u00e9 d\u00e9j\u00e0 pr\u00e9sente dans le dictionnaire, comme le nom le sugg\u00e8re d'ailleurs."]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 128, "lines": ["## Compl\u00e9ment - niveau avanc\u00e9 "]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["Pour bien appr\u00e9hender les dictionnaires, il nous faut souligner certaines particularit\u00e9s, \u00e0 propos de la valeur de retour des m\u00e9thodes comme `items()`, `keys()` et `values()`."]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 130, "lines": ["#### Ce sont des objets it\u00e9rables"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 131, "lines": ["Les m\u00e9thodes `items()`, `keys()` et `values()` ne retournent pas des listes (comme c'\u00e9tait le cas avec python2), mais des **objets it\u00e9rables** - un peu comme `range(10)`:"]}, {"block": 63, "type": "code", "linesLength": 3, "startIndex": 132, "lines": ["d = {'a' : 1, 'b' : 2}\n", "keys = d.keys()\n", "keys"]}, {"block": 64, "type": "markdown", "linesLength": 1, "startIndex": 135, "lines": ["comme ce sont des it\u00e9rables, on peut naturellement faire un `for` avec, on l'a vu"]}, {"block": 65, "type": "code", "linesLength": 2, "startIndex": 136, "lines": ["for key in keys:\n", "    print(key)"]}, {"block": 66, "type": "markdown", "linesLength": 1, "startIndex": 138, "lines": ["#### Mais **ce ne sont pas des listes**"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 139, "lines": ["isinstance(keys, list)"]}, {"block": 68, "type": "markdown", "linesLength": 1, "startIndex": 140, "lines": ["Ce qui signifie qu'on n'a **pas allou\u00e9 de m\u00e9moire** pour stocker toutes les cl\u00e9s, mais seulement un it\u00e9rateur qui ne prend pas de place, ni de temps \u00e0 construire:"]}, {"block": 69, "type": "code", "linesLength": 4, "startIndex": 141, "lines": ["# construisons un dictionnaire non-trivial\n", "# pour anticiper un peu sur la compr\u00e9hension de dictionnaire\n", "\n", "big_dict = { k : k**2 for k in r }"]}, {"block": 70, "type": "code", "linesLength": 3, "startIndex": 145, "lines": ["%%timeit -n 10000 \n", "# \u00e9laborer un it\u00e9rateur est tr\u00e8s rapide\n", "big_keys = big_dict.keys()"]}, {"block": 71, "type": "code", "linesLength": 3, "startIndex": 148, "lines": ["# on r\u00e9p\u00e8te ici car timeit travaille dans un espace qui lui est propre\n", "# et donc on n'a pas d\u00e9fini big_keys pour notre interpr\u00e9teur\n", "big_keys = big_dict.keys()"]}, {"block": 72, "type": "code", "linesLength": 3, "startIndex": 151, "lines": ["%%timeit -n 20\n", "# si on devait vraiment construire la liste ce serait beaucoup plus long\n", "big_lkeys = list(big_keys)"]}, {"block": 73, "type": "markdown", "linesLength": 1, "startIndex": 154, "lines": ["#### En fait ce sont des *vues*"]}, {"block": 74, "type": "markdown", "linesLength": 1, "startIndex": 155, "lines": ["Une autre propri\u00e9t\u00e9 un peu inattendue de ces objets, c'est que **ce sont des vues**; ce qu'on veut dire par l\u00e0 (pour ceux qui connaissent, cela fait fait r\u00e9f\u00e9rence \u00e0 la notion de vue dans les bases de donn\u00e9es) c'est que la vue *voit* les changements fait sur l'objet dictionnaire *m\u00eame apr\u00e8s sa cr\u00e9ation*:"]}, {"block": 75, "type": "code", "linesLength": 2, "startIndex": 156, "lines": ["d = {'a' : 1, 'b' : 2}\n", "keys = d.keys()"]}, {"block": 76, "type": "code", "linesLength": 3, "startIndex": 158, "lines": ["# sans surprise, il y a deux cl\u00e9s dans keys\n", "for k in keys: \n", "    print(k)"]}, {"block": 77, "type": "code", "linesLength": 6, "startIndex": 161, "lines": ["# mais si maintenant j'ajoute un objet au dictionnaire\n", "d['c'] = 3\n", "# alors on va 'voir' cette nouvelle cl\u00e9 \u00e0 partir de l'objet keys \n", "# qui pourtant est inchang\u00e9 \n", "for k in keys: \n", "    print(k)"]}, {"block": 78, "type": "markdown", "linesLength": 1, "startIndex": 167, "lines": ["Reportez vous \u00e0 [la section sur les vues de dictionnaires](https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects) pour plus de d\u00e9tails."]}, {"block": 79, "type": "markdown", "linesLength": 1, "startIndex": 168, "lines": ["#### python2"]}, {"block": 80, "type": "markdown", "linesLength": 1, "startIndex": 169, "lines": ["Ceci est naturellement en fort contraste avec tout ce qui se passait en python2, o\u00f9 l'on avait des m\u00e9thodes distinctes, par exemple `keys()`, `iterkeys()` et `viewkeys()`, selon le type d'objets que l'on souhaitait construire."]}]