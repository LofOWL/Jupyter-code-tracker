[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["<style>div.title-slide {    width: 100%;    display: flex;    flex-direction: row;            /* default value; can be omitted */    flex-wrap: nowrap;              /* default value; can be omitted */    justify-content: space-between;}</style><div class=\"title-slide\">\n", "<span style=\"float:left;\">Licence CC BY-NC-ND</span>\n", "<span>Thierry Parmentelat &amp; Arnaud Legout</span>\n", "<span><img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\" /></span>\n", "</div>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["## Exercice - niveau basique"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["### Tri de plusieurs listes"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 7, "lines": ["# pour charger l'exercice\n", "from corrections.exo_multi_tri import exo_multi_tri"]}, {"block": 4, "type": "markdown", "linesLength": 4, "startIndex": 9, "lines": ["\u00c9crivez une fonction qui\u00a0:\n", "\n", " * accepte en argument une liste de listes,\n", " * et qui retourne **la m\u00eame liste**, mais avec toutes les sous-listes **tri\u00e9es en place**."]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 13, "lines": ["# voici un exemple de ce qui est attendu\n", "exo_multi_tri.example()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["\u00c9crivez votre code ici\u00a0:"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["def multi_tri(listes): \n", "    \"<votre_code>\""]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["# pour v\u00e9rifier votre code\n", "exo_multi_tri.correction(multi_tri)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 20, "lines": ["## Exercice - niveau interm\u00e9diaire"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 21, "lines": ["### Tri de plusieurs listes, dans des directions diff\u00e9rentes"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["# pour charger l'exercice\n", "from corrections.exo_multi_tri_reverse import exo_multi_tri_reverse"]}, {"block": 12, "type": "markdown", "linesLength": 7, "startIndex": 24, "lines": ["Modifiez votre code pour qu'il accepte cette fois **deux** arguments listes que l'on suppose de tailles \u00e9gales. \n", "\n", "Comme tout \u00e0 l'heure le premier argument est une liste de listes \u00e0 trier.\n", "\n", "\u00c0 pr\u00e9sent le second argument est une liste (ou un tuple) de bool\u00e9ens, de m\u00eame cardinal que le premier argument, et qui indiquent l'ordre dans lequel on veut trier la liste d'entr\u00e9e de m\u00eame rang. `True` signifie un tri descendant, `False` un tri ascendant.\n", "\n", "Comme dans l'exercice `multi_tri`, il s'agit de modifier en place les donn\u00e9es en entr\u00e9e, et de retourner la liste de d\u00e9part."]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 31, "lines": ["# Pour \u00eatre un peu plus clair, voici \u00e0 quoi on s'attend\n", "exo_multi_tri_reverse.example()"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["\u00c0 vous de jouer\u00a0:"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["def multi_tri_reverse(listes, reverses):\n", "    \"<votre_code>\""]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 36, "lines": ["# et pour v\u00e9rifier votre code\n", "exo_multi_tri_reverse.correction(multi_tri_reverse)"]}]