[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["<span style=\"float:left;\">Licence CC BY-NC-ND</span><span style=\"float:right;\">Thierry Parmentelat &amp; Arnaud Legout&nbsp;<img src=\"media/both-logos-small-alpha.png\" style=\"display:inline\"></span><br/>"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 1, "lines": ["# *Type hints*"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 2, "lines": ["## Compl\u00e9ment - niveau interm\u00e9diaire"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["### Le typage est obligatoire dans les langages compil\u00e9s"]}, {"block": 4, "type": "markdown", "linesLength": 9, "startIndex": 4, "lines": ["Nous avons \u00e9voqu\u00e9 en premi\u00e8re semaine le typage, lorsque nous avons compar\u00e9 python avec les langages compil\u00e9s. Dans un langage compil\u00e9 avec typage statique, on \u00e9crit typiquement une fonction comme ceci:\n", "\n", "```\n", "int factoriel(int n) {\n", "  return (n<=1) ? 1 : n * factoriel(n-1);\n", "}\n", "```\n", "\n", "ce qui signifie que la fonction factoriel prend un premier argument qui est un entier, et qu'elle retourne \u00e9galement un entier."]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 13, "lines": ["Nous avons vu \u00e9galement que pour \u00e9crire une fonction en python, on n'a **pas besoin** de pr\u00e9ciser **le type** des arguments ni du retour de la fonction."]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 14, "lines": ["### Vous pouvez aussi type votre code python"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 15, "lines": ["Cependant depuis la version 3.5, python supporte un m\u00e9canisme **totalement optionnel** qui vous permet d'annoter les arguments des fonctions avec des informations de typage, ce m\u00e9canisme est connu sous le nom de *type hints*."]}, {"block": 8, "type": "code", "linesLength": 3, "startIndex": 16, "lines": ["# une fonction factorielle avec des type hints\n", "def fact(n : int) -> int:\n", "    return 1 if n <= 1 else n * fact(n-1)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 19, "lines": ["### Usages"]}, {"block": 10, "type": "markdown", "linesLength": 5, "startIndex": 20, "lines": ["\u00c0 ce stade, on peut entrevoir les usages suivants \u00e0 ce type d'annotation:\n", "\n", "* tout d'abord, et \u00e9videmment, cela peut permettre de mieux documenter le code; \n", "* les environnements de d\u00e9veloppement sont susceptibles de vous aider de mani\u00e8re plus effective; si \u00e0 quelque part vous \u00e9crivez `z = fact(12)`, le fait de savoir que `z` est entier permet de fournir une compl\u00e9tion plus pertinente lorsque vous commencez \u00e0 \u00e9crire `z.[TAB]`;\n", "* on peut esp\u00e9rer trouver des erreurs dans les passages d'arguments \u00e0 un stade plus pr\u00e9coce du d\u00e9veloppement"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["Par contre ce qui est tr\u00e8s tr\u00e8s clairement annonc\u00e9 \u00e9galement est que ces information de typage sont **totalement facultatives**, et que le langage les **ignore totalement**. "]}, {"block": 12, "type": "code", "linesLength": 7, "startIndex": 26, "lines": ["# l'interpr\u00e9teur ignore totalement ces informations\n", "def fake_fact(n : str) -> str:\n", "    return 1 if n <= 1 else n * fake_fact(n-1)\n", "\n", "# on peut appeler fake_fact avec un int alors \n", "# que c'est d\u00e9clar\u00e9 pour des str\n", "fake_fact(12)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["Le mod\u00e8le pr\u00e9conis\u00e9 est d'utiliser des **outils ext\u00e9rieurs** qui peuvent faire une analyse statique du code pour exploiter ces informations \u00e0 des fins de validation. Dans cette cat\u00e9gorie, le plus c\u00e9l\u00e8bre [est sans doute `mypy`](http://mypy-lang.org/). Notez aussi que les IDE comme PyCharm sont \u00e9galement capables de tirer parti de ces annotations."]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Comment annoter son code"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 35, "lines": ["Maintenant que nous en avons bien vu la finatlit\u00e9, voyons un tr\u00e8s bref aper\u00e7u des possibilit\u00e9s offertes pour la construction des types dans ce contexte de *type hints*. N'h\u00e9sitez pas \u00e0 vous reporter \u00e0 la documentation officielle [du module `typing`](https://docs.python.org/3/library/typing.html) pour un expos\u00e9 plus exhaustif."]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["##### avertissement"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 37, "lines": ["Soyez attentifs au fait que les types qui sont li\u00e9s aux *type hints* \u00e9voluent dans un espace qui est diff\u00e9rent des types con"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["##### typage partiel"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["Puisque c'est un m\u00e9canisme optionnel, vous pouvez tout \u00e0 fait ne typer qu'une partie des param\u00e8tres d'une fonction:"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 40, "lines": ["def partially_typed(n1: int, n2):\n", "    return None"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["##### typer une variable"]}, {"block": 22, "type": "markdown", "linesLength": 3, "startIndex": 43, "lines": ["xxx v\u00e9rifier s'il n'y a pas eu un truc plus r\u00e9cent pour faire \u00e7a\n", "\n", "Initialement pr\u00e9vu pour typer les param\u00e8tres et le retour des fonctions, ce m\u00e9canisme a \u00e9t\u00e9 \u00e9tendu pour typer les d\u00e9clarations de variables, comme ceci:"]}, {"block": 23, "type": "code", "linesLength": 5, "startIndex": 46, "lines": ["# typer une variable avec un commentaire #type:\n", "def fact(n: int) -> int:\n", "    result = 0    #type: int\n", "    # ...\n", "    return result"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["##### le module `typing`"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["L'ensemble des symboles que nous allons utiliser dans la suite de ce compl\u00e9ment provient du module `typing`"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["import typing"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["##### types *built-in*"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["##### aliases"]}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 56, "lines": ["from typing import NewType\n", "UserId = NewType('UserId', int)"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["UserId(3) is 3"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["##### `Any`"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["Le type `typing.Any` correspond au type qui contient tous les objets:"]}, {"block": 33, "type": "code", "linesLength": 3, "startIndex": 61, "lines": ["# c'est \u00e9quivalent de dire ceci\n", "def fact(n):\n", "    return 1 if n <= 1 else n * fact(n-1)"]}, {"block": 34, "type": "code", "linesLength": 3, "startIndex": 64, "lines": ["# ou cela\n", "def fact(n: typing.Any) -> typing.Any:\n", "    return 1 if n <= 1 else n * fact(n-1)"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 67, "lines": ["##### `Generic`"]}, {"block": 36, "type": "markdown", "linesLength": 8, "startIndex": 68, "lines": ["xxx exemples \u00e0 montrer\n", "\n", "* typer une variable (et pas un param\u00e8tre)\n", "* typer une liste d'entiers : List\n", "* Iterable\n", "* typer une fonction : Callable\n", "* Generic\n", "* d\u00e9finir son alias "]}, {"block": 37, "type": "markdown", "linesLength": 2, "startIndex": 76, "lines": ["* annoter les variables as\n", "* mentionner les g\u00e9n\u00e9riques"]}, {"block": 38, "type": "markdown", "linesLength": 4, "startIndex": 78, "lines": ["### Pour en savoir plus\n", "\n", "* la documentation officielle sur [le module typing](https://docs.python.org/3/library/typing.html);\n", "* la page d'accueil [de l'outil mypy](http://mypy-lang.org/)."]}]