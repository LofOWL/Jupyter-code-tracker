[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["# Stock Prediction using Stocker\n", "\n", "Stocker (\"stock explorer\") is a Python-based toolkit for stock analysis and prediction. It is built on the quandl library for financial data, the prophet library from Facebook for additive models, numpy and pandas for data manipulation, and matplotlib for visualization. \n", "\n", "This notebook will document some of the basic capabilities of Stocker for prediction. First, have to recommend against playing the stock market on a daily basis, with or without Stocker! Mostly I made this tool to gain more experience with time series analysis and object-oriented programming. To see the code for Stocker, check out stocker.py and to see a notebook with analysis examples, look at the [Stocker Analysis Usage notebook](https://github.com/WillKoehrsen/Data-Analysis/blob/master/stocker/Stocker%20Analysis%20Usage.ipynb). "]}, {"block": 1, "type": "code", "linesLength": 4, "startIndex": 5, "lines": ["# Matplotlib for plotting in the notebook\n", "import matplotlib.pyplot as plt\n", "\n", "%matplotlib inline"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 9, "lines": ["## Import the Stocker Class"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["from stocker import Stocker"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 11, "lines": ["### Instantiate a Stocker object \n", "\n", "We will be looking at Amazon stock data throughout this example. To retrieve the data, we simply need to pass the ticker to the stocker class and assign it to a variable. "]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 14, "lines": ["amazon = Stocker('AMZN')"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 15, "lines": ["The Stocker object has a number of attributes and methods we can use for analysis and prediction. The main methods we will use in this notebook are `Stocker.create_prophet_model(), Stocker.changepoint_prior_analysis(), Stocker.changepoint_prior_validation(), Stocker.evaluate_prediction(),` and `Stocker.predict_future()`.\n", "\n", "The most critical attributes for a forecast are `Stocker.changepoint_prior_scale, Stocker.training_years`, and the seasonalities included in the model. "]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 18, "lines": ["### Basic Plot of Stock History\n", "\n", "We have a little over 20 years of Amazon price history. Let's see what that looks like in its entirety."]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 21, "lines": ["amazon.plot_stock()"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["### Plot of Daily Changes"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["amazon.plot_stock(stats=['Daily Change'])"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["There have been some extreme changes in absolute magnitude recently, but these are not as large as they seem because the price of the stock has increased. We could change the plot to have percentage change from the average on the y-axis. There do not appear to be trends with regards to the changes in one direction or the other. However, we know the stock has increased in value, so the overall average daily change must be slightly positive. "]}, {"block": 12, "type": "markdown", "linesLength": 3, "startIndex": 25, "lines": ["## Create Model to Examine Trends\n", "\n", "We can create a basic model (with no predictions) trained on the past 3 years of data to inspect any trends and patterns in the data. "]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["model, model_data = amazon.create_prophet_model()"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["model.plot_components(model_data)\n", "plt.show()"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 31, "lines": ["### Test a Weekly Component\n", "\n", "Although it is unlikely, perhaps there is a significant weekly component that including would improve the model. Let's add it in and look at the pattern. "]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["amazon.weekly_seasonality=True\n", "model, model_data = amazon.create_prophet_model()"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 36, "lines": ["model.plot_components(model_data)\n", "plt.show()"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 38, "lines": ["Maybe there is a slight weekly pattern? For now, we can remove that seasonality and then evaluate models with and without it to see the effect on predictions."]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["amazon.weekly_seasonality=False"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 40, "lines": ["# First Predictions\n", "\n", "We can make a prediction for any number of specified days using the create model method. The prediction also includes the uncertainty interval, a necessity when making estimates about the future! "]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["model, model_data = amazon.create_prophet_model(days=90)"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["The model predicts a continuous increase in price. Notice how the model for both the past data and the future data is smoother than the actual observations. The model smooths out the noise on the small scale in order to make more accurate predictions over a long period."]}, {"block": 23, "type": "markdown", "linesLength": 7, "startIndex": 45, "lines": ["# Evaluate Model\n", "\n", "Anyone can make stock predictions by simply picking a number. For our predictions to be meaningful, we must evaluate them on real data. \n", "\n", "One way to do this is set aside some historical data as a test set and use data from further back as our training set. In the default evaluation method, we test using the past year and train on the 3 years prior to the test period. \n", "\n", "To quantify the accuracy of our predictions, we can find the average dollar error on both the testing and training data, the percentage the actual price was in the predicted confidence interval, and the percentage of times we predicted the correct direction for the stock. "]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["amazon.evaluate_prediction()"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["These predictions are not very good! However, it is likely that the model hyperparameters (settings) are not optimized for our problem. There are a number of these knobs we can adjust to improve the model, with perhaps the most important the changepoint prior scale, or the amount of weight the model assigns to shifts in the data."]}, {"block": 26, "type": "markdown", "linesLength": 7, "startIndex": 54, "lines": ["# Changepoint Prior Scale Selection\n", "\n", "Changepoints represent where a time series goes from increasing to decreasing or from increasing slowly to increasingly rapidly. They occur at the places with the [greatest change in the rate of the time series](https://facebook.github.io/prophet/docs/trend_changepoints.html). \n", "\n", "The changepoint prior scale represents the amount of weight given to the changepoints in the model. This can be used to control overfitting vs underfitting. A higher prior will create a model with more flexibility and more emphasis on the changepoints. This can lead to overfitting because the model will closely follow the training data. Lowering the prior decreases the model flexibility which can cause the opposite problem underfitting. This occurs when our model does not follow the training data closely enough and fails to learn the underlying relationships.\n", "\n", "The Stocker class contains two different ways to choose an appropriate prior: grahically and quantitatively with validation data."]}, {"block": 27, "type": "markdown", "linesLength": 3, "startIndex": 61, "lines": ["## Graphical Comparison\n", "\n", "We will start with a range of four priors to compare. First, we can graphically compare them to get an intuition of how the priors affect the model. "]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["amazon.changepoint_prior_analysis(changepoint_priors=[0.001, 0.05, 0.1, 0.2])"]}, {"block": 29, "type": "markdown", "linesLength": 3, "startIndex": 65, "lines": ["## Quantitative Comparison\n", "\n", "This gives us an idea of how well each prior fits the training data, but no numbers to back up our intuitions. The changepoint prior validation method is designed to provide numerical backing. "]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 68, "lines": ["amazon.changepoint_prior_validation(changepoint_priors=[0.001, 0.05, 0.1, 0.2])"]}, {"block": 31, "type": "markdown", "linesLength": 3, "startIndex": 69, "lines": ["### Refine Search \n", "\n", "We can evaluate additional changepoint prior scales to determine the best fit for our data. "]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 72, "lines": ["amazon.changepoint_prior_validation(changepoint_priors=[0.15, 0.18, 0.2, 0.22, 0.25, 0.3, 0.4, 0.5])"]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 73, "lines": ["We now assign the changepoint prior with the smallest error on the testing set to the Stocker object. The prior is one of the attiributes and we can change it like any other variable. At this point, we could also change the seasonalities or the amount of training data to achieve the best performance on the testing data"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["amazon.changepoint_prior_scale = 0.18"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["### Evaluate Improved Model"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 76, "lines": ["amazon.evaluate_prediction()"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 77, "lines": ["#### Add in weekly seasonality and evaluate"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 78, "lines": ["amazon.weekly_seasonality=True"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 79, "lines": ["amazon.evaluate_prediction()"]}, {"block": 40, "type": "markdown", "linesLength": 1, "startIndex": 80, "lines": ["The best changepoint prior scale for our model is 0.18 and including the weekly seasonality did not improve the model. Therefore, we will change these settings accordingly. "]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 81, "lines": ["amazon.changepoint_prior_scale=0.18\n", "amazon.weekly_seasonality=True"]}, {"block": 42, "type": "markdown", "linesLength": 9, "startIndex": 83, "lines": ["## Play the Daily Market\n", "\n", "For fun (this should never be done for real) we can \"play\" the market with our predictions. We will compare our model with the simple strategy of buying and holding over the same time period. The rules of our game are straightforward:\n", "\n", "1. If we predict the price will increase, we buy stock on that day. If we predict a decrease, we do not play the market.\n", "2. If we predicted an increase and the stock does increase, we recieve the change in price of the stock over that day times the number of shares.\n", "3. If we predicted an increase and the stock decreases, we lose the change in price of the stock over that day times the number of shares.\n", "\n", "We are assuming the \"change in price of a share on that day\" is the difference between the previous days' closing price and the closing price on our day. For example, if the closing price on Monday was \\$14 and the closing price on Tuesday was \\$18, we would call that a \\$4 change on Tuesday. This is not entirely accurate as stocks prices change a small amount overnight, but it will be acceptable for our game. Now, let's play with the defaults."]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 92, "lines": ["amazon.evaluate_prediction(nshares=1000)"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["Notice that our profits do not depend on the difference between the final predicted price and the actual price, only on the percentage of the time we correctly predicted the direction. We could alter the rules of the game to play it based on predicted values, but for now we can leave it at the rather simple exercise shown here. "]}, {"block": 45, "type": "markdown", "linesLength": 3, "startIndex": 94, "lines": ["#### Try a Different Period\n", "\n", "We can evaluate any time period we like to see if there are times when we beat the buy and hold strategy. More likely is that we will find times when we lose money. Nonetheless, it is important to test over different time frames to see how robust the model is to training data."]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 97, "lines": ["amazon.evaluate_prediction(start_date = '2008-01-03', end_date = '2009-01-05', nshares=1000)"]}, {"block": 47, "type": "markdown", "linesLength": 3, "startIndex": 98, "lines": ["# Predict the Future\n", "\n", "As a last step, we can predict any number of days into the future. This function automatically trains on the past 3 years and makes predictions with the uncertainty intervals. "]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["amazon.predict_future(days=10)"]}, {"block": 49, "type": "code", "linesLength": 1, "startIndex": 102, "lines": ["amazon.predict_future(days=100)"]}, {"block": 50, "type": "markdown", "linesLength": 3, "startIndex": 103, "lines": ["The uncertainty increases the farther out in the future we predict. This is to be expected because the initial forecasted values have some uncertainty, and the next values are made based on the previous ones, so the range of possible values grows over time. \n", "\n", "Whenever we make a prediction, we must be sure to include uncertainty intervals because there are no processes that can be exactly estimated in the future. While most people interpret a confidence interval as a lack of confidence, it really displays that we know the limitations of our model. "]}]