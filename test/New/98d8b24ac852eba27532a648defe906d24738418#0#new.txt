[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["# Introduction: Article Investigation\n", "\n", "The purpose of this notebook is to look at the articles I published over the past year. This is primarily for enjoyment and for the article \"What I learned by writing one data science article per week\". This should be a fun opportunity to use plotly. \n", "\n", "You can also run this notebook on mybinder (coming soon)."]}, {"block": 1, "type": "code", "linesLength": 20, "startIndex": 5, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.set_config_file(world_readable=True, theme=\"pearl\")\n", "cf.go_offline(connected=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n"]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 25, "lines": ["## Data Loading\n", "\n", "We'll load in the data using the `parquet` format which saves the data and the correct data types. This makes it easier to read and write data (at least in pandas)."]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["df = pd.read_parquet('https://github.com/WillKoehrsen/Data-Analysis/blob/master/medium/data/2019-01-26_stats?raw=true')\n", "df.head()"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 30, "lines": ["import ipywidgets as widgets\n", "from ipywidgets import interact"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 32, "lines": ["df_orig = df.copy()\n", "df = df.set_index('published_date')"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 34, "lines": ["# Articles in 2018\n", "\n", "Let's quickly see how many articles I published in 2018. This uses an interactive widget to select dates."]}, {"block": 7, "type": "code", "linesLength": 13, "startIndex": 37, "lines": ["def print_articles_published(start_date, end_date):\n", "    start_date = pd.Timestamp(start_date)\n", "    end_date = pd.Timestamp(end_date)\n", "    stat_df = df.loc[(df.index >= start_date) & (df.index <= end_date)].copy()\n", "    total_words = stat_df['word_count'].sum()\n", "    total_read_time = stat_df['read_time'].sum()\n", "    num_articles = len(stat_df)\n", "    print(f'You published {num_articles} articles between {start_date.date()} and {end_date.date()}.')\n", "    print(f'These articles totalled {total_words:,} words and {total_read_time/60:.2f} hours to read.')\n", "    \n", "_ = interact(print_articles_published,\n", "             start_date=widgets.DatePicker(value=pd.to_datetime('2018-01-01')),\n", "             end_date=widgets.DatePicker(value=pd.to_datetime('2018-12-31')))"]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 50, "lines": ["## Article Summary\n", "\n", "We'll use a basic `describe` to get the stats for my 2018 articles."]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 53, "lines": ["start_date = pd.to_datetime('2018-01-01'); end_date = pd.to_datetime('2018-12-31')\n", "\n", "stat_df = df.loc[(df.index >= start_date) & (df.index <= end_date)].copy()\n", "stat_df.describe()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["# Days from Start to Publish"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["stat_df.reset_index(inplace=True)\n", "stat_df['days_to_publish'] = (stat_df['published_date'] - stat_df['started_date']) / pd.Timedelta(days=1)"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 60, "lines": ["data = [go.Scatter(x=[x['started_date'], x['published_date']], \n", "                   y=[x['word_count'], x['word_count']],\n", "                  text = x['title'][:10] + ':' + str(int(x['days_to_publish'])),\n", "                   mode='markers+lines',\n", "                  name=x['title'][:10]) for i, x in stat_df.query(\"days_to_publish < 100\").iterrows()]"]}, {"block": 13, "type": "code", "linesLength": 4, "startIndex": 65, "lines": ["figure = go.Figure(data=data, layout=go.Layout(title='Started - Published Date with Word Count', \n", "                                               yaxis=dict(title='Word Count'),\n", "                                               xaxis=dict(title='Started and Published Date')))\n", "iplot(figure)"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 69, "lines": ["# Cumulative Word Count\n", "\n", "This shows the total words I wrote over the year. We use a cumulative sum plotted against the published date."]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 72, "lines": ["stat_df.set_index('published_date', inplace=True)\n", "stat_df['word_count'].cumsum().iplot(kind='scatter', mode='markers+lines', size=6, xTitle='Published Date', yTitle='Word Count',\n", "                                colorscale='plotly', theme='white', title='Total Words over 2018')"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 75, "lines": ["## Average Words per Day\n", "\n", "Let's take a 14 day rolling mean and calculate the average words per day."]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 78, "lines": ["(stat_df['word_count'].cumsum() / stat_df.index.dayofyear).iplot()"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["# Cumulative Fans"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["stat_df['fans'].cumsum().iplot(kind='scatter', mode='markers+lines', size=6, xTitle='Published Date', yTitle='Fans',\n", "                                colorscale='plotly', theme='white', title='Total Fans over 2018')"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 82, "lines": ["# Spread Plot of Views and Reads"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 83, "lines": ["stat_df[['views', 'reads']].cumsum().iplot(kind='spread', mode='markers+lines', size=6, xTitle='Published Date', \n", "                                colorscale='plotly', theme='white', title='Total Views and Reads over 2018')"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["# Average Reading Percent by Month"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 86, "lines": ["stat_df.resample('1 M').mean()['read_ratio'].iplot(kind='bar', title='Reading Percent by Month')"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["# Average Reading Percent by Reading Time"]}, {"block": 25, "type": "code", "linesLength": 12, "startIndex": 88, "lines": ["stat_df['binned_readtime'] = pd.cut(stat_df['read_time'], bins=range(0, 101, 5))\n", "\n", "stat_df['binned_readtime'] = stat_df['binned_readtime'].astype(str)\n", "stat_df['binned_readtime'] = stat_df['binned_readtime'].replace({'(5, 10]': '(05, 10]'})\n", "\n", "averages = stat_df.groupby('binned_readtime')['read_ratio'].mean()\n", "\n", "averages['count'] = stat_df.groupby('binned_readtime')['read_ratio'].count()\n", "averages.sort_index(inplace=True)\n", "averages.iplot(kind='bar', xTitle='Reading Time', text='count', \n", "                                                              yTitle='Reading Percent',\n", "                                                              title='Reading Percent vs Reading Time')"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["stat_df.corr()"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["stat_df.describe()"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 102, "lines": ["stat_df['word_count'].iplot(kind='hist', title='Distribution of Word Count', yTitle='Count', bins=(0, 20000, 1000))"]}, {"block": 29, "type": "code", "linesLength": 4, "startIndex": 103, "lines": ["views = pd.read_parquet('../medium/data/2019-01-28_views')\n", "reads = pd.read_parquet('../medium/data/2019-01-28_reads')\n", "views['reads'] = reads\n", "views.head()"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 107, "lines": ["views.iplot(yTitle='views', y='views', secondary_y='reads', secondary_y_title='Reads', title='Views and Reads over Time')"]}, {"block": 31, "type": "code", "linesLength": 0, "startIndex": 108, "lines": []}]