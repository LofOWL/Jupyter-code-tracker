[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Linear Regression with Medium Articles\n", "\n", "In this notebook, we'll look at performing some basic linear regression with the medium articles. This is a continuation of the data analysis performed on my Medium articles. "]}, {"block": 1, "type": "code", "linesLength": 33, "startIndex": 3, "lines": ["# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "from scipy import stats\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "# Interactive plotting\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot\n", "import cufflinks\n", "cufflinks.go_offline()\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "from timeit import default_timer as timer\n", "\n", "from collections import Counter, defaultdict\n", "from itertools import chain\n", "\n", "from bs4 import BeautifulSoup\n", "import re\n", "\n", "import requests\n", "from multiprocessing import Pool"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["from utils import process_in_parallel, get_links, make_iplot"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 37, "lines": ["soup = BeautifulSoup(open('data/published.html', 'r'))\n", "soup.text[:100]"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["links = get_links(soup)"]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 40, "lines": ["data = process_in_parallel(links)\n", "responses = data[data['response'] == 'response'].copy()\n", "articles = data[data['response'] == 'article'].copy()\n", "responses.head()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["# Linear Regression"]}, {"block": 7, "type": "code", "linesLength": 6, "startIndex": 45, "lines": ["regression = stats.linregress(x=articles['word_count'], y=articles['claps'])\n", "slope = regression.slope\n", "intercept = regression.intercept\n", "rvalue = regression.rvalue\n", "\n", "regression"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 51, "lines": ["figure = make_iplot(articles, x = 'word_count', y = 'claps', base_title='Claps vs Word Count')\n", "iplot(figure)"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 53, "lines": ["figure = make_iplot(data, x = 'word_count', y = 'claps', base_title='Claps vs Word Count')\n", "iplot(figure)"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 55, "lines": ["figure = make_iplot(articles, x = 'read_time', y = 'word_count', base_title='Word Count vs Read Time')\n", "iplot(figure)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["# Time Since Start Comparisons"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 58, "lines": ["articles['time_since_start'] = (articles['time_published'] - articles['time_published'].min()).dt.total_seconds() / (60 * 60 * 24)\n", "figure = make_iplot(articles, x = 'time_since_start', y = 'word_count', \n", "                    base_title='Word Count vs Time Since Start', eq_pos=(0.5, 0.75))\n", "iplot(figure)"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 62, "lines": ["figure = make_iplot(articles, x = 'time_since_start', y = 'claps', \n", "                    base_title='Claps vs Time Since Start', eq_pos=(0.5, 0.75))\n", "iplot(figure)"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 65, "lines": ["figure = make_iplot(articles, x = '<tag>Towards Data Science', y = 'claps', \n", "                    base_title='Claps vs Tag Towards Data Science', eq_pos=(0.5, 0.75))\n", "iplot(figure)"]}, {"block": 15, "type": "code", "linesLength": 0, "startIndex": 68, "lines": []}]