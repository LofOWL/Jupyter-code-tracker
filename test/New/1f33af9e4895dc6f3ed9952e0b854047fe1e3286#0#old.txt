[{"block": 0, "type": "code", "linesLength": 19, "startIndex": 0, "lines": ["# Pandas and numpy for data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "np.random.seed(42)\n", "\n", "from scipy import stats \n", "\n", "# Matplotlib and seaborn for plotting\n", "import matplotlib.pyplot as plt\n", "%matplotlib inline\n", "\n", "import matplotlib\n", "matplotlib.rcParams['font.size'] = 16\n", "\n", "import seaborn as sns\n", "\n", "from IPython.core.pylabtools import figsize\n", "\n", "from scipy.stats import percentileofscore"]}, {"block": 1, "type": "code", "linesLength": 10, "startIndex": 19, "lines": ["# Linear Regression and Random Forest for Comparison\n", "from sklearn.linear_model import LinearRegression\n", "from sklearn.ensemble import RandomForestRegressor\n", "\n", "# Splitting data into training/testing\n", "from sklearn.model_selection import train_test_split\n", "from sklearn.preprocessing import MinMaxScaler\n", "\n", "# Metrics\n", "from sklearn.metrics import mean_squared_error, mean_absolute_error, median_absolute_error"]}, {"block": 2, "type": "code", "linesLength": 9, "startIndex": 29, "lines": ["# Read in class scores\n", "df = pd.read_csv('data/student-mat.csv')\n", "\n", "# Filter out grades that were 0\n", "df = df[df['G3'] != 0]\n", "\n", "df = df.rename(columns={'G3': 'Score'})\n", "\n", "df.head()"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["df['Score'].describe()"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 39, "lines": ["plt.hist(df['Score'], fill = 'navy', bins=19, edgecolor = 'k')\n", "plt.xlabel('Grade'); plt.ylabel('Count'); plt.title('Distribution of Final Grades');"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["df['percentile'] = df['Score'].apply(lambda x: percentileofscore(df['Score'], x))"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 42, "lines": ["plt.figure(figsize = (8, 6))\n", "plt.plot(df['Score'], df['percentile'], 'o')\n", "plt.xticks(range(0, 20, 2), range(0, 20, 2))\n", "plt.xlabel('Score'); plt.ylabel('Percentile'); plt.title('Percentiles of Scores');"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 46, "lines": ["# Find Most Correlated Variables with Final Grade"]}, {"block": 8, "type": "code", "linesLength": 25, "startIndex": 47, "lines": ["def format_data(df):\n", "    # Targets are final grade of student\n", "    labels = df['Score']\n", "    # Drop the school and the grades from features\n", "    df = df.drop(columns=['school', 'G1', 'G2', 'Score', 'percentile'])\n", "    \n", "    # One-Hot Encoding of Categorical Variables\n", "    df = pd.get_dummies(df)\n", "    \n", "    df['y'] = list(labels)\n", "    \n", "    most_correlated = df.corr().abs()['y'].sort_values(ascending=False)\n", "    \n", "    # Maintain the top 8 most correlation features with score\n", "    most_correlated = most_correlated[:10]\n", "    \n", "    df = df.ix[:, most_correlated.index]\n", "    df = df.drop(columns = 'higher_no')\n", "    \n", "    # Split into training/testing sets with 25% split\n", "    X_train, X_test, y_train, y_test = train_test_split(df, labels, \n", "                                                        test_size = 0.25,\n", "                                                        random_state=42)\n", "    \n", "    return X_train, X_test, y_train, y_test"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 72, "lines": ["X_train, X_test, y_train, y_test = format_data(df)\n", "X_train.head()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 74, "lines": ["# Pair Plots of Variables"]}, {"block": 11, "type": "code", "linesLength": 13, "startIndex": 75, "lines": ["# Function to calculate correlation coefficients\n", "def corrfunc(x, y, **kws):\n", "    r, _ = stats.pearsonr(x, y)\n", "    ax = plt.gca()\n", "    ax.annotate(\"r = {:.2f}\".format(r), size = 12,\n", "                xy=(.1, .9), xycoords=ax.transAxes)\n", "\n", "# Pair grid with correlation coefficients\n", "g = sns.PairGrid(X_train, palette=[\"red\"])\n", "g.map_upper(plt.scatter, s=10)\n", "g.map_diag(sns.distplot, kde=False)\n", "g.map_lower(sns.kdeplot, cmap=\"Blues_d\")\n", "g.map_lower(corrfunc);"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 88, "lines": ["# Baseline Models"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 89, "lines": ["def evaluate_predictions(predictions, true):\n", "    rmse = np.sqrt(mean_squared_error(predictions, true))\n", "    mae = mean_absolute_error(predictions, true)\n", "    \n", "    return rmse, mae"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 94, "lines": ["median_pred = X_train['y'].median()\n", "median_preds = [median_pred for _ in range(len(X_test))]\n", "true = X_test['y']"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 97, "lines": ["mb_rmse, mb_mae = evaluate_predictions(median_preds, true)\n", "print('Median Baseline RMSE: {:.4f}.'.format(mb_rmse))\n", "print('Median Baseline MAE:  {:.4f}.'.format(mb_mae))"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["X_train.head()"]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 101, "lines": ["lm = LinearRegression()\n", "lm.fit(X_train.iloc[:, 1:], X_train['y'])"]}, {"block": 18, "type": "code", "linesLength": 4, "startIndex": 103, "lines": ["lm_pred = lm.predict(X_test.iloc[:, 1:])\n", "lm_rmse, lm_mae = evaluate_predictions(lm_pred, true)\n", "print('Linear Regression RMSE: {:.4f}.'.format(lm_rmse))\n", "print('Linear Regression MAE:  {:.4f}.'.format(lm_mae))"]}, {"block": 19, "type": "code", "linesLength": 0, "startIndex": 107, "lines": []}, {"block": 20, "type": "code", "linesLength": 0, "startIndex": 107, "lines": []}]