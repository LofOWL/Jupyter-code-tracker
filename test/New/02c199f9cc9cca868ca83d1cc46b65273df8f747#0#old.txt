[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["# Introduction\n", "State notebook purpose here"]}, {"block": 1, "type": "markdown", "linesLength": 2, "startIndex": 2, "lines": ["### Imports\n", "Import libraries and write settings here."]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 4, "lines": ["import datashader as ds"]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 5, "lines": ["from sqlalchemy import create_engine\n", "\n", "engine = create_engine('postgres://localhost:5432/global_fishing_watch')\n", "engine.table_names()"]}, {"block": 4, "type": "code", "linesLength": 7, "startIndex": 9, "lines": ["df = pd.read_sql(\"SELECT * FROM fishing_effort LIMIT 100000\", \n", "                 engine, parse_dates=['date'])\n", "df['lon'] = df['lon_bin'] / 100\n", "df['lat'] = df['lat_bin'] / 100\n", "\n", "\n", "df.head()"]}, {"block": 5, "type": "code", "linesLength": 5, "startIndex": 16, "lines": ["from datashader.utils import lnglat_to_meters\n", "import datashader.transfer_functions as tf\n", "\n", "df['x'], df['y'] = lnglat_to_meters(df['lon'], df['lat'])\n", "df.head()"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 21, "lines": ["cvs = ds.Canvas(plot_width=1000, plot_height=500)\n", "agg = cvs.points(df, 'x', 'y', ds.mean('fishing_hours'))\n", "img = tf.shade(agg, cmap=['lightblue', 'darkblue'], how='log')\n", "img"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["agg"]}, {"block": 8, "type": "code", "linesLength": 6, "startIndex": 26, "lines": ["bound = 20026376.39\n", "bounds = dict(x_range = (-bound, bound), y_range = (int(-bound*0.4), int(bound*0.6)))\n", "plot_width = 1000\n", "plot_height = int(plot_width*0.5)\n", "\n", "cvs = ds.Canvas(plot_width=plot_width, plot_height=plot_height, **bounds)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["tf.shade(agg, cmap=['red'])"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["s = 'string'\n"]}, {"block": 11, "type": "code", "linesLength": 30, "startIndex": 34, "lines": ["# Data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 50\n", "pd.options.display.max_rows = 30\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "from IPython import get_ipython\n", "ipython = get_ipython()\n", "\n", "# autoreload extension\n", "if 'autoreload' not in ipython.extension_manager.loaded:\n", "    %load_ext autoreload\n", "\n", "%autoreload 2\n", "\n", "# Visualizations\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.go_offline(connected=True)\n", "cf.set_config_file(theme='white')"]}, {"block": 12, "type": "markdown", "linesLength": 2, "startIndex": 64, "lines": ["# Analysis/Modeling\n", "Do work here"]}, {"block": 13, "type": "markdown", "linesLength": 2, "startIndex": 66, "lines": ["# Results\n", "Show graphs and stats here"]}, {"block": 14, "type": "markdown", "linesLength": 2, "startIndex": 68, "lines": ["# Conclusions and Next Steps\n", "Summarize findings here"]}, {"block": 15, "type": "code", "linesLength": 0, "startIndex": 70, "lines": []}]