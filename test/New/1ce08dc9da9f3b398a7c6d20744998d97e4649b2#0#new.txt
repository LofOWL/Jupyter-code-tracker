[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: IPython Widgets\n", "\n", "In this notebook, we will get an introduction to IPython widgets. These are useful tools that allow us to build interactivity in our notebooks for example, selecting certain data or updating charts."]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 3, "lines": ["Run the below cell if needed. You can also do this from the command line. If in Jupyter lab, [check out the instructions for that environment](https://ipywidgets.readthedocs.io/en/stable/user_install.html). "]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["!pip install -U -q ipywidgets\n", "!jupyter nbextension enable --py widgetsnbextension"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 6, "lines": ["%load_ext autoreload\n", "%autoreload 2"]}, {"block": 4, "type": "code", "linesLength": 20, "startIndex": 8, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.go_offline(connected=True)\n", "cf.set_config_file(colorscale='plotly', world_readable=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n"]}, {"block": 5, "type": "code", "linesLength": 6, "startIndex": 28, "lines": ["import ipywidgets as widgets\n", "from ipywidgets import interact \n", "\n", "df = pd.read_parquet('https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/data/medium_data_2019_01_06?raw=true')\n", "df.head()\n", "df.describe()"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 34, "lines": ["import os\n", "from IPython.display import Image, display"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["# Image Browser"]}, {"block": 8, "type": "code", "linesLength": 5, "startIndex": 37, "lines": ["fdir = 'nature/'\n", "\n", "@interact\n", "def show_images(file=os.listdir(fdir)):\n", "    display(Image(fdir+file))"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["# File Browser"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["!ls -a -t -r -l"]}, {"block": 11, "type": "code", "linesLength": 9, "startIndex": 44, "lines": ["import subprocess\n", "import pprint\n", "\n", "root_dir = '../../Data-Analysis/'\n", "\n", "@interact\n", "def show_dir(dir=os.listdir(root_dir)):\n", "    x = subprocess.check_output(f\"cd {root_dir}{dir} && ls -a -t -r -l -h\", shell=True).decode()\n", "    print(x)"]}, {"block": 12, "type": "code", "linesLength": 2, "startIndex": 53, "lines": ["from ipywidgets import interact, interactive\n", "from IPython.display import clear_output, display, HTML"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 55, "lines": ["# Dataframe Explorer"]}, {"block": 14, "type": "code", "linesLength": 4, "startIndex": 56, "lines": ["@interact\n", "def correlations(column1=list(df.select_dtypes('number').columns), \n", "                 column2=list(df.select_dtypes('number').columns)):\n", "    print(f\"Correlation: {df[column1].corr(df[column2])}\")"]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 60, "lines": ["@interact\n", "def describe(column=list(df.columns)):\n", "    print(df[column].describe())"]}, {"block": 16, "type": "code", "linesLength": 5, "startIndex": 63, "lines": ["@interact\n", "def scatter_plot(x=list(df.select_dtypes('number').columns), \n", "                 y=list(df.select_dtypes('number').columns)[1:]):\n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             xTitle=x.title(), yTitle=y.title(), title=f'{y.title()} vs {x.title()}')"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 68, "lines": ["import cufflinks as cf"]}, {"block": 18, "type": "code", "linesLength": 11, "startIndex": 69, "lines": ["@interact\n", "def scatter_plot(x=list(df.select_dtypes('number').columns), \n", "                 y=list(df.select_dtypes('number').columns)[1:],\n", "                 theme=list(cf.themes.THEMES.keys()), \n", "                 colorscale=list(cf.colors._scales_names.keys())):\n", "    \n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             xTitle=x.title(), yTitle=y.title(), \n", "             text='title',\n", "             title=f'{y.title()} vs {x.title()}',\n", "            theme=theme, colorscale=colorscale)"]}, {"block": 19, "type": "code", "linesLength": 19, "startIndex": 80, "lines": ["df['binned_read_time'] = pd.cut(df['read_time'], bins=range(0, 56, 5))\n", "df['binned_read_time'] = df['binned_read_time'].astype(str)\n", "\n", "df['binned_word_count'] = pd.cut(df['word_count'], bins=range(0, 100001, 1000))\n", "df['binned_word_count'] = df['binned_word_count'].astype(str)\n", "\n", "@interact\n", "def scatter_plot(x=list(df.select_dtypes('number').columns), \n", "                 y=list(df.select_dtypes('number').columns)[1:],\n", "                 categories=['binned_read_time', 'binned_word_count', 'publication', 'type'],\n", "                 theme=list(cf.themes.THEMES.keys()), \n", "                 colorscale=list(cf.colors._scales_names.keys())):\n", "    \n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             categories=categories, \n", "             xTitle=x.title(), yTitle=y.title(), \n", "             text='title',\n", "             title=f'{y.title()} vs {x.title()}',\n", "             theme=theme, colorscale=colorscale)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 99, "lines": ["from ipywidgets import interact_manual"]}, {"block": 21, "type": "code", "linesLength": 13, "startIndex": 100, "lines": ["@interact_manual\n", "def scatter_plot(x=list(df.select_dtypes('number').columns), \n", "                 y=list(df.select_dtypes('number').columns)[1:],\n", "                 categories=['binned_read_time', 'binned_word_count', 'publication', 'type'],\n", "                 theme=list(cf.themes.THEMES.keys()), \n", "                 colorscale=list(cf.colors._scales_names.keys())):\n", "    \n", "    df.iplot(kind='scatter', x=x, y=y, mode='markers', \n", "             categories=categories, \n", "             xTitle=x.title(), yTitle=y.title(), \n", "             text='title',\n", "             title=f'{y.title()} vs {x.title()}',\n", "             theme=theme, colorscale=colorscale)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 113, "lines": ["df.set_index('published_date', inplace=True)"]}, {"block": 23, "type": "code", "linesLength": 8, "startIndex": 114, "lines": ["def plot_up_to(column, date):\n", "    date = pd.Timestamp(date)\n", "    plot_df = df[df.index <= date]\n", "    plot_df[column].cumsum().iplot(mode='markers+lines', xTitle='published date', yTitle=column,\n", "                                  title=f'{column.title()} Until {date.date()}')\n", "    \n", "_ = interact(plot_up_to, column=widgets.Dropdown(options=list(df.columns)), \n", "         date = widgets.DatePicker(value=pd.to_datetime('2019-01-01')))"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 122, "lines": ["plot = interactive(plot_up_to, column=widgets.Dropdown(options=list(df.columns)), \n", "         date = widgets.DatePicker(value=pd.to_datetime('2019-01-01')))"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 124, "lines": ["plot"]}, {"block": 26, "type": "code", "linesLength": 2, "startIndex": 125, "lines": ["corrs = df.corr()\n", "corrs"]}, {"block": 27, "type": "code", "linesLength": 0, "startIndex": 127, "lines": []}]