[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["# Introduction\n", "State notebook purpose here"]}, {"block": 1, "type": "markdown", "linesLength": 2, "startIndex": 2, "lines": ["### Imports\n", "Import libraries and write settings here."]}, {"block": 2, "type": "code", "linesLength": 9, "startIndex": 4, "lines": ["import geoviews as gv\n", "import geoviews.feature as gf\n", "import xarray as xr\n", "from cartopy import crs\n", "\n", "import pandas as pd\n", "import numpy as np\n", "\n", "gv.extension('bokeh', 'matplotlib')"]}, {"block": 3, "type": "code", "linesLength": 12, "startIndex": 13, "lines": ["times = pd.date_range('2000-01-01', '2001-12-31', name='time')\n", "annual_cycle = np.sin(2 * np.pi * (times.dayofyear.values / 365.25 - 0.28))\n", "\n", "base = 10 + 15 * annual_cycle.reshape(-1, 1)\n", "tmin_values = base + 3 * np.random.randn(annual_cycle.size, 3)\n", "tmax_values = base + 10 + 3 * np.random.randn(annual_cycle.size, 3)\n", "\n", "ds = xr.Dataset({'tmin': (('time', 'location'), tmin_values),\n", "                 'tmax': (('time', 'location'), tmax_values)},\n", "                {'time': times, 'location': ['IA', 'IN', 'IL']})\n", "\n", "ds"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 25, "lines": ["test = xr.Dataset({'value1': (('a', 'b'), [[1, 2, 3, 4], [2, 3, 4, 5]])},\n", "           {'a': [1, 2], 'b': [5, 6, 7, 8]})\n", "test"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["test.to_dataframe()"]}, {"block": 6, "type": "code", "linesLength": 11, "startIndex": 29, "lines": ["from sqlalchemy import create_engine\n", "engine = create_engine('postgres://localhost:5432/global_fishing_watch')\n", "engine.table_names()\n", "df = pd.read_sql(\"\"\"SELECT * FROM fishing_effort LIMIT 100000\"\"\",\n", "                 engine, parse_dates=['date']) \n", "                 \n", "df['flag'] = df['flag'].astype('category')\n", "df['geartype'] = df['geartype'].astype('category')\n", "df['lat'] = df['lat_bin'] / 100\n", "df['lon'] = df['lon_bin'] / 100\n", "df.info()"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 40, "lines": ["index = pd.MultiIndex.from_arrays([df['lat'], df['lon'], df['date']])\n", "df.index = index\n", "df.head()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["df.sort_index().head()"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 44, "lines": ["xdata = xr.Dataset.from_dataframe(df[['vessel_hours', \n", "                             'fishing_hours', \n", "                              'mmsi_present']].sort_index().iloc[:100])\n", "xdata"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["!pii"]}, {"block": 11, "type": "code", "linesLength": 15, "startIndex": 49, "lines": ["import numpy as np\n", "import xarray as xr\n", "import holoviews as hv\n", "import geoviews as gv\n", "import geoviews.feature as gf\n", "\n", "from cartopy import crs\n", "from geoviews import opts\n", "\n", "gv.extension('matplotlib')\n", "\n", "gv.output(size=150)\n", "\n", "xr_ensemble = xr.open_dataset('geoviews-examples/data/ensemble.nc').load()\n", "xr_ensemble"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["xr_ensemble.to_dataframe()"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 65, "lines": ["df = pd.read_csv('air-quality_real_time.csv', parse_dates=['timestamp'])\n", "df.head()\n", "\n", "vc = df.groupby(['latitude', 'longitude'])['timestamp'].count()\n", "vc.nlargest(10)"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 70, "lines": ["keeps = vc[vc == 7].reset_index()\n", "\n", "df_subset.shape"]}, {"block": 15, "type": "code", "linesLength": 8, "startIndex": 73, "lines": ["df_subset = df.loc[(df['latitude'].isin(keeps['latitude'])) & (df['longitude'].isin(keeps['longitude']))]\n", "df_subset = df_subset[['location', 'pollutant', 'value', \n", "                       'timestamp', 'latitude', 'longitude']].copy()\n", "index = pd.MultiIndex.from_arrays([df_subset['location'], \n", "                                   df_subset['pollutant'],\n", "                                  df_subset['latitude'],\n", "                                df_subset['longitude']])\n", "df_subset = df_subset.drop(columns=['location', 'pollutant', 'latitude', 'longitude'])"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 81, "lines": ["df_subset.index = index\n", "df_subset.head()"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 83, "lines": ["df.head()"]}, {"block": 18, "type": "code", "linesLength": 5, "startIndex": 84, "lines": ["import datashader as ds\n", "import datashader.transfer_functions as tf\n", "\n", "cvs = ds.Canvas(plot_height=600, plot_width=1000)\n", "agg = cvs.points(df, 'longitude', 'latitude', agg=ds.mean('value'))"]}, {"block": 19, "type": "code", "linesLength": 16, "startIndex": 89, "lines": ["import geoviews as gv\n", "import geoviews.feature as gf\n", "\n", "from geoviews import opts\n", "from cartopy import crs\n", "\n", "gv.extension('bokeh', 'matplotlib')\n", "\n", "nyc, beijing = (-74.0, 40.7, 'NYC'), (116.4, 39.9, 'Beijing')\n", "london = (14471.53, 6712008., 'London')\n", "\n", "cities_lonlat   = gv.Points([nyc, beijing], vdims='City')\n", "cities_mercator = gv.Points([london], crs=crs.GOOGLE_MERCATOR, vdims='City')\n", "\n", "(gv.tile_sources.Wikipedia * cities_lonlat * cities_mercator).opts(\n", "    opts.Points(global_extent=True, width=500, height=475, size=12, color='black'))"]}, {"block": 20, "type": "code", "linesLength": 4, "startIndex": 105, "lines": ["features = gv.Overlay([gf.ocean, gf.land, gf.rivers, gf.lakes, gf.borders,\n", "                       gf.coastline])\n", "\n", "gv.output(features, backend='matplotlib', fig='svg', size=300) "]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 109, "lines": ["gdata = gv.Dataset(agg, kdims=['longitude', 'latitude'], vdims=['value'])\n", "gdata"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["gdata.to(gv.Image, ['latitude', 'longitude']) * gf.coastline"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 112, "lines": ["agg * gf.coastline"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 113, "lines": ["ds(agg)"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 114, "lines": ["gf.land * gdata.to(gv.Image)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 115, "lines": ["img = tf.shade(agg, cmap=['blue'], how='log')"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 116, "lines": ["img.data"]}, {"block": 28, "type": "code", "linesLength": 0, "startIndex": 117, "lines": []}, {"block": 29, "type": "code", "linesLength": 2, "startIndex": 117, "lines": ["data = xr.Dataset.from_dataframe(df_subset)\n", "data"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 119, "lines": ["type(data)"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 120, "lines": ["gdata = gv.Dataset(data, kdims=['longitude', 'latitude'], vdims=['value'])\n", "gdata"]}, {"block": 32, "type": "code", "linesLength": 1, "startIndex": 122, "lines": ["gdata.to(gv.Image, ['longitude', 'latitude'])"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 123, "lines": ["pd.options.display.max_rows = 200\n", "df_subset"]}, {"block": 34, "type": "code", "linesLength": 4, "startIndex": 125, "lines": ["vc = df.groupby('location')['timestamp'].count()\n", "import matplotlib.pyplot as plt\n", "%plt inline\n", "vc.plot.bar()"]}, {"block": 35, "type": "code", "linesLength": 5, "startIndex": 129, "lines": ["ds = xr.Dataset({'air_quality': (('latitude', 'longitude'), \n", "                                 df['value'].values)},\n", "                {'latitude': np.array(df['latitude'].values).reshape((-1, 1)), \n", "                 'longitude': np.array(df['longitude'].values).reshape((-1, 1))})\n", "ds"]}, {"block": 36, "type": "code", "linesLength": 4, "startIndex": 134, "lines": ["ds = xr.Dataset({'latitude': xr.DataArray(df['latitude']),\n", "                 'longitude': xr.DataArray(df['longitude']),\n", "                 'time': xr.DataArray(df['timestamp'])})\n", "ds"]}, {"block": 37, "type": "code", "linesLength": 2, "startIndex": 138, "lines": ["xr_ensemble = xr.open_dataset('geoviews-examples/data/ensemble.nc')\n", "xr_ensemble"]}, {"block": 38, "type": "code", "linesLength": 0, "startIndex": 140, "lines": []}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 140, "lines": ["xr_ensemble"]}, {"block": 40, "type": "code", "linesLength": 3, "startIndex": 141, "lines": ["tr = xr.DataArray(df, coords={'latitude': 'latitude', 'longitude': 'longitude',\n", "                         'time':'timestamp'})\n", "tr"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 144, "lines": ["xr.Dataset()"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 145, "lines": ["xr.DataArray(df, coords=['latitude', 'longitude'], dims=['value'])"]}, {"block": 43, "type": "code", "linesLength": 30, "startIndex": 146, "lines": ["# Data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 50\n", "pd.options.display.max_rows = 30\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "from IPython import get_ipython\n", "ipython = get_ipython()\n", "\n", "# autoreload extension\n", "if 'autoreload' not in ipython.extension_manager.loaded:\n", "    %load_ext autoreload\n", "\n", "%autoreload 2\n", "\n", "# Visualizations\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.go_offline(connected=True)\n", "cf.set_config_file(theme='white')"]}, {"block": 44, "type": "markdown", "linesLength": 2, "startIndex": 176, "lines": ["# Analysis/Modeling\n", "Do work here"]}, {"block": 45, "type": "markdown", "linesLength": 2, "startIndex": 178, "lines": ["# Results\n", "Show graphs and stats here"]}, {"block": 46, "type": "markdown", "linesLength": 2, "startIndex": 180, "lines": ["# Conclusions and Next Steps\n", "Summarize findings here"]}, {"block": 47, "type": "code", "linesLength": 0, "startIndex": 182, "lines": []}]