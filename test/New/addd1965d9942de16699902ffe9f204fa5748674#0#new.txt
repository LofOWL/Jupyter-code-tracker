[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n", "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction:-Plotting-with-Plotly-+-Cufflinks-in-Python\" data-toc-modified-id=\"Introduction:-Plotting-with-Plotly-+-Cufflinks-in-Python-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Introduction: Plotting with Plotly + Cufflinks in Python</a></span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Data\" data-toc-modified-id=\"Data-1.0.1\"><span class=\"toc-item-num\">1.0.1&nbsp;&nbsp;</span>Data</a></span></li></ul></li><li><span><a href=\"#Kinds-of-Plots\" data-toc-modified-id=\"Kinds-of-Plots-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>Kinds of Plots</a></span></li></ul></li><li><span><a href=\"#Univariate-(Single-Variable)-Distributions\" data-toc-modified-id=\"Univariate-(Single-Variable)-Distributions-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Univariate (Single Variable) Distributions</a></span><ul class=\"toc-item\"><li><span><a href=\"#Histograms\" data-toc-modified-id=\"Histograms-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>Histograms</a></span><ul class=\"toc-item\"><li><span><a href=\"#Percentage-Histogram\" data-toc-modified-id=\"Percentage-Histogram-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;</span>Percentage Histogram</a></span></li></ul></li><li><span><a href=\"#Grouped-Histogram\" data-toc-modified-id=\"Grouped-Histogram-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Grouped Histogram</a></span></li><li><span><a href=\"#Overlaid-Histogram\" data-toc-modified-id=\"Overlaid-Histogram-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Overlaid Histogram</a></span></li><li><span><a href=\"#Bar-Plot\" data-toc-modified-id=\"Bar-Plot-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>Bar Plot</a></span><ul class=\"toc-item\"><li><span><a href=\"#Bar-Plot-with-Two-Categories\" data-toc-modified-id=\"Bar-Plot-with-Two-Categories-2.4.1\"><span class=\"toc-item-num\">2.4.1&nbsp;&nbsp;</span>Bar Plot with Two Categories</a></span></li></ul></li><li><span><a href=\"#Bar-Plot-with-Second-Y-Axis\" data-toc-modified-id=\"Bar-Plot-with-Second-Y-Axis-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;</span>Bar Plot with Second Y-Axis</a></span></li><li><span><a href=\"#Boxplot\" data-toc-modified-id=\"Boxplot-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;</span>Boxplot</a></span><ul class=\"toc-item\"><li><span><a href=\"#Boxplot-with-Different-Categories\" data-toc-modified-id=\"Boxplot-with-Different-Categories-2.6.1\"><span class=\"toc-item-num\">2.6.1&nbsp;&nbsp;</span>Boxplot with Different Categories</a></span></li></ul></li></ul></li><li><span><a href=\"#Scatter-Plots\" data-toc-modified-id=\"Scatter-Plots-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Scatter Plots</a></span><ul class=\"toc-item\"><li><span><a href=\"#Time-Series\" data-toc-modified-id=\"Time-Series-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Time-Series</a></span></li><li><span><a href=\"#Text-Annotations-on-Plot\" data-toc-modified-id=\"Text-Annotations-on-Plot-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>Text Annotations on Plot</a></span></li><li><span><a href=\"#Two-Numeric-Variables-Scatterplot\" data-toc-modified-id=\"Two-Numeric-Variables-Scatterplot-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;</span>Two Numeric Variables Scatterplot</a></span></li><li><span><a href=\"#Two-Variables-with-Best-Fit-Line\" data-toc-modified-id=\"Two-Variables-with-Best-Fit-Line-3.4\"><span class=\"toc-item-num\">3.4&nbsp;&nbsp;</span>Two Variables with Best Fit Line</a></span></li><li><span><a href=\"#Log-Scale\" data-toc-modified-id=\"Log-Scale-3.5\"><span class=\"toc-item-num\">3.5&nbsp;&nbsp;</span>Log Scale</a></span></li><li><span><a href=\"#Scatterplot-By-Category\" data-toc-modified-id=\"Scatterplot-By-Category-3.6\"><span class=\"toc-item-num\">3.6&nbsp;&nbsp;</span>Scatterplot By Category</a></span></li></ul></li><li><span><a href=\"#More-than-2-Variables\" data-toc-modified-id=\"More-than-2-Variables-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>More than 2 Variables</a></span><ul class=\"toc-item\"><li><span><a href=\"#Secondary-Y-Axis\" data-toc-modified-id=\"Secondary-Y-Axis-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Secondary Y-Axis</a></span></li><li><span><a href=\"#Three-Variables-with-a-Category\" data-toc-modified-id=\"Three-Variables-with-a-Category-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>Three Variables with a Category</a></span></li><li><span><a href=\"#Three-Numeric-Variables\" data-toc-modified-id=\"Three-Numeric-Variables-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;</span>Three Numeric Variables</a></span></li><li><span><a href=\"#Four-Variables\" data-toc-modified-id=\"Four-Variables-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;</span>Four Variables</a></span></li><li><span><a href=\"#Five-Variables\" data-toc-modified-id=\"Five-Variables-4.5\"><span class=\"toc-item-num\">4.5&nbsp;&nbsp;</span>Five Variables</a></span></li></ul></li><li><span><a href=\"#Scatter-Matrix\" data-toc-modified-id=\"Scatter-Matrix-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Scatter Matrix</a></span></li><li><span><a href=\"#Heatmap\" data-toc-modified-id=\"Heatmap-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>Heatmap</a></span></li><li><span><a href=\"#Spread\" data-toc-modified-id=\"Spread-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;</span>Spread</a></span></li><li><span><a href=\"#Ratio\" data-toc-modified-id=\"Ratio-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;</span>Ratio</a></span></li><li><span><a href=\"#Themes\" data-toc-modified-id=\"Themes-9\"><span class=\"toc-item-num\">9&nbsp;&nbsp;</span>Themes</a></span><ul class=\"toc-item\"><li><span><a href=\"#Colorscales-in-cufflinks\" data-toc-modified-id=\"Colorscales-in-cufflinks-9.1\"><span class=\"toc-item-num\">9.1&nbsp;&nbsp;</span>Colorscales in cufflinks</a></span></li><li><span><a href=\"#Colorscales-in-Plotly\" data-toc-modified-id=\"Colorscales-in-Plotly-9.2\"><span class=\"toc-item-num\">9.2&nbsp;&nbsp;</span>Colorscales in Plotly</a></span></li></ul></li><li><span><a href=\"#Pie-Chart\" data-toc-modified-id=\"Pie-Chart-10\"><span class=\"toc-item-num\">10&nbsp;&nbsp;</span>Pie Chart</a></span></li><li><span><a href=\"#3D-Surface-Plot\" data-toc-modified-id=\"3D-Surface-Plot-11\"><span class=\"toc-item-num\">11&nbsp;&nbsp;</span>3D Surface Plot</a></span></li><li><span><a href=\"#3D-Scatter-Plot\" data-toc-modified-id=\"3D-Scatter-Plot-12\"><span class=\"toc-item-num\">12&nbsp;&nbsp;</span>3D Scatter Plot</a></span></li><li><span><a href=\"#3D-Bubble-Chart\" data-toc-modified-id=\"3D-Bubble-Chart-13\"><span class=\"toc-item-num\">13&nbsp;&nbsp;</span>3D Bubble Chart</a></span></li><li><span><a href=\"#Editing-in-Plot-Studio\" data-toc-modified-id=\"Editing-in-Plot-Studio-14\"><span class=\"toc-item-num\">14&nbsp;&nbsp;</span>Editing in Plot Studio</a></span></li><li><span><a href=\"#Conclusions\" data-toc-modified-id=\"Conclusions-15\"><span class=\"toc-item-num\">15&nbsp;&nbsp;</span>Conclusions</a></span></li></ul></div>"]}, {"block": 1, "type": "markdown", "linesLength": 5, "startIndex": 2, "lines": ["# Introduction: Plotting with Plotly + Cufflinks in Python\n", "\n", "In this notebook, we will see how to use [plotly](https://plot.ly/python/) and [cufflinks](https://github.com/santosjorge/cufflinks) to create interactive stunning figures in Python. This combination of libraries is extremely powerful and, in my opinion, much more efficient than other methods of plotting in Python.\n", "\n", "We'll stick mostly to basic graphs, focusing on what we can do in one line of code (for the most part). Before you get started, you'll want to head to [Plotly](https://help.plot.ly/how-to-sign-up-to-plotly/#step-1-create-your-free-account) and create an account to get a username and api key. Then run the cell below. "]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 7, "lines": ["    import plotly \n", "    # Replace with your information\n", "    plotly.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 10, "lines": ["The Plotly Python library is an open-source version of the [Plotly](https://plot.ly/) visualization software made by Plotly. You can create a free account and upload your graphs to share with others (this requires making the graphs and data public). We will run plotly completely in offline mode which means that we won't be publishing any of our graphs online. However, we can still open up any of the plots in the Plotly [chart studio](https://plot.ly/create/#/) and edit them for a presentation. "]}, {"block": 4, "type": "code", "linesLength": 17, "startIndex": 11, "lines": ["# plotly standard imports\n", "import plotly.graph_objs as go\n", "import plotly.plotly as py\n", "\n", "# Cufflinks wrapper on plotly\n", "import cufflinks\n", "\n", "# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 30\n", "\n", "# Display all cell outputs\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "from IPython.core.interactiveshell import InteractiveShell"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 28, "lines": ["We'll be using plotly + cufflinks in offline mode. We will also set the global `cufflinks` theme to `pearl`. Later we'll take a look at the other theme options."]}, {"block": 6, "type": "code", "linesLength": 5, "startIndex": 29, "lines": ["from plotly.offline import iplot\n", "cufflinks.go_offline()\n", "\n", "# Set global theme\n", "cufflinks.set_config_file(world_readable=True, theme='pearl')"]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 34, "lines": ["### Data\n", "\n", "We are using my medium article statistics data. See [this article](https://towardsdatascience.com/analyzing-medium-story-stats-with-python-24c6491a8ff0) for how to use your own Medium data! "]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 37, "lines": ["df = pd.read_parquet('data/medium_data_2019_01_06')\n", "df.head()"]}, {"block": 9, "type": "markdown", "linesLength": 9, "startIndex": 39, "lines": ["## Kinds of Plots\n", "\n", "We can make any of the following plots:\n", "\n", "       scatter, bar, box, spread\n", "       ratio, heatmap, surface\n", "       histogram, bubble, bubble3d\n", "       scatter3d, scattergeo, ohlc\n", "       candle, pie, choroplet"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["# Univariate (Single Variable) Distributions"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 49, "lines": ["## Histograms"]}, {"block": 12, "type": "code", "linesLength": 7, "startIndex": 50, "lines": ["df['claps'].iplot(\n", "    kind='hist',\n", "    bins=30,\n", "    xTitle='claps',\n", "    linecolor='black',\n", "    yTitle='count',\n", "    title='Claps Distribution')"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 57, "lines": ["### Percentage Histogram"]}, {"block": 14, "type": "code", "linesLength": 8, "startIndex": 58, "lines": ["df['claps'].iplot(\n", "    kind='hist',\n", "    bins=30,\n", "    xTitle='claps',\n", "    linecolor='black',\n", "    histnorm='percent',\n", "    yTitle='percentage (%)',\n", "    title='Claps Distribution in Percent')"]}, {"block": 15, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## Grouped Histogram"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 67, "lines": ["def to_time(dt):\n", "    return dt.hour + dt.minute / 60"]}, {"block": 17, "type": "code", "linesLength": 14, "startIndex": 69, "lines": ["df['time_started'] = df['started_date'].apply(to_time)\n", "df['time_published'] = df['published_date'].apply(to_time)\n", "\n", "df[['time_started', 'time_published']].iplot(\n", "    kind='hist',\n", "    linecolor='black',\n", "    bins=24,\n", "    histnorm='percent',\n", "    bargap=0.1,\n", "    opacity=0.8,\n", "    barmode='group',\n", "    xTitle='Time of Day',\n", "    yTitle='(%) of Articles',\n", "    title='Time Started and Time Published')"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["## Overlaid Histogram"]}, {"block": 19, "type": "code", "linesLength": 10, "startIndex": 84, "lines": ["df[['time_published', 'time_started']].iplot(\n", "    kind='hist',\n", "    bins=48,\n", "    linecolor='black',\n", "    opacity=0.8,\n", "    histnorm='percent',\n", "    barmode='overlay',\n", "    xTitle='Time of day',\n", "    yTitle='(%) of articles',\n", "    title='Time Started and Time Published Overlaid')"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["## Bar Plot"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 95, "lines": ["df.groupby('publication').count().iloc[:, 0].iplot(\n", "    kind='bar', yTitle='Number of Articles', title='Articles by Publication')"]}, {"block": 22, "type": "code", "linesLength": 7, "startIndex": 97, "lines": ["df[[c for c in df if '<tag>' in c]].sum().iplot(\n", "    kind='bar',\n", "    xTitle='Tag',\n", "    yTitle='Number of Articles',\n", "    title='Number of Articles by Tag',\n", "    linecolor='black',\n", "    sortbars=True)"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 104, "lines": ["### Bar Plot with Two Categories"]}, {"block": 24, "type": "code", "linesLength": 8, "startIndex": 105, "lines": ["df2 = df[['views', 'reads',\n", "          'published_date']].copy().set_index('published_date').resample('M')\n", "\n", "df2.mean().iplot(\n", "    kind='bar',\n", "    xTitle='Date',\n", "    yTitle='Average',\n", "    title='Monthly Average Views and Reads')"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 113, "lines": ["## Bar Plot with Second Y-Axis"]}, {"block": 26, "type": "code", "linesLength": 10, "startIndex": 114, "lines": ["df2 = df[['views', 'reads',\n", "          'published_date']].copy().set_index('published_date').resample('M')\n", "\n", "df2.mean().iplot(\n", "    kind='bar',\n", "    xTitle='Date',\n", "    secondary_y='reads',\n", "    secondary_y_title='Views',\n", "    yTitle='Average Views',\n", "    title='Monthly Averages')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 124, "lines": ["## Boxplot"]}, {"block": 28, "type": "code", "linesLength": 2, "startIndex": 125, "lines": ["df[['claps', 'fans']].iplot(\n", "    kind='box', yTitle='Number', title='Box Plot of Claps and Fans')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["### Boxplot with Different Categories"]}, {"block": 30, "type": "code", "linesLength": 9, "startIndex": 128, "lines": ["df.pivot(\n", "    columns='publication', values='fans').iplot(\n", "        kind='box',\n", "        xTitle='publication',\n", "        layout=dict(\n", "            yaxis=dict(title='claps'),\n", "            title='Claps by Publication',\n", "            margin=dict(b=140)),\n", "        theme='white')"]}, {"block": 31, "type": "code", "linesLength": 6, "startIndex": 137, "lines": ["df[df['read_time'] <= 10].pivot(\n", "    columns='read_time', values='reads').iplot(\n", "        kind='box',\n", "        xTitle='Read Time',\n", "        yTitle='Number of Reads',\n", "        title='Box Plot of Views by Reading Time')"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 143, "lines": ["# Scatter Plots\n", "\n", "The scatter plot is a simple yet effective method for visualizing the relationship between two variables. There are many ways we can make scatterplots in plotly + cufflinks."]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 146, "lines": ["## Time-Series"]}, {"block": 34, "type": "code", "linesLength": 13, "startIndex": 147, "lines": ["tds = df[df['publication'] == 'Towards Data Science'].set_index(\n", "    'published_date')\n", "\n", "tds.iplot(\n", "    mode='lines+markers',\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Read Time (min)',\n", "    y='read_time',\n", "    text='title',\n", "    title='Read Time Trends')"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 160, "lines": ["## Text Annotations on Plot"]}, {"block": 36, "type": "code", "linesLength": 16, "startIndex": 161, "lines": ["tds_monthly_totals = tds.resample('M').sum()\n", "text = [\n", "    f'{m}<br>words: {w:.0f}'\n", "    for m, w in zip(tds_monthly_totals.index.month_name(),\n", "                    tds_monthly_totals['word_count'])\n", "]\n", "\n", "tds_monthly_totals.iplot(\n", "    mode='lines+markers+text',\n", "    text=text,\n", "    y='word_count',\n", "    opacity=0.8,\n", "    theme='white',\n", "    xTitle='Date',\n", "    yTitle='Word Count',\n", "    title='Total Word Count by Month')"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 177, "lines": ["## Two Numeric Variables Scatterplot"]}, {"block": 38, "type": "code", "linesLength": 8, "startIndex": 178, "lines": ["tds.iplot(\n", "    x='word_count',\n", "    y='views',\n", "    xTitle='Word Count',\n", "    yTitle='views',\n", "    text='title',\n", "    mode='markers',\n", "    title='Views vs Word Count')"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 186, "lines": ["## Two Variables with Best Fit Line"]}, {"block": 40, "type": "code", "linesLength": 10, "startIndex": 187, "lines": ["tds.sort_values('word_count').iplot(\n", "    x='word_count',\n", "    y='views',\n", "    bestfit=True,\n", "    bestfit_colors=['blue'],\n", "    xTitle='Word Count',\n", "    yTitle='views',\n", "    text='title',\n", "    mode='markers',\n", "    title='Views vs Word Count')"]}, {"block": 41, "type": "markdown", "linesLength": 1, "startIndex": 197, "lines": ["## Log Scale"]}, {"block": 42, "type": "code", "linesLength": 13, "startIndex": 198, "lines": ["layout = dict(\n", "    xaxis=dict(type='log', title='Word Count'),\n", "    yaxis=dict(title='views'),\n", "    title='Views vs Word Count Log Axis')\n", "\n", "tds.sort_values('word_count').iplot(\n", "    x='word_count',\n", "    y='views',\n", "    layout=layout,\n", "    text='title',\n", "    mode='markers',\n", "    bestfit=True,\n", "    bestfit_colors=['blue'])"]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 211, "lines": ["## Scatterplot By Category"]}, {"block": 44, "type": "code", "linesLength": 11, "startIndex": 212, "lines": ["df.pivot_table(\n", "    values='views', index='published_date',\n", "    columns='publication').cumsum().iplot(\n", "        mode='markers+lines',\n", "        theme='white',\n", "        size=8,\n", "        symbol=[1, 2, 3, 4, 5],\n", "        layout=dict(\n", "            xaxis=dict(title='Date'),\n", "            yaxis=dict(type='log', title='Total Views'),\n", "            title='Total Views over Time by Publication'))"]}, {"block": 45, "type": "markdown", "linesLength": 4, "startIndex": 223, "lines": ["# More than 2 Variables\n", "\n", "We can expand to greater than 2 variables by encoding information in the colors, size of markers, or symbols. We can also use secondary y-axes for more information.\n", "\n"]}, {"block": 46, "type": "markdown", "linesLength": 1, "startIndex": 227, "lines": ["## Secondary Y-Axis"]}, {"block": 47, "type": "code", "linesLength": 8, "startIndex": 228, "lines": ["tds[['reads', 'read_ratio']].iplot(\n", "    y='reads',\n", "    secondary_y='read_ratio',\n", "    xTitle='Date',\n", "    yTitle='Reads',\n", "    secondary_y_title='Read Ratio',\n", "    mode='markers+lines',\n", "    title='Reads and Read Ratio over Time')"]}, {"block": 48, "type": "code", "linesLength": 11, "startIndex": 236, "lines": ["tds[['word_count', 'reads', 'read_ratio', 'title']].iplot(\n", "    x='word_count',\n", "    y='reads',\n", "    secondary_y='read_ratio',\n", "    xTitle='Word Count',\n", "    yTitle='Reads',\n", "    secondary_y_title='Read Ratio',\n", "    mode='markers',\n", "    size=10,\n", "    text='title',\n", "    title='Reads and Read Ratio vs Number of Words')"]}, {"block": 49, "type": "markdown", "linesLength": 1, "startIndex": 247, "lines": ["## Three Variables with a Category"]}, {"block": 50, "type": "code", "linesLength": 11, "startIndex": 248, "lines": ["df.iplot(\n", "    x='word_count',\n", "    y='views',\n", "    categories='publication',\n", "    mode='markers',\n", "    text='title',\n", "    size=8,\n", "    layout=dict(\n", "        xaxis=dict(title='Word Count'),\n", "        yaxis=dict(title='Views'),\n", "        title='Views vs Word Count by Publication'))"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 259, "lines": ["## Three Numeric Variables"]}, {"block": 52, "type": "code", "linesLength": 16, "startIndex": 260, "lines": ["text = [\n", "    f'Title: {t} <br> Ratio: {r:.2f}%'\n", "    for t, r in zip(tds['title'], tds['read_ratio'])\n", "]\n", "\n", "tds.iplot(\n", "    x='word_count',\n", "    y='reads',\n", "    opacity=0.8,\n", "    size=tds['read_ratio'],\n", "    text=text,\n", "    mode='markers',\n", "    layout=dict(\n", "        xaxis=dict(type='log', title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Log Word Count Sized by Read Ratio'))"]}, {"block": 53, "type": "markdown", "linesLength": 1, "startIndex": 276, "lines": ["## Four Variables"]}, {"block": 54, "type": "code", "linesLength": 24, "startIndex": 277, "lines": ["data = [\n", "    go.Scatter(\n", "        x=df['word_count'],\n", "        y=df['reads'],\n", "        text=df['title'],\n", "        mode='markers',\n", "        marker=dict(\n", "            sizemin=10,\n", "            size=df['read_ratio'],\n", "            colorscale='Rainbow',\n", "            showscale=True,\n", "            color=df['read_time'],\n", "            line=dict(color='black', width=1.2)))\n", "]\n", "\n", "figure = go.Figure(\n", "    data=data,\n", "    layout=go.Layout(\n", "        xaxis=dict(title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Word Count Colored by Read Time and Sized by Read Ratio'\n", "    ))\n", "\n", "iplot(figure)"]}, {"block": 55, "type": "markdown", "linesLength": 1, "startIndex": 301, "lines": ["## Five Variables"]}, {"block": 56, "type": "code", "linesLength": 31, "startIndex": 302, "lines": ["data = [\n", "    go.Scatter(\n", "        x=grouped['word_count'],\n", "        y=grouped['reads'],\n", "        text=grouped['title'],\n", "        mode='markers',\n", "        name=name,\n", "        marker=dict(\n", "            symbol=i,\n", "            sizemin=2,\n", "            sizeref=2,\n", "            size=grouped['read_ratio'],\n", "            colorscale='BlueRed',\n", "            showscale=True,\n", "            color=df['read_time'],\n", "            line=dict(color='black', width=1.2)))\n", "    for i, (name, grouped) in enumerate(df.groupby('publication'))\n", "]\n", "\n", "figure = go.Figure(\n", "    data=data,\n", "    layout=go.Layout(\n", "        legend=dict(x=1.2),\n", "        width=1000,\n", "        margin=dict(r=20),\n", "        xaxis=dict(type='log', title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Word Count Colored by Read Time, Sized by Read Ratio, and Shaped by Publication'\n", "    ))\n", "\n", "iplot(figure)"]}, {"block": 57, "type": "markdown", "linesLength": 1, "startIndex": 333, "lines": ["# Scatter Matrix"]}, {"block": 58, "type": "code", "linesLength": 10, "startIndex": 334, "lines": ["import plotly.figure_factory as ff\n", "\n", "figure = ff.create_scatterplotmatrix(\n", "    df[['claps', 'publication', 'views', 'read_ratio', 'word_count']],\n", "    height=1000,\n", "    width=1000,\n", "    text=df['title'],\n", "    diag='histogram',\n", "    index='publication')\n", "iplot(figure)"]}, {"block": 59, "type": "markdown", "linesLength": 1, "startIndex": 344, "lines": ["# Heatmap"]}, {"block": 60, "type": "code", "linesLength": 15, "startIndex": 345, "lines": ["corrs = df.corr()\n", "\n", "figure = ff.create_annotated_heatmap(\n", "    z=corrs.values,\n", "    x=list(corrs.columns),\n", "    y=list(corrs.index),\n", "    colorscale=colorscales[5],\n", "    annotation_text=corrs.round(2).values,\n", "    showscale=True)\n", "\n", "figure.layout.margin = dict(l=200, t=200)\n", "figure.layout.height = 800\n", "figure.layout.width = 1000\n", "\n", "iplot(figure)"]}, {"block": 61, "type": "markdown", "linesLength": 1, "startIndex": 360, "lines": ["# Spread"]}, {"block": 62, "type": "code", "linesLength": 2, "startIndex": 361, "lines": ["df.set_index('published_date')[['views', 'reads']].iplot(\n", "    kind='spread', mode='markers', yTitle='Number', title='Spread between Views and Reads')"]}, {"block": 63, "type": "markdown", "linesLength": 1, "startIndex": 363, "lines": ["# Ratio"]}, {"block": 64, "type": "code", "linesLength": 2, "startIndex": 364, "lines": ["df.set_index('published_date')[['views', 'reads']].iplot(theme='pearl',\n", "                                                         kind='ratio', title='Ratio of Views to Reads', mode='markers')"]}, {"block": 65, "type": "markdown", "linesLength": 1, "startIndex": 366, "lines": ["# Themes"]}, {"block": 66, "type": "code", "linesLength": 4, "startIndex": 367, "lines": ["themes = cufflinks.themes.THEMES.keys()\n", "for t in themes:\n", "    df.set_index('published_date')[['views', 'reads']].iplot(theme=t, yTitle='Number',\n", "                                                             kind='ratio', title=f'{t} Ratio of Views to Reads', mode='markers')"]}, {"block": 67, "type": "code", "linesLength": 12, "startIndex": 371, "lines": ["for t in themes:\n", "    df[['time_published', 'time_started']].iplot(\n", "    kind='hist',\n", "    bins=48,\n", "    linecolor='black',\n", "    opacity=0.8,\n", "    histnorm='percent',\n", "    barmode='overlay',\n", "    xTitle='Time of day',\n", "    yTitle='(%) of articles',\n", "        theme=t,\n", "    title=f'{t} Time Started and Time Published Overlaid')"]}, {"block": 68, "type": "markdown", "linesLength": 1, "startIndex": 383, "lines": ["## Colorscales in cufflinks"]}, {"block": 69, "type": "code", "linesLength": 1, "startIndex": 384, "lines": ["cufflinks.colors.scales()"]}, {"block": 70, "type": "markdown", "linesLength": 1, "startIndex": 385, "lines": ["## Colorscales in Plotly"]}, {"block": 71, "type": "code", "linesLength": 5, "startIndex": 386, "lines": ["colorscales = [\n", "    'Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues',\n", "    'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth',\n", "    'Electric', 'Viridis', 'Cividis'\n", "]"]}, {"block": 72, "type": "markdown", "linesLength": 1, "startIndex": 391, "lines": ["# Pie Chart"]}, {"block": 73, "type": "code", "linesLength": 3, "startIndex": 392, "lines": ["df.groupby(\n", "    'publication', as_index=False)['reads'].count().iplot(\n", "        kind='pie', labels='publication', values='reads', title='Percentage of Reads by Publication')"]}, {"block": 74, "type": "code", "linesLength": 3, "startIndex": 395, "lines": ["df.groupby(\n", "    'publication', as_index=False)['word_count'].sum().iplot(\n", "        kind='pie', labels='publication', values='word_count', title='Percentage of Words by Publication')"]}, {"block": 75, "type": "markdown", "linesLength": 1, "startIndex": 398, "lines": ["# 3D Surface Plot"]}, {"block": 76, "type": "code", "linesLength": 2, "startIndex": 399, "lines": ["df[['views', 'reads', 'read_ratio']].iplot(\n", "    kind='surface', title='Surface Plot')"]}, {"block": 77, "type": "markdown", "linesLength": 1, "startIndex": 401, "lines": ["# 3D Scatter Plot"]}, {"block": 78, "type": "code", "linesLength": 3, "startIndex": 402, "lines": ["df.iplot(x='word_count', y='views', z='fans', kind='scatter3d', xTitle='Word Count', yTitle='Views',\n", "         zTitle='Fans', theme='pearl',\n", "         categories='type', title='3D Scatter Plot by Type')"]}, {"block": 79, "type": "markdown", "linesLength": 1, "startIndex": 405, "lines": ["# 3D Bubble Chart"]}, {"block": 80, "type": "code", "linesLength": 3, "startIndex": 406, "lines": ["df.iplot(x='word_count', y='views', z='fans', kind='bubble3d', xTitle='Word Count', yTitle='Views',\n", "         zTitle='Fans', theme='pearl', size='read_ratio',\n", "         categories='type', title='3D Bubble Plot Sized by Read Ratio and Colored by Type')"]}, {"block": 81, "type": "markdown", "linesLength": 3, "startIndex": 409, "lines": ["# Editing in Plot Studio\n", "\n", "You can take any of the plots here and edit them in the plot studio. This allows us to finish up plots for showing to others or sharing."]}, {"block": 82, "type": "markdown", "linesLength": 1, "startIndex": 412, "lines": ["![](../medium/images/reads_vs_word_count.png)"]}, {"block": 83, "type": "markdown", "linesLength": 1, "startIndex": 413, "lines": ["![](../medium/images/annotations.png)"]}, {"block": 84, "type": "markdown", "linesLength": 1, "startIndex": 414, "lines": ["![](../medium/images/word_count_and_views.png)"]}, {"block": 85, "type": "markdown", "linesLength": 3, "startIndex": 415, "lines": ["# Conclusions\n", "\n", "Hopefully you now have a little idea of the capabilties of plotly + cufflinks. We have only scrachted the surface of this library, so check out the [cufflinks documentation](https://github.com/santosjorge/cufflinks) and the [plotly documentation](https://plot.ly/python/) for plently of more examples."]}, {"block": 86, "type": "markdown", "linesLength": 1, "startIndex": 418, "lines": ["![](../medium/images/plotting_enjoyment.png)"]}, {"block": 87, "type": "code", "linesLength": 11, "startIndex": 419, "lines": ["import pandas as pd\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "cufflinks.go_offline()\n", "\n", "layout = go.Layout(xaxis=dict(type='date'))\n", "df = pd.read_parquet(\n", "    'https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/data/medium_data_2019_01_06?raw=true'\n", ")\n", "\n", "df.iplot(kind='scatter', y='claps', x='published_date', mode='markers')"]}]