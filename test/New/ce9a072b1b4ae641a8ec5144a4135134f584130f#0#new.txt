[{"block": 0, "type": "markdown", "linesLength": 6, "startIndex": 0, "lines": ["# Purpose\n", "\n", "Weighter is designed to be a hacky weight tracking app using Slack as a frontend and Google Sheets as a database! \n", "Weights are entered through a Slack Channel, stored in a Google Sheet, and reported back to users through Slack. Users will have the option to view various stats and graphs by sending different slack messages. \n", "\n", "Weighter also features additive modeling forecasts using the Facebook Prophet library. "]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 6, "lines": ["## Setup Libraries and Access to the Google Sheet"]}, {"block": 2, "type": "code", "linesLength": 17, "startIndex": 7, "lines": ["# pandas and numpy for data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# fbprophet for additive models\n", "import fbprophet\n", "\n", "# gspread for Google Sheets access\n", "import gspread\n", "\n", "# slacker for interacting with Slack\n", "from slacker import Slacker\n", "\n", "# oauth2client for authorizing access to Google Sheets\n", "from oauth2client.service_account import ServiceAccountCredentials\n", "\n", "import os"]}, {"block": 3, "type": "code", "linesLength": 5, "startIndex": 24, "lines": ["# matplotlib for plotting in the notebook\n", "import matplotlib.pyplot as plt\n", "%matplotlib inline\n", "\n", "import matplotlib"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 29, "lines": ["### Google Sheet Access\n", "\n", "The json file is the credentials for accessing the google sheet generated from the Google Developers API. To access a specific sheet, you need to share the sheet with the email address in the json file. "]}, {"block": 5, "type": "code", "linesLength": 9, "startIndex": 32, "lines": ["# google sheets access\n", "scope = ['https://spreadsheets.google.com/feeds']\n", "\n", "# Use local stored credentials in json file\n", "# make sure to first share the sheet with the email in the json file\n", "credentials = ServiceAccountCredentials.from_json_keyfile_name('C:/Users/Will Koehrsen/Desktop/weighter-2038ffb4e5a6.json', scope)\n", "\n", "# Authorize access\n", "gc = gspread.authorize(credentials);"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 41, "lines": ["## Set up Slack Access"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 42, "lines": ["# Slack api key is stored as text file\n", "with open('C:/Users/Will Koehrsen/Desktop/slack_api.txt', 'r') as f:\n", "    slack_api_key = f.read()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["slack = Slacker(slack_api_key)"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 46, "lines": ["slack.chat.post_message('#test_python', 'Hello Fellow Slackers')"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["### Open the sheet and convert to a pandas dataframe"]}, {"block": 11, "type": "code", "linesLength": 22, "startIndex": 48, "lines": ["# Open the sheet, need to share the sheet with email specified in json file\n", "gsheet = gc.open('Auto Weight Challenge').sheet1\n", "\n", "# List of lists with each row in the sheet as a list\n", "weight_lists = gsheet.get_all_values()\n", "\n", "# Headers are the first list\n", "# Pop returns the element (list in this case) and removes it from the list\n", "headers = weight_lists.pop(0)\n", "\n", "# Convert list of lists to a dataframe with specified column header\n", "weights = pd.DataFrame(weight_lists, columns=headers)\n", "\n", "# Record column should be a boolean\n", "weights['Record'] = weights['Record'].astype(bool)\n", "\n", "# Name column is a string\n", "weights['Name'] = weights['Name'].astype(str)\n", "\n", "# Convert dates to datetime, then set as index, then set the time zone\n", "weights['Date'] = pd.to_datetime(weights['Date'], unit='s')\n", "weights  = weights.set_index('Date', drop = True).tz_localize(tz='US/Eastern')"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["weights.head()"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["weights.tail()"]}, {"block": 14, "type": "markdown", "linesLength": 4, "startIndex": 72, "lines": ["+ Date is the index (in Eastern time here)\n", "+ Name is the slack username\n", "+ Entry is either weight or a string to display results\n", "+ Record is whether or not the entry has been processed by weighter"]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 76, "lines": ["# Weighter Class\n", "\n", "The class will include a number of different methods for analyzing the data and graphing results. These results can then be sent back to Slack depending on the message entered by the user."]}, {"block": 16, "type": "code", "linesLength": 300, "startIndex": 79, "lines": ["class Weighter():\n", "    \n", "    \"\"\"\n", "    When weighter is initialized, we need to convert the usernames,\n", "    get a dictionary of the unrecorded entries, construct a dictionary\n", "    of the actions to take, and make sure all data is formatted correctly\n", "    \"\"\"\n", "    \n", "    def __init__(self, weights):\n", "        \n", "        # Weights is a dataframe\n", "        self.weights = weights.copy()\n", "        \n", "        # Users is a list of the unique users in the data\n", "        self.users = list(set(self.weights['Name']))\n", "        \n", "        correct_names = []\n", "        # Name Changes\n", "        for user in self.weights['Name']:\n", "            \n", "            # Have to hardcode in name Changes\n", "            if user == 'koehrcl':\n", "                correct_names.append('Craig')\n", "            elif user == 'willkoehrsen':\n", "                correct_names.append('Will')\n", "            elif user == 'fletcher':\n", "                correct_names.append('Fletcher')\n", "            \n", "            # Currently do not handle new users\n", "            else:\n", "                print('New User Detected')\n", "                return\n", "            \n", "        self.weights['Name'] = correct_names\n", "        \n", "        # Users is a list of the unique users in the data\n", "        self.users = list(set(self.weights['Name']))\n", "        \n", "        # Create a dataframe of the unrecorded entries\n", "        self.unrecorded = self.weights[self.weights['Record'] != True]\n", "        \n", "        # Process the unrecorded entries\n", "        self.process_unrecorded()\n", "        \n", "        # The remaning entries will all be weights\n", "        self.weights['Entry'] = [float(weight) for weight in self.weights['Entry']]\n", "        self.weights['Change'] = [float(change) for change in self.weights['Change']]\n", "        self.weights['Pct_change'] = [float(pct_change) for pct_change in self.weights['Pct_change']]\n", "        \n", "        # Build the user dictionary\n", "        self.build_user_dict()\n", "        \n", "       # self.calculate_columns()\n", "        \n", "    \"\"\" \n", "    Constructs a dictionary for each user with critical information\n", "    This forms the basis for the summarize function\n", "    \"\"\"\n", "    \n", "    def build_user_dict(self):\n", "        \n", "        user_dict = {}\n", "        \n", "        user_goals = {'Craig': 215.0, 'Fletcher': 200.0, 'Will': 155.0}\n", "        user_colors = {'Craig': 'forestgreen', 'Fletcher': 'navy', 'Will': 'darkred'}\n", "        \n", "        for i, user in enumerate(self.users):\n", "            \n", "            user_weights = self.weights[self.weights['Name'] == user]\n", "            goal = user_goals.get(user)\n", "\n", "            start_weight = user_weights.ix[min(user_weights.index), 'Entry']   \n", "            start_date = min(user_weights.index)\n", "            \n", "            # Find minimum weight and date on which it occurs\n", "            min_weight =  min(user_weights['Entry'])\n", "            min_weight_date = ((user_weights[user_weights['Entry'] == min_weight].index)[0])\n", "            \n", "            # Find maximum weight and date on which it occurs\n", "            max_weight = max(user_weights['Entry'])\n", "            max_weight_date = ((user_weights[user_weights['Entry'] == max_weight].index)[0])\n", "            \n", "            most_recent_weight = user_weights.ix[max(user_weights.index), 'Entry']\n", "            \n", "            if goal < start_weight:\n", "                change = start_weight - most_recent_weight\n", "                obj = 'lose'\n", "            elif goal > start_weight:\n", "                change = most_recent_weight - start_weight\n", "                obj = 'gain'\n", "                \n", "            pct_change = 100 * change / start_weight\n", "            \n", "            pct_to_goal = 100 * (change / abs(start_weight - goal) )\n", "            \n", "            # Color for plotting\n", "            user_color = user_colors[user]\n", "            \n", "            user_dict[user] = {'min_weight': min_weight, 'max_weight': max_weight,\n", "                               'min_date': min_weight_date, 'max_date': max_weight_date,\n", "                               'recent': most_recent_weight, 'abs_change': change,\n", "                               'Pct_change': pct_change, 'pct_towards_goal': pct_to_goal,\n", "                               'start_weight': start_weight, 'start_date': start_date,\n", "                               'goal_weight': goal, 'objective': obj, 'color': user_color}\n", "       \n", "        self.user_dict = user_dict\n", "             \n", "    \"\"\"\n", "    Builds a dictionary of unrecorded entries where each key is the user\n", "    and the value is a list of weights and methods called for by the user.\n", "    This dictionary is saved as the entries attribute of the class.\n", "    \"\"\"\n", "    \n", "    def process_unrecorded(self):\n", "        \n", "        entries = {name:[] for name in self.users}\n", "        drop = []\n", "        \n", "        for index in self.unrecorded.index:\n", "\n", "            entry = self.unrecorded.ix[index, 'Entry']\n", "            user = str(self.unrecorded.ix[index, 'Name'])\n", "            \n", "            # Try and except does not seem like the best way to handle this\n", "            try:\n", "                entry = float(entry)\n", "                entries[user].append(entry)\n", "                \n", "            except:  \n", "                entry = str(entry)\n", "                entries[user].append(entry)\n", "                \n", "                drop.append(index)\n", "                \n", "            self.weights.ix[index, 'Record'] = True\n", "        # Drop the rows which do not contain a weight\n", "        self.weights.drop(drop, axis=0, inplace=True)\n", "        \n", "        # Entries is all of the new entries\n", "        self.entries = entries\n", "        \n", "    \"\"\" \n", "    Iterates through the unrecorded entries and delegates \n", "    each one to the appropriate method.\n", "    \"\"\"\n", "    def process_entries(self):\n", "        for user, user_entries in self.entries.items():\n", "            for entry in user_entries:\n", "                if type(entry) == float:\n", "                    self.basic_message(user)\n", "                \n", "                elif entry.lower() == 'summary':\n", "                    self.summary(user)\n", "                    \n", "                elif entry.lower() == 'percent':\n", "                    self.percentage_plot()\n", "                    \n", "                elif entry.lower() == 'history':\n", "                    self.history_plot(user)\n", "                \n", "    \"\"\" \n", "    This method is automatically run for each new weight\n", "    \"\"\"\n", "    def basic_message(self, user):\n", "    \n", "        # Find information for user, construct message, post message to Slack\n", "        user_info = self.user_dict.get(user)\n", "\n", "        message = (\"\\n{}: Total Weight Change = {:.2f} lbs.\\n\\n\"\n", "                    \"Percentage Weight Change = {:.2f}%\").format(user, user_info['abs_change'],\n", "                                                     user_info['Pct_change'])\n", "\n", "        slack.chat.post_message('#test_python', text=message, username='Weight Challenge Update')\n", "                        \n", "    \"\"\" \n", "    Displays comprehensive stats about the user\n", "    Only run on a summary message in the slack channel\n", "    \"\"\"\n", "    \n", "    def summary(self, user):\n", "        user_info = self.user_dict.get(user)\n", "        message = (\"\\n{}, your most recent weight was {:.2f} lbs.\\n\\n\"\n", "                   \"Absolute weight Change = {:.2f} lbs, percentage weight Change = {:.2f}%.\\n\\n\"\n", "                   \"Minimum weight = {:.2f} lbs on {} and maximum weight = {:.2f} lbs on {}.\\n\\n\"\n", "                   \"Your goal weight = {:.2f} lbs. and you are {:.2f}% of the way there.\\n\\n\"\n", "                   \"You started at {:.2f} lbs on {}. Congratulations on the progress!\").format(user, \n", "                     user_info['recent'], user_info['abs_change'], user_info['Pct_change'], \n", "                     user_info['min_weight'], str(user_info['min_date'].date()),\n", "                     user_info['max_weight'], str(user_info['max_date'].date()),\n", "                     user_info['goal_weight'], user_info['pct_towards_goal'],                                                       \n", "                     user_info['start_weight'], str(user_info['start_date'].date()))\n", "        \n", "        slack.chat.post_message('#test_python', text=message, username='%s Summary' % user)\n", "        \n", "    \"\"\" \n", "    Adds the change and percentage change columns to the self.weights df\n", "    \"\"\"\n", "#     def calculate_columns(self):\n", "        \n", "#         self.weights = self.weights.sort_values('Name')\n", "#         self.weights['Change'] = 0\n", "#         self.weights['Pct_change'] = 0\n", "#         self.weights.reset_index(level=0, inplace = True)\n", "        \n", "#         for index in self.weights.index:\n", "#             user = self.weights.ix[index, 'Name']\n", "#             weight = self.weights.ix[index, 'Entry']\n", "#             start_weight = self.user_dict[user]['start_weight']\n", "#             objective = self.user_dict[user]['objective']\n", "            \n", "#             if objective == 'lose':\n", "                \n", "#                 self.weights.ix[index, 'Change'] = start_weight - weight\n", "#                 self.weights.ix[index, 'Pct_change'] = 100 * (start_weight - weight) / start_weight\n", "                \n", "#             elif objective == 'gain':\n", "#                 self.weights.ix[index, 'Change'] = weight - start_weight\n", "#                 self.weights.ix[index, 'Pct_change'] = 100 * (weight - start_weight) / start_weight\n", "\n", "#         self.weights.set_index('Date', drop=True, inplace=True)\n", "        \n", "    @staticmethod\n", "    def reset_plot():\n", "        matplotlib.rcParams.update(matplotlib.rcParamsDefault)\n", "        \n", "    def percentage_plot(self):\n", "        \n", "        self.reset_plot()\n", "        \n", "        plt.style.use('fivethirtyeight')\n", "        plt.figure(figsize=(10,8))\n", "\n", "        for i, user in enumerate(weighter.users):\n", "            \n", "            user_color = self.user_dict[user]['color']\n", "\n", "            # Select the user and order dataframe by date\n", "            df = self.weights[self.weights['Name'] == user]\n", "            df.sort_index(inplace=True)\n", "            \n", "            # List is used for fitting polynomial\n", "            xvalues = list(range(len(df)))\n", "\n", "            # Create a polynomial fit\n", "            z = np.polyfit(xvalues, df['Pct_change'], deg=6)\n", "\n", "            # Create a function from the fit\n", "            p = np.poly1d(z)\n", "\n", "            # Map the x values to y values\n", "            fit_data = p(xvalues)\n", "\n", "            # Plot the actual points and the fit\n", "            plt.plot(df.index, df['Pct_change'], 'o', color = user_color, label = '%s' % user)\n", "            plt.plot(df.index, fit_data, '-', color = user_color, linewidth = 5, label = '%s' % user)\n", "\n", "\n", "        # Plot formatting\n", "        plt.xlabel('Date'); plt.ylabel('Percentage Change')\n", "        plt.title('Percentage Changes')\n", "        plt.grid(color='k', alpha=0.4)\n", "        plt.legend(prop={'size':14})\n", "        plt.savefig(fname='percentage_plot.png');\n", "        \n", "        slack.files.upload('percentage_plot.png', channels='#test_python')\n", "        \n", "        os.remove('percentage_plot.png')\n", "        \n", "    def history_plot(self, user):\n", "        \n", "        self.reset_plot()\n", "        plt.style.use('fivethirtyeight')\n", "        plt.figure(figsize=(10, 8))\n", "        \n", "        df = self.weights[self.weights['Name'] == user]\n", "        df.sort_index(inplace=True) \n", "        user_color = self.user_dict[user]['color']\n", "        \n", "        # List is used for fitting polynomial\n", "        xvalues = list(range(len(df)))\n", "\n", "        # Create a polynomial fit\n", "        z = np.polyfit(xvalues, df['Entry'], deg=6)\n", "\n", "        # Create a function from the fit\n", "        p = np.poly1d(z)\n", "\n", "        # Map the x values to y values\n", "        fit_data = p(xvalues)\n", "\n", "        # Make a simple plot and upload to slack\n", "        plt.plot(df.index, df['Entry'], 'ko', ms = 8, label = 'Observed')\n", "        plt.plot(df.index, fit_data, '-', color = user_color, linewidth = 5, label = 'Smooth Fit')\n", "        plt.xlabel('Date'); plt.ylabel('Weight (lbs)'); plt.title('%s Weight History' % user)\n", "        plt.legend(prop={'size': 14});\n", "        \n", "        plt.savefig(fname='history_plot.png')\n", "        slack.files.upload('history_plot.png', channels='#test_python')\n", "        \n", "        os.remove('history_plot.png')"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 379, "lines": ["weighter = Weighter(weights)"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 380, "lines": ["update = weighter.weights"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 381, "lines": ["update.tail(10)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 382, "lines": ["weighter.percentage_plot()"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 383, "lines": ["gsheet.update_cell(row= 1, col = 6, val = 0)"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 384, "lines": ["weighter.history_plot('Will')"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 385, "lines": ["weighter.percentage_plot()"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 386, "lines": ["weights_craig = weighter.weights[weighter.weights['Name'] == 'Craig']\n", "weights_craig.sort_index(inplace=True)\n", "plt.plot(weights_craig.index, weights_craig['Change']);"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 389, "lines": ["we = weighter.weights"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 390, "lines": ["matplotlib.rcParams.update(matplotlib.rcParamsDefault)"]}, {"block": 27, "type": "code", "linesLength": 30, "startIndex": 391, "lines": ["plt.figure(figsize=(10,8))\n", "colors = ['forestgreen', 'navy', 'darkred']\n", "plt.style.use('fivethirtyeight')\n", "for i, user in enumerate(weighter.users):\n", "    \n", "    \n", "    df = we[we['Name'] == user]\n", "    df.sort_index(inplace=True)\n", "    xvalues = list(range(len(df)))\n", "    \n", "    # Create a polynomial fit\n", "    z = np.polyfit(xvalues, df['Pct_change'], deg=5)\n", "    \n", "    # Create a function from the fit\n", "    p = np.poly1d(z)\n", "    \n", "    # Map the x values to y values\n", "    fit_data = p(xvalues)\n", "    \n", "    # Plot the actual points and the fit\n", "    plt.plot(df.index, df['Pct_change'], 'o', color = colors[i], label = '%s' % user)\n", "    plt.plot(df.index, fit_data, '-', color = colors[i], linewidth = 4, label = '%s' % user)\n", "    \n", "    \n", "\n", "plt.xlabel('Date'); plt.ylabel('Percentage Change')\n", "plt.title('Percentage Changes')\n", "plt.grid(color='k', alpha=0.4)\n", "plt.legend(prop={'size':14})\n", "plt.show()"]}, {"block": 28, "type": "code", "linesLength": 0, "startIndex": 421, "lines": []}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 421, "lines": ["from scipy.optimize import curve_fit"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 422, "lines": ["info, z = curve_fit(func, list(range(len(df.index))), df['Pct_change'], maxfev = 10000)"]}, {"block": 31, "type": "code", "linesLength": 1, "startIndex": 423, "lines": ["z = np.polyfit(list(range(len(df.index))), df['Pct_change'], deg = 4)"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 424, "lines": ["p = np.poly1d(z)\n", "p(df['Pct_change'])"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 426, "lines": ["Change,Pct_change = weighter.calculate_columns()"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 427, "lines": ["Change = np.array(Change)"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 428, "lines": ["Change = Change.reshape((-1, ))"]}, {"block": 36, "type": "code", "linesLength": 1, "startIndex": 429, "lines": ["weighter.weights['Change'] = Change"]}, {"block": 37, "type": "code", "linesLength": 1, "startIndex": 430, "lines": ["weighter.weights"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 431, "lines": ["flat = [j for entry in Change for j in entry]"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 432, "lines": ["flat"]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 433, "lines": ["weighter.weights['Change'] = Change"]}, {"block": 41, "type": "code", "linesLength": 2, "startIndex": 434, "lines": ["\n", "weighter.weights.tail()"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 436, "lines": ["weighter.process_entries()"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 437, "lines": ["weighter.summary('Craig')"]}, {"block": 44, "type": "code", "linesLength": 1, "startIndex": 438, "lines": ["weighter.summary('Craig')"]}]