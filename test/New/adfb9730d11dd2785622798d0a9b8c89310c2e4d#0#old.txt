[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["# Introduction\n", "The objective of this notebook is to explore the solar power potential data. Of primary emphasis is visualizing the data on geographic maps."]}, {"block": 1, "type": "markdown", "linesLength": 2, "startIndex": 2, "lines": ["### Imports\n", "Import libraries and write settings here."]}, {"block": 2, "type": "code", "linesLength": 5, "startIndex": 4, "lines": ["import numpy as np\n", "import pandas as pd\n", "import holoviews as hv\n", "from holoviews import opts\n", "hv.extension('bokeh', 'matplotlib')"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 9, "lines": ["df = pd.read_csv('solar-power_solar_potential_by_postal_code.csv')\n", "df.info()"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 11, "lines": ["from shapely import wkt\n", "df['geometry'] = df['center_point'].apply(wkt.loads)"]}, {"block": 5, "type": "code", "linesLength": 7, "startIndex": 13, "lines": ["df = df[['region_name', 'state_name', 'count_qualified', 'percent_covered', 'percent_qualified',\n", "         'number_of_panels_median', 'number_of_panels_total', 'kw_median', 'kw_total',\n", "         'install_size_kw_buckets', 'carbon_offset_metric_tons',\n", "        'existing_installs_count', 'geometry', 'lat_avg', 'lng_avg']]\n", "\n", "df['state_name'] = df['state_name'].astype('category')\n", "df.info()"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["df.head()"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 21, "lines": ["import geopandas\n", "\n", "gdf = geopandas.GeoDataFrame(df, geometry='geometry')\n", "world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 25, "lines": ["world.head()"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 26, "lines": ["ax = world[world.name == 'United States'].plot(color='white', figsize=(12, 9), \n", "                                               edgecolor='black')\n", "_ = gdf.plot(ax=ax, markersize=1, \n", "         legend=True, column='percent_qualified')"]}, {"block": 10, "type": "code", "linesLength": 7, "startIndex": 30, "lines": ["import cartopy.crs as ccrs\n", "import holoviews as hv\n", "from holoviews import opts\n", "import geoviews as gv\n", "import geoviews.feature as gf\n", "\n", "hv.extension('bokeh', 'matplotlib')"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 37, "lines": ["df = df[(df['state_name'] != 'Hawaii') & (df['state_name'] != 'Alaska')].copy()\n", "df = df[~(df['region_name'].apply(lambda x:len(str(x)) == 3))]"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 39, "lines": ["gdata = gv.Dataset(df, kdims=['lng_avg', 'lat_avg'], \n", "                   vdims=[c for c in df if c not in ['lat_avg', 'lng_avg', 'geometry']])\n", "gdata"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 42, "lines": ["points = gv.Points([(lng, lat, percent_covered) for lng, lat, \n", "                   percent_covered in zip(df['lng_avg'], \n", "                                          df['lat_avg'],\n", "                                          df['percent_covered'])], \n", "                   vdims=['Percent Covered'])"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 47, "lines": ["type(gdata.to(hv.Points))"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["type(gdata.to(gv.Points))"]}, {"block": 16, "type": "code", "linesLength": 5, "startIndex": 49, "lines": ["import datashader as ds\n", "from holoviews.operation.datashader import datashade, rasterize\n", "\n", "graph = datashade(gdata, aggregator=ds.mean('percent_qualified'))\n", "graph.opts(height=600, width=800, tools=['hover'])"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 54, "lines": ["rast = rasterize(gdata, aggregator=ds.mean('percent_qualified'))\n", "rast.opts(bgcolor='white', logz=True, cmap='cividis',\n", "          tools=['hover'], height=500, width=700, colorbar=True) * gf.coastline * gf.rivers * gf.borders"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["gdata.to(gv.Points, groupby='state_name') * gf.coastline"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["gdata.to(gv.Points, \n", "         vdims='percent_covered').opts(cmap='viridis') * gf.coastline"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 60, "lines": ["points.opts(tools=['hover'], cmap='inferno', projection=ccrs.Robinson\n", "            ()) * gf.coastline"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["df['state_name'].unique()"]}, {"block": 22, "type": "code", "linesLength": 7, "startIndex": 63, "lines": ["import holoviews as hv\n", "from holoviews import opts\n", "import dask.dataframe as dd\n", "import datashader as ds\n", "import geoviews as gv\n", "\n", "from holoviews.operation.datashader import datashade, rasterize"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["from datashader.colors import viridis"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 71, "lines": ["datashade(gdata, cmap=viridis, color_key=True,\n", "          aggregator=ds.mean('percent_covered')).opts(tools=['hover'],\n", "                                                            height=500, width=800)"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["rasterize(gdata)"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["world['geometry'].iloc[1]"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 76, "lines": ["df.columns"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 77, "lines": ["df['region_name'].unique()"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 78, "lines": ["df['percent_covered'].plot.hist()"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 79, "lines": ["df[df['percent_qualified'] > 100]"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["df2 = pd.read_csv('solar-power_solar_potential_by_postal_code.csv')\n", "df2.describe()"]}, {"block": 32, "type": "code", "linesLength": 2, "startIndex": 82, "lines": ["df = pd.read_csv('solar-power_solar_potential_by_census_tract.csv')\n", "df.describe()"]}, {"block": 33, "type": "code", "linesLength": 1, "startIndex": 84, "lines": ["df.shape"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 85, "lines": ["df[df['percent_covered'] > 100]"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 86, "lines": ["print(f\"{df['kw_total'].sum():,f}\")"]}, {"block": 36, "type": "code", "linesLength": 2, "startIndex": 87, "lines": ["gdata.to(gv.Points).opts(height=600, width=900, \n", "                         tools=['hover'], cmap='inferno') * gf.borders"]}, {"block": 37, "type": "code", "linesLength": 3, "startIndex": 89, "lines": ["points = gv.Points([nyc, london, beijing], vdims=['City'], extents=(-180, -90, 180, 90))\n", "print('Default projection:', points.crs.__class__.__name__)\n", "points.opts(size=6, width=600, height=500) * gf.borders * gf.coastline"]}, {"block": 38, "type": "code", "linesLength": 1, "startIndex": 92, "lines": ["df.describe()"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 93, "lines": ["gdf.head()"]}, {"block": 40, "type": "code", "linesLength": 0, "startIndex": 94, "lines": []}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 94, "lines": ["df['center_point'].plot()"]}, {"block": 42, "type": "code", "linesLength": 1, "startIndex": 95, "lines": ["import geopandas `"]}, {"block": 43, "type": "code", "linesLength": 30, "startIndex": 96, "lines": ["# Data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 50\n", "pd.options.display.max_rows = 30\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "from IPython import get_ipython\n", "ipython = get_ipython()\n", "\n", "# autoreload extension\n", "if 'autoreload' not in ipython.extension_manager.loaded:\n", "    %load_ext autoreload\n", "\n", "%autoreload 2\n", "\n", "# Visualizations\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.go_offline(connected=True)\n", "cf.set_config_file(theme='white')"]}, {"block": 44, "type": "markdown", "linesLength": 2, "startIndex": 126, "lines": ["# Analysis/Modeling\n", "Do work here"]}, {"block": 45, "type": "markdown", "linesLength": 2, "startIndex": 128, "lines": ["# Results\n", "Show graphs and stats here"]}, {"block": 46, "type": "markdown", "linesLength": 2, "startIndex": 130, "lines": ["# Conclusions and Next Steps\n", "Summarize findings here"]}, {"block": 47, "type": "code", "linesLength": 0, "startIndex": 132, "lines": []}]