[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Introduction: Testing Cyclical Encoding of Features for Machine Learning"]}, {"block": 1, "type": "code", "linesLength": 4, "startIndex": 1, "lines": ["import pandas as pd\n", "import numpy as np\n", "\n", "import glob"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 5, "lines": ["building_data_files = glob.glob('data/building*')\n", "len(building_data_files)"]}, {"block": 3, "type": "code", "linesLength": 3, "startIndex": 7, "lines": ["data = pd.read_csv(building_data_files[10], parse_dates=['timestamp'], index_col=0).set_index('timestamp')\n", "data.head()\n", "data.info()"]}, {"block": 4, "type": "code", "linesLength": 37, "startIndex": 10, "lines": ["from sklearn.base import BaseEstimator, TransformerMixin\n", "\n", "\n", "class DateTimeFeatures(BaseEstimator, TransformerMixin):\n", "    def __init__(self):\n", "        pass\n", "\n", "    def fit(self, X, y=None):\n", "        return self\n", "\n", "    def transform(self, X, y=None):\n", "        field = X.index\n", "        X[\"time_of_day\"] = field.hour + field.minute / 60\n", "        X[\"day_of_year\"] = field.dayofyear\n", "        return X\n", "\n", "\n", "class CyclicalDateTimeFeatures(BaseEstimator, TransformerMixin):\n", "    def __init__(self):\n", "        pass\n", "\n", "    def fit(self, X, y=None):\n", "        return self\n", "\n", "    def transform(self, X, y=None):\n", "        X[\"sin_time_of_day\"], X[\"cos_time_of_day\"] = _cyclical_encoding(\n", "            X[\"time_of_day\"], period=24\n", "        )\n", "        X[\"sin_day_of_year\"], X[\"cos_day_of_year\"] = _cylical_encoding(\n", "            X[\"day_of_year\"], period=366\n", "        )\n", "        return X\n", "\n", "\n", "def _cyclical_encoding(series, period):\n", "    base = 2 * np.pi * series / period\n", "    return np.sin(base), np.cos(base)"]}, {"block": 5, "type": "code", "linesLength": 11, "startIndex": 47, "lines": ["from sklearn.pipeline import Pipeline\n", "\n", "transforms = Pipeline(\n", "    steps=[\n", "        (\"date_time_features\", DateTimeFeatures()),\n", "        (\"cylical_date_time_features\", CyclicalDateTimeFeatures()),\n", "    ]\n", ")\n", "\n", "transformed_data = transforms.transform(data)\n", "transformed_data.head()"]}, {"block": 6, "type": "code", "linesLength": 0, "startIndex": 58, "lines": []}]