[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Intermediate Time Series methods with Plotly\n", "\n", "In this notebook, we will move beyond the basic plots in the `plotly-time-series` notebook and make plots with range sliders, update menus, and even animations. Although still not using the full capabilities of plotly, making these plots will show us how to take advantage of this powerful library to create effective visualizations. "]}, {"block": 1, "type": "code", "linesLength": 14, "startIndex": 3, "lines": ["# Standard data science libraries\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "# Visualization\n", "import matplotlib.pyplot as plt\n", "import seaborn as sns\n", "plt.style.use('bmh')\n", "\n", "from collections import defaultdict"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 17, "lines": ["Authenticate with plotly in the below cell."]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 18, "lines": ["## Replace with your credentials.\n", "\n", "# import plotly\n", "# plotly.tools.set_credentials_file(username='########', api_key='******')"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 22, "lines": ["These are the standard plotly imports. We set up the notebook to run offline which means our plots are not uploaded to the plot web interface."]}, {"block": 5, "type": "code", "linesLength": 7, "startIndex": 23, "lines": ["# Plot imports\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "\n", "## Offline mode\n", "from plotly.offline import init_notebook_mode, iplot\n", "init_notebook_mode(connected=True)"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 30, "lines": ["## Data Series\n", "\n", "As before, we are using real-world building energy, steam, and static pressure measurements. The data is in a dataframe with a _multi-index_ on the columns. This means we have to use _multi-dimensional_ indexing to select one column."]}, {"block": 7, "type": "code", "linesLength": 6, "startIndex": 33, "lines": ["# Read in data and convert index to a datetime\n", "df = pd.read_csv('building_one.csv', \n", "                 header=[0, 1], index_col=0)\n", "df.index = pd.to_datetime(df.index)\n", "df.sort_index(inplace=True)\n", "df.head()"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 39, "lines": ["Next we create several data series, spanning both the entire range of data, and subsetting out one week."]}, {"block": 9, "type": "code", "linesLength": 11, "startIndex": 40, "lines": ["energy_series = df.loc[:, ('Energy', '3')].copy()\n", "steam_series = df.loc[:, ('Steam', '4')].copy()\n", "pressure_series = df.loc[:, ('StaticPressure', '2')].copy()\n", "\n", "df_short = df[df.index.week == 8].copy()\n", "\n", "steam_series_four = df_short.loc[:, ('Steam', '4')].copy()\n", "steam_series_five = df_short.loc[:, ('Steam', '5')].copy()\n", "\n", "static_series_one = df_short.loc[:, ('StaticPressure', '1')].copy()\n", "static_series_two = df_short.loc[:, ('StaticPressure', '2')].copy()"]}, {"block": 10, "type": "markdown", "linesLength": 3, "startIndex": 51, "lines": ["# Time Scale and Time Window Selection with Range Select and Range Slider\n", "\n", "One way to add interactivity to our time-series plots and let users dig into the data is by adjusting the time scale and the time window. We can do this using a `rangeselect` and `rangslider` respectively. "]}, {"block": 11, "type": "code", "linesLength": 32, "startIndex": 54, "lines": ["# Create a layout with a rangeselector and rangeslider on the xaxis\n", "layout = go.Layout(\n", "    height=600,\n", "    width=900,\n", "    font=dict(size=16),\n", "    title='Energy Plot with Range Selection',\n", "    xaxis=dict(\n", "        title='Date',\n", "        # Range selector with buttons\n", "        rangeselector=dict(\n", "            font=dict(size=12),\n", "            # Buttons for selecting time scale\n", "            buttons=list([\n", "                # 1 month\n", "                dict(count=1, label='1m', step='month', stepmode='backward'),\n", "                # 1 week\n", "                dict(count=7, label='1w', step='day', stepmode='backward'),\n", "                # 1 day\n", "                dict(count=1, label='1d', step='day', stepmode='backward'),\n", "                # 12 hours\n", "                dict(count=12, label='12h', step='hour', stepmode='backward'),\n", "                # 4 hours\n", "                dict(count=4, label='4h', step='hour', stepmode='backward'),\n", "                # Entire scale\n", "                dict(step='all')\n", "            ])),\n", "        # Sliding for selecting time window\n", "        rangeslider=dict(visible=True),\n", "        # Type of xaxis\n", "        type='date'),\n", "    # yaxis is unchanged\n", "    yaxis=dict(title='Energy (kWh)'))"]}, {"block": 12, "type": "code", "linesLength": 11, "startIndex": 86, "lines": ["# Create the same data object\n", "energy_data = go.Scatter(x=energy_series.index,\n", "                        y=energy_series.values,\n", "                        line=go.scatter.Line(color='red', width = 0.6),\n", "                        opacity=0.8,\n", "                        name='energy',\n", "                        text=[f'Energy: {x:.0f} kWh' for x in energy_series.values])\n", "\n", "# Create the figure and display\n", "fig = go.Figure(data=[energy_data], layout=layout)\n", "iplot(fig)"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["## Time Select with Double Y-Axis"]}, {"block": 14, "type": "code", "linesLength": 7, "startIndex": 98, "lines": ["steam_data = go.Scatter(x=steam_series.index,\n", "                        y=steam_series.values,\n", "                        line=dict(color='blue', width=0.8),\n", "                        opacity=0.8,\n", "                        name='Steam',\n", "                        yaxis='y2',\n", "                        text=[f'Steam: {x:.1f} Mlbs/hr' for x in steam_series.values])"]}, {"block": 15, "type": "code", "linesLength": 37, "startIndex": 105, "lines": ["# Create a layout with interactive elements and two yaxes\n", "layout = go.Layout(\n", "    height=600,\n", "    width=900,\n", "    font=dict(size=16),\n", "    title='Energy Plot with Range Selection',\n", "    xaxis=dict(\n", "        title='Date',\n", "        # Range selector with buttons\n", "        rangeselector=dict(\n", "            font=dict(size=12),\n", "            # Buttons for selecting time scale\n", "            buttons=list([\n", "                # 1 month\n", "                dict(count=1, label='1m', step='month', stepmode='backward'),\n", "                # 1 week\n", "                dict(count=7, label='1w', step='day', stepmode='backward'),\n", "                # 1 day\n", "                dict(count=1, label='1d', step='day', stepmode='backward'),\n", "                # 12 hours\n", "                dict(count=12, label='12h', step='hour', stepmode='backward'),\n", "                # 4 hours\n", "                dict(count=4, label='4h', step='hour', stepmode='backward'),\n", "                # Entire scale\n", "                dict(step='all')\n", "            ])),\n", "        # Sliding for selecting time window\n", "        rangeslider=dict(visible=True),\n", "        # Type of xaxis\n", "        type='date'),\n", "    yaxis=dict(title='Energy (kWh)', color='red'),\n", "    # Add a second yaxis to the right of the plot\n", "    yaxis2=dict(\n", "        title='Steam (Mlbs/hr)', color='blue', overlaying='y', side='right'))\n", "\n", "fig = go.Figure(data=[energy_data, steam_data], layout=layout)\n", "iplot(fig)"]}, {"block": 16, "type": "markdown", "linesLength": 3, "startIndex": 142, "lines": ["# Update Menu\n", "\n", "Next, we will add a dropdown menu to the plot allowing users to select the steam series they want to view. This is an `update` because it changes the data shown. We just need to create an `updatemenus` object that specify the actions to take when the button is selected in the `args` parameter. In this case, we change the data by setting the `visible` parameters and we change the title with the `title` parameter."]}, {"block": 17, "type": "code", "linesLength": 31, "startIndex": 145, "lines": ["updatemenus = list([\n", "    dict(\n", "        active=2,\n", "        buttons=list([\n", "            dict(\n", "                label='Sensor 4',\n", "                method='update',\n", "                args=[{\n", "                    'visible': [True, False]\n", "                }, {\n", "                    'title': 'Sensor 4'\n", "                }]),\n", "            dict(\n", "                label='Sensor 5',\n", "                method='update',\n", "                args=[{\n", "                    'visible': [False, True]\n", "                }, {\n", "                    'title': 'Sensor 5'\n", "                }]),\n", "            dict(\n", "                label='Both',\n", "                method='update',\n", "                args=[{\n", "                    'visible': [True, True]\n", "                }, {\n", "                    'title': 'Sensor Sensors'\n", "                }])\n", "        ]),\n", "    )\n", "])"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 176, "lines": ["Once we make the `updatemenus`, we pass in to the `layout`."]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 177, "lines": ["layout = go.Layout(\n", "    height=800, width=1000, title='Steam Sensors', updatemenus=updatemenus)"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 179, "lines": ["Now we need to make our data. We will use two different steam series over the course of one week."]}, {"block": 21, "type": "code", "linesLength": 15, "startIndex": 180, "lines": ["steam_data_four = go.Scatter(\n", "    x=steam_series_four.index,\n", "    y=steam_series_four.values,\n", "    line=dict(color='blue', width=1.1),\n", "    opacity=0.8,\n", "    name='Steam: Sensor 4',\n", "    text = [f'Sensor 4: {x:.1f} Mlbs/hr' for x in steam_series_four.values])\n", "\n", "steam_data_five = go.Scatter(\n", "    x=steam_series_five.index,\n", "    y=steam_series_five.values,\n", "    line=dict(color='orange', width=1.1),\n", "    opacity=0.8,\n", "    name='Steam: Sensor 5',\n", "    text=[f'Sensor 5: {x:.1f} Mlbs/hr' for x in steam_series_five.values])"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 195, "lines": ["Finally, we pass in the layout with the `updatemenus` to the figure."]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 196, "lines": ["fig = go.Figure(data=[steam_data_four, steam_data_five], layout=layout)\n", "iplot(fig)"]}, {"block": 24, "type": "markdown", "linesLength": 3, "startIndex": 198, "lines": ["## Update Menu with Annotations\n", "\n", "Now we will add in the annotations when the user selects a sensor. This is simply a matter of changing the visible annotations when a different sensor is selected using the `annotations` parameter."]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 201, "lines": ["First, we format all of the data. We are using weekly series and adding in annotations that show the maximum value on each day."]}, {"block": 26, "type": "code", "linesLength": 21, "startIndex": 202, "lines": ["def find_daily_maxes(x):\n", "    \"\"\"Return maximum measurement on each day and when it occurred in a dataframe\"\"\"\n", "    x = x.copy().to_frame()\n", "    x['day'] = x.index.day\n", "    result =pd.concat([x.groupby('day').max(), \n", "                      x.groupby('day').idxmax()], axis = 1).iloc[:, [0, 1]]\n", "    result.columns = ['value', 'date']\n", "    return result.set_index('date')\n", "\n", "four_highs = find_daily_maxes(steam_series_four)\n", "five_highs = find_daily_maxes(steam_series_five)\n", "\n", "from datetime import datetime\n", "\n", "def format_time(dt):\n", "    if pd.isnull(dt):\n", "        return \"NaT\"\n", "    else:\n", "        return datetime.strftime(dt, \"%a <br> %H:%M %p\")\n", "    \n", "four_highs"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 223, "lines": ["The annotations are made using a list comprehension."]}, {"block": 28, "type": "code", "linesLength": 23, "startIndex": 224, "lines": ["four_annotations = [\n", "    dict(\n", "        x=date,\n", "        y=value[0],\n", "        xref='x',\n", "        yref='y',\n", "        font=dict(color='blue'),\n", "        text=f'{format_time(date)}<br> {value[0]:.1f} Mlbs/hr')\n", "    for date, value in zip(four_highs.index, four_highs.values)\n", "]\n", "\n", "five_annotations = [\n", "    dict(\n", "        x=date,\n", "        y=value[0],\n", "        xref='x',\n", "        yref='y',\n", "        font=dict(color='orange'),\n", "        text=f'{format_time(date)}<br> {value[0]:.1f} Mlbs/hr')\n", "    for date, value in zip(five_highs.index, five_highs.values)\n", "]\n", "\n", "four_annotations[:2]"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 247, "lines": ["In the `updatemenus` is where we specify the `annotations` that appear when a button is selected. We will only show annotations when an individual sensor is selected."]}, {"block": 30, "type": "code", "linesLength": 40, "startIndex": 248, "lines": ["updatemenus = list([\n", "    dict(\n", "        active=2,\n", "        buttons=list([\n", "            dict(\n", "                label='Sensor 4',\n", "                method='update',\n", "                args=[{\n", "                    'visible': [True, False]\n", "                }, {\n", "                    'title': 'Sensor 4',\n", "                    'annotations': four_annotations\n", "                }]),\n", "            dict(\n", "                label='Sensor 5',\n", "                method='update',\n", "                args=[{\n", "                    'visible': [False, True]\n", "                }, {\n", "                    'title': 'Sensor 5',\n", "                    'annotations': five_annotations\n", "                }]),\n", "            dict(\n", "                label='Both',\n", "                method='update',\n", "                args=[{\n", "                    'visible': [True, True]\n", "                }, {\n", "                    'title': 'Sensor Sensors'\n", "                }])\n", "        ]),\n", "    )\n", "])\n", "\n", "layout = go.Layout(\n", "    height=600,\n", "    width=800,\n", "    title='Steam Sensors',\n", "    xaxis=dict(tickformat='%a %b %d'),\n", "    updatemenus=updatemenus)"]}, {"block": 31, "type": "code", "linesLength": 4, "startIndex": 288, "lines": ["fig = go.Figure(data = [steam_data_four, steam_data_five], \n", "                layout=layout)\n", "\n", "iplot(fig)"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 292, "lines": ["# Animations\n", "\n", "Finally, we will work on producing animated plots. This allows us to see how a figure may change over time."]}, {"block": 33, "type": "code", "linesLength": 9, "startIndex": 295, "lines": ["spring = [3, 4, 5]\n", "summer = [6, 7, 8]\n", "fall = [9, 10, 11]\n", "winter = [12, 1, 2]\n", "\n", "int_to_days = {0: 'Mon', 1: 'Tues', 2: 'Wed', 3: 'Thurs',\n", "               4: 'Fri', 5: 'Sat', 6: 'Sun'}\n", "\n", "color_mapping = {'spring': 'green', 'summer': 'orange', 'fall': 'brown', 'winter':' blue'}"]}, {"block": 34, "type": "code", "linesLength": 24, "startIndex": 304, "lines": ["def format_season(season_months, season_name, indexer = ('Energy', '3'), name = 'Energy', units = 'kWh'):\n", "    \"\"\"Format data for one season\"\"\"\n", "    data = df[df.index.month.isin(season_months)].copy()\n", "    data_x = defaultdict(list)\n", "    data_y = defaultdict(list)\n", "    \n", "    color = color_mapping[season_name]\n", "    \n", "    for (time, dow), grouped in data.groupby([data.index.time, data.index.dayofweek]):\n", "        x = pd.datetime(2018, 3, 5 + dow, 0 + time.hour, 0 + time.minute)\n", "        y = grouped[indexer].mean()\n", "        data_x[dow].append(x)\n", "        data_y[dow].append(y)\n", "    \n", "    data_obj = []\n", "    for dow, x in data_x.items():\n", "        y = data_y[dow]\n", "        text = [f'{season_name} <br> {name}: {m:.2f} {units}' for m in y]\n", "        data_obj.append(go.Scatter(x = x, y = y, text = text,\n", "                                   hoverinfo='text',\n", "                                   line = dict(color=color, width=0.75),\n", "                                   name = season_name))\n", "    \n", "    return data_obj"]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 328, "lines": ["winter_data_source = format_season(winter, 'winter')\n", "winter_data_source[0]['name']"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 330, "lines": ["summer_data_source = format_season(summer, 'summer')\n", "fall_data_source = format_season(fall, 'fall')\n", "spring_data_source = format_season(spring, 'spring')"]}, {"block": 37, "type": "code", "linesLength": 6, "startIndex": 333, "lines": ["layout = go.Layout(title = 'Seasonal Average Energy Use', \n", "                   xaxis=dict(nticks = 7, tickformat = '%A'))\n", "\n", "fig = go.Figure(data = summer_data_source + winter_data_source + fall_data_source + spring_data_source, \n", "                layout = layout)\n", "iplot(fig)"]}, {"block": 38, "type": "code", "linesLength": 15, "startIndex": 339, "lines": ["figure = {'data': [{'x': [0, 1], 'y': [0, 1]}],\n", "          'layout': {'xaxis': {'range': [0, 5], 'autorange': False},\n", "                     'yaxis': {'range': [0, 5], 'autorange': False},\n", "                     'title': 'Start Title',\n", "                     'updatemenus': [{'type': 'buttons',\n", "                                      'buttons': [{'label': 'Play',\n", "                                                   'method': 'animate',\n", "                                                   'args': [None]}]}]\n", "                    },\n", "          'frames': [{'data': [{'x': [1, 2], 'y': [1, 2]}]},\n", "                     {'data': [{'x': [1, 4], 'y': [1, 4]}]},\n", "                     {'data': [{'x': [3, 4], 'y': [3, 4]}],\n", "                      'layout': {'title': 'End Title'}}]}\n", "\n", "iplot(figure)"]}, {"block": 39, "type": "markdown", "linesLength": 3, "startIndex": 354, "lines": ["# Animations with Seasons\n", "\n", "To illustrate animations, we will change the season. "]}, {"block": 40, "type": "code", "linesLength": 7, "startIndex": 357, "lines": ["frames = [spring_data_source[0], summer_data_source[, fall_data_source, winter_data_source]\n", "\n", "layout = go.Layout(title = 'Seasonal Average Energy Use', \n", "                   xaxis=dict(nticks = 7, tickformat = '%A'))\n", "\n", "fig = go.Figure(data = summer_data_source + winter_data_source + fall_data_source + spring_data_source, \n", "                layout = layout, frames = frames)\n"]}, {"block": 41, "type": "code", "linesLength": 12, "startIndex": 364, "lines": ["import plotly.plotly as py\n", "import plotly.figure_factory as ff \n", "from plotly.grid_objs import Grid, Column\n", "\n", "import pandas as pd\n", "import time\n", "\n", "url = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'\n", "dataset = pd.read_csv(url)\n", "\n", "table = ff.create_table(dataset.head(10))\n", "iplot(table)"]}, {"block": 42, "type": "code", "linesLength": 27, "startIndex": 376, "lines": ["years_from_col = set(dataset['year'])\n", "years_ints = sorted(list(years_from_col))\n", "years = [str(year) for year in years_ints]\n", "years.remove('1957')\n", "\n", "# make list of continents\n", "continents = []\n", "for continent in dataset['continent']:\n", "    if continent not in continents: \n", "        continents.append(continent)\n", "\n", "columns = []\n", "# make grid\n", "for year in years:\n", "    for continent in continents:\n", "        dataset_by_year = dataset[dataset['year'] == int(year)]\n", "        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]\n", "        for col_name in dataset_by_year_and_cont:\n", "            # each column name is unique\n", "            column_name = '{year}_{continent}_{header}_gapminder_grid'.format(\n", "                year=year, continent=continent, header=col_name\n", "            )\n", "            a_column = Column(list(dataset_by_year_and_cont[col_name]), column_name)\n", "            columns.append(a_column)\n", "\n", "# upload grid\n", "grid = Grid(columns)"]}, {"block": 43, "type": "code", "linesLength": 12, "startIndex": 403, "lines": ["figure = {\n", "    'data': [],\n", "    'layout': {},\n", "    'frames': [],\n", "    'config': {'scrollzoom': True}\n", "}\n", "\n", "# fill in most of layout\n", "figure['layout']['xaxis'] = {'range': [30, 85], 'title': 'Life Expectancy', 'gridcolor': '#FFFFFF'}\n", "figure['layout']['yaxis'] = {'title': 'GDP per Capita', 'type': 'log', 'gridcolor': '#FFFFFF'}\n", "figure['layout']['hovermode'] = 'closest'\n", "figure['layout']['plot_bgcolor'] = 'rgb(223, 232, 243)'"]}, {"block": 44, "type": "code", "linesLength": 52, "startIndex": 415, "lines": ["sliders_dict = {\n", "    'active': 0,\n", "    'yanchor': 'top',\n", "    'xanchor': 'left',\n", "    'currentvalue': {\n", "        'font': {'size': 20},\n", "        'prefix': 'Year:',\n", "        'visible': True,\n", "        'xanchor': 'right'\n", "    },\n", "    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n", "    'pad': {'b': 10, 't': 50},\n", "    'len': 0.9,\n", "    'x': 0.1,\n", "    'y': 0,\n", "    'steps': []\n", "}\n", "\n", "figure['layout']['updatemenus'] = [\n", "    {\n", "        'buttons': [\n", "            {\n", "                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n", "                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n", "                'label': 'Play',\n", "                'method': 'animate'\n", "            },\n", "            {\n", "                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n", "                'transition': {'duration': 0}}],\n", "                'label': 'Pause',\n", "                'method': 'animate'\n", "            }\n", "        ],\n", "        'direction': 'left',\n", "        'pad': {'r': 10, 't': 87},\n", "        'showactive': False,\n", "        'type': 'buttons',\n", "        'x': 0.1,\n", "        'xanchor': 'right',\n", "        'y': 0,\n", "        'yanchor': 'top'\n", "    }\n", "]\n", "\n", "custom_colors = {\n", "    'Asia': 'rgb(171, 99, 250)',\n", "    'Europe': 'rgb(230, 99, 250)',\n", "    'Africa': 'rgb(99, 110, 250)',\n", "    'Americas': 'rgb(25, 211, 243)',\n", "    'Oceania': 'rgb(50, 170, 255)'\n", "}"]}, {"block": 45, "type": "code", "linesLength": 26, "startIndex": 467, "lines": ["\n", "col_name_template = '{year}_{continent}_{header}_gapminder_grid'\n", "year = 1952\n", "for continent in continents:\n", "    data_dict = {\n", "        'xsrc': grid.get_column_reference(col_name_template.format(\n", "            year=year, continent=continent, header='lifeExp'\n", "        )),\n", "        'ysrc': grid.get_column_reference(col_name_template.format(\n", "            year=year, continent=continent, header='gdpPercap'\n", "        )),\n", "        'mode': 'markers',\n", "        'textsrc': grid.get_column_reference(col_name_template.format(\n", "            year=year, continent=continent, header='country'\n", "        )),\n", "        'marker': {\n", "            'sizemode': 'area',\n", "            'sizeref': 200000,\n", "            'sizesrc': grid.get_column_reference(col_name_template.format(\n", "                 year=year, continent=continent, header='pop'\n", "            )),\n", "            'color': custom_colors[continent]\n", "        },\n", "        'name': continent\n", "    }\n", "    figure['data'].append(data_dict)"]}, {"block": 46, "type": "code", "linesLength": 38, "startIndex": 493, "lines": ["for year in years:\n", "    frame = {'data': [], 'name': str(year)}\n", "    for continent in continents:\n", "        data_dict = {\n", "            'xsrc': grid.get_column_reference(col_name_template.format(\n", "                year=year, continent=continent, header='lifeExp'\n", "            )),\n", "            'ysrc': grid.get_column_reference(col_name_template.format(\n", "                year=year, continent=continent, header='gdpPercap'\n", "            )),\n", "            'mode': 'markers',\n", "            'textsrc': grid.get_column_reference(col_name_template.format(\n", "                year=year, continent=continent, header='country'\n", "                )),\n", "            'marker': {\n", "                'sizemode': 'area',\n", "                'sizeref': 200000,\n", "                'sizesrc': grid.get_column_reference(col_name_template.format(\n", "                    year=year, continent=continent, header='pop'\n", "                )),\n", "                'color': custom_colors[continent]\n", "            },\n", "            'name': continent\n", "        }\n", "        frame['data'].append(data_dict)\n", "\n", "    figure['frames'].append(frame)\n", "    slider_step = {'args': [\n", "        [year],\n", "        {'frame': {'duration': 300, 'redraw': False},\n", "         'mode': 'immediate',\n", "       'transition': {'duration': 300}}\n", "     ],\n", "     'label': year,\n", "     'method': 'animate'}\n", "    sliders_dict['steps'].append(slider_step)\n", "\n", "figure['layout']['sliders'] = [sliders_dict]"]}, {"block": 47, "type": "code", "linesLength": 2, "startIndex": 531, "lines": ["\n", "py.icreate_animations(figure)\n"]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 533, "lines": ["spring_data_source[0]['x']"]}, {"block": 49, "type": "code", "linesLength": 6, "startIndex": 534, "lines": ["column_1 = Column(spring_data_source, 'x')\n", "column_2 = Column([0.5], 'y')\n", "column_3 = Column([1.5], 'x2')\n", "column_4 = Column([1.5], 'y2')\n", "\n", "grid = Grid([column_1, column_2, column_3, column_4])"]}, {"block": 50, "type": "code", "linesLength": 41, "startIndex": 540, "lines": ["  'data': [\n", "        {\n", "            'xsrc': grid.get_column_reference('x'),\n", "            'ysrc': grid.get_column_reference('y'),\n", "            'mode': 'markers',\n", "        }\n", "    ],\n", "    'layout': {'title': 'Ping Pong Animation',\n", "               'xaxis': {'range': [0, 2], 'autorange': False},\n", "               'yaxis': {'range': [0, 2], 'autorange': False},\n", "               'updatemenus': [{\n", "                   'buttons': [\n", "                       {'args': [None],\n", "                        'label': 'Play',\n", "                        'method': 'animate'}\n", "               ],\n", "               'pad': {'r': 10, 't': 87},\n", "               'showactive': False,\n", "               'type': 'buttons'\n", "                }]},\n", "    'frames': [\n", "        {\n", "            'data': [\n", "                {\n", "                    'xsrc': grid.get_column_reference('x2'),\n", "                    'ysrc': grid.get_column_reference('y2'),\n", "                    'mode': 'markers',\n", "                }\n", "            ]\n", "        },\n", "        {\n", "            'data': [\n", "                {\n", "                    'xsrc': grid.get_column_reference('x'),\n", "                    'ysrc': grid.get_column_reference('y'),\n", "                    'mode': 'markers',\n", "                }\n", "            ]\n", "        }\n", "    ]\n", "}\n"]}]