[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: IPython Widgets\n", "\n", "In this notebook, we will get an introduction to IPython widgets. These are useful tools that allow us to build interactivity in our notebooks for example, selecting certain data or updating charts."]}, {"block": 1, "type": "code", "linesLength": 20, "startIndex": 3, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.set_config_file(world_readable=True, theme=\"pearl\")\n", "cf.go_offline(connected=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n"]}, {"block": 2, "type": "code", "linesLength": 6, "startIndex": 23, "lines": ["import ipywidgets as widgets\n", "from ipywidgets import interact \n", "\n", "df = pd.read_parquet('https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/data/medium_data_2019_01_06?raw=true')\n", "df.head()\n", "df.describe()"]}, {"block": 3, "type": "code", "linesLength": 12, "startIndex": 29, "lines": ["from sklearn import datasets\n", "import matplotlib.pyplot as plt\n", "\n", "digits = datasets.load_digits()\n", "\n", "def browse_images(digits):\n", "    n = len(digits.images)\n", "    def view_image(i):\n", "        plt.imshow(digits.images[i], cmap=plt.cm.gray_r, interpolation='nearest')\n", "        plt.title('Training: %s' % digits.target[i])\n", "        plt.show()\n", "    interact(view_image, i=(0,n-1))"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 41, "lines": ["browse_images(digits)"]}, {"block": 5, "type": "code", "linesLength": 48, "startIndex": 42, "lines": ["from ipywidgets import interact, interactive\n", "from IPython.display import clear_output, display, HTML\n", "\n", "import numpy as np\n", "from scipy import integrate\n", "\n", "from matplotlib import pyplot as plt\n", "from mpl_toolkits.mplot3d import Axes3D\n", "from matplotlib.colors import cnames\n", "from matplotlib import animation\n", "\n", "def solve_lorenz(N=10, angle=0.0, max_time=4.0, sigma=10.0, beta=8./3, rho=28.0):\n", "\n", "    fig = plt.figure()\n", "    ax = fig.add_axes([0, 0, 1, 1], projection='3d')\n", "    ax.axis('off')\n", "\n", "    # prepare the axes limits\n", "    ax.set_xlim((-25, 25))\n", "    ax.set_ylim((-35, 35))\n", "    ax.set_zlim((5, 55))\n", "    \n", "    def lorenz_deriv(x_y_z, t0, sigma=sigma, beta=beta, rho=rho):\n", "        \"\"\"Compute the time-derivative of a Lorenz system.\"\"\"\n", "        x, y, z = x_y_z\n", "        return [sigma * (y - x), x * (rho - z) - y, x * y - beta * z]\n", "\n", "    # Choose random starting points, uniformly distributed from -15 to 15\n", "    np.random.seed(1)\n", "    x0 = -15 + 30 * np.random.random((N, 3))\n", "\n", "    # Solve for the trajectories\n", "    t = np.linspace(0, max_time, int(250*max_time))\n", "    x_t = np.asarray([integrate.odeint(lorenz_deriv, x0i, t)\n", "                      for x0i in x0])\n", "    \n", "    # choose a different color for each trajectory\n", "    colors = plt.cm.viridis(np.linspace(0, 1, N))\n", "\n", "    for i in range(N):\n", "        x, y, z = x_t[i,:,:].T\n", "        lines = ax.plot(x, y, z, '-', c=colors[i])\n", "        plt.setp(lines, linewidth=2)\n", "\n", "    ax.view_init(30, angle)\n", "    plt.show()\n", "\n", "    return t, x_t"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["t, x_t = solve_lorenz(angle=0, N=10)"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 91, "lines": ["w = interactive(solve_lorenz, angle=(0.,360.), max_time=(0.1, 4.0), \n", "                N=(0,50), sigma=(0.0,50.0), rho=(0.0,50.0))\n", "display(w)"]}, {"block": 8, "type": "code", "linesLength": 6, "startIndex": 94, "lines": ["def select_article(article, column):\n", "    print(df[df['title'] == article][column])\n", "    \n", "interact(select_article, \n", "         article = widgets.Dropdown(options=list(df['title'])),\n", "        column=widgets.Dropdown(options=list(df.columns)))"]}, {"block": 9, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["df.set_index('published_date', inplace=True)"]}, {"block": 10, "type": "code", "linesLength": 8, "startIndex": 101, "lines": ["def plot_up_to(column, date):\n", "    date = pd.Timestamp(date)\n", "    plot_df = df[df.index <= date]\n", "    plot_df[column].cumsum().iplot(mode='markers+lines', xTitle='published date', yTitle=column,\n", "                                  title=f'{column.title()} Until {date.date()}')\n", "    \n", "interact(plot_up_to, column=widgets.Dropdown(options=list(df.columns)), \n", "         date = widgets.DatePicker(value=pd.to_datetime('2019-01-01')))"]}, {"block": 11, "type": "code", "linesLength": 0, "startIndex": 109, "lines": []}]