[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Results of Time Feature Engineering\n", "\n", "In this notebook, we'll look at the results of the time feature engineering. The purpose is to determine (if possible) the best way for encoding time and date features in a time-series problem."]}, {"block": 1, "type": "code", "linesLength": 20, "startIndex": 3, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.set_config_file(world_readable=True, theme=\"pearl\")\n", "cf.go_offline(connected=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n"]}, {"block": 2, "type": "code", "linesLength": 5, "startIndex": 23, "lines": ["lr = pd.read_csv('results/linear_model.csv', index_col=0).reset_index(drop=True)\n", "rr= pd.read_csv('results/random_forest_model.csv', index_col=0).reset_index(drop=True)\n", "\n", "lr = lr.loc[(np.isfinite(lr['score'])) & (lr['score'] > 0)]\n", "rr = rr.loc[(np.isfinite(rr['score'])) & (rr['score'] > 0)]"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["lr.describe()"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 29, "lines": ["rr.describe()"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["rr.pivot_table(index='building_id', values='score', columns='method')"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["rr.pivot_table(index='building_id', values='score', columns='method').iplot(mode='markers', size=6)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 32, "lines": ["rr.groupby('building_id').apply(lambda x: x.loc[x['score'].idxmax(), 'method']).value_counts()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["rr.groupby('method')['score'].describe()"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["# Fractional Cyclical Encoding Works Best"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["rr['score'].idxmax()"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["rr.loc[rr['score'].idxmax()]"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["rr.pivot_table(index='building_id', columns='method', values='score').iplot(kind='box')"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["rr.pivot_table(index='building_id', columns='method', values='score')"]}, {"block": 14, "type": "code", "linesLength": 0, "startIndex": 39, "lines": []}]