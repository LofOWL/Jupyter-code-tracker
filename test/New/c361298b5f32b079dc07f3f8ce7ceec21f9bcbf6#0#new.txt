[{"block": 0, "type": "code", "linesLength": 5, "startIndex": 0, "lines": ["# Pandas and numpy for data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "from scipy.stats import gaussian_kde"]}, {"block": 1, "type": "code", "linesLength": 13, "startIndex": 5, "lines": ["from bokeh.io import show, output_notebook, push_notebook\n", "from bokeh.plotting import figure\n", "\n", "from bokeh.models import CategoricalColorMapper, HoverTool, ColumnDataSource, Panel\n", "from bokeh.models.widgets import CheckboxGroup, Slider, RangeSlider, Tabs, CheckboxButtonGroup\n", "\n", "from bokeh.layouts import column, row, WidgetBox\n", "from bokeh.palettes import Category20_16\n", "\n", "from bokeh.application.handlers import FunctionHandler\n", "from bokeh.application import Application\n", "\n", "output_notebook()"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["## Data Import and Inspection"]}, {"block": 3, "type": "code", "linesLength": 14, "startIndex": 19, "lines": [" # Read in data\n", "flights = pd.read_csv('data/flights.csv')\n", "carriers = pd.read_csv('data/by_carrier.csv')\n", "airlines = pd.read_csv('data/airlines.csv')\n", "\n", "flights = flights.merge(airlines, how = 'left', on = 'carrier')\n", "\n", "available_carriers = list(flights['name'].unique())\n", "airline_colors = list(carriers['color'].unique())\n", "\n", "available_carriers = list(flights['name'].unique())\n", "# Filter flight delays between -60 and 120 minutes\n", "flights = flights[flights['arr_delay'].between(-60, 120)]\n", "flights.head(10)"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["# Original Histogram Application"]}, {"block": 5, "type": "code", "linesLength": 134, "startIndex": 34, "lines": ["def modify_doc(doc):\n", "    \n", "    def make_dataset(carrier_list, range_start = -60, range_end = 120, bin_width = 5):\n", "\n", "        by_carrier = pd.DataFrame(columns=['proportion', 'left', 'right', \n", "                                           'f_proportion', 'f_interval',\n", "                                           'name', 'color'])\n", "        range_extent = range_end - range_start\n", "\n", "        # Iterate through all the carriers\n", "        for i, carrier_name in enumerate(carrier_list):\n", "\n", "            # Subset to the carrier\n", "            subset = flights[flights['name'] == carrier_name]\n", "\n", "            # Create a histogram with 5 minute bins\n", "            arr_hist, edges = np.histogram(subset['arr_delay'], \n", "                                           bins = int(range_extent / bin_width), \n", "                                           range = [range_start, range_end])\n", "\n", "            # Divide the counts by the total to get a proportion\n", "            arr_df = pd.DataFrame({'proportion': arr_hist / np.sum(arr_hist), 'left': edges[:-1], 'right': edges[1:] })\n", "\n", "            # Format the proportion \n", "            arr_df['f_proportion'] = ['%0.5f' % proportion for proportion in arr_df['proportion']]\n", "\n", "            # Format the interval\n", "            arr_df['f_interval'] = ['%d to %d minutes' % (left, right) for left, right in zip(arr_df['left'], arr_df['right'])]\n", "\n", "            # Assign the carrier for labels\n", "            arr_df['name'] = carrier_name\n", "\n", "            # Color each carrier differently\n", "            arr_df['color'] = Category20_16[i]\n", "\n", "            # Add to the overall dataframe\n", "            by_carrier = by_carrier.append(arr_df)\n", "\n", "        # Overall dataframe\n", "        by_carrier = by_carrier.sort_values(['name', 'left'])\n", "\n", "        return ColumnDataSource(by_carrier)\n", "    \n", "    def style(p):\n", "        # Title \n", "        p.title.align = 'center'\n", "        p.title.text_font_size = '20pt'\n", "        p.title.text_font = 'serif'\n", "\n", "        # Axis titles\n", "        p.xaxis.axis_label_text_font_size = '14pt'\n", "        p.xaxis.axis_label_text_font_style = 'bold'\n", "        p.yaxis.axis_label_text_font_size = '14pt'\n", "        p.yaxis.axis_label_text_font_style = 'bold'\n", "\n", "        # Tick labels\n", "        p.xaxis.major_label_text_font_size = '12pt'\n", "        p.yaxis.major_label_text_font_size = '12pt'\n", "\n", "        return p\n", "    \n", "    def make_plot(src):\n", "        # Blank plot with correct labels\n", "        p = figure(plot_width = 700, plot_height = 700, \n", "                  title = 'Histogram of Arrival Delays by Carrier',\n", "                  x_axis_label = 'Delay (min)', y_axis_label = 'Proportion')\n", "\n", "        # Quad glyphs to create a histogram\n", "        p.quad(source = src, bottom = 0, top = 'proportion', left = 'left', right = 'right',\n", "               color = 'color', fill_alpha = 0.7, hover_fill_color = 'color', legend = 'name',\n", "               hover_fill_alpha = 1.0, line_color = 'black')\n", "\n", "        # Hover tool with vline mode\n", "        hover = HoverTool(tooltips=[('Carrier', '@name'), \n", "                                    ('Delay', '@f_interval'),\n", "                                    ('Proportion', '@f_proportion')],\n", "                          mode='vline')\n", "\n", "        p.add_tools(hover)\n", "\n", "        # Styling\n", "        p = style(p)\n", "\n", "        return p\n", "    \n", "    def update(attr, old, new):\n", "        carriers_to_plot = [carrier_selection.labels[i] for i in carrier_selection.active]\n", "        \n", "        new_src = make_dataset(carriers_to_plot,\n", "                               range_start = range_select.value[0],\n", "                               range_end = range_select.value[1],\n", "                               bin_width = binwidth_select.value)\n", "\n", "        src.data.update(new_src.data)\n", "\n", "        \n", "    carrier_selection = CheckboxGroup(labels=available_carriers, active = [0, 1])\n", "    carrier_selection.on_change('active', update)\n", "    \n", "    binwidth_select = Slider(start = 1, end = 30, \n", "                         step = 1, value = 5,\n", "                         title = 'Delay Width (min)')\n", "    binwidth_select.on_change('value', update)\n", "    \n", "    range_select = RangeSlider(start = -60, end = 180, value = (-60, 120),\n", "                               step = 5, title = 'Delay Range (min)')\n", "    range_select.on_change('value', update)\n", "    \n", "    \n", "    \n", "    initial_carriers = [carrier_selection.labels[i] for i in carrier_selection.active]\n", "    \n", "    src = make_dataset(initial_carriers,\n", "                      range_start = range_select.value[0],\n", "                      range_end = range_select.value[1],\n", "                      bin_width = binwidth_select.value)\n", "    \n", "    p = make_plot(src)\n", "    \n", "    # Put controls in a single element\n", "    controls = WidgetBox(carrier_selection, binwidth_select, range_select)\n", "    \n", "    # Create a row layout\n", "    layout = row(controls, p)\n", "    \n", "    # Make a tab with the layout \n", "    tab = Panel(child=layout, title = 'Delay Histogram')\n", "    tabs = Tabs(tabs=[tab])\n", "    \n", "    doc.add_root(tabs)\n", "    \n", "# Set up an application\n", "handler = FunctionHandler(modify_doc)\n", "app = Application(handler)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 168, "lines": ["show(app)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 169, "lines": ["## Function to Make Data for Density Plot"]}, {"block": 8, "type": "code", "linesLength": 26, "startIndex": 170, "lines": ["def make_kde_dataset(carrier_list, range_start, range_end, bandwidth=None):\n", "    xs = []\n", "    ys = []\n", "    colors = []\n", "    labels = []\n", "    \n", "    for i, carrier in enumerate(carrier_list):\n", "        subset = flights[flights['name'] == carrier]\n", "        subset = subset[subset['arr_delay'].between(range_start, range_end)]\n", "        \n", "        kde = gaussian_kde(subset['arr_delay'], bw_method=bandwidth)\n", "        # Evenly space x values\n", "        x = np.linspace(range_start, range_end, 100)\n", "        # Evaluate pdf at every value of x\n", "        y = kde.pdf(x)\n", "        \n", "        # Append the values to plot\n", "        xs.append(list(x))\n", "        ys.append(list(y))\n", "        \n", "        # Append the colors and label\n", "        colors.append(airline_colors[i])\n", "        labels.append(carrier)\n", "        \n", "    kernel_source = ColumnDataSource(data={'x': xs, 'y': ys, 'color': colors, 'label': labels})\n", "    return kernel_source"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 196, "lines": ["## Example of Density Plot in Bokeh"]}, {"block": 10, "type": "code", "linesLength": 7, "startIndex": 197, "lines": ["carrier_list = available_carriers[:5]\n", "kde_src = make_kde_dataset(carrier_list, range_start=-60, range_end=120)\n", "p = figure(plot_width = 500, plot_height = 500, title = 'Density Plots of Airline Delays',\n", "          x_axis_label = 'Delay (min)', y_axis_label = 'Density')\n", "\n", "p.multi_line('x', 'y', color = 'color', legend = 'label', line_width = 3, source = kde_src)\n", "show(p)"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 204, "lines": ["# Density Plot in Application"]}, {"block": 12, "type": "code", "linesLength": 212, "startIndex": 205, "lines": ["def modify_doc(doc):\n", "    \n", "    def make_dataset(carrier_list, range_start = -60, range_end = 120, bin_width = 5):\n", "\n", "        by_carrier = pd.DataFrame(columns=['proportion', 'left', 'right', \n", "                                           'f_proportion', 'f_interval',\n", "                                           'name', 'color'])\n", "        range_extent = range_end - range_start\n", "\n", "        # Iterate through all the carriers\n", "        for i, carrier_name in enumerate(carrier_list):\n", "\n", "            # Subset to the carrier\n", "            subset = flights[flights['name'] == carrier_name]\n", "\n", "            # Create a histogram with 5 minute bins\n", "            arr_hist, edges = np.histogram(subset['arr_delay'], \n", "                                           bins = int(range_extent / bin_width), \n", "                                           range = [range_start, range_end])\n", "\n", "            # Divide the counts by the total to get a proportion\n", "            arr_df = pd.DataFrame({'proportion': arr_hist / np.sum(arr_hist), 'left': edges[:-1], 'right': edges[1:] })\n", "\n", "            # Format the proportion \n", "            arr_df['f_proportion'] = ['%0.5f' % proportion for proportion in arr_df['proportion']]\n", "\n", "            # Format the interval\n", "            arr_df['f_interval'] = ['%d to %d minutes' % (left, right) for left, right in zip(arr_df['left'], arr_df['right'])]\n", "\n", "            # Assign the carrier for labels\n", "            arr_df['name'] = carrier_name\n", "\n", "            # Color each carrier differently\n", "            arr_df['color'] = Category20_16[i]\n", "\n", "            # Add to the overall dataframe\n", "            by_carrier = by_carrier.append(arr_df)\n", "\n", "        # Overall dataframe\n", "        by_carrier = by_carrier.sort_values(['name', 'left'])\n", "\n", "        return ColumnDataSource(by_carrier)\n", "    \n", "    \n", "    def make_kde_dataset(carrier_list, range_start, range_end, bandwidth):\n", "        \n", "        xs = []\n", "        ys = []\n", "        colors = []\n", "        labels = []\n", "\n", "        for i, carrier in enumerate(carrier_list):\n", "            subset = flights[flights['name'] == carrier]\n", "            subset = subset[subset['arr_delay'].between(range_start, range_end)]\n", "\n", "            kde = gaussian_kde(subset['arr_delay'], bw_method=bandwidth)\n", "            # Evenly space x values\n", "            x = np.linspace(range_start, range_end, 100)\n", "            # Evaluate pdf at every value of x\n", "            y = kde.pdf(x)\n", "\n", "            # Append the values to plot\n", "            xs.append(list(x))\n", "            ys.append(list(y))\n", "\n", "            # Append the colors and label\n", "            colors.append(airline_colors[i])\n", "            labels.append(carrier)\n", "\n", "        kernel_source = ColumnDataSource(data={'x': xs, 'y': ys, 'color': colors, 'label': labels})\n", "        \n", "        return kernel_source\n", "    \n", "    def style(p):\n", "        # Title \n", "        p.title.align = 'center'\n", "        p.title.text_font_size = '20pt'\n", "        p.title.text_font = 'serif'\n", "\n", "        # Axis titles\n", "        p.xaxis.axis_label_text_font_size = '14pt'\n", "        p.xaxis.axis_label_text_font_style = 'bold'\n", "        p.yaxis.axis_label_text_font_size = '14pt'\n", "        p.yaxis.axis_label_text_font_style = 'bold'\n", "\n", "        # Tick labels\n", "        p.xaxis.major_label_text_font_size = '12pt'\n", "        p.yaxis.major_label_text_font_size = '12pt'\n", "\n", "        return p\n", "    \n", "    def make_plot(src):\n", "        # Blank plot with correct labels\n", "        p = figure(plot_width = 700, plot_height = 700, \n", "                  title = 'Histogram of Arrival Delays by Carrier',\n", "                  x_axis_label = 'Delay (min)', y_axis_label = 'Proportion')\n", "\n", "        # Quad glyphs to create a histogram\n", "        p.quad(source = src, bottom = 0, top = 'proportion', left = 'left', right = 'right',\n", "               color = 'color', fill_alpha = 0.7, hover_fill_color = 'color', legend = 'name',\n", "               hover_fill_alpha = 1.0, line_color = 'black')\n", "\n", "        # Hover tool with vline mode\n", "        hover = HoverTool(tooltips=[('Carrier', '@name'), \n", "                                    ('Delay', '@f_interval'),\n", "                                    ('Proportion', '@f_proportion')],\n", "                          mode='vline')\n", "\n", "        p.add_tools(hover)\n", "\n", "        # Styling\n", "        p = style(p)\n", "\n", "        return p\n", "    \n", "    def make_kde_plot(kde_src):\n", "        p = figure(plot_width = 700, plot_height = 700,\n", "                   title = 'Density Plot of Arrival Delays by Carrier',\n", "                   x_axis_label = 'Delay (min)', y_axis_label = 'Density')\n", "        \n", "        \n", "        p.multi_line('x', 'y', color = 'color', legend = 'label', \n", "                     line_width = 3,\n", "                     source = kde_src)\n", "        \n", "        # Hover tool with next line policy\n", "        hover = HoverTool(tooltips=[('Carrier', '@label'), \n", "                                    ('Delay', '$x'),\n", "                                    ('Density', '$y')],\n", "                          line_policy = 'next')\n", "        \n", "        # Add the hover tool and styling\n", "        p.add_tools(hover)\n", "        \n", "        p = style(p)\n", "        \n", "        return p\n", "    \n", "    def update(attr, old, new):\n", "        carriers_to_plot = [carrier_selection.labels[i] for i in carrier_selection.active]\n", "        \n", "        new_src = make_dataset(carriers_to_plot,\n", "                               range_start = range_select.value[0],\n", "                               range_end = range_select.value[1],\n", "                               bin_width = binwidth_select.value)\n", "        \n", "        if bandwidth_choose.active == []:\n", "            bandwidth = None\n", "        else:\n", "            bandwidth = bandwidth_select.value\n", "            \n", "        new_kde_src = make_kde_dataset(carriers_to_plot,\n", "                                       range_start = range_select.value[0],\n", "                                       range_end = range_select.value[1],\n", "                                       bandwidth = bandwidth)\n", "\n", "        src.data.update(new_src.data)\n", "        kde_src.data.update(new_kde_src.data)\n", "        \n", "        \n", "    carrier_selection = CheckboxGroup(labels=available_carriers, active = [0, 1])\n", "    carrier_selection.on_change('active', update)\n", "    \n", "    binwidth_select = Slider(start = 1, end = 30, \n", "                         step = 1, value = 5,\n", "                         title = 'Delay Width (min)')\n", "    binwidth_select.on_change('value', update)\n", "    \n", "    range_select = RangeSlider(start = -60, end = 180, value = (-60, 120),\n", "                               step = 5, title = 'Delay Range (min)')\n", "    range_select.on_change('value', update)\n", "    \n", "    \n", "    bandwidth_select = Slider(start = 0.1, end = 5, \n", "                         step = 0.1, value = 0.5,\n", "                         title = 'Bandwidth for Density Plot')\n", "    bandwidth_select.on_change('value', update)\n", "    \n", "    bandwidth_choose = CheckboxButtonGroup(labels=['Choose Bandwidth (Auto)'], active = [])\n", "    bandwidth_choose.on_change('active', update)\n", "\n", "    initial_carriers = [carrier_selection.labels[i] for i in carrier_selection.active]\n", "    \n", "    src = make_dataset(initial_carriers,\n", "                      range_start = range_select.value[0],\n", "                      range_end = range_select.value[1],\n", "                      bin_width = binwidth_select.value)\n", "    \n", "    kde_src = make_kde_dataset(initial_carriers, \n", "                               range_start = range_select.value[0],\n", "                               range_end = range_select.value[1],\n", "                               bandwidth = bandwidth_select.value) \n", "    \n", "    p = make_plot(src)\n", "    kde_p = make_kde_plot(kde_src)\n", "    \n", "    # Put controls in a single element\n", "    controls = WidgetBox(carrier_selection, binwidth_select, range_select, \n", "                         bandwidth_select, bandwidth_choose)\n", "    \n", "    # Create a row layout\n", "    layout = row(controls, p, kde_p)\n", "    \n", "    # Make a tab with the layout \n", "    tab = Panel(child=layout, title = 'Histogram and Density Plots')\n", "    tabs = Tabs(tabs=[tab])\n", "    \n", "    doc.add_root(tabs)\n", "    \n", "# Set up an application\n", "handler = FunctionHandler(modify_doc)\n", "app = Application(handler)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 417, "lines": ["show(app)"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 418, "lines": ["## Shaded Density Plots in Application"]}, {"block": 15, "type": "code", "linesLength": 0, "startIndex": 419, "lines": []}]