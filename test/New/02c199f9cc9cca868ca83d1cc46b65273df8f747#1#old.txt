[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["# Introduction\n", "State notebook purpose here"]}, {"block": 1, "type": "markdown", "linesLength": 2, "startIndex": 2, "lines": ["### Imports\n", "Import libraries and write settings here."]}, {"block": 2, "type": "code", "linesLength": 12, "startIndex": 4, "lines": ["import numpy as np\n", "import xarray as xr\n", "import holoviews as hv\n", "import geoviews as gv\n", "import geoviews.feature as gf\n", "\n", "from cartopy import crs\n", "from geoviews import opts\n", "\n", "gv.extension('matplotlib')\n", "\n", "gv.output(size=150)"]}, {"block": 3, "type": "code", "linesLength": 3, "startIndex": 16, "lines": ["from sqlalchemy import create_engine\n", "engine = create_engine('postgres://localhost:5432/global_fishing_watch')\n", "engine.table_names()"]}, {"block": 4, "type": "code", "linesLength": 11, "startIndex": 19, "lines": ["xr_ensemble = xr.open_dataset('geoviews-examples/data/ensemble.nc').load()\n", "\n", "def get_fishing_effort(nrows):\n", "    df = pd.read_sql(f\"\"\"SELECT * FROM fishing_effort LIMIT {nrows}\"\"\",\n", "             engine, parse_dates=['date'])\n", "    df['flag'] = df['flag'].astype('category')\n", "    df['geartype'] = df['geartype'].astype('category')\n", "    return df\n", "\n", "df = get_fishing_effort(10000)\n", "df.info()"]}, {"block": 5, "type": "code", "linesLength": 8, "startIndex": 30, "lines": ["def get_fishing_by_vessel(nrows):\n", "    df = pd.read_sql(f\"\"\"SELECT * FROM fishing_effort_by_vessel LIMIT {nrows}\"\"\",\n", "             engine, parse_dates=['date'])\n", "    df = df.set_index('mmsi')\n", "    return df\n", "    \n", "vessels = get_fishing_by_vessel(100000)\n", "vessels.head()"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["la, li, times, new_vessels = format_df(vessels)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 39, "lines": ["new_vessels.head()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 40, "lines": ["la.shape, li.shape, times.shape"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 41, "lines": ["fishing_data = xr.Dataset.from_dataframe(new_vessels[['fishing_hours']])\n", "fishing_data"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 43, "lines": ["gdata = gv.Dataset(fishing_data)\n", "gdata"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 45, "lines": ["gdata.to(gv.Image, ['longitude', 'latitude']) * gv.feature.coastline * gv.feature.land"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 46, "lines": ["from itertools import product\n", "\n", "combos = list(product(la, li, times))\n", "len(combos)"]}, {"block": 13, "type": "code", "linesLength": 3, "startIndex": 50, "lines": ["las = [c[0] for c in combos]\n", "lis = [c[1] for c in combos]\n", "ts = [c[2] for c in combos]"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 53, "lines": ["t = pd.DataFrame(index = pd.MultiIndex.from_tuples(combos))\n", "t.head()"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 55, "lines": ["new_vessels.index.names"]}, {"block": 16, "type": "code", "linesLength": 2, "startIndex": 56, "lines": ["t.index.names = ['latitude', 'longitude', 'date']\n", "t.merge(new_vessels, left_index=True, right_index=True, how='left')"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 58, "lines": ["pd.read_sql(\"\"\"SELECT * FROM fishing_effort_by_vessel fe\n", "               JOIN fishing_vessels fv ON fe.mmsi = fv.mmsi\n", "                LIMIT 10000\"\"\", engine)"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["fishing_data.to_dataframe().shape"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["new_vessels.fishing_hours.shape"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 63, "lines": ["xr.Dataset(data_vars=(a\n", "                     )'fishing_hours')"]}, {"block": 21, "type": "code", "linesLength": 10, "startIndex": 65, "lines": ["def format_df(df, n=10_000):\n", "    ...:     df = df.iloc[:n]\n", "    ...:     df = df.drop_duplicates(subset=['latitude', 'longitude', 'date'])\n", "    ...:     df = df.sort_values(['latitude', 'longitude', 'date'])\n", "    ...:     index = pd.MultiIndex.from_arrays([df['latitude'], df['longitude'], df['date']])\n", "    ...:     df.index = index\n", "    ...:     latitudes = df.index.levels[0]\n", "    ...:     longitudes = df.index.levels[1]\n", "    ...:     times = df.index.levels[2]\n", "    ...:     return latitudes, longitudes, times, df"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["la, li, ti, new_df = format_df(df, 150)"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 76, "lines": ["xdata = xr.Dataset.from_dataframe(new_df[['fishing_hours', 'mmsi_present']])\n", "gdata = gv.Dataset(xdata, kdims=['date', 'longitude', 'latitude'], vdims=['fishing_hours'])"]}, {"block": 24, "type": "code", "linesLength": 8, "startIndex": 78, "lines": ["from geoviews import opts\n", "\n", "gv.extension('bokeh', 'matplotlib')\n", "\n", "opts.defaults(\n", "    opts.Image(width=600, height=400, colorbar=True),\n", "    opts.Feature(apply_ranges=False),\n", "    opts.QuadMesh(width=600, height=400, colorbar=True))"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 86, "lines": ["quadmeshes = gdata.to(gv.QuadMesh, ['longitude', 'latitude'], dynamic=True)\n", "quadmeshes * gv.feature.coastline"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 88, "lines": ["def get_fishing_effort(nrows)"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 89, "lines": ["gdata.to(gv.Image, ['longitude', 'latitude']) * gv.feature.coastline"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["new_df"]}, {"block": 29, "type": "code", "linesLength": 30, "startIndex": 91, "lines": ["# Data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 50\n", "pd.options.display.max_rows = 30\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "from IPython import get_ipython\n", "ipython = get_ipython()\n", "\n", "# autoreload extension\n", "if 'autoreload' not in ipython.extension_manager.loaded:\n", "    %load_ext autoreload\n", "\n", "%autoreload 2\n", "\n", "# Visualizations\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.go_offline(connected=True)\n", "cf.set_config_file(theme='white')"]}, {"block": 30, "type": "markdown", "linesLength": 2, "startIndex": 121, "lines": ["# Analysis/Modeling\n", "Do work here"]}, {"block": 31, "type": "markdown", "linesLength": 2, "startIndex": 123, "lines": ["# Results\n", "Show graphs and stats here"]}, {"block": 32, "type": "markdown", "linesLength": 2, "startIndex": 125, "lines": ["# Conclusions and Next Steps\n", "Summarize findings here"]}, {"block": 33, "type": "code", "linesLength": 0, "startIndex": 127, "lines": []}, {"block": 34, "type": "code", "linesLength": 0, "startIndex": 127, "lines": []}, {"block": 35, "type": "code", "linesLength": 0, "startIndex": 127, "lines": []}]