[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Plotting with Plotly + Cufflinks in Python\n", "\n", "In this notebook, we will see how to use plotly and cufflinks to create interactive stunning figures in Python. This combination of libraries is extremely powerful and much more efficient than other methods of plotting in Python."]}, {"block": 1, "type": "code", "linesLength": 19, "startIndex": 3, "lines": ["# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "# plotly standard imports\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot\n", "\n", "# Cufflinks wrapper on plotly\n", "import cufflinks\n", "cufflinks.go_offline()"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 22, "lines": ["df = pd.read_parquet('data/medium_data_2019_01_06')\n", "df.head()"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 24, "lines": ["# Histograms"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["df['claps'].iplot(kind='hist', bins=30, xTitle='claps', \n", "                 yTitle='count', title='Claps Distribution')"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 27, "lines": ["## Bar Plot"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 28, "lines": ["cufflinks.themes.THEMES.keys()"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["df['publication'].iplot(kind='histogram', xTitle='publication', theme='solar',\n", "                        yTitle='Count', title='Publication Counts')"]}, {"block": 8, "type": "markdown", "linesLength": 1, "startIndex": 31, "lines": ["## Two Variables "]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 32, "lines": ["df['hour_started'] = df['started_date'].dt.hour\n", "df['hour_published'] = df['published_date'].dt.hour"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["### Grouped Bars"]}, {"block": 11, "type": "code", "linesLength": 8, "startIndex": 35, "lines": ["df[['hour_published', 'hour_started']].iplot(\n", "    kind='hist',\n", "    bins=24,\n", "    opacity=0.8,\n", "    barmode='group',\n", "    xTitle='Hour',\n", "    yTitle='Count',\n", "    title='Hour Started and Hour Published')"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 43, "lines": ["### Overlaid Bars"]}, {"block": 13, "type": "code", "linesLength": 8, "startIndex": 44, "lines": ["df[['hour_published', 'hour_started']].iplot(\n", "    kind='hist',\n", "    bins=24,\n", "    opacity=0.8,\n", "    barmode='overlay',\n", "    xTitle='Hour',\n", "    yTitle='Count',\n", "    title='Hour Started and Hour Published')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 52, "lines": ["## Boxplot"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["df[['claps', 'fans']].iplot(kind='box', theme='white',  colorscale='set2', yTitle='Number', title='Box Plot')"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 54, "lines": ["### Boxplot with Different Categories"]}, {"block": 17, "type": "code", "linesLength": 4, "startIndex": 55, "lines": ["df.pivot(columns='publication', values='fans').iplot(kind='box', xTitle='publication', \n", "                                                     layout=dict(yaxis=dict(title='claps'), title='Claps by Publication',\n", "                                                                 margin=dict(b = 140)),\n", "                                                     theme='white')"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["# Scatter Plots"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["## Date Axis"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["df.set_index('published_date')['claps'].iplot(mode='markers', opacity=0.8, theme='white', xTitle='Date', yTitle='Claps', title='Claps over Time')"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 62, "lines": ["## Two Variables"]}, {"block": 22, "type": "code", "linesLength": 3, "startIndex": 63, "lines": ["df.iplot(x='word_count', y='views', xTitle='Word Count', yTitle='views',\n", "         text='title', mode='markers',\n", "         theme='henanigans', title='Views vs Word Count')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## Log Scale"]}, {"block": 24, "type": "code", "linesLength": 5, "startIndex": 67, "lines": ["layout = dict(xaxis=dict(type='log', title='Word Count'), yaxis=dict(title='views'), title='Views vs Word Count Log Axis')\n", "\n", "df.iplot(x='word_count', y='views', layout=layout,\n", "         text='title', mode='markers',\n", "         theme='white')"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 72, "lines": ["## By Category"]}, {"block": 26, "type": "code", "linesLength": 2, "startIndex": 73, "lines": ["df.pivot_table(values='views', index='published_date', columns='publication').iplot(mode='markers', theme='white', xTitle='Date', yTitle='Views', \n", "                                                                                    title='Views over Time by Publication')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 75, "lines": ["## Three Variables"]}, {"block": 28, "type": "code", "linesLength": 7, "startIndex": 76, "lines": ["df.iplot(x = 'word_count', y='reads', opacity=0.8, size=df['read_ratio'], \n", "         theme='white', \n", "         text = [f'Title: {t} <br> Ratio: {r:.2f}%' for t, r in zip(df['title'], df['read_ratio'])],\n", "         mode='markers', \n", "         layout=dict(xaxis=dict(type='log', title='Word Count'), \n", "                                     yaxis=dict(title='Reads'),\n", "                                     title='Reads vs Log Word Count Sized by Read Ratio'))"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 83, "lines": ["### Formatting Text"]}, {"block": 30, "type": "code", "linesLength": 3, "startIndex": 84, "lines": ["text = [f'Title: {t} <br> Ratio: {r:.2f}% <br><a href={l} target=\"_blank\">Link</a>' for t, r, l in zip(df['title'], \n", "                                                                                                df['read_ratio'],\n", "                                                                                                df['link'])]"]}, {"block": 31, "type": "code", "linesLength": 2, "startIndex": 87, "lines": ["from IPython.display import HTML\n", "HTML(text[0])"]}, {"block": 32, "type": "code", "linesLength": 10, "startIndex": 89, "lines": ["df.iplot(x = 'word_count', y='reads', opacity=0.8, size=df['read_ratio'], \n", "         theme='white', \n", "         text = [f'Title: {t} <br> Ratio: {r:.2f}% <br><a href={l}>Link</a>' for t, r, l in zip(df['title'], \n", "                                                                                                df['read_ratio'],\n", "                                                                                                df['link'])],\n", "         mode='markers', \n", "         layout=dict(xaxis=dict(type='log', title='Word Count'), \n", "                                     yaxis=dict(title='Reads'),\n", "                                     title='Reads vs Log Word Count Sized by Read Ratio'))\n", "                                     "]}, {"block": 33, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["### Four Variables"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["go.scatter.Marker()"]}, {"block": 35, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["cufflinks.colors.scales()"]}, {"block": 36, "type": "code", "linesLength": 3, "startIndex": 102, "lines": ["colorscales = ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu',\n", "            'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet',\n", "            'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis']"]}, {"block": 37, "type": "code", "linesLength": 24, "startIndex": 105, "lines": ["data = [\n", "    go.Scatter(\n", "        x=df['word_count'],\n", "        y=df['reads'],\n", "        text = df['title'],\n", "        mode='markers',\n", "        marker=dict(\n", "            sizemin=10,\n", "            size=df['read_ratio'],\n", "            colorscale=colorscales[10],\n", "            showscale=True,\n", "            color=df['read_time'],\n", "            line=dict(color='black', width=1.2)))\n", "]\n", "\n", "figure = go.Figure(\n", "    data=data,\n", "    layout=go.Layout(\n", "        xaxis=dict(title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Word Count Colored by Read Time and Sized by Read Ratio'\n", "    ))\n", "\n", "iplot(figure)"]}, {"block": 38, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["# Scatter Matrix"]}, {"block": 39, "type": "code", "linesLength": 1, "startIndex": 130, "lines": ["colorscales"]}, {"block": 40, "type": "code", "linesLength": 0, "startIndex": 131, "lines": []}, {"block": 41, "type": "code", "linesLength": 4, "startIndex": 131, "lines": ["figure = ff.create_scatterplotmatrix(df[['claps', 'publication', 'views', 'read_ratio', 'word_count']],\n", "                                     height=1000, width=1000, text=df['title'],\n", "                                     diag = 'histogram',  index='publication')\n", "iplot(figure)"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 135, "lines": ["# Heatmap"]}, {"block": 43, "type": "code", "linesLength": 1, "startIndex": 136, "lines": ["import plotly.figure_factory as ff"]}, {"block": 44, "type": "code", "linesLength": 8, "startIndex": 137, "lines": ["corrs = df.corr()\n", "figure = ff.create_annotated_heatmap(z=corrs.values, x=list(corrs.columns ), \n", "                                     y=list(corrs.index), colorscale=colorscales[5],\n", "                                     annotation_text=corrs.round(2).values, showscale=True)\n", "figure.layout.margin = dict(l=200, t=200)\n", "figure.layout.height = 800\n", "figure.layout.width = 1000\n", "iplot(figure)"]}, {"block": 45, "type": "markdown", "linesLength": 1, "startIndex": 145, "lines": ["## Spread"]}, {"block": 46, "type": "code", "linesLength": 1, "startIndex": 146, "lines": ["df.set_index('published_date')[['views', 'reads']].iplot(kind='spread', mode='markers')"]}, {"block": 47, "type": "markdown", "linesLength": 17, "startIndex": 147, "lines": ["    kinds = \n", "               scatter\n", "               bar\n", "               box\n", "               spread\n", "               ratio\n", "               heatmap\n", "               surface\n", "               histogram\n", "               bubble\n", "               bubble3d\n", "               scatter3d       \n", "               scattergeo\n", "               ohlc\n", "               candle\n", "               pie\n", "               choroplet  "]}, {"block": 48, "type": "code", "linesLength": 1, "startIndex": 164, "lines": ["df.set_index('published_date')[['views', 'reads', 'publication']].iplot(kind='ratio', categories='publication')"]}, {"block": 49, "type": "code", "linesLength": 2, "startIndex": 165, "lines": ["df.groupby('publication', as_index=False)['reads'].count().iplot(kind='pie', \n", "                                                                 labels='publication', values='reads')"]}, {"block": 50, "type": "code", "linesLength": 1, "startIndex": 167, "lines": ["cufflinks.colors.scales()"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 168, "lines": ["# 3D Surface Plot"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 169, "lines": ["df[['views', 'reads', 'read_ratio']].iplot(kind='surface')"]}, {"block": 53, "type": "code", "linesLength": 1, "startIndex": 170, "lines": ["df.pivot(columns='publication', values='claps', index='started_date').head()"]}, {"block": 54, "type": "code", "linesLength": 10, "startIndex": 171, "lines": ["df.iplot(\n", "    x = 'claps',\n", "    kind='hist',\n", "    bins=24,\n", "    categories='publication',\n", "    opacity=0.8,\n", "    barmode='overlay',\n", "    xTitle='Hour',\n", "    yTitle='Count',\n", "    title='Hour Started and Hour Published')"]}, {"block": 55, "type": "code", "linesLength": 1, "startIndex": 181, "lines": ["df[['claps', 'fans']].iplot(kind='hist', bins=20)"]}, {"block": 56, "type": "code", "linesLength": 9, "startIndex": 182, "lines": ["layout = dict(xaxis=dict(type='log', title='word count'),\n", "              yaxis=dict(title='Claps'), title='Claps vs Word Count')\n", "\n", "data = [go.Scatter(x = df['word_count'], \n", "                   y = df['claps'], \n", "                   mode='markers')]\n", "\n", "figure = go.Figure(data=data, layout=layout)\n", "iplot(figure)"]}, {"block": 57, "type": "code", "linesLength": 0, "startIndex": 191, "lines": []}, {"block": 58, "type": "code", "linesLength": 2, "startIndex": 191, "lines": ["from plotly.offline import iplot\n", "iplot(figure)"]}, {"block": 59, "type": "code", "linesLength": 2, "startIndex": 193, "lines": ["from plotly.plotly import plot\n", "from plotly.offline import init_notebook_mode"]}, {"block": 60, "type": "code", "linesLength": 1, "startIndex": 195, "lines": ["plot(figure)"]}, {"block": 61, "type": "code", "linesLength": 12, "startIndex": 196, "lines": ["import pandas as pd\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "cufflinks.go_offline()\n", "\n", "\n", "layout = go.Layout(xaxis=dict(type='date'))\n", "df = pd.read_parquet(\n", "    'https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/data/medium_data_2019_01_06?raw=true'\n", ")\n", "\n", "df.iplot(kind='scatter', y='claps', x='published_date', mode='markers')"]}]