[{"block": 0, "type": "markdown", "linesLength": 2, "startIndex": 0, "lines": ["<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n", "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction:-Plotting-with-Plotly-+-Cufflinks-in-Python\" data-toc-modified-id=\"Introduction:-Plotting-with-Plotly-+-Cufflinks-in-Python-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Introduction: Plotting with Plotly + Cufflinks in Python</a></span><ul class=\"toc-item\"><li><span><a href=\"#Plotly-+-Cufflinks-Overview\" data-toc-modified-id=\"Plotly-+-Cufflinks-Overview-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>Plotly + Cufflinks Overview</a></span><ul class=\"toc-item\"><li><span><a href=\"#Data\" data-toc-modified-id=\"Data-1.1.1\"><span class=\"toc-item-num\">1.1.1&nbsp;&nbsp;</span>Data</a></span></li><li><span><a href=\"#Kinds-of-Plots\" data-toc-modified-id=\"Kinds-of-Plots-1.1.2\"><span class=\"toc-item-num\">1.1.2&nbsp;&nbsp;</span>Kinds of Plots</a></span></li></ul></li></ul></li><li><span><a href=\"#Univariate-(Single-Variable)-Distributions\" data-toc-modified-id=\"Univariate-(Single-Variable)-Distributions-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Univariate (Single Variable) Distributions</a></span><ul class=\"toc-item\"><li><span><a href=\"#Histograms\" data-toc-modified-id=\"Histograms-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>Histograms</a></span><ul class=\"toc-item\"><li><span><a href=\"#Percentage-Histogram\" data-toc-modified-id=\"Percentage-Histogram-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;</span>Percentage Histogram</a></span></li></ul></li><li><span><a href=\"#Grouped-Histogram\" data-toc-modified-id=\"Grouped-Histogram-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Grouped Histogram</a></span></li><li><span><a href=\"#Overlaid-Histogram\" data-toc-modified-id=\"Overlaid-Histogram-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Overlaid Histogram</a></span></li><li><span><a href=\"#Bar-Plot\" data-toc-modified-id=\"Bar-Plot-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>Bar Plot</a></span></li><li><span><a href=\"#Bar-Plot-with-Two-Categories\" data-toc-modified-id=\"Bar-Plot-with-Two-Categories-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;</span>Bar Plot with Two Categories</a></span></li><li><span><a href=\"#Bar-Plot-with-Second-Y-Axis\" data-toc-modified-id=\"Bar-Plot-with-Second-Y-Axis-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;</span>Bar Plot with Second Y-Axis</a></span></li><li><span><a href=\"#Boxplot\" data-toc-modified-id=\"Boxplot-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;</span>Boxplot</a></span><ul class=\"toc-item\"><li><span><a href=\"#Boxplot-with-Different-Categories\" data-toc-modified-id=\"Boxplot-with-Different-Categories-2.7.1\"><span class=\"toc-item-num\">2.7.1&nbsp;&nbsp;</span>Boxplot with Different Categories</a></span></li></ul></li></ul></li><li><span><a href=\"#Scatter-Plots\" data-toc-modified-id=\"Scatter-Plots-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Scatter Plots</a></span><ul class=\"toc-item\"><li><span><a href=\"#Time-Series\" data-toc-modified-id=\"Time-Series-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Time-Series</a></span></li><li><span><a href=\"#Two-Variables-Time-Series\" data-toc-modified-id=\"Two-Variables-Time-Series-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>Two Variables Time-Series</a></span></li><li><span><a href=\"#Text-Annotations-on-Plot\" data-toc-modified-id=\"Text-Annotations-on-Plot-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;</span>Text Annotations on Plot</a></span></li><li><span><a href=\"#Two-Numeric-Variables-Scatterplot\" data-toc-modified-id=\"Two-Numeric-Variables-Scatterplot-3.4\"><span class=\"toc-item-num\">3.4&nbsp;&nbsp;</span>Two Numeric Variables Scatterplot</a></span></li><li><span><a href=\"#Two-Variables-with-Best-Fit-Line\" data-toc-modified-id=\"Two-Variables-with-Best-Fit-Line-3.5\"><span class=\"toc-item-num\">3.5&nbsp;&nbsp;</span>Two Variables with Best Fit Line</a></span></li><li><span><a href=\"#Log-Scale\" data-toc-modified-id=\"Log-Scale-3.6\"><span class=\"toc-item-num\">3.6&nbsp;&nbsp;</span>Log Scale</a></span></li><li><span><a href=\"#Scatterplot-By-Category\" data-toc-modified-id=\"Scatterplot-By-Category-3.7\"><span class=\"toc-item-num\">3.7&nbsp;&nbsp;</span>Scatterplot By Category</a></span></li><li><span><a href=\"#Cumulative-Plot\" data-toc-modified-id=\"Cumulative-Plot-3.8\"><span class=\"toc-item-num\">3.8&nbsp;&nbsp;</span>Cumulative Plot</a></span></li></ul></li><li><span><a href=\"#More-than-2-Variables\" data-toc-modified-id=\"More-than-2-Variables-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>More than 2 Variables</a></span><ul class=\"toc-item\"><li><span><a href=\"#Secondary-Y-Axis\" data-toc-modified-id=\"Secondary-Y-Axis-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Secondary Y-Axis</a></span></li><li><span><a href=\"#Three-Variables-with-a-Category\" data-toc-modified-id=\"Three-Variables-with-a-Category-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>Three Variables with a Category</a></span></li><li><span><a href=\"#Three-Numeric-Variables\" data-toc-modified-id=\"Three-Numeric-Variables-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;</span>Three Numeric Variables</a></span></li><li><span><a href=\"#Four-Variables\" data-toc-modified-id=\"Four-Variables-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;</span>Four Variables</a></span></li><li><span><a href=\"#Five-Variables\" data-toc-modified-id=\"Five-Variables-4.5\"><span class=\"toc-item-num\">4.5&nbsp;&nbsp;</span>Five Variables</a></span></li></ul></li><li><span><a href=\"#Limiting-Range-and-Adding-Lines-to-Plots\" data-toc-modified-id=\"Limiting-Range-and-Adding-Lines-to-Plots-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Limiting Range and Adding Lines to Plots</a></span></li><li><span><a href=\"#Scatter-Matrix\" data-toc-modified-id=\"Scatter-Matrix-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>Scatter Matrix</a></span></li><li><span><a href=\"#Heatmap\" data-toc-modified-id=\"Heatmap-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;</span>Heatmap</a></span></li><li><span><a href=\"#Spread\" data-toc-modified-id=\"Spread-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;</span>Spread</a></span></li><li><span><a href=\"#Ratio\" data-toc-modified-id=\"Ratio-9\"><span class=\"toc-item-num\">9&nbsp;&nbsp;</span>Ratio</a></span></li><li><span><a href=\"#Themes\" data-toc-modified-id=\"Themes-10\"><span class=\"toc-item-num\">10&nbsp;&nbsp;</span>Themes</a></span><ul class=\"toc-item\"><li><span><a href=\"#Colorscales-in-cufflinks\" data-toc-modified-id=\"Colorscales-in-cufflinks-10.1\"><span class=\"toc-item-num\">10.1&nbsp;&nbsp;</span>Colorscales in cufflinks</a></span></li><li><span><a href=\"#Colorscales-in-Plotly\" data-toc-modified-id=\"Colorscales-in-Plotly-10.2\"><span class=\"toc-item-num\">10.2&nbsp;&nbsp;</span>Colorscales in Plotly</a></span></li></ul></li><li><span><a href=\"#Pie-Chart\" data-toc-modified-id=\"Pie-Chart-11\"><span class=\"toc-item-num\">11&nbsp;&nbsp;</span>Pie Chart</a></span></li><li><span><a href=\"#3D-Surface-Plot\" data-toc-modified-id=\"3D-Surface-Plot-12\"><span class=\"toc-item-num\">12&nbsp;&nbsp;</span>3D Surface Plot</a></span></li><li><span><a href=\"#3D-Scatter-Plot\" data-toc-modified-id=\"3D-Scatter-Plot-13\"><span class=\"toc-item-num\">13&nbsp;&nbsp;</span>3D Scatter Plot</a></span></li><li><span><a href=\"#3D-Bubble-Chart\" data-toc-modified-id=\"3D-Bubble-Chart-14\"><span class=\"toc-item-num\">14&nbsp;&nbsp;</span>3D Bubble Chart</a></span></li><li><span><a href=\"#Editing-in-Plot-Studio\" data-toc-modified-id=\"Editing-in-Plot-Studio-15\"><span class=\"toc-item-num\">15&nbsp;&nbsp;</span>Editing in Plot Studio</a></span></li><li><span><a href=\"#Conclusions\" data-toc-modified-id=\"Conclusions-16\"><span class=\"toc-item-num\">16&nbsp;&nbsp;</span>Conclusions</a></span></li></ul></div>"]}, {"block": 1, "type": "markdown", "linesLength": 7, "startIndex": 2, "lines": ["# Introduction: Plotting with Plotly + Cufflinks in Python\n", "\n", "In this notebook, we will see how to use [plotly](https://plot.ly/python/) and [cufflinks](https://github.com/santosjorge/cufflinks) to create stunning, interactive figures in a single line of Python. This combination of libraries is simple to use, makes excellent charts, and, in my opinion, much more efficient than other methods of plotting in Python.\n", "\n", "This introduction will show us the basics of using plotly + cufflinks, focusing on what we can do in one line of code (for the most part). We'll see a wide variety of different charts, but won't get into the full capabilities of the library (such as updatable figures and using IPython widgets). \n", "\n", "Before you get started, you'll want to head to [Plotly](https://help.plot.ly/how-to-sign-up-to-plotly/#step-1-create-your-free-account) and create an account to get a username and api key. Then run the code below (this isn't actually necessary if you stick to `offline` plotting). "]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 9, "lines": ["    import plotly \n", "    # Replace with your information\n", "    plotly.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')"]}, {"block": 3, "type": "markdown", "linesLength": 7, "startIndex": 12, "lines": ["## Plotly + Cufflinks Overview\n", "\n", "The Plotly Python library is an open-source version of the [Plotly](https://plot.ly/) visualization software made by Plotly. You can create a free account and upload your graphs to share with others (this requires making the graphs and data public). \n", "\n", "We will run plotly completely in offline mode which means that we won't be publishing any of our graphs online. However, we can still open up any of the plots in the Plotly [chart studio](https://plot.ly/create/#/) and edit them for a presentation. \n", "\n", "[Cufflinks is a wrapper ](https://github.com/santosjorge/cufflinks) around the plotly library specifically for plotting with Pandas dataframes. With cufflinks, we don't have to dig into the details of plotly, instead building our charts with minimal code. Basically, you can make charts directly in plotly for more control, or you can use cufflinks to rapidly prototype plots and explore the data."]}, {"block": 4, "type": "code", "linesLength": 17, "startIndex": 19, "lines": ["# plotly standard imports\n", "import plotly.graph_objs as go\n", "import plotly.plotly as py\n", "\n", "# Cufflinks wrapper on plotly\n", "import cufflinks\n", "\n", "# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 30\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 36, "lines": ["We'll be using plotly + cufflinks in offline mode. We will also set the global `cufflinks` theme to `pearl`. Later we'll take a look at the other theme options."]}, {"block": 6, "type": "code", "linesLength": 5, "startIndex": 37, "lines": ["from plotly.offline import iplot\n", "cufflinks.go_offline()\n", "\n", "# Set global theme\n", "cufflinks.set_config_file(world_readable=True, theme='pearl')"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["After importing cufflinks, plotly plots can be made using `df.iplot()` and then specifying parameters. This is a great replacement for matplotlib! "]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 43, "lines": ["### Data\n", "\n", "We are using my medium article statistics data. See [this article](https://towardsdatascience.com/analyzing-medium-story-stats-with-python-24c6491a8ff0) for how to use your own Medium data! [Here](https://github.com/WillKoehrsen/Data-Analysis/tree/master/medium) is the toolkit used to gather the stats. "]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 46, "lines": ["df = pd.read_parquet('data/medium_data_2019_01_06')\n", "df.head()"]}, {"block": 10, "type": "markdown", "linesLength": 9, "startIndex": 48, "lines": ["### Kinds of Plots\n", "\n", "We can make any of the following plots using cufflinks:\n", "\n", "       scatter, bar, box, spread\n", "       ratio, heatmap, surface\n", "       histogram, bubble, bubble3d\n", "       scatter3d, scattergeo, ohlc\n", "       candle, pie, choroplet"]}, {"block": 11, "type": "markdown", "linesLength": 3, "startIndex": 57, "lines": ["# Univariate (Single Variable) Distributions\n", "\n", "For single variables, I generally start out with histograms or boxplots. Plotly has these basic charts well-covered."]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 60, "lines": ["## Histograms"]}, {"block": 13, "type": "code", "linesLength": 7, "startIndex": 61, "lines": ["df['claps'].iplot(\n", "    kind='hist',\n", "    bins=30,\n", "    xTitle='claps',\n", "    linecolor='black',\n", "    yTitle='count',\n", "    title='Claps Distribution')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 68, "lines": ["Notice that we can hover over any of the bars to get the exact numbers. You can also format the `text` to display different information on hovering."]}, {"block": 15, "type": "markdown", "linesLength": 3, "startIndex": 69, "lines": ["### Percentage Histogram\n", "\n", "To get the same chart but instead showing the percentage, we simple pass in `percent` as the histnorm parameter."]}, {"block": 16, "type": "code", "linesLength": 8, "startIndex": 72, "lines": ["df['claps'].iplot(\n", "    kind='hist',\n", "    bins=30,\n", "    xTitle='reads',\n", "    linecolor='black',\n", "    histnorm='percent',\n", "    yTitle='percentage (%)',\n", "    title='Reads Distribution in Percent')"]}, {"block": 17, "type": "markdown", "linesLength": 3, "startIndex": 80, "lines": ["## Grouped Histogram\n", "\n", "When we want to display two different distributions on the same plot, we can group together the data to show it side-by-side. This means setting `barmode` to `group` with two distributions."]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 83, "lines": ["def to_time(dt):\n", "    return dt.hour + dt.minute / 60"]}, {"block": 19, "type": "code", "linesLength": 14, "startIndex": 85, "lines": ["df['time_started'] = df['started_date'].apply(to_time)\n", "df['time_published'] = df['published_date'].apply(to_time)\n", "\n", "df[['time_started', 'time_published']].iplot(\n", "    kind='hist',\n", "    linecolor='black',\n", "    bins=24,\n", "    histnorm='percent',\n", "    bargap=0.1,\n", "    opacity=0.8,\n", "    barmode='group',\n", "    xTitle='Time of Day',\n", "    yTitle='(%) of Articles',\n", "    title='Time Started and Time Published')"]}, {"block": 20, "type": "markdown", "linesLength": 3, "startIndex": 99, "lines": ["## Overlaid Histogram\n", "\n", "If we prefer the bars to be laid over one another, we specify the `barmode` to be `overlay`."]}, {"block": 21, "type": "code", "linesLength": 10, "startIndex": 102, "lines": ["df[['time_published', 'time_started']].iplot(\n", "    kind='hist',\n", "    bins=24,\n", "    linecolor='black',\n", "    opacity=0.8,\n", "    histnorm='percent',\n", "    barmode='overlay',\n", "    xTitle='Time of day',\n", "    yTitle='(%) of articles',\n", "    title='Time Started and Time Published Overlaid')"]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["## Bar Plot"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 113, "lines": ["For a bar plot, we need to apply some sort of aggregation function and then plot. For example, we can show the `count` of articles in each publication with the following."]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 114, "lines": ["df.groupby('publication').count()['fans'].iplot(\n", "    kind='bar', yTitle='Number of Articles', linecolor='black', title='Articles by Publication')"]}, {"block": 25, "type": "code", "linesLength": 7, "startIndex": 116, "lines": ["df[[c for c in df if '<tag>' in c]].sum().iplot(\n", "    kind='bar',\n", "    xTitle='Tag',\n", "    yTitle='Number of Articles with Tag',\n", "    title='Frequency of Tags',\n", "    linecolor='black',\n", "    sortbars=True)"]}, {"block": 26, "type": "markdown", "linesLength": 3, "startIndex": 123, "lines": ["## Bar Plot with Two Categories\n", "\n", "Here we'll show two distributions side-by-side. First, we'll set the index to be the date, then resample to month frequency, then take the mean and plot."]}, {"block": 27, "type": "code", "linesLength": 3, "startIndex": 126, "lines": ["df2 = df[['views', 'reads',\n", "          'published_date']].set_index('published_date').resample('M').mean()\n", "df2.head()"]}, {"block": 28, "type": "code", "linesLength": 5, "startIndex": 129, "lines": ["df2.iplot(\n", "    kind='bar',\n", "    xTitle='Date',\n", "    yTitle='Average',\n", "    title='Monthly Average Views and Reads')"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 134, "lines": ["By hovering over any month on the graph, we can make direct comparisons. This is a very handy way to explore your data! "]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 135, "lines": ["## Bar Plot with Second Y-Axis"]}, {"block": 31, "type": "markdown", "linesLength": 1, "startIndex": 136, "lines": ["If we want to put two very different ranges on the same graph, we can just use a secondary y-axis."]}, {"block": 32, "type": "code", "linesLength": 10, "startIndex": 137, "lines": ["df2 = df[['views', 'read_time',\n", "          'published_date']].set_index('published_date').resample('M').mean()\n", "\n", "df2.iplot(\n", "    kind='bar',\n", "    xTitle='Date',\n", "    secondary_y='read_time',\n", "    secondary_y_title='Average Read Time',\n", "    yTitle='Average Views',\n", "    title='Monthly Averages')"]}, {"block": 33, "type": "markdown", "linesLength": 3, "startIndex": 147, "lines": ["## Boxplot\n", "\n", "The boxplot is another good method for showing distributions."]}, {"block": 34, "type": "code", "linesLength": 2, "startIndex": 150, "lines": ["df[['claps', 'fans']].iplot(secondary_y='fans', secondary_y_title='Fans',\n", "    kind='box', yTitle='Claps', title='Box Plot of Claps and Fans')"]}, {"block": 35, "type": "markdown", "linesLength": 1, "startIndex": 152, "lines": ["Hover over the graphs to see the actual statistics! "]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 153, "lines": ["### Boxplot with Different Categories"]}, {"block": 37, "type": "markdown", "linesLength": 1, "startIndex": 154, "lines": ["If we have different categories that we want to plot, we need to use a `pivot`. This transforms each unique value in a column into a separate column."]}, {"block": 38, "type": "code", "linesLength": 3, "startIndex": 155, "lines": ["df2 = df.pivot(\n", "    columns='publication', values='fans')\n", "df2.head()"]}, {"block": 39, "type": "markdown", "linesLength": 1, "startIndex": 158, "lines": ["Here we are also explicitly specifying the layout as a dictionary. This gives us more control over different aspects of the plot such as the margin (like the border of the image)."]}, {"block": 40, "type": "code", "linesLength": 7, "startIndex": 159, "lines": ["df2.iplot(\n", "        kind='box',\n", "        layout=dict(\n", "            height=600,\n", "            yaxis=dict(title='fans'),\n", "            title='Fans by Publication',\n", "            margin=dict(b=140)))"]}, {"block": 41, "type": "code", "linesLength": 6, "startIndex": 166, "lines": ["df[df['read_time'] <= 10].pivot(\n", "    columns='read_time', values='reads').iplot(\n", "        kind='box', colorscale='set2',\n", "        xTitle='Read Time',\n", "        yTitle='Number of Reads',\n", "        title='Box Plot of Reads by Reading Time')"]}, {"block": 42, "type": "markdown", "linesLength": 3, "startIndex": 172, "lines": ["# Scatter Plots\n", "\n", "The scatter plot is a simple yet effective method for visualizing the relationship between two variables. There are many ways we can make scatterplots in plotly + cufflinks."]}, {"block": 43, "type": "markdown", "linesLength": 1, "startIndex": 175, "lines": ["## Time-Series"]}, {"block": 44, "type": "markdown", "linesLength": 1, "startIndex": 176, "lines": ["It's very simple to make time-series plots if we set the index to be the datetime. Then we can simply pass in a column as y and plotly will know to use the index to make a date xaxis. "]}, {"block": 45, "type": "code", "linesLength": 4, "startIndex": 177, "lines": ["tds = df[df['publication'] == 'Towards Data Science'].set_index(\n", "    'published_date')\n", "\n", "tds.head()"]}, {"block": 46, "type": "code", "linesLength": 8, "startIndex": 181, "lines": ["tds['read_time'].iplot(\n", "    mode='lines+markers',\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Read Time (min)',\n", "    title='Read Time Trends')"]}, {"block": 47, "type": "markdown", "linesLength": 3, "startIndex": 189, "lines": ["## Two Variables Time-Series\n", "\n", "For a second variable, we just add it in. "]}, {"block": 48, "type": "code", "linesLength": 8, "startIndex": 192, "lines": ["tds[['claps', 'fans']].iplot(\n", "    mode='lines+markers',\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Fans and Claps',\n", "    title='Fans and Claps over Time')"]}, {"block": 49, "type": "markdown", "linesLength": 1, "startIndex": 200, "lines": ["That is a little hard to compare, so we should instead add the second variable on a secondary y-axis."]}, {"block": 50, "type": "code", "linesLength": 12, "startIndex": 201, "lines": ["tds[['fans', 'word_count', 'title']].iplot(\n", "    y='fans',\n", "    mode='lines+markers',\n", "    secondary_y = 'word_count',\n", "    secondary_y_title='Word Count',\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Claps',\n", "    text='title',\n", "    title='Fans and Word Count over Time')"]}, {"block": 51, "type": "markdown", "linesLength": 1, "startIndex": 213, "lines": ["## Text Annotations on Plot"]}, {"block": 52, "type": "markdown", "linesLength": 1, "startIndex": 214, "lines": ["Adding text to plots is pretty simple (just the formatting can be a bit tricky). The text is written in HTML which gives us control over the formatting."]}, {"block": 53, "type": "code", "linesLength": 16, "startIndex": 215, "lines": ["tds_monthly_totals = tds.resample('M').sum()\n", "\n", "tds_monthly_totals['text'] = [\n", "    f'<span style=\"color:blue\">{m}<span><br>words: {w:.0f}'\n", "    for m, w in zip(tds_monthly_totals.index.month_name(),\n", "                    tds_monthly_totals['word_count'])\n", "]\n", "\n", "tds_monthly_totals.iplot(\n", "    mode='lines+markers+text',\n", "    text='text',\n", "    y='word_count',\n", "    opacity=0.8,\n", "    xTitle='Date',\n", "    yTitle='Word Count',\n", "    title='Total Word Count by Month')"]}, {"block": 54, "type": "markdown", "linesLength": 1, "startIndex": 231, "lines": ["## Two Numeric Variables Scatterplot"]}, {"block": 55, "type": "code", "linesLength": 8, "startIndex": 232, "lines": ["tds.iplot(\n", "    x='read_time',\n", "    y='read_ratio',\n", "    xTitle='Read Time',\n", "    yTitle='Reading Percent',\n", "    text='title',\n", "    mode='markers',\n", "    title='Reading Percent vs Reading Time')"]}, {"block": 56, "type": "markdown", "linesLength": 1, "startIndex": 240, "lines": ["## Two Variables with Best Fit Line"]}, {"block": 57, "type": "code", "linesLength": 9, "startIndex": 241, "lines": ["tds.sort_values('read_time').iplot(\n", "    x='read_time',\n", "    y='read_ratio',\n", "    xTitle='Read Time',\n", "    yTitle='Reading Percent',\n", "    text='title',\n", "    mode='markers+lines',\n", "    bestfit=True, bestfit_colors=['blue'],\n", "    title='Reading Percent vs Reading Time')"]}, {"block": 58, "type": "markdown", "linesLength": 1, "startIndex": 250, "lines": ["## Log Scale"]}, {"block": 59, "type": "code", "linesLength": 13, "startIndex": 251, "lines": ["layout = dict(\n", "    xaxis=dict(type='log', title='Word Count'),\n", "    yaxis=dict(title='views'),\n", "    title='Views vs Word Count Log Axis')\n", "\n", "tds.sort_values('word_count').iplot(\n", "    x='word_count',\n", "    y='views',\n", "    layout=layout,\n", "    text='title',\n", "    mode='markers',\n", "    bestfit=True,\n", "    bestfit_colors=['blue'])"]}, {"block": 60, "type": "markdown", "linesLength": 1, "startIndex": 264, "lines": ["## Scatterplot By Category"]}, {"block": 61, "type": "code", "linesLength": 7, "startIndex": 265, "lines": ["df.iplot(\n", "    x='read_time',\n", "    y='read_ratio',\n", "    categories='publication',\n", "    xTitle='Read Time',\n", "    yTitle='Reading Percent',\n", "    title='Reading Percent vs Read Ratio by Publication')"]}, {"block": 62, "type": "markdown", "linesLength": 3, "startIndex": 272, "lines": ["## Cumulative Plot\n", "\n", "We can make cumulative plots by adding up the statistics over time."]}, {"block": 63, "type": "code", "linesLength": 3, "startIndex": 275, "lines": ["df.set_index('published_date')[['views', 'word_count']].cumsum().iplot(y='views', secondary_y='word_count',\n", "                                                 yTitle='Views', secondary_y_title='Word Count',\n", "                                                 title='Views and Word Count Totals')"]}, {"block": 64, "type": "code", "linesLength": 10, "startIndex": 278, "lines": ["df.pivot_table(\n", "    values='views', index='published_date',\n", "    columns='publication').cumsum().iplot(\n", "        mode='markers+lines',\n", "        size=8,\n", "        symbol=[1, 2, 3, 4, 5],\n", "        layout=dict(\n", "            xaxis=dict(title='Date'),\n", "            yaxis=dict(type='log', title='Total Views'),\n", "            title='Total Views over Time by Publication'))"]}, {"block": 65, "type": "markdown", "linesLength": 4, "startIndex": 288, "lines": ["# More than 2 Variables\n", "\n", "We can expand to greater than 2 variables by encoding information in the colors, size of markers, or symbols. We can also use secondary y-axes for more information.\n", "\n"]}, {"block": 66, "type": "markdown", "linesLength": 1, "startIndex": 292, "lines": ["## Secondary Y-Axis"]}, {"block": 67, "type": "code", "linesLength": 11, "startIndex": 293, "lines": ["tds[['word_count', 'reads', 'read_ratio', 'title']].iplot(\n", "    x='word_count',\n", "    y='reads',\n", "    secondary_y='read_ratio',\n", "    xTitle='Word Count',\n", "    yTitle='Reads',\n", "    secondary_y_title='Read Ratio',\n", "    mode='markers',\n", "    size=10,\n", "    text='title',\n", "    title='Reads and Read Ratio vs Number of Words')"]}, {"block": 68, "type": "markdown", "linesLength": 1, "startIndex": 304, "lines": ["## Three Variables with a Category"]}, {"block": 69, "type": "code", "linesLength": 11, "startIndex": 305, "lines": ["df.iplot(\n", "    x='word_count',\n", "    y='views',\n", "    categories='publication',\n", "    mode='markers',\n", "    text='title',\n", "    size=8,\n", "    layout=dict(\n", "        xaxis=dict(title='Word Count'),\n", "        yaxis=dict(title='Views'),\n", "        title='Views vs Word Count by Publication'))"]}, {"block": 70, "type": "markdown", "linesLength": 1, "startIndex": 316, "lines": ["## Three Numeric Variables"]}, {"block": 71, "type": "code", "linesLength": 17, "startIndex": 317, "lines": ["text = [\n", "    f'Title: {t} <br> Ratio: {r:.2f}%'\n", "    for t, r in zip(tds['title'], tds['read_ratio'])\n", "]\n", "\n", "tds.iplot(\n", "    x='word_count',\n", "    y='reads',\n", "    opacity=0.8,\n", "    size=tds['read_ratio'],\n", "    text=text,\n", "    mode='markers',\n", "    theme='pearl',\n", "    layout=dict(\n", "        xaxis=dict(type='log', title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Log Word Count Sized by Read Ratio'))"]}, {"block": 72, "type": "markdown", "linesLength": 1, "startIndex": 334, "lines": ["## Four Variables"]}, {"block": 73, "type": "code", "linesLength": 24, "startIndex": 335, "lines": ["data = [\n", "    go.Scatter(\n", "        x=df['word_count'],\n", "        y=df['reads'],\n", "        text=df['title'],\n", "        mode='markers',\n", "        marker=dict(\n", "            sizemin=10,\n", "            size=df['read_ratio'],\n", "            colorscale='Rainbow',\n", "            showscale=True,\n", "            color=df['read_time'],\n", "            line=dict(color='black', width=1.2)))\n", "]\n", "\n", "figure = go.Figure(\n", "    data=data,\n", "    layout=go.Layout(\n", "        xaxis=dict(title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Word Count Colored by Read Time and Sized by Read Ratio'\n", "    ))\n", "\n", "iplot(figure)"]}, {"block": 74, "type": "markdown", "linesLength": 1, "startIndex": 359, "lines": ["## Five Variables"]}, {"block": 75, "type": "code", "linesLength": 31, "startIndex": 360, "lines": ["data = [\n", "    go.Scatter(\n", "        x=grouped['word_count'],\n", "        y=grouped['reads'],\n", "        text=grouped['title'],\n", "        mode='markers',\n", "        name=name,\n", "        marker=dict(\n", "            symbol=i,\n", "            sizemin=2,\n", "            sizeref=2,\n", "            size=grouped['read_ratio'],\n", "            colorscale='BlueRed',\n", "            showscale=True,\n", "            color=df['read_time'],\n", "            line=dict(color='black', width=1.2)))\n", "    for i, (name, grouped) in enumerate(df.groupby('publication'))\n", "]\n", "\n", "figure = go.Figure(\n", "    data=data,\n", "    layout=go.Layout(\n", "        legend=dict(x=1.2),\n", "        width=1000,\n", "        margin=dict(r=20),\n", "        xaxis=dict(type='log', title='Word Count'),\n", "        yaxis=dict(title='Reads'),\n", "        title='Reads vs Word Count Colored by Read Time, Sized by Read Ratio, and Shaped by Publication'\n", "    ))\n", "\n", "iplot(figure)"]}, {"block": 76, "type": "markdown", "linesLength": 1, "startIndex": 391, "lines": ["# Limiting Range and Adding Lines to Plots"]}, {"block": 77, "type": "code", "linesLength": 14, "startIndex": 392, "lines": ["tds[['read_time', 'fans', 'title']].iplot(\n", "    y='read_time',\n", "    mode='lines+markers',\n", "    secondary_y = 'fans',\n", "    secondary_y_title='Fans',\n", "    vline=[dict(x=pd.to_datetime('2018-04-01'), color='red', dash='dash', width=3),\n", "            dict(x=pd.to_datetime('2018-06-01'), color='red', dash='dash', width=3),],\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Read Time',\n", "    text='title',\n", "    title='Reading Time and Claps over Time')"]}, {"block": 78, "type": "code", "linesLength": 18, "startIndex": 406, "lines": ["tds[['read_time', 'fans', 'title']].iplot(\n", "    y='read_time',\n", "    mode='lines+markers',\n", "    secondary_y = 'fans',\n", "    secondary_y_title='Fans',\n", "    vspan=[dict(x0='2018-05-01', \n", "                x1='2018-08-01',\n", "                color='green', fill='green', \n", "                opacity=0.2)],\n", "    hline=[dict(y=i, color='red', dash='dash', width=1) for i in [5, 10, 15, 20]],\n", "    xrange=('2018-01-01', '2019-01-01'),\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Read Time',\n", "    text='title',\n", "    title='Reading Time and Claps over Time')"]}, {"block": 79, "type": "code", "linesLength": 10, "startIndex": 424, "lines": ["tds['read_time'].iplot(\n", "    mode='lines+markers',\n", "    vline=[dict(x=pd.to_datetime('2018-01-01'), color='blue', dash='dash'),\n", "            dict(x=pd.to_datetime('2019-01-01'), color='blue', dash='dash'),],\n", "    opacity=0.8,\n", "    size=8,\n", "    symbol=1,\n", "    xTitle='Date',\n", "    yTitle='Read Time (min)',\n", "    title='Read Time Trends')"]}, {"block": 80, "type": "markdown", "linesLength": 1, "startIndex": 434, "lines": ["# Scatter Matrix"]}, {"block": 81, "type": "code", "linesLength": 5, "startIndex": 435, "lines": ["colorscales = [\n", "    'Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues',\n", "    'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth',\n", "    'Electric', 'Viridis', 'Cividis'\n", "]"]}, {"block": 82, "type": "code", "linesLength": 10, "startIndex": 440, "lines": ["import plotly.figure_factory as ff\n", "\n", "figure = ff.create_scatterplotmatrix(\n", "    df[['claps', 'publication', 'views', 'read_ratio', 'word_count']],\n", "    height=1000,\n", "    width=1000,\n", "    text=df['title'],\n", "    diag='histogram',\n", "    index='publication')\n", "iplot(figure)"]}, {"block": 83, "type": "markdown", "linesLength": 1, "startIndex": 450, "lines": ["# Heatmap"]}, {"block": 84, "type": "code", "linesLength": 5, "startIndex": 451, "lines": ["colorscales = [\n", "    'Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues',\n", "    'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth',\n", "    'Electric', 'Viridis', 'Cividis'\n", "]"]}, {"block": 85, "type": "code", "linesLength": 15, "startIndex": 456, "lines": ["corrs = df.corr()\n", "\n", "figure = ff.create_annotated_heatmap(\n", "    z=corrs.values,\n", "    x=list(corrs.columns),\n", "    y=list(corrs.index),\n", "    colorscale='Earth',\n", "    annotation_text=corrs.round(2).values,\n", "    showscale=True, reversescale=True)\n", "\n", "figure.layout.margin = dict(l=200, t=200)\n", "figure.layout.height = 800\n", "figure.layout.width = 1000\n", "\n", "iplot(figure)"]}, {"block": 86, "type": "markdown", "linesLength": 1, "startIndex": 471, "lines": ["# Spread"]}, {"block": 87, "type": "code", "linesLength": 2, "startIndex": 472, "lines": ["df.set_index('published_date')[['views', 'reads']].iplot(\n", "    kind='spread', mode='markers', yTitle='Number', title='Spread between Views and Reads')"]}, {"block": 88, "type": "markdown", "linesLength": 1, "startIndex": 474, "lines": ["# Ratio"]}, {"block": 89, "type": "code", "linesLength": 2, "startIndex": 475, "lines": ["df.set_index('published_date')[['views', 'reads']].iplot(theme='pearl',\n", "                                                         kind='ratio', title='Ratio of Views to Reads', mode='markers')"]}, {"block": 90, "type": "markdown", "linesLength": 1, "startIndex": 477, "lines": ["# Themes"]}, {"block": 91, "type": "code", "linesLength": 4, "startIndex": 478, "lines": ["themes = cufflinks.themes.THEMES.keys()\n", "for t in themes:\n", "    df.set_index('published_date')[['views', 'reads']].iplot(theme=t, yTitle='Number',\n", "                                                             kind='spread', title=f'Spread between Views and Reads', mode='markers')"]}, {"block": 92, "type": "code", "linesLength": 12, "startIndex": 482, "lines": ["for t in themes:\n", "    df[['time_published', 'time_started']].iplot(\n", "    kind='hist',\n", "    bins=48,\n", "    linecolor='black',\n", "    opacity=0.8,\n", "    histnorm='percent',\n", "    barmode='overlay',\n", "    xTitle='Time of day',\n", "    yTitle='(%) of articles',\n", "        theme=t,\n", "    title=f'{t} Time Started and Time Published Overlaid')"]}, {"block": 93, "type": "markdown", "linesLength": 1, "startIndex": 494, "lines": ["## Colorscales in cufflinks"]}, {"block": 94, "type": "code", "linesLength": 1, "startIndex": 495, "lines": ["cufflinks.colors.scales()"]}, {"block": 95, "type": "markdown", "linesLength": 1, "startIndex": 496, "lines": ["## Colorscales in Plotly"]}, {"block": 96, "type": "code", "linesLength": 5, "startIndex": 497, "lines": ["colorscales = [\n", "    'Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues',\n", "    'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth',\n", "    'Electric', 'Viridis', 'Cividis'\n", "]"]}, {"block": 97, "type": "markdown", "linesLength": 1, "startIndex": 502, "lines": ["# Pie Chart"]}, {"block": 98, "type": "code", "linesLength": 3, "startIndex": 503, "lines": ["df.groupby(\n", "    'publication', as_index=False)['reads'].count().iplot(\n", "        kind='pie', labels='publication', values='reads', title='Percentage of Reads by Publication')"]}, {"block": 99, "type": "code", "linesLength": 3, "startIndex": 506, "lines": ["df.groupby(\n", "    'publication', as_index=False)['word_count'].sum().iplot(\n", "        kind='pie', labels='publication', values='word_count', title='Percentage of Words by Publication')"]}, {"block": 100, "type": "markdown", "linesLength": 1, "startIndex": 509, "lines": ["# 3D Surface Plot"]}, {"block": 101, "type": "code", "linesLength": 2, "startIndex": 510, "lines": ["df[['views', 'reads', 'read_ratio']].iplot(\n", "    kind='surface', title='Surface Plot')"]}, {"block": 102, "type": "markdown", "linesLength": 1, "startIndex": 512, "lines": ["# 3D Scatter Plot"]}, {"block": 103, "type": "code", "linesLength": 3, "startIndex": 513, "lines": ["df.iplot(x='word_count', y='views', z='fans', kind='scatter3d', xTitle='Word Count', yTitle='Views',\n", "         zTitle='Fans', theme='pearl',\n", "         categories='type', title='3D Scatter Plot by Type')"]}, {"block": 104, "type": "markdown", "linesLength": 1, "startIndex": 516, "lines": ["# 3D Bubble Chart"]}, {"block": 105, "type": "code", "linesLength": 3, "startIndex": 517, "lines": ["df.iplot(x='word_count', y='views', z='fans', kind='bubble3d', xTitle='Word Count', yTitle='Views',\n", "         zTitle='Fans', theme='pearl', size='read_ratio',\n", "         categories='type', title='3D Bubble Plot Sized by Read Ratio and Colored by Type')"]}, {"block": 106, "type": "markdown", "linesLength": 3, "startIndex": 520, "lines": ["# Editing in Plot Studio\n", "\n", "You can take any of the plots here and edit them in the plot studio. This allows us to finish up plots for showing to others or sharing."]}, {"block": 107, "type": "markdown", "linesLength": 1, "startIndex": 523, "lines": ["![](../medium/images/reads_vs_word_count.png)"]}, {"block": 108, "type": "markdown", "linesLength": 1, "startIndex": 524, "lines": ["![](../medium/images/annotations.png)"]}, {"block": 109, "type": "markdown", "linesLength": 1, "startIndex": 525, "lines": ["![](../medium/images/word_count_and_views.png)"]}, {"block": 110, "type": "markdown", "linesLength": 3, "startIndex": 526, "lines": ["# Conclusions\n", "\n", "Hopefully you now have a little idea of the capabilties of plotly + cufflinks. We have only scrachted the surface of this library, so check out the [cufflinks documentation](https://github.com/santosjorge/cufflinks) and the [plotly documentation](https://plot.ly/python/) for plently of more examples."]}, {"block": 111, "type": "markdown", "linesLength": 1, "startIndex": 529, "lines": ["![](../medium/images/plotting_enjoyment.png)"]}, {"block": 112, "type": "code", "linesLength": 11, "startIndex": 530, "lines": ["import pandas as pd\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "cufflinks.go_offline()\n", "\n", "layout = go.Layout(xaxis=dict(type='date'))\n", "df = pd.read_parquet(\n", "    'https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/data/medium_data_2019_01_06?raw=true'\n", ")\n", "\n", "df.iplot(kind='scatter', y='claps', x='published_date', mode='markers')"]}]