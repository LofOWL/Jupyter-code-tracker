[{"block": 0, "type": "code", "linesLength": 21, "startIndex": 0, "lines": ["# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "import sys\n", "sys.path.append('../..')\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "cufflinks.go_offline()\n"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 21, "lines": ["def calculate_multipliers(ci):\n", "    z = (1-ci)/2\n", "    return z/(1-z), (1-z)/z"]}, {"block": 2, "type": "code", "linesLength": 3, "startIndex": 24, "lines": ["def calculate_lifetime(t_current, ci):\n", "    low, high = calculate_multipliers(ci)\n", "    return t_current*low, t_current*high"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 27, "lines": ["from scipy.stats import norm"]}, {"block": 4, "type": "code", "linesLength": 6, "startIndex": 28, "lines": ["n = 1000\n", "min_ = -3\n", "max_ = 3\n", "x = np.linspace(min_, max_, num=n)\n", "sd = np.sqrt(1.191) * np.log10(39) / 1.96\n", "y = norm.pdf(x, loc=0, scale=sd)"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["y[:235].sum()/y.sum()"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["y[765:].sum()/y.sum()"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["np.where(x>np.log10(39))[0].min()"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["np.where(x<np.log10(1/39))[0].max()"]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 38, "lines": ["df=pd.DataFrame({'x': np.power(10, x), 'y': y})\n", "df.iplot(x='x', y='y', mode='markers',) \n", "         # layout=dict(xaxis=dict(type='log')))\n", "\n"]}, {"block": 10, "type": "code", "linesLength": 0, "startIndex": 42, "lines": []}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["df=pd.DataFrame({'x': x, 'y': y})\n", "df.iplot(x='x', y='y', mode='markers',) # markers=dict(size=2))"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 44, "lines": ["x = np.logspace(-4, 4, num=1000)\n", "y = norm.pdf(np.log10(x), loc=0, scale=0.62)\n", "y[np.where(x>(1/39))[0].min()]\n", "y[np.where(x>(39))[0].min()]"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["len(y)"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["len(y[x>39])"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["38 * 10 / 1.96"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 51, "lines": ["y[np.all]"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["from plotly.offline import iplot"]}, {"block": 18, "type": "code", "linesLength": 3, "startIndex": 53, "lines": ["data = go.Scatter(x=x, y=y, mode='markers')\n", "figure = go.Figure(data=[data], layout=go.Layout(xaxis=dict(type='log')))\n", "iplot(figure)"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 56, "lines": ["from datetime import datetime, timedelta\n", "now = datetime.now()"]}, {"block": 20, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["low, high = calculate_lifetime(6, 0.95)\n", "print(f'Data science will last until {(now + timedelta(days=low*365)).date()} at the min to {(now + timedelta(days=high*365)).date()} at the max.')"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 60, "lines": ["low, high = calculate_lifetime(2000, 0.95)\n", "print(f'Medicine will last until {(now + timedelta(days=low*365)).date()} at the min to {(now + timedelta(days=high*365)).date()} at the max.')"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 62, "lines": ["high"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 63, "lines": ["pd.Timedelta(days=1e5).total_seconds()/(3600 )"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 64, "lines": ["f'{timedelta(days=9e8).total_seconds() / (3600 * 24 * 365):,.0f} years'"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 65, "lines": ["timedelta(days=10.5)"]}, {"block": 26, "type": "code", "linesLength": 3, "startIndex": 66, "lines": ["x = np.linspace(0, 100, num = 1000)\n", "y =  1 / (x + 1)\n", "max(y)"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 69, "lines": ["min(y)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["import seaborn as sns"]}, {"block": 29, "type": "code", "linesLength": 3, "startIndex": 71, "lines": ["from scipy import stats\n", "x = np.logspace(-3, 3, num=100)\n", "y = norm.pdf(np.log10(x), loc=0, scale=0.6)"]}, {"block": 30, "type": "code", "linesLength": 0, "startIndex": 74, "lines": []}, {"block": 31, "type": "code", "linesLength": 13, "startIndex": 74, "lines": ["t_c = 5\n", "df = pd.DataFrame({'x': x * t_c, 'y': y})\n", "df.iplot(x='x', y='y', layout=dict(xaxis=dict(type='log', tickfont=dict(size=16),\n", "                                              title=r'$t_{future} \\text{ (years)}$'),\n", "                                  yaxis=dict(title='probability'), title = 'PDF of Years',\n", "                                   shapes=[dict(type='line',\n", "                                               x0 = 39 * t_c, x1= 39*t_c, \n", "                                               y0 = 0, y1=1,\n", "                                               line=dict(color='black', dash='dash')),\n", "                                          dict(type='line',\n", "                                               x0 = (1/39)*t_c, x1= (1/39)*t_c, \n", "                                               y0 = 0, y1=1, name='39',\n", "                                               line=dict(color='black', dash='dash'))]))"]}, {"block": 32, "type": "code", "linesLength": 12, "startIndex": 87, "lines": ["df = pd.DataFrame({'x': x, 'y': y})\n", "df.iplot(x='x', y='y', layout=dict(xaxis=dict(type='log', tickfont=dict(size=16),\n", "                                              title=r'$\\frac{t_{future}}{t_{currrent}}$'),\n", "                                  yaxis=dict(title='probability'), title = 'PDF',\n", "                                   shapes=[dict(type='line',\n", "                                               x0 = 39, x1= 39, \n", "                                               y0 = 0, y1=1,\n", "                                               line=dict(color='black', dash='dash')),\n", "                                          dict(type='line',\n", "                                               x0 = 1/39, x1= 1/39, \n", "                                               y0 = 0, y1=1, name='39',\n", "                                               line=dict(color='black', dash='dash'))]))"]}, {"block": 33, "type": "code", "linesLength": 2, "startIndex": 99, "lines": ["import matplotlib.pyplot as plt\n", "plt.plot(1/y)"]}, {"block": 34, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["sns.kdeplot(np.log10(y))"]}, {"block": 35, "type": "code", "linesLength": 0, "startIndex": 102, "lines": []}]