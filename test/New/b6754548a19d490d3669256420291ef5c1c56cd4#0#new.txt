[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["# Introduction: Article Investigation\n", "\n", "The purpose of this notebook is to look at the articles I published over the past year. This is primarily for enjoyment and for the article \"What I learned by writing one data science article per week\". This should be a fun opportunity to use plotly. \n", "\n", "You can also run this notebook on mybinder (coming soon)."]}, {"block": 1, "type": "code", "linesLength": 20, "startIndex": 5, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.set_config_file(world_readable=True, theme=\"pearl\")\n", "cf.go_offline(connected=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 25, "lines": ["df = pd.read_parquet('https://github.com/WillKoehrsen/Data-Analysis/blob/master/medium/data/2019-01-26_stats?raw=true')\n", "df.head()"]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["import ipywidgets as widgets\n", "from ipywidgets import interact"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["df_orig = df.copy()\n", "df = df.set_index('published_date')"]}, {"block": 5, "type": "code", "linesLength": 13, "startIndex": 31, "lines": ["def print_articles_published(start_date, end_date):\n", "    start_date = pd.Timestamp(start_date)\n", "    end_date = pd.Timestamp(end_date)\n", "    stat_df = df.loc[(df.index >= start_date) & (df.index <= end_date)].copy()\n", "    total_words = stat_df['word_count'].sum()\n", "    total_read_time = stat_df['read_time'].sum()\n", "    num_articles = len(stat_df)\n", "    print(f'You published {num_articles} articles between {start_date.date()} and {end_date.date()}.')\n", "    print(f'These articles totalled {total_words:,} words and {total_read_time/60:.2f} hours to read.')\n", "    \n", "_ = interact(print_articles_published,\n", "             start_date=widgets.DatePicker(value=pd.to_datetime('2018-01-01')),\n", "             end_date=widgets.DatePicker(value=pd.to_datetime('2019-01-01')))"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 44, "lines": ["start_date = pd.to_datetime('2018-01-01'); end_date = pd.to_datetime('2018-12-31')\n", "stat_df = df.loc[(df.index >= start_date) & (df.index <= end_date)].copy()\n", "stat_df.tail()\n", "stat_df.describe()"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["data = [go.Scatter(x=[x['started_date'], i], y=[x['word_count'], x['word_count']]) for i, x in stat_df.iterrows()]"]}, {"block": 8, "type": "code", "linesLength": 4, "startIndex": 49, "lines": ["figure = go.Figure(data=data, layout=go.Layout(title='Started - Published Date with Word Count', \n", "                                               yaxis=dict(title='Word Count'),\n", "                                               xaxis=dict(title='Started and Published Date')))\n", "iplot(figure)"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 53, "lines": ["stat_df['word_count'].cumsum().iplot(kind='scatter', mode='markers+lines', size=6, xTitle='Published Date', yTitle='Word Count',\n", "                                colorscale='plotly', theme='white', title='Total Words over 2018')"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 55, "lines": ["stat_df['fans'].cumsum().iplot(kind='scatter', mode='markers+lines', size=6, xTitle='Published Date', yTitle='Fans',\n", "                                colorscale='plotly', theme='white', title='Total Fans over 2018')"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["stat_df[['views', 'reads']].cumsum().iplot(kind='spread', mode='markers+lines', size=6, xTitle='Published Date', \n", "                                colorscale='plotly', theme='white', title='Total Views and Reads over 2018')"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["stat_df.corr()"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["stat_df.describe()"]}, {"block": 14, "type": "code", "linesLength": 1, "startIndex": 61, "lines": ["stat_df['word_count'].iplot(kind='hist', title='Distribution of Word Count', yTitle='Count', bins=(0, 20000, 1000))"]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 62, "lines": ["views = pd.read_parquet('../medium/data/2019-01-28_views')\n", "reads = pd.read_parquet('../medium/data/2019-01-28_reads')\n", "views['reads'] = reads\n", "views.head()"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 66, "lines": ["views.iplot(yTitle='views', y='views', secondary_y='reads', secondary_y_title='Reads', title='Views and Reads over Time')"]}, {"block": 17, "type": "code", "linesLength": 0, "startIndex": 67, "lines": []}]