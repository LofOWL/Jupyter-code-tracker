[{"block": 0, "type": "markdown", "linesLength": 5, "startIndex": 0, "lines": ["# Introduction: Article Investigation\n", "\n", "The purpose of this notebook is to look at the articles I published over the past year. This is primarily for enjoyment and for the article \"What I learned by writing one data science article per week\". This should be a fun opportunity to use plotly. \n", "\n", "You can also run this notebook on mybinder (coming soon)."]}, {"block": 1, "type": "code", "linesLength": 19, "startIndex": 5, "lines": ["# Standard Data Science Helpers\n", "import numpy as np\n", "import pandas as pd\n", "import scipy\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot\n", "\n", "import cufflinks as cf\n", "cf.set_config_file(world_readable=True, theme=\"pearl\")\n", "cf.go_offline(connected=True)\n", "\n", "# Extra options\n", "pd.options.display.max_rows = 10\n", "pd.options.display.max_columns = 25\n", "# Show all code cells outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'"]}, {"block": 2, "type": "markdown", "linesLength": 3, "startIndex": 24, "lines": ["## Data Loading\n", "\n", "We'll load in the data using the `parquet` format which saves the data and the correct data types. This makes it easier to read and write data (at least in pandas)."]}, {"block": 3, "type": "code", "linesLength": 2, "startIndex": 27, "lines": ["df = pd.read_parquet('https://github.com/WillKoehrsen/Data-Analysis/blob/master/medium/data/medium_data_2019_01_28?raw=true')\n", "df.tail()"]}, {"block": 4, "type": "code", "linesLength": 2, "startIndex": 29, "lines": ["import ipywidgets as widgets\n", "from ipywidgets import interact"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 31, "lines": ["df_orig = df.copy()\n", "df = df.set_index('published_date')"]}, {"block": 6, "type": "markdown", "linesLength": 3, "startIndex": 33, "lines": ["# Articles in 2018\n", "\n", "Let's quickly see how many articles I published in 2018. This uses an interactive widget to select dates."]}, {"block": 7, "type": "code", "linesLength": 13, "startIndex": 36, "lines": ["def print_articles_published(start_date, end_date):\n", "    start_date = pd.Timestamp(start_date)\n", "    end_date = pd.Timestamp(end_date)\n", "    stat_df = df.loc[(df.index >= start_date) & (df.index <= end_date)].copy()\n", "    total_words = stat_df['word_count'].sum()\n", "    total_read_time = stat_df['read_time'].sum()\n", "    num_articles = len(stat_df)\n", "    print(f'You published {num_articles} articles between {start_date.date()} and {end_date.date()}.')\n", "    print(f'These articles totalled {total_words:,} words and {total_read_time/60:.2f} hours to read.')\n", "    \n", "_ = interact(print_articles_published,\n", "             start_date=widgets.DatePicker(value=pd.to_datetime('2018-01-01')),\n", "             end_date=widgets.DatePicker(value=pd.to_datetime('2018-12-31')))"]}, {"block": 8, "type": "markdown", "linesLength": 3, "startIndex": 49, "lines": ["## Article Summary\n", "\n", "We'll use a basic `describe` to get the stats for my 2018 articles."]}, {"block": 9, "type": "code", "linesLength": 4, "startIndex": 52, "lines": ["start_date = pd.to_datetime('2018-01-01'); end_date = pd.to_datetime('2018-12-31')\n", "\n", "stat_df = df.loc[(df.index >= start_date) & (df.index <= end_date)].copy()\n", "stat_df.describe()"]}, {"block": 10, "type": "markdown", "linesLength": 1, "startIndex": 56, "lines": ["# Days from Start to Publish"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 57, "lines": ["stat_df.reset_index(inplace=True)\n", "stat_df['days_to_publish'] = ((stat_df['published_date'] - stat_df['started_date']) / pd.Timedelta(days=1)).astype(int)"]}, {"block": 12, "type": "code", "linesLength": 5, "startIndex": 59, "lines": ["data = [go.Scatter(x=[x['started_date'], x['published_date']], \n", "                   y=[x['word_count'], x['word_count']],\n", "                  text = x['title'][:10] + ':' + str(int(x['days_to_publish'])),\n", "                   mode='markers+lines',\n", "                  name=x['title'][:10]) for i, x in stat_df.query(\"days_to_publish < 100\").iterrows()]"]}, {"block": 13, "type": "code", "linesLength": 4, "startIndex": 64, "lines": ["figure = go.Figure(data=data, layout=go.Layout(title='Started and Published Date with Word Count', \n", "                                               yaxis=dict(title='Word Count'),\n", "                                               xaxis=dict(title='Started and Published Date')))\n", "iplot(figure)"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 68, "lines": ["# Cumulative Word Count\n", "\n", "This shows the total words I wrote over the year. We use a cumulative sum plotted against the published date."]}, {"block": 15, "type": "code", "linesLength": 3, "startIndex": 71, "lines": ["stat_df.set_index('published_date', inplace=True)\n", "stat_df['word_count'].cumsum().iplot(kind='scatter', mode='markers+lines', size=6, xTitle='Published Date', yTitle='Word Count',\n", "                                colorscale='plotly', theme='white', title='Total Words over 2018')"]}, {"block": 16, "type": "code", "linesLength": 9, "startIndex": 74, "lines": ["stat_df = stat_df.query(\"days_to_publish < 100\")\n", "\n", "dr = pd.date_range('2018-01-01', '2018-12-31', freq='7 D')\n", "words = []\n", "for i in range(len(dr)-1):\n", "    subset = stat_df[(stat_df.index.date >= dr[i].date()) & (stat_df.index.date < dr[i+1].date())]\n", "    words.append(subset['word_count'].sum())\n", "    \n", "weekly_df = pd.DataFrame({'word_count': words}, index=dr[:-1])"]}, {"block": 17, "type": "code", "linesLength": 3, "startIndex": 83, "lines": ["weekly_df['word_count'].rolling(2, center=True).mean().fillna(method='bfill').iplot(xTitle='Date', yTitle='Word Count',\n", "                                                                                    mode='markers+lines', theme='white', size = 8,\n", "                                                                                    title=\"Rolling Average of Words per Week Published\")"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 86, "lines": ["# Cumulative Fans"]}, {"block": 19, "type": "code", "linesLength": 2, "startIndex": 87, "lines": ["stat_df['fans'].cumsum().iplot(kind='scatter', mode='markers+lines', size=6, xTitle='Published Date', yTitle='Fans',\n", "                                colorscale='plotly', theme='white', title='Total Fans over 2018')"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 89, "lines": ["# Spread Plot of Views and Reads"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 90, "lines": ["import cufflinks as cf"]}, {"block": 22, "type": "code", "linesLength": 6, "startIndex": 91, "lines": ["@interact\n", "def plot_views_reads(theme=list(cf.themes.THEMES.keys()),\n", "                     colorscale=list(cf.colors._scales_names.keys())):\n", "    stat_df[['views', 'reads']].cumsum().iplot(kind='spread', mode='markers+lines', theme=theme, \n", "                                           size=6, xTitle='Published Date', \n", "                                colorscale=colorscale, title='Total Views and Reads over 2018')"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 97, "lines": ["# Average Reading Percent by Month"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["stat_df.resample('1 M').mean()['read_ratio'].iplot(kind='bar', title='Reading Percent by Month')"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["# Average Reading Percent by Reading Time"]}, {"block": 26, "type": "code", "linesLength": 12, "startIndex": 100, "lines": ["stat_df['binned_readtime'] = pd.cut(stat_df['read_time'], bins=range(0, 101, 5))\n", "\n", "stat_df['binned_readtime'] = stat_df['binned_readtime'].astype(str)\n", "stat_df['binned_readtime'] = stat_df['binned_readtime'].replace({'(5, 10]': '(05, 10]'})\n", "\n", "averages = stat_df.groupby('binned_readtime')['read_ratio'].mean()\n", "\n", "\n", "averages.sort_index(inplace=True)\n", "averages.iplot(kind='bar', xTitle='Reading Time (mins)',  \n", "                                                              yTitle='Reading Percent',\n", "                                                              title='Reading Percent vs Reading Time')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["# Correlation Heatmap"]}, {"block": 28, "type": "code", "linesLength": 10, "startIndex": 113, "lines": ["import plotly.figure_factory as ff\n", "\n", "corrs = stat_df[[c for c in stat_df if '<tag>' not in c]].corr()\n", "\n", "figure = ff.create_annotated_heatmap(z = corrs.round(2).values, \n", "                                     x =list(corrs.columns), \n", "                                     y=list(corrs.index), \n", "                                     colorscale='Viridis',\n", "                                     annotation_text=corrs.round(2).values)\n", "iplot(figure)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 123, "lines": ["stat_df.describe()"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 124, "lines": ["# Scatterplot Matrix"]}, {"block": 31, "type": "code", "linesLength": 5, "startIndex": 125, "lines": ["figure = ff.create_scatterplotmatrix(stat_df[['read_time', 'reads', 'read_ratio', 'claps', 'type']],\n", "                                     index = 'type', colormap='Cividis', colormap_type='cat',\n", "                                     title='Scatterplot Matrix',\n", "                                     diag='histogram', width=800, height=800)\n", "iplot(figure)"]}, {"block": 32, "type": "markdown", "linesLength": 3, "startIndex": 130, "lines": ["# Conclusions\n", "\n", "Well, this was more a fun exercise than any serious work. I think it shows that above all, data science can be enjoyable. "]}, {"block": 33, "type": "code", "linesLength": 0, "startIndex": 133, "lines": []}]