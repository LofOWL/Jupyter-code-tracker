[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Copernican Lifetime Equation\n", "\n", "In this notebook, we take a look at the Copernican lifetime equation, a simple method for calculating the lifetime of any phenomomenon. The original discussion of this equation is worth a read and can be found on SciHub (questionably legal) [here](https://sci-hub.tw/10.1038/363315a0). "]}, {"block": 1, "type": "code", "linesLength": 12, "startIndex": 3, "lines": ["# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "cufflinks.go_offline()"]}, {"block": 2, "type": "markdown", "linesLength": 5, "startIndex": 15, "lines": ["# Calculations\n", "\n", "$$(\\frac{z}{1\u200a-\u200az})*t_{current}\\le t_{future} \\le (\\frac{1\u200a-\u200az}{z}) * t_{current}$$\n", "\n", "$$z = \\frac{1-\\text{confidence interval}}{2}$$"]}, {"block": 3, "type": "code", "linesLength": 3, "startIndex": 20, "lines": ["def calculate_multipliers(ci):\n", "    z = (1-ci)/2\n", "    return z/(1-z), (1-z)/z"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 23, "lines": ["calculate_multipliers(0.95)\n", "calculate_multipliers(0.5)\n", "calculate_multipliers(0.99)"]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 26, "lines": ["def calculate_lifetime(t_current, ci):\n", "    low, high = calculate_multipliers(ci)\n", "    return t_current*low, t_current*high"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["To use this equation, `t_current` must be in years, and `ci` must be a fraction."]}, {"block": 7, "type": "markdown", "linesLength": 3, "startIndex": 30, "lines": ["# Lifetime of Humanity\n", "\n", "https://en.wikipedia.org/wiki/Human_evolution#H._sapiens"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 33, "lines": ["calculate_lifetime(200000, 0.95)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["Let's write a quick function to nicely display the results."]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["from datetime import datetime, timedelta"]}, {"block": 11, "type": "code", "linesLength": 7, "startIndex": 36, "lines": ["def print_lifetime(t_current, ci):\n", "    low, high = calculate_lifetime(t_current, ci)\n", "    now = datetime.now()\n", "    try:\n", "        print(f'Estimated lifetime from {(now + timedelta(days=low*365)).date()} ({low:,.2f} years) to {(now + timedelta(days=high*365)).date()} ({high:,.0f} years).')\n", "    except:\n", "        print(f'Estimated lifetime in years: {low:,.2f} to {high:,.0f}.')"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["print_lifetime(200000, 0.95)"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["print_lifetime(200000, 0.99)"]}, {"block": 14, "type": "markdown", "linesLength": 3, "startIndex": 45, "lines": ["# Data Science\n", "\n", "https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century"]}, {"block": 15, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["print_lifetime(2018-2012, 0.95)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 49, "lines": ["print_lifetime(2018-2012, 0.5)"]}, {"block": 17, "type": "markdown", "linesLength": 3, "startIndex": 50, "lines": ["# Beowulf\n", "\n", "https://en.wikipedia.org/wiki/Beowulf"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 53, "lines": ["print_lifetime(2018-1000, 0.95)"]}, {"block": 19, "type": "markdown", "linesLength": 5, "startIndex": 54, "lines": ["# Print Books\n", "\n", "https://sfbook.com/the-evolution-of-the-book.htm\n", "\n", "https://en.wikipedia.org/wiki/Book#History"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 59, "lines": ["print_lifetime(2018-868, 0.95)"]}, {"block": 21, "type": "markdown", "linesLength": 3, "startIndex": 60, "lines": ["# Doctor\n", "\n", "https://en.wikipedia.org/wiki/History_of_medicine"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 63, "lines": ["print_lifetime(2018-1220, 0.95)"]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 64, "lines": ["# Most Likely Lifetime: t_future == t_past"]}, {"block": 24, "type": "code", "linesLength": 4, "startIndex": 65, "lines": ["from scipy.stats import norm\n", "\n", "x = np.logspace(-3, 3, num=1000)\n", "y = norm.pdf(np.log10(x), loc=0, scale=0.6)"]}, {"block": 25, "type": "code", "linesLength": 13, "startIndex": 69, "lines": ["df = pd.DataFrame({'x': x, 'y': y})\n", "df.iplot(x='x', y='y', layout=dict(xaxis=dict(type='log', tickfont=dict(size=16),\n", "                                              titlefont=dict(size=18),\n", "                                              title=r'$\\frac{t_{future}}{t_{currrent}}$'),\n", "                                  yaxis=dict(title='probability'), title = 'PDF',\n", "                                   shapes=[dict(type='line',\n", "                                               x0 = 39, x1= 39, \n", "                                               y0 = 0, y1=1,\n", "                                               line=dict(color='black', dash='dash')),\n", "                                          dict(type='line',\n", "                                               x0 = 1/39, x1= 1/39, \n", "                                               y0 = 0, y1=1, name='39',\n", "                                               line=dict(color='black', dash='dash'))]))"]}, {"block": 26, "type": "code", "linesLength": 16, "startIndex": 82, "lines": ["t_c = 6\n", "df = pd.DataFrame({'x': x * t_c, 'y': y})\n", "annotations = [dict(x=np.log10(39*t_c), y = 0.5, text = '95% upper limit'),\n", "               dict(x=np.log10(1/39*t_c), y = 0.5, text = '95% lower limit')]\n", "df.iplot(x='x', y='y', layout=dict(annotations=annotations,\n", "    xaxis=dict(type='log', tickfont=dict(size=16),\n", "                                              title=r'$t_{future} \\text{ (years)}$'),\n", "                                  yaxis=dict(title='probability'), title = 'PDF for Lifetime of Data Science',\n", "                                   shapes=[dict(type='line',\n", "                                               x0 = 39 * t_c, x1= 39*t_c, \n", "                                               y0 = 0, y1=1,\n", "                                               line=dict(color='black', dash='dash')),\n", "                                          dict(type='line',\n", "                                               x0 = (1/39)*t_c, x1= (1/39)*t_c, \n", "                                               y0 = 0, y1=1, name='39',\n", "                                               line=dict(color='black', dash='dash'))]))"]}, {"block": 27, "type": "code", "linesLength": 16, "startIndex": 98, "lines": ["t_c = 200000\n", "df = pd.DataFrame({'x': x * t_c, 'y': y})\n", "annotations = [dict(x=np.log10(39*t_c), y = 0.5, text = '95% upper limit'),\n", "               dict(x=np.log10(1/39*t_c), y = 0.5, text = '95% lower limit')]\n", "df.iplot(x='x', y='y', layout=dict(annotations=annotations,\n", "    xaxis=dict(type='log', tickfont=dict(size=16),\n", "                                              title=r'$t_{future} \\text{ (years)}$'),\n", "                                  yaxis=dict(title='probability'), title = 'PDF for Lifetime of Human Species',\n", "                                   shapes=[dict(type='line',\n", "                                               x0 = 39 * t_c, x1= 39*t_c, \n", "                                               y0 = 0, y1=1,\n", "                                               line=dict(color='black', dash='dash')),\n", "                                          dict(type='line',\n", "                                               x0 = (1/39)*t_c, x1= (1/39)*t_c, \n", "                                               y0 = 0, y1=1, name='39',\n", "                                               line=dict(color='black', dash='dash'))]))"]}, {"block": 28, "type": "code", "linesLength": 0, "startIndex": 114, "lines": []}]