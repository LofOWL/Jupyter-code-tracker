[{"block": 0, "type": "code", "linesLength": 16, "startIndex": 0, "lines": ["# Data science imports\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "import cufflinks\n", "from plotly.offline import iplot\n", "cufflinks.go_offline()"]}, {"block": 1, "type": "code", "linesLength": 26, "startIndex": 16, "lines": ["def ecdf(df, x, grouper=None):\n", "    \"\"\"\n", "    Calculate empirical cumulative distribution function of a distribution\n", "    \n", "    :param df: dataframe\n", "    :param x: string name of column\n", "    :param grouper: string for column to groupby\n", "    \n", "    \"\"\"\n", "    df = df.copy()\n", "    \n", "    if grouper is not None:\n", "        new_dfs = []\n", "        for group, grouped_data in df.groupby(grouper):\n", "            grouped_data.sort_values(x, ascending=True, inplace=True)\n", "            n = len(grouped_data)\n", "            grouped_data['y'] = np.arange(1, n + 1, step = 1) / n\n", "            new_dfs.append(grouped_data)\n", "        return pd.concat(new_dfs)\n", "    \n", "    # Sort by the column for distribution\n", "    df.sort_values(x, ascending=True, inplace=True)\n", "    n = len(df)\n", "    # Calculate percentiles\n", "    df['y'] = np.arange(1, n + 1, step=1) / n\n", "    return df"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 42, "lines": ["wages = pd.read_csv('data/us_state_wages.csv')\n", "wages.head()"]}, {"block": 3, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["wages.tail()"]}, {"block": 4, "type": "code", "linesLength": 3, "startIndex": 45, "lines": ["figure = df.iplot(x='income', y='y', mode='markers+lines', categories='year', hline=[0.5],\n", "         xTitle='income', yTitle='percentile', title='ECDF of Wages in US states', asFigure=True)\n", "figure.data"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 48, "lines": ["figure.layout.shapes"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 49, "lines": ["df = ecdf(wages, 'income')\n", "df['year'] = df['year'].astype(str)\n", "df.iplot(x='income', y='y', mode='markers+lines', categories='year', hline=[0.5],\n", "         xTitle='income', yTitle='percentile', title='ECDF of Wages in US states')"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 53, "lines": ["df = ecdf(wages, 'income', grouper='year')\n", "df['year'] = df['year'].astype(str)\n", "df.iplot(x='income', y='y', mode='markers+lines', categories='year',\n", "         xTitle='income', yTitle='percentile', title='ECDF of Wages in US states')"]}, {"block": 8, "type": "code", "linesLength": 1, "startIndex": 57, "lines": ["df = wages.copy()"]}, {"block": 9, "type": "code", "linesLength": 42, "startIndex": 58, "lines": ["x = 'income'\n", "text = 'geo_name'\n", "grouper = None\n", "title_override = None\n", "\n", "df = ecdf(df, x, grouper=grouper)\n", "\n", "if grouper is not None:\n", "    data = [\n", "        go.Scatter(\n", "            x=grouped_data[x],\n", "            y=grouped_data['y'],\n", "            mode='markers+lines',\n", "            marker=dict(opacity=0.6, line=dict(color='black', width=2)),\n", "            text=grouped_data[text],\n", "            name=group) for group, grouped_data in df.groupby(grouper)\n", "    ]\n", "\n", "else:\n", "    data = [\n", "        go.Scatter(\n", "            x=df[x],\n", "            y=df['y'],\n", "            mode='markers+lines',\n", "            marker=dict(\n", "                color='blue', opacity=0.6, line=dict(color='black', width=2)),\n", "            text=df[text])\n", "    ]\n", "\n", "quantiles = [0.2, 0.4, 0.6, 0.8]\n", "    \n", "shapes = [go.layout.Shape(type='line', x0=0, x1=1, y0=q, y1=q, xref='paper', yref='y',\n", "                          line=dict(width=2.1, color = 'red', dash='dash')) for q in quantiles]\n", "    \n", "x_nice = x.replace('_', '').title()\n", "layout = go.Layout(\n", "    shapes=shapes,\n", "    xaxis=dict(title=x_nice),\n", "    yaxis=dict(title='percentile'),\n", "    title=f'ECDF of {x_nice}' if title_override is None else title_override)\n", "\n", "figure = go.Figure(data=data, layout=layout)"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["iplot(figure)"]}, {"block": 11, "type": "code", "linesLength": 0, "startIndex": 101, "lines": []}]