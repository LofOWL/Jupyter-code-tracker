[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Additive Models in Python\n", "\n", "This notebook walks through the process of creating additive models for time-series data in Python. In particular, we use the Facebook Prophet package and financial data from quandl. "]}, {"block": 1, "type": "code", "linesLength": 4, "startIndex": 3, "lines": ["# quandly for financial data\n", "import quandl\n", "# pandas for data manipulation\n", "import pandas as pd"]}, {"block": 2, "type": "code", "linesLength": 11, "startIndex": 7, "lines": ["# Matplotlib for plotting\n", "import matplotlib.pyplot as plt\n", "import matplotlib\n", "import seaborn as sns\n", "%matplotlib inline\n", "\n", "plt.style.use('fivethirtyeight')\n", "matplotlib.rcParams['axes.labelsize'] = 14\n", "matplotlib.rcParams['xtick.labelsize'] = 12\n", "matplotlib.rcParams['ytick.labelsize'] = 12\n", "matplotlib.rcParams['text.color'] = 'k'"]}, {"block": 3, "type": "markdown", "linesLength": 3, "startIndex": 18, "lines": ["# Retrieve Data from Quandl\n", "\n", "We will explore the market capitalization of two American car companies, GM and Tesla. You can make 50 calls to quandl a day with no api key, or create a free account to make unlimited calls per day. "]}, {"block": 4, "type": "code", "linesLength": 8, "startIndex": 21, "lines": ["quandl.ApiConfig.api_key = 'rFsSehe51RLzREtYhLfo'\n", "\n", "# Retrieve TSLA data from Quandl\n", "tesla = quandl.get('WIKI/TSLA')\n", "\n", "# Retrieve the GM data from Quandl\n", "gm = quandl.get('WIKI/GM')\n", "gm.head(5)"]}, {"block": 5, "type": "markdown", "linesLength": 1, "startIndex": 29, "lines": ["### Quick Visualization of the Data"]}, {"block": 6, "type": "code", "linesLength": 10, "startIndex": 30, "lines": ["# The adjusted close accounts for stock splits, so that is what we should graph\n", "plt.plot(gm.index, gm['Adj. Close'])\n", "plt.title('GM Stock Price')\n", "plt.ylabel('Price ($)');\n", "plt.show()\n", "\n", "plt.plot(tesla.index, tesla['Adj. Close'], 'r')\n", "plt.title('Tesla Stock Price')\n", "plt.ylabel('Price ($)');\n", "plt.show();"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 40, "lines": ["In order to compare the companies, we need to compute their market capitalization. Quandl does not provide this data, but we can figure out the market cap ourselves by multiplying the average number of shares outstanding in each year times the share price. "]}, {"block": 8, "type": "code", "linesLength": 6, "startIndex": 41, "lines": ["# Yearly average number of shares outstanding for Tesla and GM\n", "tesla_shares = {2018: 168e6, 2017: 162e6, 2016: 144e6, 2015: 128e6, 2014: 125e6, \n", "                2013: 119e6, 2012: 107e6, 2011: 100e6, 2010: 51e6}\n", "\n", "gm_shares = {2018: 1.42e9, 2017: 1.50e9, 2016: 1.54e9, 2015: 1.59e9, 2014: 1.61e9, \n", "                2013: 1.39e9, 2012: 1.57e9, 2011: 1.54e9, 2010: 1.50e9}"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 47, "lines": ["#### Calculate Market Capitalization"]}, {"block": 10, "type": "code", "linesLength": 14, "startIndex": 48, "lines": ["# Create a year column \n", "tesla['Year'] = tesla.index.year\n", "\n", "# Take Dates from index and move to Date column \n", "tesla.reset_index(level=0, inplace = True)\n", "tesla['cap'] = 0\n", "\n", "# Calculate market cap for all years\n", "for i, year in enumerate(tesla['Year']):\n", "    # Retrieve the shares for the year\n", "    shares = tesla_shares.get(year)\n", "    \n", "    # Update the cap column to shares times the price\n", "    tesla.ix[i, 'cap'] = shares * tesla.ix[i, 'Adj. Close']"]}, {"block": 11, "type": "code", "linesLength": 14, "startIndex": 62, "lines": ["# Create a year column \n", "gm['Year'] = gm.index.year\n", "\n", "# Take Dates from index and move to Date column \n", "gm.reset_index(level=0, inplace = True)\n", "gm['cap'] = 0\n", "\n", "# Calculate market cap for all years\n", "for i, year in enumerate(gm['Year']):\n", "    # Retrieve the shares for the year\n", "    shares = gm_shares.get(year)\n", "    \n", "    # Update the cap column to shares times the price\n", "    gm.ix[i, 'cap'] = shares * gm.ix[i, 'Adj. Close']"]}, {"block": 12, "type": "code", "linesLength": 3, "startIndex": 76, "lines": ["# Merge the two datasets and rename the columns\n", "cars = gm.merge(tesla, how='inner', on='Date')\n", "cars.rename(columns={'cap_x': 'gm_cap', 'cap_y': 'tesla_cap'}, inplace=True)"]}, {"block": 13, "type": "code", "linesLength": 8, "startIndex": 79, "lines": ["# Select only the relevant columns\n", "cars = cars.ix[:, ['Date', 'gm_cap', 'tesla_cap']]\n", "\n", "# Divide to get market cap in billions of dollars\n", "cars['gm_cap'] = cars['gm_cap'] / 1e9\n", "cars['tesla_cap'] = cars['tesla_cap'] / 1e9\n", "\n", "cars.head()"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 87, "lines": ["### Visual Comparison"]}, {"block": 15, "type": "code", "linesLength": 5, "startIndex": 88, "lines": ["plt.figure(figsize=(10, 8))\n", "plt.plot(cars['Date'], cars['gm_cap'], 'b-', label = 'GM')\n", "plt.plot(cars['Date'], cars['tesla_cap'], 'r-', label = 'TESLA')\n", "plt.xlabel('Date'); plt.ylabel('Market Cap (Billions $)'); plt.title('Market Cap of GM and Tesla')\n", "plt.legend();"]}, {"block": 16, "type": "markdown", "linesLength": 1, "startIndex": 93, "lines": ["Tesla briefly surpassed GM in market cap in 2017. When did this occur?"]}, {"block": 17, "type": "code", "linesLength": 7, "startIndex": 94, "lines": ["import numpy as np\n", "\n", "# Find the first and last time Tesla was valued higher than GM\n", "first_date = cars.ix[np.min(list(np.where(cars['tesla_cap'] > cars['gm_cap'])[0])), 'Date']\n", "last_date = cars.ix[np.max(list(np.where(cars['tesla_cap'] > cars['gm_cap'])[0])), 'Date']\n", "\n", "print(\"Tesla was valued higher than GM from {} to {}.\".format(first_date.date(), last_date.date()))"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 101, "lines": ["During Q2 2017, Tesla [sold](https://en.wikipedia.org/wiki/Tesla,_Inc.#Production_and_sales) 22026 cars while GM [sold](http://gmauthority.com/blog/gm/general-motors-sales-numbers/) 725000. In Q3 2017, Tesla sold 26137 cars and GM sold 808000. In all of 2017, Tesla sold 103084 cars and GM sold 3002237. That means GM was valued less than Tesla in a year during which it sold 29 times more cars than Tesla! Interesting to say the least."]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 102, "lines": ["# Prophet Models "]}, {"block": 20, "type": "code", "linesLength": 17, "startIndex": 103, "lines": ["import fbprophet\n", "\n", "# Prophet requires columns ds (Date) and y (value)\n", "gm = gm.rename(columns={'Date': 'ds', 'cap': 'y'})\n", "# Put market cap in billions\n", "gm['y'] = gm['y'] / 1e9\n", "\n", "# Make the prophet models and fit on the data\n", "# changepoint_prior_scale can be changed to achieve a better fit\n", "gm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.05)\n", "gm_prophet.fit(gm)\n", "\n", "# Repeat for the tesla data\n", "tesla =tesla.rename(columns={'Date': 'ds', 'cap': 'y'})\n", "tesla['y'] = tesla['y'] / 1e9\n", "tesla_prophet = fbprophet.Prophet(changepoint_prior_scale=0.05)\n", "tesla_prophet.fit(tesla);"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 120, "lines": ["### Predictions for 2 Years"]}, {"block": 22, "type": "code", "linesLength": 7, "startIndex": 121, "lines": ["# Make a future dataframe for 2 years\n", "gm_forecast = gm_prophet.make_future_dataframe(periods=365 * 2, freq='D')\n", "# Make predictions\n", "gm_forecast = gm_prophet.predict(gm_forecast)\n", "\n", "tesla_forecast = tesla_prophet.make_future_dataframe(periods=365*2, freq='D')\n", "tesla_forecast = tesla_prophet.predict(tesla_forecast)"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 128, "lines": ["gm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'Market Cap (billions $)')\n", "plt.title('Market Cap of GM');"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 130, "lines": ["tesla_prophet.plot(tesla_forecast, xlabel = 'Date', ylabel = 'Market Cap (billions $)')\n", "plt.title('Market Cap of Tesla');"]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 132, "lines": ["gm_prophet.changepoints[:10]"]}, {"block": 26, "type": "code", "linesLength": 1, "startIndex": 133, "lines": ["tesla_prophet.changepoints[:10]"]}, {"block": 27, "type": "markdown", "linesLength": 3, "startIndex": 134, "lines": ["### Do Google searches correlation with changepoints? \n", "\n", "Use data from Google Trends on searches of Tesla to see if there is a connection between searches and the changepoints."]}, {"block": 28, "type": "code", "linesLength": 14, "startIndex": 137, "lines": ["# Load in the data \n", "tesla_search = pd.read_csv('data/tesla_search_terms.csv')\n", "\n", "# Convert month to a datetime\n", "tesla_search['Month'] = pd.to_datetime(tesla_search['Month'])\n", "tesla_changepoints = [str(date) for date in tesla_prophet.changepoints]\n", "\n", "# Plot the search frequency\n", "plt.plot(tesla_search['Month'], tesla_search['Search'])\n", "\n", "# Plot the changepoints\n", "plt.vlines(tesla_changepoints, ymin = 0, ymax= 100, colors = 'm', linewidth=0.6)\n", "plt.grid('off'); plt.ylabel('Relative Search Freq');\n", "plt.title('Tesla Search Terms and Changepoints');"]}, {"block": 29, "type": "markdown", "linesLength": 3, "startIndex": 151, "lines": ["# Compare Forecasts\n", "\n", "We want to determine when Tesla will overtake GM in total market value. We already have the forecasts for two years into the future. We will now join them together and determine when the model predicts Tesla will pull ahead. "]}, {"block": 30, "type": "code", "linesLength": 10, "startIndex": 154, "lines": ["gm_names = ['gm_%s' % column for column in gm_forecast.columns]\n", "tesla_names = ['tesla_%s' % column for column in tesla_forecast.columns]\n", "\n", "# Dataframes to merge\n", "merge_gm_forecast = gm_forecast.copy()\n", "merge_tesla_forecast = tesla_forecast.copy()\n", "\n", "# Rename the columns\n", "merge_gm_forecast.columns = gm_names\n", "merge_tesla_forecast.columns = tesla_names"]}, {"block": 31, "type": "code", "linesLength": 6, "startIndex": 164, "lines": ["# Merge the two datasets\n", "forecast = pd.merge(merge_gm_forecast, merge_tesla_forecast, how = 'inner', left_on = 'gm_ds', right_on = 'tesla_ds')\n", "\n", "# Rename date column\n", "forecast = forecast.rename(columns={'gm_ds': 'Date'}).drop('tesla_ds', axis=1)\n", "forecast.head()"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 170, "lines": ["### Visualize Trend Only and the Forecast"]}, {"block": 33, "type": "code", "linesLength": 5, "startIndex": 171, "lines": ["plt.figure(figsize=(10, 8))\n", "plt.plot(forecast['Date'], forecast['gm_trend'], 'b-')\n", "plt.plot(forecast['Date'], forecast['tesla_trend'], 'r-')\n", "plt.legend(); plt.xlabel('Date'); plt.ylabel('Market Cap ($)')\n", "plt.title('GM vs. Tesla Trend'); "]}, {"block": 34, "type": "code", "linesLength": 5, "startIndex": 176, "lines": ["plt.figure(figsize=(10, 8))\n", "plt.plot(forecast['Date'], forecast['gm_yhat'], 'b-')\n", "plt.plot(forecast['Date'], forecast['tesla_yhat'], 'r-')\n", "plt.legend(); plt.xlabel('Date'); plt.ylabel('Market Cap (billions $)')\n", "plt.title('GM vs. Tesla Estimate'); "]}, {"block": 35, "type": "code", "linesLength": 2, "startIndex": 181, "lines": ["overtake_date = min(forecast.ix[forecast['tesla_yhat'] > forecast['gm_yhat'], 'Date'])\n", "print('Tesla overtakes GM on {}'.format(overtake_date))"]}, {"block": 36, "type": "markdown", "linesLength": 1, "startIndex": 183, "lines": ["## Forecast with Uncertainty Bounds"]}, {"block": 37, "type": "code", "linesLength": 3, "startIndex": 184, "lines": ["# Only keep years 2011 onwards and from before 2020\n", "forecast = forecast[forecast['Date'] > '2010-12-31']\n", "forecast = forecast[forecast['Date'] < '2020-01-01']"]}, {"block": 38, "type": "code", "linesLength": 21, "startIndex": 187, "lines": ["xvalues = list(range(len(forecast['Date'])))\n", "\n", "# Create subplots to set figure size\n", "fig, ax = plt.subplots(1, 1, figsize=(10, 8));\n", "\n", "# Plot estimate\n", "ax.plot(xvalues, forecast['gm_yhat'], label = 'gm prediction');\n", "\n", "# Plot uncertainty values\n", "ax.fill_between(xvalues, forecast['gm_yhat_upper'], forecast['gm_yhat_lower'], alpha=0.6, edgecolor = 'k');\n", "\n", "# Plot estimate and uncertainty for tesla\n", "ax.plot(xvalues, forecast['tesla_yhat'], 'r', label = 'tesla prediction');\n", "ax.fill_between(xvalues, forecast['tesla_yhat_upper'], forecast['tesla_yhat_lower'], alpha=0.6, edgecolor = 'k');\n", "\n", "# Set and correct the plot labels\n", "ax.set_xticks(ticks = list(range(0, 2498, 275)));\n", "ax.set_xticklabels(labels = list(range(2011, 2021, 1)));\n", "plt.legend();\n", "plt.xlabel('Date'); plt.ylabel('Billions $'); plt.title('Market Cap Prediction for GM and Tesla');\n", "\n"]}, {"block": 39, "type": "markdown", "linesLength": 3, "startIndex": 208, "lines": ["## Trends and Patterns\n", "\n", "Now, we can use the Prophet Models to inspect different trends in the data. "]}, {"block": 40, "type": "code", "linesLength": 1, "startIndex": 211, "lines": ["gm_prophet.plot_components(gm_forecast)"]}, {"block": 41, "type": "code", "linesLength": 1, "startIndex": 212, "lines": ["tesla_prophet.plot_components(tesla_forecast)"]}, {"block": 42, "type": "markdown", "linesLength": 1, "startIndex": 213, "lines": ["These graphs show that Tesla tends to increase during the summer, and decrease during the winter, while GM plummets during the summer and increases during the winter. We could compare GM sales with these graphs to see if there is any correlation."]}, {"block": 43, "type": "code", "linesLength": 3, "startIndex": 214, "lines": ["# Read in the sales data\n", "gm_sales = pd.read_csv('data/gm_sales.csv')\n", "gm_sales.head(5)"]}, {"block": 44, "type": "code", "linesLength": 3, "startIndex": 217, "lines": ["# Melt the sales data and rename columns\n", "gm_sales = gm_sales.melt(id_vars='Year', var_name = 'Month', value_name = 'Sales')\n", "gm_sales.head(8)"]}, {"block": 45, "type": "code", "linesLength": 11, "startIndex": 220, "lines": ["# Format the data for plotting\n", "gm_sales = gm_sales[gm_sales['Month'] != 'Total']\n", "gm_sales = gm_sales[gm_sales['Year'] > 2010]\n", "gm_sales['Date'] = ['-'.join([str(year), month]) for year, month in zip(gm_sales['Year'], gm_sales['Month'])]\n", "gm_sales['Date'] = pd.to_datetime(gm_sales['Date'], format = \"%Y-%b\")\n", "gm_sales.sort_values(by = 'Date', inplace=True)\n", "gm_sales['Month'] = [date.month for date in gm_sales['Date']]\n", "\n", "# Plot the sales over the period\n", "plt.plot(gm_sales['Date'], gm_sales['Sales'], 'r');\n", "plt.title('GM Monthly Sales 2011-2017'); plt.ylabel('Sales');"]}, {"block": 46, "type": "code", "linesLength": 3, "startIndex": 231, "lines": ["gm_sales_grouped = gm_sales.groupby('Month').mean()\n", "plt.plot(list(range(1, 13)), gm_sales_grouped['Sales']);\n", "plt.xlabel('Month'); plt.ylabel('Sales'); plt.title('GM Average Monthly Sales 2011-2017');"]}, {"block": 47, "type": "code", "linesLength": 1, "startIndex": 234, "lines": ["gm_prophet.plot_yearly(); plt.title('GM Yearly Component of Market Cap');"]}, {"block": 48, "type": "markdown", "linesLength": 1, "startIndex": 235, "lines": ["It does not appear as if there is much correlation between market capitalization (a proxy for share price) and sales over the course of a year)."]}, {"block": 49, "type": "markdown", "linesLength": 3, "startIndex": 236, "lines": ["# Stock Price Predictions\n", "\n", "We can also make testable predictions by restricting our model to a subset of the data, and then using the forecasted values to see how correct our model is. We will restrict data up until the end of 2016, and then try to make predictions for 2017."]}, {"block": 50, "type": "code", "linesLength": 17, "startIndex": 239, "lines": ["# Create a new dataframe with the relevant information\n", "gm_stocks = gm[['ds', 'Year', 'Adj. Close']]\n", "gm_stocks.rename(columns={'Adj. Close': 'y'}, inplace=True)\n", "\n", "# Training and testing data\n", "gm_stocks_train = gm_stocks[gm_stocks['Year'] < 2017]\n", "gm_stocks_test = gm_stocks[gm_stocks['Year'] > 2016]\n", "\n", "# Create a new model \n", "gm_stock_prophet = fbprophet.Prophet(changepoint_prior_scale = 0.15)\n", "\n", "# Train the model\n", "gm_stock_prophet.fit(gm_stocks_train)\n", "gm_stock_forecast = gm_stock_prophet.make_future_dataframe(periods = gm_stocks_test.shape[0], freq = 'D')\n", "\n", "# Make forecasts\n", "gm_stock_forecast = gm_stock_prophet.predict(gm_stock_forecast)"]}, {"block": 51, "type": "code", "linesLength": 2, "startIndex": 256, "lines": ["gm_stock_prophet.plot(gm_stock_forecast);\n", "plt.title('GM Stock Forecast'); plt.ylabel('Stock Price ($)'); plt.xlabel('Year');"]}, {"block": 52, "type": "code", "linesLength": 1, "startIndex": 258, "lines": ["plt.plot(gm_stocks_test['ds'], gm_stocks_test['y'])"]}, {"block": 53, "type": "code", "linesLength": 20, "startIndex": 259, "lines": ["# Create a new dataframe with the relevant information\n", "tesla_stocks = tesla[['ds', 'Year', 'Adj. Close']]\n", "tesla_stocks.rename(columns={'Adj. Close': 'y'}, inplace=True)\n", "\n", "# Training and testing data\n", "tesla_stocks_train = tesla_stocks[tesla_stocks['Year'] < 2017]\n", "tesla_stocks_test = tesla_stocks[tesla_stocks['Year'] > 2016]\n", "\n", "# Create a new model \n", "tesla_stock_prophet = fbprophet.Prophet(changepoint_prior_scale=0.2)\n", "\n", "# Train the model\n", "tesla_stock_prophet.fit(tesla_stocks_train)\n", "tesla_stock_forecast = tesla_stock_prophet.make_future_dataframe(periods = tesla_stocks_test.shape[0], freq = 'D')\n", "\n", "# Make forecasts\n", "tesla_stock_forecast = tesla_stock_prophet.predict(tesla_stock_forecast)\n", "\n", "tesla_stock_prophet.plot(tesla_stock_forecast);\n", "plt.title('Tesla Stock Forecast'); plt.ylabel('Stock Price ($)'); plt.xlabel('Year');"]}, {"block": 54, "type": "code", "linesLength": 1, "startIndex": 279, "lines": ["plt.plot(tesla_stocks_test['ds'], tesla_stocks_test['y'])"]}, {"block": 55, "type": "code", "linesLength": 80, "startIndex": 280, "lines": ["def stock_predictor(ticker='TSLA'):\n", "    try:\n", "        stock = quandl.get('WIKI/%s' % ticker)\n", "    except Exception as e:\n", "        print('Invalid Stock Ticker')\n", "        print(e)\n", "        return\n", "    \n", "    # Change the index to a Date column\n", "    stock_clean = stock.reset_index()[['Date', 'Adj. Close']]\n", "    # Create a year column\n", "    stock_clean['Year'] = [date.year for date in stock_clean['Date']]\n", "    \n", "    # Training and Testing Sets\n", "    stock_train = stock_clean[stock_clean['Year'] < 2017].rename(columns={'Date': 'ds', 'Adj. Close': 'y'})\n", "    stock_test = stock_clean[stock_clean['Year'] > 2016]\n", "    \n", "    # Create the prophet model and fit on training set\n", "    stock_prophet = fbprophet.Prophet(changepoint_prior_scale=0.15)\n", "    stock_prophet.fit(stock_train)\n", "    \n", "    # Make forecasts for entire length of test set + one week\n", "    stock_forecast = stock_prophet.make_future_dataframe(periods=400, freq = 'D')\n", "    stock_forecast = stock_prophet.predict(stock_forecast)\n", "    \n", "    # Plot the entire series\n", "    stock_prophet.plot(stock_forecast); plt.xlabel('Year'); plt.ylabel('Price (US $)');\n", "    plt.title('%s Stock Price and Predictions' % ticker)\n", "    \n", "    \n", "    # Dataframe for predictions and test values\n", "    results = stock_forecast[['ds', 'yhat', 'trend', 'seasonal', 'seasonalities', 'weekly', 'yearly', 'yhat_upper', 'yhat_lower']]\n", "    results = pd.merge(results, stock_test[['Date', 'Adj. Close']], left_on='ds', right_on='Date', how='right')\n", "    \n", "    all_pred = results[['trend', 'seasonal', 'seasonalities', 'weekly', 'yearly']]\n", "    # results['yhat'] = list(np.sum(np.array(all_pred), axis=1))\n", "    \n", "    \n", "    xvalues = list(range(len(results['Date'])))\n", "\n", "    xlabels = list(range(13))\n", "    xlabels.append(1)\n", "    \n", "    \n", "    fig, ax = plt.subplots(1, 1, figsize=(10, 8));\n", "    ax.plot(xvalues, results['Adj. Close'], 'b-', label = 'Actual');\n", "    ax.plot(xvalues, results['yhat'], 'r*', label = 'Predicted');\n", "    ax.fill_between(xvalues, results['yhat_upper'], results['yhat_lower'], alpha=0.6, edgecolor = 'k');\n", "    ax.set_xticks(ticks = list(range(0, max(xvalues), int(max(xvalues) / 12))));\n", "    ax.set_xticklabels(labels = xlabels);\n", "    plt.legend();\n", "    plt.xlabel('2017'); plt.ylabel('Billions $'); plt.title('Stock Price Prediction for %s' % ticker)\n", "    plt.show()\n", "                  \n", "    # Columns of daily changes\n", "    results['pred_diff'] = results['yhat'].diff()\n", "    results['actual_diff'] = results['Adj. Close'].diff()\n", "    \n", "    # Whether the prediction was right or wrong\n", "    results['pred_right'] = np.array((np.sign(results['pred_diff']) == np.sign(results['actual_diff'])).astype('int')).astype(int)\n", "    \n", "    plt.figure(figsize = (10, 8))\n", "    plt.plot(results['Date'], results['actual_diff'], 'bo-', label = 'Actual')\n", "    plt.plot(results['Date'], results['pred_diff'], 'r*-', label = 'Predicted')\n", "    plt.legend(); plt.xlabel('Date'); plt.ylabel('Change (US $)'); plt.title('Actual vs. Predicted Daily Change');\n", "    plt.show();\n", "    \n", "    # Percentage of time direction lined up\n", "    direction_accuracy = np.mean(results['pred_right'])\n", "                                         \n", "    # Performance metrics\n", "    errors = abs(results['yhat'] - results['Adj. Close'])\n", "    mean_error = np.mean(errors)\n", "    mape = np.mean(errors / results['Adj. Close'])\n", "    accuracy = 100 - (100 * mape)\n", "    \n", "    print('Actual and Predicted Difference Aligned {:0.2f}%.'.format(direction_accuracy * 100))\n", "    \n", "    performance = {'error': mean_error, 'accuracy': accuracy, 'dir_acc': direction_accuracy, 'predictions': results}\n", "    return performance"]}, {"block": 56, "type": "code", "linesLength": 1, "startIndex": 360, "lines": ["results = stock_predictor('TSLA')"]}, {"block": 57, "type": "code", "linesLength": 1, "startIndex": 361, "lines": ["results = stock_predictor('GM')"]}, {"block": 58, "type": "code", "linesLength": 1, "startIndex": 362, "lines": ["results = stock_predictor('MSFT')"]}, {"block": 59, "type": "code", "linesLength": 9, "startIndex": 363, "lines": ["tesla = quandl.get('WIKI/TSLA')\n", "tesla = tesla.reset_index()\n", "tesla = tesla.rename(columns={'Date': 'ds', 'Adj. Close': 'y'})\n", "tesla = tesla[['ds', 'y']]\n", "\n", "prophet = fbprophet.Prophet()\n", "prophet.fit(tesla)\n", "future = prophet.make_future_dataframe(periods=365)\n", "future = prophet.predict(future)"]}, {"block": 60, "type": "code", "linesLength": 2, "startIndex": 372, "lines": ["future['combination'] = future['trend'] + future['seasonal'] + future['weekly'] + future['yearly'] + future['seasonalities']\n", "print(future[['combination', 'yhat']].head())"]}, {"block": 61, "type": "code", "linesLength": 1, "startIndex": 374, "lines": ["results['predictions']"]}, {"block": 62, "type": "markdown", "linesLength": 1, "startIndex": 375, "lines": ["# US vs. China Gross Domestic Product"]}, {"block": 63, "type": "code", "linesLength": 11, "startIndex": 376, "lines": ["# My personal api key, use your own\n", "quandl.ApiConfig.api_key = 'rFsSehe51RLzREtYhLfo'\n", "\n", "# Get data from quandl for US and China GDP\n", "us_gdp = quandl.get('FRED/GDP', collapse='quarterly', start_date = '1950-12-31', end_date='2017-12-31')\n", "china_gdp = quandl.get('ODA/CHN_NGDPD', collapse='yearly', start_date = '1950-12-31', end_date='2017-12-31')\n", "\n", "us_gdp.plot(title = 'US Gross Domestic Product', legend=None);\n", "plt.ylabel('Billion $'); \n", "china_gdp.plot(title = 'China Gross Domestic Product', color = 'r', legend=None);\n", "plt.ylabel('Billion $');"]}, {"block": 64, "type": "code", "linesLength": 3, "startIndex": 387, "lines": ["# Change index to date column\n", "us_gdp = us_gdp.reset_index(level=0)\n", "us_gdp.head(5)"]}, {"block": 65, "type": "code", "linesLength": 2, "startIndex": 390, "lines": ["china_gdp = china_gdp.reset_index(level=0)\n", "china_gdp.head(5)"]}, {"block": 66, "type": "code", "linesLength": 3, "startIndex": 392, "lines": ["# Merge the two gdp data frames and rename columns\n", "gdp = us_gdp.merge(china_gdp, on = 'Date', how = 'left').rename(columns={'Value_x': 'US', 'Value_y': 'China'})\n", "gdp.head(5)"]}, {"block": 67, "type": "code", "linesLength": 1, "startIndex": 395, "lines": ["round(gdp.describe(), 2)"]}, {"block": 68, "type": "code", "linesLength": 2, "startIndex": 396, "lines": ["# Fill in missing China observations using backward fill\n", "gdp = gdp.fillna(method='bfill')"]}, {"block": 69, "type": "markdown", "linesLength": 1, "startIndex": 398, "lines": ["## Visualize the data"]}, {"block": 70, "type": "code", "linesLength": 3, "startIndex": 399, "lines": ["plt.plot(gdp['Date'], gdp['US'], label = 'US', color =  'b')\n", "plt.plot(gdp['Date'], gdp['China'], label = 'China', color = 'r')\n", "plt.ylabel('Billions $'); plt.title('US and China GDP'); plt.xlabel('Date');"]}, {"block": 71, "type": "markdown", "linesLength": 1, "startIndex": 402, "lines": ["## Make Predictions of Future GDP"]}, {"block": 72, "type": "code", "linesLength": 8, "startIndex": 403, "lines": ["# Create a prophet object for each dataframe\n", "us_prophet = fbprophet.Prophet(changepoint_prior_scale=0.2)\n", "china_prophet = fbprophet.Prophet(changepoint_prior_scale=0.2)\n", "\n", "# Prophet needs dataframes with a ds (date) and y (variable) column\n", "# Use pandas rename functionality (format is dictionary with {'old': 'new'})\n", "us_gdp = us_gdp.rename(columns={'Date': 'ds', 'Value': 'y'})\n", "china_gdp = china_gdp.rename(columns={'Date': 'ds', 'Value': 'y'})"]}, {"block": 73, "type": "code", "linesLength": 2, "startIndex": 411, "lines": ["us_prophet.fit(us_gdp);\n", "china_prophet.fit(china_gdp);"]}, {"block": 74, "type": "code", "linesLength": 1, "startIndex": 413, "lines": ["us_prophet.changepoints"]}, {"block": 75, "type": "markdown", "linesLength": 3, "startIndex": 414, "lines": ["### Compare US changepoints to recessions\n", "\n", "The prophet object only selects changepoints from the first 80% of the data which is why the recent recession does not appear. We can try and correlate the identified changepoints with actual recessions."]}, {"block": 76, "type": "code", "linesLength": 1, "startIndex": 417, "lines": ["recessions = pd.read_csv('data/recessions.csv', encoding='latin')"]}, {"block": 77, "type": "code", "linesLength": 1, "startIndex": 418, "lines": ["recessions[6:]"]}, {"block": 78, "type": "code", "linesLength": 8, "startIndex": 419, "lines": ["# Make a future dataframe with 50 years of observations \n", "# US dataframe and predictions\n", "us_forecast = us_prophet.make_future_dataframe(periods = 50, freq = 'Y')\n", "us_forecast = us_prophet.predict(us_forecast)\n", "\n", "# China dataframe and predictions\n", "china_forecast = china_prophet.make_future_dataframe(periods = 50, freq = 'Y')\n", "china_forecast = china_prophet.predict(china_forecast)"]}, {"block": 79, "type": "markdown", "linesLength": 1, "startIndex": 427, "lines": ["## Plot Future Predictions"]}, {"block": 80, "type": "code", "linesLength": 1, "startIndex": 428, "lines": ["us_prophet.plot(us_forecast)"]}, {"block": 81, "type": "code", "linesLength": 1, "startIndex": 429, "lines": ["china_prophet.plot(china_forecast)"]}, {"block": 82, "type": "markdown", "linesLength": 1, "startIndex": 430, "lines": ["# When will China Overtake the United States?"]}, {"block": 83, "type": "code", "linesLength": 10, "startIndex": 431, "lines": ["us_names = ['us_%s' % column for column in us_forecast.columns]\n", "china_names = ['china_%s' % column for column in china_forecast.columns]\n", "\n", "# Dataframes to merge\n", "merge_us_forecast = us_forecast.copy()\n", "merge_china_forecast = china_forecast.copy()\n", "\n", "# Rename the columns\n", "merge_us_forecast.columns = us_names\n", "merge_china_forecast.columns = china_names"]}, {"block": 84, "type": "code", "linesLength": 6, "startIndex": 441, "lines": ["# Merge the two datasets\n", "gdp_forecast = pd.merge(merge_us_forecast, merge_china_forecast, how = 'inner', left_on = 'us_ds', right_on = 'china_ds')\n", "\n", "# Rename date column\n", "gdp_forecast = gdp_forecast.rename(columns={'us_ds': 'Date'}).drop('china_ds', axis=1)\n", "gdp_forecast.head()"]}, {"block": 85, "type": "markdown", "linesLength": 1, "startIndex": 447, "lines": ["## Future Plot with Uncertainty"]}, {"block": 86, "type": "code", "linesLength": 11, "startIndex": 448, "lines": ["xvalues = list(range(len(gdp_forecast['Date'])))\n", "\n", "fig, ax = plt.subplots(1, 1, figsize=(10, 8));\n", "ax.plot(xvalues, gdp_forecast['us_yhat'], label = 'us prediction');\n", "ax.fill_between(xvalues, gdp_forecast['us_yhat_upper'], gdp_forecast['us_yhat_lower'], alpha=0.6, edgecolor = 'k');\n", "ax.plot(xvalues, gdp_forecast['china_yhat'], 'r', label = 'china prediction');\n", "ax.fill_between(xvalues, gdp_forecast['china_yhat_upper'], gdp_forecast['china_yhat_lower'], alpha=0.6, edgecolor = 'k');\n", "ax.set_xticks(ticks = list(range(0, 87, 5)));\n", "ax.set_xticklabels(labels = list(range(1980, 2070, 5)));\n", "plt.legend();\n", "plt.xlabel('Date'); plt.ylabel('Billions $'); plt.title('Market Cap Prediction for US and China');\n"]}, {"block": 87, "type": "code", "linesLength": 2, "startIndex": 459, "lines": ["first_pass = min(gdp_forecast.ix[gdp_forecast['us_yhat'] < gdp_forecast['china_yhat'], 'Date'])\n", "print('China will overtake the US in GDP on {}.'.format(first_pass))"]}, {"block": 88, "type": "code", "linesLength": 0, "startIndex": 461, "lines": []}]