[{"block": 0, "type": "code", "linesLength": 5, "startIndex": 0, "lines": ["import pandas as pd\n", "import numpy as np\n", "\n", "import matplotlib.pyplot as plt\n", "%matplotlib inline"]}, {"block": 1, "type": "markdown", "linesLength": 1, "startIndex": 5, "lines": ["# Medicine A vs Medicine B"]}, {"block": 2, "type": "code", "linesLength": 4, "startIndex": 6, "lines": ["data = pd.DataFrame({'X Better': [125, 22], 'X Treated': [610, 75], 'Y Better': [29, 60], 'Y Treated': [150, 240]}, index = [\"M\", \"F\"])\n", "data['X Percent'] = data['X Better'] / data['X Treated']\n", "data['Y Percent'] = data['Y Better'] / data['Y Treated']\n", "data"]}, {"block": 3, "type": "code", "linesLength": 7, "startIndex": 10, "lines": ["# x_average = data['X Total'].sum() / data['X Treated'].sum()\n", "# y_average = data['Y Total'].sum() / data['Y Treated'].sum()\n", "\n", "data.loc['combined', :4] = list(data.iloc[:, :4].sum())\n", "data.loc['combined', 'X Percent'] = data.loc['combined', 'X Better'] / data.loc['combined', 'X Treated']\n", "data.loc['combined', 'Y Percent'] = data.loc['combined', 'Y Better'] / data.loc['combined', 'Y Treated']\n", "data"]}, {"block": 4, "type": "markdown", "linesLength": 3, "startIndex": 17, "lines": ["# Restaurant Reviews\n", "\n", "This is a simplified fictional example showing Simpson's Paradox: trends that are present when looking at a segmented version of the data can be reversed when aggregating the data. "]}, {"block": 5, "type": "code", "linesLength": 4, "startIndex": 20, "lines": ["data = pd.DataFrame({\"Recommend Sophia's\": [30, 120], \"Sophia's Total\": [100, 150], \"Recommend Carlo's\": [180, 36], \"Carlo's Total\": [360, 40]}, index = [\"M\", \"F\"])\n", "data[\"Sophia\\'s Percent\"] = data[\"Recommend Sophia's\"] / data[\"Sophia's Total\"]\n", "data[\"Carlo's Percent\"] = data[\"Recommend Carlo's\"] / data[\"Carlo's Total\"]\n", "data"]}, {"block": 6, "type": "code", "linesLength": 4, "startIndex": 24, "lines": ["data.loc['combined', :4] = list(data.iloc[:, :4].sum())\n", "data.loc['combined', \"Sophia's Percent\"] = data.loc['combined', \"Recommend Sophia's\"] / data.loc['combined', \"Sophia's Total\"]\n", "data.loc['combined', \"Carlo's Percent\"] = data.loc['combined', \"Recommend Carlo's\"] / data.loc['combined', \"Carlo's Total\"]\n", "data"]}, {"block": 7, "type": "code", "linesLength": 4, "startIndex": 28, "lines": ["data = pd.DataFrame({'A Ratings': [8.0, 9.0], 'B Ratings': [6.5, 8.5], \n", "                     'A Number': [220, 50], 'B Number': [20, 650], \n", "                     'Gender': ['M', 'F']}).set_index('Gender')\n", "data"]}, {"block": 8, "type": "code", "linesLength": 9, "startIndex": 32, "lines": ["a_average = (data.loc[:, 'A Ratings'] * data.loc[:, 'A Number']).sum() / data.loc[:, 'A Number'].sum(axis=0)\n", "b_average = (data.loc[:, 'B Ratings'] * data.loc[:, 'B Number']).sum() / data.loc[:, 'B Number'].sum(axis=0)\n", "\n", "\n", "data.loc['Combined'] = [a_average, \n", "                        b_average, \n", "                        data['A Number'].sum(), \n", "                        data['B Number'].sum()]\n", "data.round(2)"]}, {"block": 9, "type": "markdown", "linesLength": 3, "startIndex": 41, "lines": ["# Hours of Exercise vs Chance of Developing Disease\n", "\n", "This is another fictional example showing Simpson's Paradox in the context of a correlation. When looking at the data individually, there is a negative correlation between hours of exercise and chance of developing a disease, but when aggregating the data, the correlation reverses! "]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 44, "lines": ["from numpy.polynomial.polynomial import polyfit"]}, {"block": 11, "type": "code", "linesLength": 42, "startIndex": 45, "lines": ["n_samples = 100\n", "np.random.seed(42)\n", "ages = np.random.randint(20, 50, n_samples)\n", "hours = np.random.randint(1, 5, n_samples) + np.random.randn(n_samples)\n", "p = 12 + 0.5 * ages + -2.1 * hours + np.random.randn(n_samples) *  2\n", "under_50 = pd.DataFrame({'age': ages, 'Hours Exercised': hours, 'probability': p})\n", "\n", "n_samples = 100\n", "ages = np.random.randint(50, 85, n_samples)\n", "hours = np.random.randint(3, 8, n_samples) + np.random.randn(n_samples) * 0.5\n", "p = 40 + 0.32 * ages + -3.2 * hours + np.random.randn(n_samples) \n", "over_50 = pd.DataFrame({'age': ages, 'Hours Exercised': hours, 'probability': p})\n", "\n", "\n", "def plot_relationship(data, c, color, ax):\n", "    \"\"\"Plot a scatter plot with linear fit\"\"\"\n", "    x, y = np.array(data[c]), np.array(data['probability'])\n", "    # Linear fit (polynomial of degree 1)\n", "    b, m = polyfit(x, y, 1)\n", "    # Plot scatterplot\n", "    data.plot(x = c, y = 'probability', c = color, \n", "              style = 'o', legend = None, ax = ax, ms = 10)\n", "    # Plot linear fit\n", "    ax.plot(x, m * x + b, '-', color = 'k');\n", "    if color == '#d9d142':\n", "        plt.title(f'Probability vs {c.capitalize()} over 50')\n", "    elif color == '#04c5ff':\n", "        plt.title(f'Probability vs {c.capitalize()} under 50')\n", "    else:\n", "        plt.title(f'Probability vs {c.capitalize()} Combined')\n", "    corr_coef = np.corrcoef(x, y)[0][1]\n", "    ax = plt.gca()\n", "    plt.ylabel('Probability'); \n", "    plt.text(0.2, 0.75, r'$\\rho$ = ' + f'{round(corr_coef, 2)}', fontsize = 28, color = 'k', \n", "             transform=ax.transAxes)\n", "\n", "    \n", "plt.figure(figsize = (20, 8))\n", "ax = plt.subplot(1, 2, 1)\n", "plot_relationship(under_50, 'Hours Exercised', '#04c5ff', ax)\n", "ax = plt.subplot(1, 2, 2)\n", "plot_relationship(over_50, 'Hours Exercised', '#d9d142', ax)"]}, {"block": 12, "type": "code", "linesLength": 4, "startIndex": 87, "lines": ["plt.figure(figsize = (10, 8))\n", "combined = pd.concat([under_50, over_50], axis = 0)\n", "ax = plt.subplot(1, 1, 1)\n", "plot_relationship(combined, 'Hours Exercised', 'r', ax)"]}, {"block": 13, "type": "code", "linesLength": 5, "startIndex": 91, "lines": ["plt.figure(figsize = (20, 8))\n", "ax = plt.subplot(1, 2, 1)\n", "plot_relationship(under_50, 'age', '#04c5ff', ax)\n", "ax = plt.subplot(1, 2, 2)\n", "plot_relationship(over_50, 'age', '#d9d142', ax)"]}, {"block": 14, "type": "code", "linesLength": 3, "startIndex": 96, "lines": ["plt.figure(figsize = (10, 8))\n", "ax = plt.subplot(1, 1, 1)\n", "plot_relationship(combined, 'age', 'r', ax)"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 99, "lines": ["colors = [ '#04c5ff' for _ in range(n_samples)]\n", "colors.extend(['#d9d142' for _ in range(n_samples)])"]}, {"block": 16, "type": "code", "linesLength": 20, "startIndex": 101, "lines": ["plt.figure(figsize = (10, 8))\n", "\n", "plt.scatter(combined['Hours Exercised'],\n", "            combined['probability'], c = colors, label = None, s = 60);\n", "\n", "x_c, y_c = np.array(combined['Hours Exercised']), np.array(combined['probability'])\n", "b_c, m_c = polyfit(x_c, y_c, 1)\n", "\n", "x_u, y_u = np.array(under_50['Hours Exercised']), np.array(under_50['probability'])\n", "b_u, m_u = polyfit(x_u, y_u, 1)\n", "\n", "x_o, y_o = np.array(over_50['Hours Exercised']), np.array(over_50['probability'])\n", "b_o, m_o = polyfit(over_50['Hours Exercised'], over_50['probability'], 1)\n", "\n", "plt.plot(x_u, b_u + m_u * x_u, c =  '#04c5ff', label = 'Under 50 Fit');\n", "plt.plot(x_o, b_o + m_o * x_o, c = '#d9d142', label = 'Over 50 Fit');\n", "plt.plot(x_c, b_c + m_c * x_c, c = 'r', label = 'Combined Fit');\n", "plt.xlabel('Hours Exercised');\n", "plt.ylabel('Probability'); plt.title(\"Simpson's Paradox: Correlation Reversal\");\n", "plt.legend(prop = {'size': 14});"]}, {"block": 17, "type": "code", "linesLength": 20, "startIndex": 121, "lines": ["plt.figure(figsize = (10, 8))\n", "\n", "plt.scatter(combined['age'],\n", "            combined['probability'], c = colors, label = None, s = 60);\n", "\n", "x_c, y_c = np.array(combined['age']), np.array(combined['probability'])\n", "b_c, m_c = polyfit(x_c, y_c, 1)\n", "\n", "x_u, y_u = np.array(under_50['age']), np.array(under_50['probability'])\n", "b_u, m_u = polyfit(x_u, y_u, 1)\n", "\n", "x_o, y_o = np.array(over_50['age']), np.array(over_50['probability'])\n", "b_o, m_o = polyfit(over_50['age'], over_50['probability'], 1)\n", "\n", "plt.plot(x_u, b_u + m_u * x_u, c =  '#04c5ff', label = 'Under 50 Fit');\n", "plt.plot(x_o, b_o + m_o * x_o, c = '#d9d142', label = 'Over 50 Fit');\n", "plt.plot(x_c, b_c + m_c * x_c, c = 'r', label = 'Combined Fit');\n", "plt.xlabel('Age');\n", "plt.ylabel('Probability'); plt.title(\"Simpson's Paradox: Confounding Variables\");\n", "plt.legend(prop = {'size': 14});"]}, {"block": 18, "type": "code", "linesLength": 18, "startIndex": 141, "lines": ["from mpl_toolkits.mplot3d import Axes3D\n", "\n", "fig = plt.figure(figsize = (10, 8))\n", "ax = fig.add_subplot(111, projection='3d')\n", "\n", "\n", "markers = ['.' for _ in range(100)]\n", "markers.extend('o' for _ in range(100))\n", "\n", "x_c = np.array(combined['Hours Exercised'])\n", "y_c = np.array(combined['age'])\n", "z_c = np.array(combined['probability'])\n", "ax.scatter(x_c, y_c, z_c, c=colors, s = 40, marker='o', alpha = 1.0)\n", "\n", "ax.set_xlabel('Hours Exercised')\n", "ax.set_ylabel('Age')\n", "ax.set_zlabel('Probability');\n", "ax.set_title('Visualization of Confounding Variables', y = 1.05);"]}, {"block": 19, "type": "code", "linesLength": 0, "startIndex": 159, "lines": []}]