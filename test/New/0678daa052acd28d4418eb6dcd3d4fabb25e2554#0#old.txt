[{"block": 0, "type": "markdown", "linesLength": 1, "startIndex": 0, "lines": ["# Data Preparation"]}, {"block": 1, "type": "code", "linesLength": 6, "startIndex": 1, "lines": ["# Pandas is used for data manipulation\n", "import pandas as pd\n", "\n", "# Read in data as pandas dataframe and display first 5 rows\n", "features = pd.read_csv('temps.csv')\n", "features.head(5)"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 7, "lines": ["print('The shape of our features is:', features.shape)"]}, {"block": 3, "type": "markdown", "linesLength": 1, "startIndex": 8, "lines": ["## One-Hot Encoding"]}, {"block": 4, "type": "markdown", "linesLength": 19, "startIndex": 9, "lines": ["One hot encoding takes this:\n", "\n", "| week |\n", "|------|\n", "| Mon  |\n", "| Tue  |\n", "| Wed  |\n", "| Thu  |\n", "| Fri  |\n", "\n", "and converts it into:\n", "\n", "| Mon | Tue | Wed | Thu | Fri |\n", "|-----|-----|-----|-----|-----|\n", "| 1   | 0   | 0   | 0   | 0   |\n", "| 0   | 1   | 0   | 0   | 0   |\n", "| 0   | 0   | 1   | 0   | 0   |\n", "| 0   | 0   | 0   | 1   | 0   |\n", "| 0   | 0   | 0   | 0   | 1   |"]}, {"block": 5, "type": "code", "linesLength": 3, "startIndex": 28, "lines": ["# One-hot encode categorical features\n", "features = pd.get_dummies(features)\n", "features.head(5)"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 31, "lines": ["print('Shape of features after one-hot encoding:', features.shape)"]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["## Features and Labels"]}, {"block": 8, "type": "code", "linesLength": 15, "startIndex": 33, "lines": ["# Use numpy to convert to arrays\n", "import numpy as np\n", "\n", "# Labels are the values we want to predict\n", "labels = np.array(features['actual'])\n", "\n", "# Remove the labels from the features\n", "# axis 1 refers to the columns\n", "features= features.drop('actual', axis = 1)\n", "\n", "# Saving feature names for later use\n", "feature_list = list(features.columns)\n", "\n", "# Convert to numpy array\n", "features = np.array(features)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 48, "lines": ["## Training and Testing Sets"]}, {"block": 10, "type": "code", "linesLength": 6, "startIndex": 49, "lines": ["# Using Skicit-learn to split data into training and testing sets\n", "from sklearn.model_selection import train_test_split\n", "\n", "# Split the data into training and testing sets\n", "train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.25,\n", "                                                                           random_state = 42)"]}, {"block": 11, "type": "code", "linesLength": 4, "startIndex": 55, "lines": ["print('Training Features Shape:', train_features.shape)\n", "print('Training Labels Shape:', train_labels.shape)\n", "print('Testing Features Shape:', test_features.shape)\n", "print('Testing Labels Shape:', test_labels.shape)"]}, {"block": 12, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["## Establish Baseline"]}, {"block": 13, "type": "code", "linesLength": 6, "startIndex": 60, "lines": ["# The baseline predictions are the historical averages\n", "baseline_preds = test_features[:, feature_list.index('average')]\n", "\n", "# Baseline errors, and display average baseline error\n", "baseline_errors = abs(baseline_preds - test_labels)\n", "print('Average baseline error: ', round(np.mean(baseline_errors), 2), 'degrees.')"]}, {"block": 14, "type": "markdown", "linesLength": 1, "startIndex": 66, "lines": ["## Training the Forest"]}, {"block": 15, "type": "code", "linesLength": 8, "startIndex": 67, "lines": ["# Import the model we are using\n", "from sklearn.ensemble import RandomForestRegressor\n", "\n", "# Instantiate model \n", "rf = RandomForestRegressor(n_estimators= 1000, random_state=42)\n", "\n", "# Train the model on training data\n", "rf.fit(train_features, train_labels);"]}, {"block": 16, "type": "markdown", "linesLength": 2, "startIndex": 75, "lines": ["We can create models with different hyperparameters to try and boost performance. The only way to find the best ones\n", "are to try a few and evaluate them! "]}, {"block": 17, "type": "code", "linesLength": 2, "startIndex": 77, "lines": ["rf_new = RandomForestRegressor(n_estimators = 100, criterion = 'mse', max_depth = None, \n", "                               min_samples_split = 2, min_samples_leaf = 1)"]}, {"block": 18, "type": "markdown", "linesLength": 1, "startIndex": 79, "lines": ["## Make Predictions on Test Data"]}, {"block": 19, "type": "code", "linesLength": 8, "startIndex": 80, "lines": ["# Use the forest's predict method on the test data\n", "predictions = rf.predict(test_features)\n", "\n", "# Calculate the absolute errors\n", "errors = abs(predictions - test_labels)\n", "\n", "# Print out the mean absolute error (mae)\n", "print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n"]}, {"block": 20, "type": "code", "linesLength": 6, "startIndex": 88, "lines": ["# Calculate mean absolute percentage error (MAPE)\n", "mape = 100 * (errors / test_labels)\n", "\n", "# Calculate and display accuracy\n", "accuracy = 100 - np.mean(mape)\n", "print('Accuracy:', round(accuracy, 2), '%.')"]}, {"block": 21, "type": "markdown", "linesLength": 1, "startIndex": 94, "lines": ["## Visualizing a Single Decision Tree"]}, {"block": 22, "type": "code", "linesLength": 15, "startIndex": 95, "lines": ["# Import tools needed for visualization\n", "from sklearn.tree import export_graphviz\n", "import pydot\n", "\n", "# Pull out one tree from the forest\n", "tree = rf.estimators_[5]\n", "\n", "# Export the image to a dot file\n", "export_graphviz(tree, out_file = 'tree.dot', feature_names = feature_list, rounded = True, precision = 1)\n", "\n", "# Use dot file to create a graph\n", "(graph, ) = pydot.graph_from_dot_file('tree.dot')\n", "\n", "# Write graph to a png file\n", "graph.write_png('tree.png'); "]}, {"block": 23, "type": "markdown", "linesLength": 1, "startIndex": 110, "lines": ["![Decision Tree](tree.png)"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["print('The depth of this tree is:', tree.tree_.max_depth)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 112, "lines": ["Smaller tree for visualization."]}, {"block": 26, "type": "code", "linesLength": 13, "startIndex": 113, "lines": ["# Limit depth of tree to 2 levels\n", "rf_small = RandomForestRegressor(n_estimators=10, max_depth = 3, random_state=42)\n", "rf_small.fit(train_features, train_labels)\n", "\n", "# Extract the small tree\n", "tree_small = rf_small.estimators_[5]\n", "\n", "# Save the tree as a png image\n", "export_graphviz(tree_small, out_file = 'small_tree.dot', feature_names = feature_list, rounded = True, precision = 1)\n", "\n", "(graph, ) = pydot.graph_from_dot_file('small_tree.dot')\n", "\n", "graph.write_png('small_tree.png')"]}, {"block": 27, "type": "markdown", "linesLength": 1, "startIndex": 126, "lines": ["![Small Decision Tree](small_tree.PNG)"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 127, "lines": ["### Annotated Version of Tree"]}, {"block": 29, "type": "markdown", "linesLength": 1, "startIndex": 128, "lines": ["![Annotated Decision Tree](small_tree_annotated.PNG)"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 129, "lines": ["## Variable Importances"]}, {"block": 31, "type": "code", "linesLength": 11, "startIndex": 130, "lines": ["# Get numerical feature importances\n", "importances = list(rf.feature_importances_)\n", "\n", "# List of tuples with variable and importance\n", "feature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)]\n", "\n", "# Sort the feature importances by most important first\n", "feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n", "\n", "# Print out the feature and importances \n", "[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 141, "lines": ["### Two Most Important Features"]}, {"block": 33, "type": "code", "linesLength": 23, "startIndex": 142, "lines": ["# New random forest with only the two most important variables\n", "rf_most_important = RandomForestRegressor(n_estimators= 1000, random_state=42)\n", "\n", "# Extract the two most important features\n", "important_indices = [feature_list.index('temp_1'), feature_list.index('average')]\n", "train_important = train_features[:, important_indices]\n", "test_important = test_features[:, important_indices]\n", "\n", "# Train the random forest\n", "rf_most_important.fit(train_important, train_labels)\n", "\n", "# Make predictions and determine the error\n", "predictions = rf_most_important.predict(test_important)\n", "\n", "errors = abs(predictions - test_labels)\n", "\n", "# Display the performance metrics\n", "print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n", "\n", "mape = np.mean(100 * (errors / test_labels))\n", "accuracy = 100 - mape\n", "\n", "print('Accuracy:', round(accuracy, 2), '%.')"]}, {"block": 34, "type": "markdown", "linesLength": 1, "startIndex": 165, "lines": ["## Visualizations"]}, {"block": 35, "type": "code", "linesLength": 19, "startIndex": 166, "lines": ["# Import matplotlib for plotting and use magic command for Jupyter Notebooks\n", "import matplotlib.pyplot as plt\n", "\n", "%matplotlib inline\n", "\n", "# Set the style\n", "plt.style.use('fivethirtyeight')\n", "\n", "# list of x locations for plotting\n", "x_values = list(range(len(importances)))\n", "\n", "# Make a bar chart\n", "plt.bar(x_values, importances, orientation = 'vertical')\n", "\n", "# Tick labels for x axis\n", "plt.xticks(x_values, feature_list, rotation='vertical')\n", "\n", "# Axis labels and title\n", "plt.ylabel('Importance'); plt.xlabel('Variable'); plt.title('Variable Importances'); "]}, {"block": 36, "type": "code", "linesLength": 27, "startIndex": 185, "lines": ["import datetime\n", "\n", "# Dates of training values\n", "months = features[:, feature_list.index('month')]\n", "days = features[:, feature_list.index('day')]\n", "years = features[:, feature_list.index('year')]\n", "\n", "# List and then convert to datetime object\n", "dates = [str(int(year)) + '-' + str(int(month)) + '-' + str(int(day)) for year, month, day in zip(years, months, days)]\n", "dates = [datetime.datetime.strptime(date, '%Y-%m-%d') for date in dates]\n", "\n", "# Dataframe with true values and dates\n", "true_data = pd.DataFrame(data = {'date': dates, 'actual': labels})\n", "\n", "# Dates of predictions\n", "months = test_features[:, feature_list.index('month')]\n", "days = test_features[:, feature_list.index('day')]\n", "years = test_features[:, feature_list.index('year')]\n", "\n", "# Column of dates\n", "test_dates = [str(int(year)) + '-' + str(int(month)) + '-' + str(int(day)) for year, month, day in zip(years, months, days)]\n", "\n", "# Convert to datetime objects\n", "test_dates = [datetime.datetime.strptime(date, '%Y-%m-%d') for date in test_dates]\n", "\n", "# Dataframe with predictions and dates\n", "predictions_data = pd.DataFrame(data = {'date': test_dates, 'prediction': predictions}) "]}, {"block": 37, "type": "code", "linesLength": 10, "startIndex": 212, "lines": ["# Plot the actual values\n", "plt.plot(true_data['date'], true_data['actual'], 'b-', label = 'actual')\n", "\n", "# Plot the predicted values\n", "plt.plot(predictions_data['date'], predictions_data['prediction'], 'ro', label = 'prediction')\n", "plt.xticks(rotation = '60'); \n", "plt.legend()\n", "\n", "# Graph labels\n", "plt.xlabel('Date'); plt.ylabel('Maximum Temperature (F)'); plt.title('Actual and Predicted Values');\n"]}, {"block": 38, "type": "code", "linesLength": 16, "startIndex": 222, "lines": ["# Make the data accessible for plotting\n", "true_data['temp_1'] = features[:, feature_list.index('temp_1')]\n", "true_data['average'] = features[:, feature_list.index('average')]\n", "true_data['friend'] = features[:, feature_list.index('friend')]\n", "\n", "# Plot all the data as lines\n", "plt.plot(true_data['date'], true_data['actual'], 'b-', label  = 'actual', alpha = 1.0)\n", "plt.plot(true_data['date'], true_data['temp_1'], 'y-', label  = 'temp_1', alpha = 1.0)\n", "plt.plot(true_data['date'], true_data['average'], 'k-', label = 'average', alpha = 0.8)\n", "plt.plot(true_data['date'], true_data['friend'], 'r-', label = 'friend', alpha = 0.3)\n", "\n", "# Formatting plot\n", "plt.legend(); plt.xticks(rotation = '60');\n", "\n", "# Lables and title\n", "plt.xlabel('Date'); plt.ylabel('Maximum Temperature (F)'); plt.title('Actual Max Temp and Variables');"]}, {"block": 39, "type": "code", "linesLength": 0, "startIndex": 238, "lines": []}]