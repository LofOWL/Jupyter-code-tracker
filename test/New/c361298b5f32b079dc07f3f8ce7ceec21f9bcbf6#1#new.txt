[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Histograms and Density Plots\n", "\n", "In this notebook we will look at the [NYCFlights13 dataset](https://cran.r-project.org/web/packages/nycflights13/nycflights13.pdf), which contains information on over 300,000 planes departing NYC airports in 2013. We will focus on visualizing the distribution of arrival delays given in minutes. "]}, {"block": 1, "type": "code", "linesLength": 15, "startIndex": 3, "lines": ["# Pandas and numpy for data manipulation\n", "import pandas as pd\n", "import numpy as np\n", "\n", "# Matplotlib and seaborn for plotting\n", "import matplotlib.pyplot as plt\n", "import matplotlib\n", "%matplotlib inline\n", "\n", "matplotlib.rcParams['font.size'] = 18\n", "matplotlib.rcParams['figure.dpi'] = 200\n", "\n", "import seaborn as sns\n", "\n", "from IPython.core.pylabtools import figsize"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 18, "lines": ["## Data Import "]}, {"block": 3, "type": "code", "linesLength": 11, "startIndex": 19, "lines": [" # Read in data\n", "flights = pd.read_csv('data/flights.csv')\n", "carriers = pd.read_csv('data/by_carrier.csv')\n", "airlines = pd.read_csv('data/airlines.csv')\n", "\n", "flights = flights.merge(airlines, how = 'left', on = 'carrier')\n", "flights = flights[['arr_delay', 'name']] \n", "\n", "# Filter flight delays between -60 and 120 minutes\n", "flights = flights[flights['arr_delay'].between(-60, 120)]\n", "flights.head(10)"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 30, "lines": ["flights.to_csv('data/formatted_flights.csv')"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 31, "lines": ["flights = pd.read_csv('data/formatted_flights.csv')\n", "flights['arr_delay'].describe()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 33, "lines": ["# Histogram of All Arrival Delays "]}, {"block": 7, "type": "markdown", "linesLength": 1, "startIndex": 34, "lines": ["## Matplotlib"]}, {"block": 8, "type": "code", "linesLength": 9, "startIndex": 35, "lines": ["figsize(9, 7)\n", "\n", "# Make the histogram using matplotlib, bins must be integet\n", "plt.hist(flights['arr_delay'], color = 'blue', edgecolor = 'black',\n", "         bins = int(180/5))\n", "\n", "# Add labels\n", "plt.title('Histogram of Arrival Delays')\n", "plt.xlabel('Delay (min)'); plt.ylabel('Flights');"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["## Seaborn"]}, {"block": 10, "type": "code", "linesLength": 8, "startIndex": 45, "lines": ["figsize(9, 7)\n", "\n", "sns.distplot(flights['arr_delay'], hist=True, kde=False, \n", "             bins=int(180/5), color = 'blue',\n", "             hist_kws={'edgecolor':'black'})\n", "\n", "plt.title('Histogram of Arrival Delays')\n", "plt.xlabel('Delay (min)'); plt.ylabel('Flights');\n"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 53, "lines": ["## Histogram with Varying Binwidths"]}, {"block": 12, "type": "code", "linesLength": 19, "startIndex": 54, "lines": ["figsize(18, 16)\n", "\n", "# Show 4 different binwidths\n", "for i, binwidth in enumerate([1, 5, 10, 15]):\n", "    \n", "    # Set up the plot\n", "    ax = plt.subplot(2, 2, i + 1)\n", "    \n", "    # Draw the plot\n", "    ax.hist(flights['arr_delay'], bins = int(180/binwidth),\n", "             color = 'blue', edgecolor = 'black')\n", "    \n", "    # Title and labels\n", "    ax.set_title('Histogram with Binwidth = %d' % binwidth, size = 30)\n", "    ax.set_xlabel('Delay (min)', size = 22)\n", "    ax.set_ylabel('Flights', size= 22)\n", "\n", "plt.tight_layout()\n", "plt.show()"]}, {"block": 13, "type": "markdown", "linesLength": 3, "startIndex": 73, "lines": ["# Where Histograms Fail: Multiple Categories\n", "\n", "Histograms work very well for display a single variable from one category (in this case the one category was all the flights). However, for displaying multiple categories, a histogram does not work well because the plots are obscured."]}, {"block": 14, "type": "code", "linesLength": 7, "startIndex": 76, "lines": ["# Extract top five airlines with most flights\n", "carrier_flights = pd.Series(flights.groupby('name')['name'].count())\n", "carrier_flights = carrier_flights.sort_values(ascending=False)\n", "top_five = carrier_flights.index[:5]\n", "\n", "# Subset to the top 5 airlines\n", "top_five_flights = flights[flights['name'].isin(top_five)]"]}, {"block": 15, "type": "code", "linesLength": 14, "startIndex": 83, "lines": ["figsize(10, 8)\n", "\n", "# Iterate through each of the five airlines\n", "for airline in top_five:\n", "    # Subset to the airline\n", "    subset = top_five_flights[top_five_flights['name'] == airline]\n", "    # Make a histogram with the airline\n", "    sns.distplot(subset['arr_delay'], bins = int(180/5), \n", "                 label = airline, hist = True, kde = False, \n", "                 norm_hist=True, \n", "                 hist_kws = {'edgecolor': 'black'})\n", "    \n", "plt.legend(prop={'size': 16}, title = 'Airline')\n", "plt.title('Histogram of Delays by Airline'); plt.xlabel('Delay (min)'); plt.ylabel('Normalized Counts');"]}, {"block": 16, "type": "code", "linesLength": 11, "startIndex": 97, "lines": ["# Make a separate list for each airline\n", "x1 = list(flights[flights['name'] == 'United Air Lines Inc.']['arr_delay'])\n", "x2 = list(flights[flights['name'] == 'JetBlue Airways']['arr_delay'])\n", "x3 = list(flights[flights['name'] == 'ExpressJet Airlines Inc.']['arr_delay'])\n", "x4 = list(flights[flights['name'] == 'Delta Air Lines Inc.']['arr_delay'])\n", "x5 = list(flights[flights['name'] == 'American Airlines Inc.']['arr_delay'])\n", "\n", "# Assign colors for each airline and the names\n", "colors = ['#E69F00', '#56B4E9', '#F0E442', '#009E73', '#D55E00']\n", "names = ['United Air Lines Inc.', 'JetBlue Airways', 'ExpressJet Airlines Inc.',\n", "         'Delta Air Lines Inc.', 'American Airlines Inc.']"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 108, "lines": ["## Solution 1: Side-by-Side Histograms"]}, {"block": 18, "type": "code", "linesLength": 12, "startIndex": 109, "lines": ["figsize(10, 8)\n", "\n", "# Make the histogram using a list of lists\n", "# Normalize the flights and assign colors and names\n", "plt.hist([x1, x2, x3, x4, x5], bins = int(180/15), normed=True,\n", "         color = colors, label=names)\n", "\n", "# Plot formatting\n", "plt.legend()\n", "plt.xlabel('Delay (min)')\n", "plt.ylabel('Normalized Flights')\n", "plt.title('Side-by-Side Histogram with Multiple Airlines');"]}, {"block": 19, "type": "markdown", "linesLength": 1, "startIndex": 121, "lines": ["## Solution 2: Stacked Histograms"]}, {"block": 20, "type": "code", "linesLength": 7, "startIndex": 122, "lines": ["figsize(10, 8)\n", "plt.hist([x1, x2, x3, x4, x5], bins = int(180/15), normed=True,\n", "         stacked=True,\n", "         color = colors, label=names)\n", "\n", "plt.legend(); plt.xlabel('Delay (min)'); plt.ylabel('Normed Flights');\n", "plt.title('Stacked Histogram with Multiple Airlines');"]}, {"block": 21, "type": "markdown", "linesLength": 7, "startIndex": 129, "lines": ["# Solution 3: Density Plots\n", "\n", "A density plot uses a kernel (by default a Gaussian) at every data point to create a distribution and then sums the distribution at each location to create a single distribution.\n", "\n", "![](images/KDEWIKI.png)\n", "\n", "This produces a smoothed version of a histogram where the y-axis is in density. This density can be thought of as a probability of the data value corresponding to the value on the x-axis, but this can create issues because the density may be greater than one. I usually just think of it as _density_, a value used for comparison purposes only. "]}, {"block": 22, "type": "markdown", "linesLength": 1, "startIndex": 136, "lines": ["## Density Plot of All Delays Using Seaborn"]}, {"block": 23, "type": "code", "linesLength": 9, "startIndex": 137, "lines": ["figsize(9, 7)\n", "\n", "sns.distplot(flights['arr_delay'], hist=True, kde=True, \n", "             bins=int(180/5), color = 'darkblue', \n", "             hist_kws={'edgecolor':'black'},\n", "             kde_kws={'linewidth': 4});\n", "\n", "plt.title('Density Plot and Histogram of Arrival Delays'); \n", "plt.xlabel('Delay (min)'); plt.ylabel('Density');"]}, {"block": 24, "type": "markdown", "linesLength": 1, "startIndex": 146, "lines": ["# Density Plot with Varying Bandwidths"]}, {"block": 25, "type": "code", "linesLength": 10, "startIndex": 147, "lines": ["figsize(12, 10)\n", "\n", "for bandwidth in ['scott', 0.2, 0.5, 1, 5]:\n", "    sns.distplot(flights['arr_delay'], hist = False, kde = True, \n", "                 kde_kws={'bw': bandwidth, 'linewidth': 3},\n", "                 label = bandwidth)\n", "    \n", "plt.legend(prop={'size': 16}, title = 'bandwidth')\n", "plt.title('Density Plot with Varying Bandwidths'); \n", "plt.xlabel('Delay (min)'); plt.ylabel('Density');"]}, {"block": 26, "type": "markdown", "linesLength": 1, "startIndex": 157, "lines": ["## Different Kernels for the Density Plot"]}, {"block": 27, "type": "code", "linesLength": 8, "startIndex": 158, "lines": ["for kernel in ['gau', 'cos', 'biw', 'epa', 'tri', 'triw']:\n", "    sns.distplot(flights['arr_delay'], hist = False, kde = True, \n", "                 kde_kws={'kernel': kernel, 'linewidth': 3},\n", "                 label = kernel)\n", "    \n", "plt.legend(prop={'size': 16}, title = 'Kernel')\n", "plt.title('Density Plot with Different Kernels'); \n", "plt.xlabel('Delay (min)'); plt.ylabel('Density');"]}, {"block": 28, "type": "markdown", "linesLength": 1, "startIndex": 166, "lines": ["# Density Plot of Delays of Top Five"]}, {"block": 29, "type": "code", "linesLength": 20, "startIndex": 167, "lines": ["figsize(12, 8)\n", "\n", "# List of five airlines to plot\n", "airlines = ['United Air Lines Inc.', 'JetBlue Airways', 'ExpressJet Airlines Inc.',\n", "         'Delta Air Lines Inc.', 'American Airlines Inc.']\n", "\n", "# Iterate through the top five airlines\n", "for airline in airlines:\n", "    # Subset to the airline\n", "    subset = flights[flights['name'] == airline]\n", "    \n", "    # Draw the density plot\n", "    sns.distplot(subset['arr_delay'], hist = False, kde = True,\n", "                 kde_kws = {'linewidth': 3},\n", "                 label = airline)\n", "    \n", "plt.legend(prop={'size': 16}, title = 'Airline')\n", "plt.title('Density Plot with Multiple Airlines'); \n", "plt.xlabel('Delay (min)')\n", "plt.ylabel('Density');"]}, {"block": 30, "type": "markdown", "linesLength": 1, "startIndex": 187, "lines": ["## Shaded Density Plot"]}, {"block": 31, "type": "code", "linesLength": 9, "startIndex": 188, "lines": ["for airline in ['United Air Lines Inc.', 'Alaska Airlines Inc.']:\n", "    subset = flights[flights['name'] == airline]\n", "    \n", "    sns.distplot(subset['arr_delay'], hist = False, kde = True,\n", "                 kde_kws = {'shade': True, 'linewidth': 3}, label = airline)\n", "    \n", "plt.legend(prop={'size': 16}, title = 'Airline')\n", "plt.title('Shaded Density Plot of Arrival Delays'); \n", "plt.xlabel('Delay (min)'); plt.ylabel('Density');"]}, {"block": 32, "type": "markdown", "linesLength": 1, "startIndex": 197, "lines": ["## Density with Rug Plot"]}, {"block": 33, "type": "code", "linesLength": 12, "startIndex": 198, "lines": ["# Subset to Alaska Airlines\n", "subset = flights[flights['name'] == 'Alaska Airlines Inc.']\n", "\n", "# Density Plot with Rug Plot\n", "sns.distplot(subset['arr_delay'], hist = False, kde = True, rug = True,\n", "             color = 'darkblue', \n", "             kde_kws={'linewidth': 3},\n", "             rug_kws={'color': 'black'})\n", "\n", "# Plot formatting\n", "plt.title('Density Plot with Rug Plot for Alaska Airlines');\n", "plt.xlabel('Delay (min)'); plt.ylabel('Density');"]}, {"block": 34, "type": "code", "linesLength": 0, "startIndex": 210, "lines": []}]