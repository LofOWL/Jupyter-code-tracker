[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Interacting with Slack from Python\n", "\n", "In this notebook, we will use `Slacker` to interact with Slack. This allows us to send messages and upload files, which can be useful when training models, or monitoring scripts (or just for fun of course)!"]}, {"block": 1, "type": "code", "linesLength": 1, "startIndex": 3, "lines": ["!pip install -q -U Slacker"]}, {"block": 2, "type": "code", "linesLength": 14, "startIndex": 4, "lines": ["import numpy as np\n", "import pandas as pd\n", "\n", "# Slacker \n", "from slacker import Slacker\n", "\n", "from sklearn.model_selection import train_test_split, StratifiedKFold\n", "import lightgbm as lgb\n", "\n", "# Plotting\n", "import matplotlib.pyplot as plt\n", "import seaborn as sns\n", "%matplotlib inline\n", "plt.style.use('fivethirtyeight')"]}, {"block": 3, "type": "markdown", "linesLength": 5, "startIndex": 18, "lines": ["# Get a Slack Legacy API Token\n", "\n", "https://api.slack.com/custom-integrations/legacy-tokens\n", "\n", "Store in a safe location (not on GitHub)!"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 23, "lines": ["Read in slack api token. Replace the line below with the location of your slack api token."]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["with open('C:/Users/willk/OneDrive/Desktop/slack_api_python.txt', 'r') as f:\n", "    slack_api_token = f.read()"]}, {"block": 6, "type": "markdown", "linesLength": 1, "startIndex": 26, "lines": ["Authenticate with slack and print out channels to make sure everything worked."]}, {"block": 7, "type": "code", "linesLength": 5, "startIndex": 27, "lines": ["slack = Slacker(slack_api_token)\n", "channels = slack.channels.list()\n", "\n", "for channel in channels.body['channels']:\n", "    print(f'Channel {channel[\"name\"]} Purpose: {channel[\"purpose\"][\"value\"]} ID: {channel[\"id\"]}\\n')"]}, {"block": 8, "type": "code", "linesLength": 0, "startIndex": 32, "lines": []}, {"block": 9, "type": "code", "linesLength": 3, "startIndex": 32, "lines": ["slack.channels.create('python_content2')\n", "new_id = slack.channels.get_channel_id('python_content2')\n", "r = slack.channels.history(new_id)"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 35, "lines": ["r.body"]}, {"block": 11, "type": "code", "linesLength": 1, "startIndex": 36, "lines": ["slack.channels.get_channel_id('random')"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["slack.chat.post_message('random', 'Using no id')"]}, {"block": 13, "type": "code", "linesLength": 1, "startIndex": 38, "lines": ["slack.chat.post_message(slack.channels.get_channel_id('random'), 'Using an id')"]}, {"block": 14, "type": "code", "linesLength": 8, "startIndex": 39, "lines": ["slack.channels.set_purpose('#testing_exp', 'Deep philosophical discussions around the water cooler.')\n", "slack.channels.create('python_content')\n", "slack.channels.set_purpose('python_content', 'Sharing great python related resources')\n", "\n", "channels = slack.channels.list()\n", "\n", "for channel in channels.body['channels']:\n", "    print(f'Channel {channel[\"name\"]} Purpose: {channel[\"purpose\"][\"value\"]}\\n')"]}, {"block": 15, "type": "code", "linesLength": 5, "startIndex": 47, "lines": ["from PIL import Image\n", "import requests\n", "url = user['profile']['image_192']\n", "im = Image.open(requests.get(url, stream=True).raw)\n", "plt.imshow(im)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 52, "lines": ["PIL.Image.from"]}, {"block": 17, "type": "code", "linesLength": 15, "startIndex": 53, "lines": ["from IPython.display import Image\n", "from PIL import Image\n", "import PIL\n", "users = slack.users.list()\n", "\n", "for user in users.body['members']:\n", "    # Print some information\n", "    print(f'\\nUser: {user[\"name\"]}, Real Name: {user[\"real_name\"]}, Time Zone: {user[\"tz_label\"]}.')\n", "    print(f'Current Status: {user[\"profile\"][\"status_text\"]}')\n", "    # Get image data and show\n", "    plt.figure(facecolor = 'w')\n", "    plt.imshow(Image.open(requests.get(user['profile']['image_192'], stream=True).raw))\n", "    plt.axis('off');\n", "    plt.grid('off');\n", "    plt.show();"]}, {"block": 18, "type": "code", "linesLength": 2, "startIndex": 68, "lines": ["plt.plot(np.random.randn(100), np.random.randn(100), 'ro')\n", "plt.savefig('first_plot.png')"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 70, "lines": ["slack.files.upload('first_plot.png', channels = ['testing_exp', 'slack_interaction']);"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 71, "lines": ["Image(user['profile']['image_192'])"]}, {"block": 21, "type": "code", "linesLength": 2, "startIndex": 72, "lines": ["\n", "Image('https://secure.gravatar.com/avatar/f85b7564fd35d5c86054b95090052d94.jpg?s=192&d=https%3A%2F%2Fa.slack-edge.com%2F7fa9%2Fimg%2Favatars%2Fava_0025-192.png')"]}, {"block": 22, "type": "code", "linesLength": 1, "startIndex": 74, "lines": ["users.body['members']"]}, {"block": 23, "type": "code", "linesLength": 1, "startIndex": 75, "lines": ["x = slack.channels.list()"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 76, "lines": ["x.body"]}, {"block": 25, "type": "code", "linesLength": 0, "startIndex": 77, "lines": []}]