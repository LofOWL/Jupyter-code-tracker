[{"block": 0, "type": "code", "linesLength": 23, "startIndex": 0, "lines": ["# Standard data science\n", "import pandas as pd\n", "import numpy as np\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "# Visualizations\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot\n", "\n", "# Cufflinks for dataframes\n", "import cufflinks as cf\n", "cf.go_offline()\n", "cf.set_config_file(world_readable=True, theme='white')"]}, {"block": 1, "type": "code", "linesLength": 2, "startIndex": 23, "lines": ["from scipy.special import factorial\n", "import pymc3 as pm"]}, {"block": 2, "type": "markdown", "linesLength": 1, "startIndex": 25, "lines": ["# Distribution"]}, {"block": 3, "type": "code", "linesLength": 6, "startIndex": 26, "lines": ["spins = 100\n", "rate = 1/38\n", "\n", "def calc_prob_number(rate, number, trials):\n", "    lam = rate * trials\n", "    return np.exp(-lam) * (np.power(lam, number)) / factorial(number)"]}, {"block": 4, "type": "markdown", "linesLength": 1, "startIndex": 32, "lines": ["Expected successes per 1000 spins"]}, {"block": 5, "type": "code", "linesLength": 2, "startIndex": 33, "lines": ["lam = rate*spins\n", "lam"]}, {"block": 6, "type": "code", "linesLength": 2, "startIndex": 35, "lines": ["ns = np.arange(100)\n", "p_n = calc_prob_number(rate, ns, spins)"]}, {"block": 7, "type": "code", "linesLength": 1, "startIndex": 37, "lines": ["p_n[ns >= 3].sum()"]}, {"block": 8, "type": "code", "linesLength": 4, "startIndex": 38, "lines": ["figure = go.Figure(data=[go.Scatter(x=ns, y=p_n, mode='markers+lines')], layout=go.Layout(xaxis=dict(title='Successes'),\n", "                                                                                         yaxis=dict(title='Density'),\n", "                                                                                         title='Probability Distribution of Number of Successes per 100 Spins'))\n", "iplot(figure)"]}, {"block": 9, "type": "markdown", "linesLength": 1, "startIndex": 42, "lines": ["Try using different rates."]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 43, "lines": ["ra"]}, {"block": 11, "type": "markdown", "linesLength": 1, "startIndex": 44, "lines": ["Alternative using numpy"]}, {"block": 12, "type": "code", "linesLength": 6, "startIndex": 45, "lines": ["n = np.random.poisson(lam, size=int(1e4))\n", "\n", "df = pd.DataFrame({'n': n})\n", "df['n'].iplot(kind='hist', xTitle='successes / 1000 spins', \n", "              yTitle='Count', \n", "              title='Histogram of Successes in 1000 spins for 10000 Trials')"]}, {"block": 13, "type": "markdown", "linesLength": 1, "startIndex": 51, "lines": ["# Waiting Time"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 52, "lines": ["ts = np.arange(200)\n", "p_t = np.exp(-rate * ts)"]}, {"block": 15, "type": "code", "linesLength": 4, "startIndex": 54, "lines": ["figure = go.Figure(data=[go.Scatter(x=ts, y=p_t / p_t.sum(), mode='markers+lines')], layout=go.Layout(xaxis=dict(title='Waiting Time (spins)'),\n", "                                                                                         yaxis=dict(title='Density'),\n", "                                                                                         title='Probability Distribution of Waiting Time'))\n", "iplot(figure)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 58, "lines": ["np.argmax(ts * p_t)"]}, {"block": 17, "type": "markdown", "linesLength": 1, "startIndex": 59, "lines": ["Probability of waiting more than 100 spins."]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 60, "lines": ["np.exp(-rate * 100)"]}, {"block": 19, "type": "code", "linesLength": 24, "startIndex": 61, "lines": ["from math import pow, exp, factorial\n", "\n", "class Exponential:\n", "\n", "    def __init__(self, rate):\n", "        self.rate = rate\n", "\n", "    def prob_less_than_or_equal(self, t):\n", "        rate = self.rate * t\n", "        return 1 - exp(-rate)\n", "\n", "    def prob_greater_than(self, t):\n", "        return 1 - self.prob_less_than_or_equal(t)\n", "\n", "    def prob_between(self, t1, t2):\n", "        p1 = self.prob_less_than_or_equal(t1)\n", "        p2 = self.prob_less_than_or_equal(t2)\n", "\n", "        return p2 - p1\n", "\n", "expo = Exponential(1/38)\n", "print(expo.prob_greater_than(100))\n", "print(expo.prob_less_than_or_equal(100))\n", "print(expo.prob_between(50, 150))"]}, {"block": 20, "type": "markdown", "linesLength": 1, "startIndex": 85, "lines": ["# Arrivals"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 86, "lines": ["rand.rand(2)"]}, {"block": 22, "type": "code", "linesLength": 5, "startIndex": 87, "lines": ["spins = 10000\n", "time_between = 36  \n", "\n", "rand = np.random.RandomState(42)\n", "success_times = spins * time_between * np.sort(rand.rand(spins))"]}, {"block": 23, "type": "code", "linesLength": 6, "startIndex": 92, "lines": ["waiting_times = np.diff(success_times)\n", "\n", "df = pd.DataFrame({'waiting_time': waiting_times})\n", "df['waiting_time'].iplot(kind='hist', xTitle='Waiting Time', \n", "              yTitle='Count', bins=(0, 400, 10),\n", "              title='Histogram of Waiting Times')"]}, {"block": 24, "type": "code", "linesLength": 1, "startIndex": 98, "lines": ["np.mean(waiting_times)"]}, {"block": 25, "type": "markdown", "linesLength": 1, "startIndex": 99, "lines": ["# Visualizing Successes"]}, {"block": 26, "type": "code", "linesLength": 4, "startIndex": 100, "lines": ["spins = np.random.choice([0, 1], size = 100, replace=True, p=[1-rate, rate])\n", "success_times = np.where(spins==1)[0]\n", "waiting_times = np.diff(np.where(spins == 1))\n", "waiting_times[:10]"]}, {"block": 27, "type": "code", "linesLength": 1, "startIndex": 104, "lines": ["annotations = [go.layout.Annotation(x=x, y=1, text=str(x), ax=0, ay=200) for x in success_times]"]}, {"block": 28, "type": "code", "linesLength": 3, "startIndex": 105, "lines": ["figure = go.Figure(data=[go.Scatter(x=success_times, y=np.ones(shape=len(success_times)), mode='markers')], \n", "                   layout=go.Layout(annotations=annotations, yaxis=dict(range=(0, 1))))\n", "iplot(figure)"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 108, "lines": ["annotations"]}, {"block": 30, "type": "code", "linesLength": 0, "startIndex": 109, "lines": []}, {"block": 31, "type": "code", "linesLength": 0, "startIndex": 109, "lines": []}]