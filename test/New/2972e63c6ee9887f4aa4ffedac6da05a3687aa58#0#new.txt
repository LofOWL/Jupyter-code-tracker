[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Understanding Logistic Regression Outputs\n", "\n", "The purpose of this notebook is to understand the outputs of logistic regression: logits, probabilities, odds, and classifications. Logistic regression is simple because it's a linear classification model, but that doesn't always mean something is simple to understand! "]}, {"block": 1, "type": "code", "linesLength": 1, "startIndex": 3, "lines": ["x = %load_ext autoreload"]}, {"block": 2, "type": "code", "linesLength": 2, "startIndex": 4, "lines": ["\n", "get_config()"]}, {"block": 3, "type": "code", "linesLength": 4, "startIndex": 6, "lines": ["from IPython import get_ipython\n", "ipython = get_ipython()\n", "ex = ipython.extension_manager\n", "ex.loaded"]}, {"block": 4, "type": "code", "linesLength": 25, "startIndex": 10, "lines": ["import pandas as pd\n", "import numpy as np\n", "\n", "%load_ext autoreload\n", "%autoreload 2\n", "\n", "import sys\n", "sys.path.append('../..')\n", "\n", "# Options for pandas\n", "pd.options.display.max_columns = 20\n", "pd.options.display.max_rows = 10\n", "\n", "# Display all cell outputs\n", "from IPython.core.interactiveshell import InteractiveShell\n", "InteractiveShell.ast_node_interactivity = 'all'\n", "\n", "import plotly.plotly as py\n", "import plotly.graph_objs as go\n", "from plotly.offline import iplot, init_notebook_mode\n", "init_notebook_mode(connected=True)\n", "\n", "import cufflinks as cf\n", "cf.go_offline(connected=True)\n", "cf.set_config_file(theme='pearl')\n"]}, {"block": 5, "type": "code", "linesLength": 15, "startIndex": 35, "lines": ["def logits_to_probs(logits):\n", "    return 1 / (1 + np.exp(-logits))\n", "\n", "def logits_to_odds(logits):\n", "    return np.exp(logits)\n", "\n", "def probs_to_odds(probs):\n", "    return probs / (1 - probs)\n", "\n", "def odds_to_probs(odds):\n", "    return odds / (1 + odds)\n", "\n", "logits_to_probs(1)\n", "logits_to_probs(2) \n", "logits_to_probs(4)"]}, {"block": 6, "type": "code", "linesLength": 10, "startIndex": 50, "lines": ["df = pd.DataFrame({'logits': np.arange(-10, 10, 0.01)})\n", "df['odds'] = logits_to_odds(df['logits'])\n", "\n", "df['probs'] = odds_to_probs(df['odds'])\n", "df['class'] = df['probs'].round()\n", "\n", "df.iplot(kind='scatter', x='logits', y='probs', secondary_y='odds', \n", "         xTitle='Log Odds', yTitle='Probability', secondary_y_title='Odds',\n", "        title='Probability and Odds vs Log Odds', \n", "         hline=[dict(y=0.5, dash='dash', width=1, color='black')])"]}, {"block": 7, "type": "code", "linesLength": 2, "startIndex": 60, "lines": ["df.iplot(x='logits', y='class', xTitle='Log Odds', yTitle='Class',\n", "        title='Class vs Log Odds')"]}, {"block": 8, "type": "code", "linesLength": 11, "startIndex": 62, "lines": ["coef0 = -0.5 \n", "coef1 = 0.2\n", "\n", "xrange = np.arange(-2, 5, 0.01)\n", "logits = coef0 + coef1 * xrange\n", "odds = logits_to_odds(logits)\n", "probs = logits_to_probs(logits)\n", "classes = np.round(probs)\n", "\n", "df = pd.DataFrame(dict(logits=logits, odds=odds, probs=probs, classes=classes)).set_index(xrange)\n", "df.iplot()"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 73, "lines": ["logits_to_odds(2)\n", "logits_to_odds(3)"]}, {"block": 10, "type": "code", "linesLength": 2, "startIndex": 75, "lines": ["logits_to_odds(3)\n", "logits_to_odds(4)"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 77, "lines": ["logits_to_odds(4) / logits_to_odds(3)\n", "logits_to_odds(3) / logits_to_odds(2)"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 79, "lines": ["100 * np.exp(2)"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 80, "lines": ["(logits_to_odds(4) - logits_to_odds(3)) / logits_to_odds(3)\n", "(logits_to_odds(3) - logits_to_odds(2)) / logits_to_odds(2)"]}, {"block": 14, "type": "code", "linesLength": 16, "startIndex": 82, "lines": ["def gauge_effect(c, x0, intercept=0):\n", "    initial_log_odds = c * x0 + intercept\n", "    initial_odds = np.exp(initial_log_odds)\n", "    initial_probability = 1 / (1 + np.exp(-initial_log_odds))\n", "    \n", "    updated_log_odds = c * (x0 + 1) + intercept\n", "    updated_odds = np.exp(updated_log_odds)\n", "    updated_probability = 1 / (1 + np.exp(-updated_log_odds))\n", "    \n", "    change_in_odds_ratio = 100 * (updated_odds - initial_odds) / initial_odds\n", "    change_in_probability = 100 * (updated_probability - initial_probability) / initial_probability\n", "    \n", "    \n", "#    print(updated_odds, initial_odds)\n", "    print(f'Change in odds ratio: {change_in_odds_ratio:0.2f}%.')\n", "    print(f'Change in probability: {change_in_probability:0.2f}%.')"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 98, "lines": ["gauge_effect(1.5, 1)\n", "gauge_effect(1.5, 3)"]}, {"block": 16, "type": "code", "linesLength": 1, "startIndex": 100, "lines": ["np.exp(1.5)"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 101, "lines": ["probs_to_odds(logits_to_probs(0.5))"]}, {"block": 18, "type": "code", "linesLength": 1, "startIndex": 102, "lines": ["logits_to_odds(0.5)"]}, {"block": 19, "type": "code", "linesLength": 1, "startIndex": 103, "lines": ["odds_to_probs(10) - odds_to_probs(10.15)"]}, {"block": 20, "type": "code", "linesLength": 1, "startIndex": 104, "lines": ["odds_to_probs(1.15) - odds_to_probs(1.3)"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 105, "lines": ["probs_to_odds(0.1)"]}, {"block": 22, "type": "code", "linesLength": 0, "startIndex": 106, "lines": []}, {"block": 23, "type": "code", "linesLength": 3, "startIndex": 106, "lines": ["probs_to_odds(logits_to_probs(1))\n", "logits_to_probs(2) \n", "logits_to_probs(4)"]}, {"block": 24, "type": "code", "linesLength": 2, "startIndex": 109, "lines": ["logits_to_probs(9)\n", "logits_to_probs(10) "]}, {"block": 25, "type": "code", "linesLength": 1, "startIndex": 111, "lines": ["np.exp(1.5)"]}, {"block": 26, "type": "code", "linesLength": 0, "startIndex": 112, "lines": []}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 112, "lines": ["np.exp(1) / np.exp(0)\n", "np.exp(3) / np.exp(2)"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 114, "lines": ["np.exp(1.5)"]}, {"block": 29, "type": "code", "linesLength": 0, "startIndex": 115, "lines": []}]