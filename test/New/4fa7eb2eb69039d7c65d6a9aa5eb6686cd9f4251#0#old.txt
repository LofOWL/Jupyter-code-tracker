[{"block": 0, "type": "markdown", "linesLength": 3, "startIndex": 0, "lines": ["# Introduction: Plotting Bus Stops as Connected Graphs\n", "\n", "Using real-world data for learning graphs. The most effective way to learn is to apply a topic to actual data!"]}, {"block": 1, "type": "code", "linesLength": 3, "startIndex": 3, "lines": ["# import geopandas as gpd\n", "import pandas as pd\n", "import numpy as np"]}, {"block": 2, "type": "code", "linesLength": 1, "startIndex": 6, "lines": ["import os; os.listdir('.')"]}, {"block": 3, "type": "code", "linesLength": 3, "startIndex": 7, "lines": ["\n", "bus_stops = pd.read_csv('Bus_Stop_Shelter.csv')\n", "bus_stops.info()"]}, {"block": 4, "type": "code", "linesLength": 1, "startIndex": 10, "lines": ["bus_stops.head()"]}, {"block": 5, "type": "code", "linesLength": 1, "startIndex": 11, "lines": ["import plotly_express as px"]}, {"block": 6, "type": "code", "linesLength": 1, "startIndex": 12, "lines": ["px.scatter(bus_stops, 'LONGITUDE', 'LATITUDE')"]}, {"block": 7, "type": "code", "linesLength": 3, "startIndex": 13, "lines": ["import geopandas as gpd\n", "\n", "gdf = gpd.read_file('Bus Stop Shelters/geo_export_513a402e-f182-4e3d-8b3c-554c8832cd37.shp')"]}, {"block": 8, "type": "code", "linesLength": 2, "startIndex": 16, "lines": ["%matplotlib inline\n", "gdf.plot()"]}, {"block": 9, "type": "code", "linesLength": 2, "startIndex": 18, "lines": ["bus_routes = gpd.read_file('routes_bk_bus_may2016.shp')\n", "bus_routes.head()"]}, {"block": 10, "type": "code", "linesLength": 1, "startIndex": 20, "lines": ["bus_routes.plot()"]}, {"block": 11, "type": "code", "linesLength": 2, "startIndex": 21, "lines": ["import pandas as pd\n", "import numpy as np"]}, {"block": 12, "type": "code", "linesLength": 1, "startIndex": 23, "lines": ["import os; os.listdir('gtfs')"]}, {"block": 13, "type": "code", "linesLength": 2, "startIndex": 24, "lines": ["agency = pd.read_csv('gtfs/agency.txt')\n", "agency"]}, {"block": 14, "type": "code", "linesLength": 2, "startIndex": 26, "lines": ["routes = pd.read_csv('gtfs/routes.txt')\n", "routes.tail()"]}, {"block": 15, "type": "code", "linesLength": 2, "startIndex": 28, "lines": ["stops = pd.read_csv('gtfs/stops.txt')\n", "stops.tail()"]}, {"block": 16, "type": "code", "linesLength": 4, "startIndex": 30, "lines": ["from shapely import geometry\n", "\n", "stop_points = [geometry.Point(lon, lat) for lon, lat in zip(stops['stop_lon'], stops['stop_lat'])]\n", "stop_points[:10]"]}, {"block": 17, "type": "code", "linesLength": 1, "startIndex": 34, "lines": ["%matplotlib inline"]}, {"block": 18, "type": "code", "linesLength": 4, "startIndex": 35, "lines": ["stops['geometry'] = stop_points\n", "import geopandas as gpd\n", "\n", "gpd.GeoDataFrame(stops).plot(figsize=(12, 10))"]}, {"block": 19, "type": "code", "linesLength": 8, "startIndex": 39, "lines": ["import contextily as ctx\n", "\n", "def add_basemap(ax, zoom, url='http://tile.stamen.com/terrain/tileZ/tileX/tileY.png'):\n", "    xmin, xmax, ymin, ymax = ax.axis()\n", "    basemap, extent = ctx.bounds2img(xmin, ymin, xmax, ymax, zoom=zoom, url=url)\n", "    ax.imshow(basemap, extent=extent, interpolation='bilinear')\n", "    # restore original x/y limits\n", "    ax.axis((xmin, xmax, ymin, ymax))"]}, {"block": 20, "type": "code", "linesLength": 3, "startIndex": 47, "lines": ["p = stop_points[0]\n", "p.x\n", "stops.head()"]}, {"block": 21, "type": "code", "linesLength": 1, "startIndex": 50, "lines": ["routes.head()"]}, {"block": 22, "type": "code", "linesLength": 2, "startIndex": 51, "lines": ["trips = pd.read_csv('gtfs/trips.txt')\n", "trips.tail()"]}, {"block": 23, "type": "code", "linesLength": 2, "startIndex": 53, "lines": ["tt = pd.read_csv('gtfs/stop_times.txt', nrows=1000)\n", "tt.head()"]}, {"block": 24, "type": "code", "linesLength": 3, "startIndex": 55, "lines": ["paths = tt.merge(stops, on='stop_id').sort_values(['trip_id', 'stop_sequence'])\n", "paths = paths.merge(trips, on='trip_id')\n", "paths.head()"]}, {"block": 25, "type": "code", "linesLength": 2, "startIndex": 58, "lines": ["single = paths[paths['trip_id'] == '23617854-BPPB9-BP_B9-Weekday-10']\n", "single"]}, {"block": 26, "type": "code", "linesLength": 3, "startIndex": 60, "lines": ["single['stop_previous'] = single['stop_id'].shift(1)\n", "single['stop_next'] = single['stop_id'].shift(-1)\n", "single.head()"]}, {"block": 27, "type": "code", "linesLength": 2, "startIndex": 63, "lines": ["edges = [(previous, current) for previous, current in zip(single['stop_previous'], single['stop_id'])]\n", "edges"]}, {"block": 28, "type": "code", "linesLength": 1, "startIndex": 65, "lines": ["trips.head()"]}, {"block": 29, "type": "code", "linesLength": 1, "startIndex": 66, "lines": ["tt.trip_id.unique()"]}, {"block": 30, "type": "code", "linesLength": 1, "startIndex": 67, "lines": ["paths.groupby('stop_id')['trip_id'].nunique()"]}, {"block": 31, "type": "code", "linesLength": 0, "startIndex": 68, "lines": []}]